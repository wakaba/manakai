Module:
  @QName: MDOM|DOMString
  @enFN:
    <IF::DOMString>
  @enDesc:
      This module includes:

        - <IF::DOMString> data type.

        - <IF::DOMStringList> interface from DOM Core module.

    {TODO::
      And maybe it will also include:

        - A broken implementation for <IF::StringExtended> interface.

        - <IF::DOMTokenString> from WA1

        - String.anchor and so on from JavaScript
    }

  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/DOMString/

  @DISCore:author: DISCore|Wakaba
  @License: license|Perl+MPL
  @Date:
    $Date: 2006/12/02 12:46:21 $

  @Require:
    @@Module:
      @@@QName: MDOM|DOMCore
      @@@WithFor: ManakaiDOM|ManakaiDOMLatest
    @@Module:
      @@@WithFor: ManakaiDOM|ManakaiDOM
    @@Module:
      @@@WithFor: ManakaiDOM|ManakaiDOM1
    @@Module:
      @@@WithFor: ManakaiDOM|ManakaiDOM2
    @@Module:
      @@@WithFor: ManakaiDOM|ManakaiDOM3
    @@Module:
      @@@WithFor: ManakaiDOM|ManakaiDOMLatest
  @DefaultFor: ManakaiDOM|ManakaiDOMLatest

Namespace:
  @c:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
  @cfg:
    http://suika.fam.cx/www/2006/dom-config/
  @DISlib:
    http://suika.fam.cx/~wakaba/archive/2004/dis/
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @dlp:
    http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#
  @d:
    http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#
  @DOMMain:
    http://suika.fam.cx/~wakaba/archive/2004/dom/main#
  @domperl:
    http://suika.fam.cx/~wakaba/archive/2006/dom/perl/
  @dx:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#
  @dxm:
    http://suika.fam.cx/~wakaba/archive/2004/dis/XML#
  @ecore:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/
  @f:
    http://suika.fam.cx/~wakaba/archive/2004/dom/feature#
  @fe:
    http://suika.fam.cx/www/2006/feature/
  @html:
    http://www.w3.org/1999/xhtml
  @idl:
    http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#
  @j:
    http://suika.fam.cx/~wakaba/archive/2004/dis/Java#
  @jlang:
    java:java.lang.
  @js:
    http://suika.fam.cx/~wakaba/archive/2004/dis/ECMAScript#
  @kwd:
    http://suika.fam.cx/~wakaba/archive/2005/rfc2119/
  @lang:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @Markup:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Markup#
  @MDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.
  @MDOMX:
    http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @mg:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Grove/
  @mv: 
    http://suika.fam.cx/www/2006/05/mv/
  @p:
    http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#
  @rel:
    http://www.iana.org/assignments/relation/
  @s:
    http://suika.fam.cx/~wakaba/archive/2004/dis/Markup#
  @str:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/DOMString/
  @tc:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/
  @td:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/Document/
  @te:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/Element/
  @test:
    http://suika.fam.cx/~wakaba/archive/2004/dis/Test#
  @thr:
    http://purl.org/syndication/thread/1.0
  @tx:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/XML/
  @urigen:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/URI/Generic/
  @xml:
    http://www.w3.org/XML/1998/namespace

ElementTypeBinding:
  @Name: CODE
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: dlp|BlockCode
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: DISLang|Method
    @@ForCheck: !=ManakaiDOM|ManakaiDOM

ElementTypeBinding:
  @Name: IntMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: DISLang|Method
    @@ForCheck: !=ManakaiDOM|ManakaiDOM
    @@ManakaiDOM:isForInternal: 1

ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: DISLang|MethodParameter

ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: DISLang|MethodReturn

ElementTypeBinding:
  @Name: Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: DISLang|Attribute
    @@ForCheck: !=ManakaiDOM|ManakaiDOM

ElementTypeBinding:
  @Name: Get
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: DISLang|AttributeGet

ElementTypeBinding:
  @Name: Set
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: DISLang|AttributeSet

ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: ManakaiDOM|InCase

ElementTypeBinding:
  @Name: nullCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: ManakaiDOM|InCase
    @@Value:
      @@@is-null:1

ElementTypeBinding:
  @Name: PerlDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType: lang|Perl
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: enImplNote
  @ElementType:
    dis:ImplNote
  @ShadowContent:
    @@lang:en

ElementTypeBinding:
  @Name: enLabel
  @ElementType:
    dis:Label
  @ShadowContent:
    @@lang:en

ElementTypeBinding:
  @Name: enFN
  @ElementType:
    dis:FullName
  @ShadowContent:
    @@lang:en

ElementTypeBinding:
  @Name: IFClsDef
  @ElementType: 
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType:
      @@@@: dis|MultipleResource
      @@@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass !s|ForML
    @@resourceFor: ManakaiDOM|ForIF
    @@resourceFor: ManakaiDOM|ForClass
    @@For: ManakaiDOM|ManakaiDOM

    @@DISCore:resourceType:
      @@@@: DISLang|Interface
      @@@ForCheck: ManakaiDOM|ForIF

    @@DISCore:resourceType:
      @@@@: DISLang|Class
      @@@ForCheck: ManakaiDOM|ForClass
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOM||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOMLatest||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOMLatest

ElementTypeBinding:
  @Name: IFDef
  @ElementType: 
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType:
      @@@@: dis|MultipleResource
      @@@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass !s|ForML
    @@resourceFor: ManakaiDOM|ForIF
    @@For: ManakaiDOM|ManakaiDOM

    @@DISCore:resourceType:
      @@@@: DISLang|Interface
      @@@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: IFQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: IFISA
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsISA
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: disDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:dis
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: Code
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: dlp|InlineCode
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: Test
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: test|StandaloneTest
    @@ForCheck: ManakaiDOM|ForClass

ResourceDef:
  @QName: boolean
  @AliasFor: idl|boolean||ManakaiDOM|all

ElementTypeBinding:
  @Name: enDesc
  @ElementType:
    dis:Description
  @ShadowContent:
    @@lang:en

ElementTypeBinding:
  @Name: enLN
  @ElementType:
    mv:longName
  @ShadowContent:
    @@lang:en

ElementTypeBinding:
  @Name: TrueCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType:
      ManakaiDOM:InCase
    @@Value:
      @@@@: 1
      @@@ContentType: DISCore|Boolean
    @@Type: idl|boolean||ManakaiDOM|all

ElementTypeBinding:
  @Name: FalseCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType:
      ManakaiDOM:InCase
    @@Value:
      @@@@: 0
      @@@ContentType: DISCore|Boolean
    @@Type: idl|boolean||ManakaiDOM|all

IFDef:
  @IFQName: DOMString
  @enLabel:
    <IF::DOMString>

  @idl:sequenceOf: idl|unsignedShort
  @idl:java: jlang|String
  @idl:ecmascript: js|StringType
  @idl:perl: p|CharacterString

  @DISCore:resourceType: DISLang|DataType
  @subsetOf: DISLang|String||ManakaiDOM|all

  @enDesc:
    A string.  It is used to store Unicode characters.

  @ResourceDef:
    @@QName: DOMMain|DOMString
    @@AliasFor: DOMString
    @@ForCheck: ManakaiDOM|ForIF
##DOMString

IFClsDef:
  @IFQName: DOMStringList
  @ClsQName: ManakaiDOMStringList

  @AppISA:
    Tie::Array

  @ResourceDef:
    @@QName: c|DOMStringList
    @@AliasFor: DOMStringList
    @@ForCheck: ManakaiDOM|ForIF

  @enDesc:
    Objects implementing the <IF::DOMStringList> interface are
    used to represent ordered collection of <TYPE::DOMString>
    values.

    {NOTE:: How this collection is implemented is neither defined nor
            constrained.
    }

    The items in the <IF::DOMStringList> are accessible via an
    ordinal index, starting from <CODE::0>.

    {NOTE:: Introduced in DOM Level 3.
    }

  @enDesc:
    @@For: ManakaiDOM|ManakaiDOM
    @@ddid:perl
    @@@:
      In the manakai implementation, a <IF::DOMStringList> object
      can be dereferenced as if it is a reference to the array
      containing all items in the list.

  @enDesc:
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM
    @@ddid:exists
    @@@:
      In the current implementation, each item value can be
      <DOM::null> that is different from an empty string.  In
      addition, an item can be <EM::not exist> state.

      The <EM::not exist> state is different from <DOM::null>.
      In various operations defined in DOM, however, it is
      assumed that there is as if a <DOM::null> value for
      each <EM::not exist> slot, if an item slot whose index
      greater than it <EM::exists>.

  @CODE:
    @@QName: c|createNodeDOMStringList
    @@enDesc:
      <Perl::$node>, <Perl::$r>, <Perl::$key>.
    @@PerlDef:
      require Message::DOM::DOMString;
      $r = bless \[$node, $key], <ClassName::ManakaiDOMStringList>;

  @CODE:
    @@QName: createDOMStringList
    @@enDesc:
      <Perl::$r>, <Perl::$list>
    @@PerlDef:
      require Message::DOM::DOMString;
      $r = bless (($list), <ClassName::ManakaiDOMStringList>);

  @CODE:
    @@QName: newDOMStringListForTest
    @@PerlDef:
      my $__impl;
      __CODE{tc|createImplForTest:: $impl => $__impl}__;
      my $__doc = $__impl->create_document;
      my $__docx = $__doc;
      my $__at = $__docx-><M::d|DocumentXDoctype.createAttributeDefinition>
                            ('at1');
      __CODE{mg|setNodeStemPropValue||ManakaiDOM|all::
        $given => {[]},
        $prop => {$key},
        $ref => $__at,
      }__;
      __CODE{c|createNodeDOMStringList::
        $node => $__at, $r => $list,
        $key => $key,
      }__;

  @Method:
     @@Name:  item
    @@Operator:
      @@@@: FETCH
      @@@ContentType: DISPerl|Perl
     @@Description:
       @@@lang:en
       @@@@: 
         Returns a <TYPE::DOMMain:DOMString> object in this collection.
     @@Param:
        @@@Name:  index
        @@@Type:  
          DOMMain:unsigned-long||ManakaiDOM|all
        @@@Description:
          @@@@lang:en
          @@@@@: 
            The index of the object to retrieve in this collection.
     @@Return:
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:
            The <TYPE::DOMMain:DOMString> object at the <P::index>th 
            position in this collection.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Either the specified <P::index> is negative or greater 
              than or equal to the number of <TYPE::DOMMain:DOMString> 
              objects in this collection.
      @@@PerlDef:
        my $v;
        __CODE{mg|getNodeStemPropValue||ManakaiDOM|all::
          $r => $v,
          $prop => {$$self->[1]},
          $ref => {$$self->[0]},
        }__;
        if (not defined $index or
            $index < 0 or
            $index > $#$v) {
          $r = null;
        } else {
          $r = $v->[$index];
        }

  @IntMethod:
    @@Operator:
      @@@@: STORE
      @@@ContentType: DISPerl|Perl
    @@Param:
      @@@Name: index
      @@@Type: idl|unsignedLong||ManakaiDOM|all
    @@Param:
      @@@Name: value
      @@@Type: DOMString
    @@Return:
      @@@Type: DOMString
      @@@enDesc:
        The old value.
      @@@nullCase:
        @@@@enDesc:
          No old value or <DOM::null> is the old value.
      @@@dx:raises:
        @@@@@: MDOMX|NOMOD_THIS
        @@@@enDesc:
          If the list is read-only.
      @@@PerlDef:
        __DEEP{  ## NOTE: Bare method name
          $$self->[0]->_check_read_only;
        }__;
        my $v;
        __CODE{mg|getNodeStemPropValue||ManakaiDOM|all::
          $r => $v,
          $prop => {$$self->[1]},
          $ref => {$$self->[0]},
        }__;
        $r = $v->[$index] if defined wantarray;
        $v->[$index] = $value;

  @IntMethod:
    @@Operator:
      @@@@: DELETE
      @@@ContentType: DISPerl|Perl
    @@Param:
      @@@Name: index
      @@@Type: idl|unsignedLong||ManakaiDOM|all
    @@Return:
      @@@Type: DOMString
      @@@enDesc:
        The old value.
      @@@nullCase:
        @@@@enDesc:
          No old value or <DOM::null> is the old value.
      @@@dx:raises:
        @@@@@: MDOMX|NOMOD_THIS
        @@@@enDesc:
          If the list is read-only.
      @@@PerlDef:
        __DEEP{  ## NOTE: Bare method name
          $$self->[0]->_check_read_only;
        }__;
        my $v;
        __CODE{mg|getNodeStemPropValue||ManakaiDOM|all::
          $r => $v,
          $prop => {$$self->[1]},
          $ref => {$$self->[0]},
        }__;
        $r = $v->[$index] if defined wantarray;
        CORE::delete $v->[$index];

  @IntMethod:
    @@Operator:
      @@@@: EXISTS
      @@@ContentType: DISPerl|Perl
    @@Param:
      @@@Name: index
      @@@Type: idl|unsignedLong||ManakaiDOM|all
    @@Return:
      @@@Type: idl|boolean||ManakaiDOM|all
      @@@PerlDef:
        my $v;
        __CODE{mg|getNodeStemPropValue||ManakaiDOM|all::
          $r => $v,
          $prop => {$$self->[1]},
          $ref => {$$self->[0]},
        }__;
        $r = CORE::exists $v->[$index];
          
  @Attr:
     @@Name:  length
    @@Operator:
      @@@@: FETCHSIZE
      @@@ContentType: DISPerl|Perl
     @@Description:
       @@@lang:en
       @@@@: 
         The number of <TYPE::DOMMain:DOMString> object in this collection.
     @@Get:
        @@@Type:  
          DOMMain:unsigned-long||ManakaiDOM|all
        @@@Description:
          @@@@lang:en
          @@@@@: 
            The number of strings in this collection.
      @@@PerlDef:
        my $v;
        __CODE{mg|getNodeStemPropValue||ManakaiDOM|all::
          $r => $v,
          $prop => {$$self->[1]},
          $ref => {$$self->[0]},
        }__;
        $r = @$v;

  @Method:
     @@Name:  contains
     @@Description:
       @@@lang:en
       @@@@: 
         Tests whether a string is an item of this collection or not.
     @@Param:
        @@@Name:  str
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: 
            A string to look for.
     @@Return:
        @@@Type:  
          DOMMain:boolean::ManakaiDOM:all
        @@@Description:
          @@@@lang:en
          @@@@@: 
            Whether the <P::str> is part of this collection or not.
        @@@TrueCase:
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              The <P::str> has been found in this collection.
        @@@FalseCase:
          @@@@Description:
            @@@@@lang:en
            @@@@@@:  
              The <P::str> has not been found in this collection.
      @@@PerlDef:
        my $v;
        __CODE{mg|getNodeStemPropValue||ManakaiDOM|all::
          $r => $v,
          $prop => {$$self->[1]},
          $ref => {$$self->[0]},
        }__;
        CHK: {
          __DEEP{
            for (@$v) {
              if ($str eq $_) {
                $r = true;
                last CHK;
              }
            }
          }__;
        } # CHK

  @IntMethod:
    @@Operator:
      @@@@: TIEARRAY
      @@@ContentType: DISPerl|Perl
    @@Param:
      @@@Name: list
      @@@Type: DOMStringList
    @@Return:
      @@@Type: DOMStringList
      @@@PerlDef: $r = $list

  @IntMethod:
    @@Operator:
      @@@@: @{}
      @@@ContentType: DISPerl|Perl
    @@Return:
      @@@Type: DISPerl|ARRAY||ManakaiDOM|all
      @@@PerlDef:
        tie my @list, ref $self, $self;
        $r = \@list;

  @Test:
    @@QName: ManakaiDOMStringList.methods.test
    @@PerlDef:
      my $list;
      __CODE{newDOMStringListForTest::
        $key => 'a',
      }__;

      ## length (0)
      $test->assert_equals (0 + @$list, 0);
      $test->assert_equals ($list-><AG::DOMStringList.length>, 0);

      ## PUSH
      push @$list, 'String1';

      ## length (1)
      $test->assert_equals (0 + @$list, 1);
      $test->assert_equals ($list-><AG::DOMStringList.length>, 1);

      ## FETCH
      $test->assert_string (actual_value => $list->[0],
                            expected_value => 'String1');

      ## item
      $test->assert_string (actual_value => $list-><M::DOMStringList.item> (0),
                            expected_value => 'String1');

      ## PUSH
      push @$list, 'String2';

      ## length (2)
      $test->assert_equals (0 + @$list, 2);
      $test->assert_equals ($list-><AG::DOMStringList.length>, 2);

      ## FETCH
      $test->assert_string (actual_value => $list->[1],
                            expected_value => 'String2');
      $test->assert_string (actual_value => $list->[0],
                            expected_value => 'String1');
    
      ## EXISTS
      $test->assert_true (exists $list->[0]);
      $test->assert_true (exists $list->[1]);
      $test->assert_false (exists $list->[2]);
      $test->assert_false (exists $list->[3]);

      ## DELETE
      delete $list->[0];
    
      ## FETCHSIZE
      $test->assert_equals (0 + @$list, 2);

      ## EXISTS
      $test->assert_false (exists $list->[0]);
      $test->assert_true (exists $list->[1]);

      ## FETCH
      $test->assert_string (actual_value => $list->[1],
                            expected_value => 'String2');
  
      ## STORE
      $list->[0] = 'String3';

      ## FETCH
      $test->assert_string (actual_value => $list->[0],
                            expected_value => 'String3');
 
      ## STORE
      $list->[1] = 'String4';
      $test->assert_string (actual_value => $list->[1],
                            expected_value => 'String4');
      $list->[2] = 'String5';
      $test->assert_string (actual_value => $list->[2],
                            expected_value => 'String5');
      $test->assert_equals (0 + @$list, 3);

      ## contains
      $test->assert_true ($list-><M::DOMStringList.contains> ('String4'));
      $test->assert_true ($list-><M::DOMStringList.contains> ('String5'));
      $test->assert_true ($list-><M::DOMStringList.contains> ('String3'));

      ## DELETE
      delete $list->[2];
      $test->assert_false (exists $list->[2]);
      $test->assert_equals (0 + @$list, 2);

      ## Don't invoke |DESTROY| method
      bless $list, 'dummy';

  @IntMethod:
    @@Operator:
      @@@@: ==
      @@@ContentType: DISPerl|Perl
    @@enImplNote:
      Order insignificant equality for <A::tc|ATDef.allowedTokens>.

      See <M::tc|Node.isEqualNode>.

      {ISSUE::
        Is order significant equality necessary for other applications?
      }

      {ISSUE::
        Should a Perl array reference be allowed as <P::arg>?
      }
    @@Param:
      @@@Name: arg
      @@@Type: DOMStringList
    @@Return:
      @@@Type: boolean
      @@@PerlDef:
        EQ: {
          last EQ
              unless UNIVERSAL::isa
                         ($arg, <IFName::DOMStringList||ManakaiDOM|ManakaiDOM>);
          my @v1 = @$self;
          my @v2 = @$arg;
          last EQ unless @v1 == @v2;
          no warnings 'uninitialized';
          (@v1) = sort {$a cmp $b} @v1;
          (@v2) = sort {$a cmp $b} @v2;
          for my $i (0..$#v1) {
            if (defined $v1[$i] and defined $v2[$i]) {
              last EQ unless $v1[$i] eq $v2[$i];
            } elsif (defined $v1[$i] or defined $v2[$i]) {
              last EQ;
            }
          }
          $r = true;
        } # EQ

    @@Test:
      @@@QName: DOMStringList.==.test
      @@@PerlDef:
        my $list1;
        __CODE{newDOMStringListForTest::
          $key => 'a',
          $list => $list1,
        }__;
        my $list2;
        __CODE{newDOMStringListForTest::
          $key => 'a',
          $list => $list2,
        }__;

        $test->id ('empty');
        $test->assert_num_equals
                 (expected_value => $list1, actual_value => $list2);

        $test->id ('empty.string');
        push @$list1, '';
        push @$list2, '';
        $test->assert_num_equals
                 (expected_value => $list1, actual_value => $list2);

        $test->id ('two.strings');
        push @$list1, 'str';
        push @$list2, 'str';
        $test->assert_num_equals
                 (expected_value => $list1, actual_value => $list2);

        $test->id ('two.three.strings.diff');
        push @$list1, 'a';
        $test->assert_num_not_equals
                 (expected_value => $list1, actual_value => $list2);

        $test->id ('three.strings.diff');
        push @$list2, 'b';
        $test->assert_num_not_equals
                 (expected_value => $list1, actual_value => $list2);

        $test->id ('four.strings.equal');
        push @$list1, 'b';
        push @$list2, 'a';
        $test->assert_num_equals
                 (expected_value => $list1, actual_value => $list2);
##DOMStringList
