#!/usr/bin/perl 
## This file is automatically generated
## 	at 2005-09-22T12:43:15+00:00,
## 	from file "lib/Message/DOM/DOMMain.dis",
## 	module <http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.DOMMain>,
## 	for <http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOMLatest>.
## Don't edit by hand!
use strict;
require Message::Util::Error::DOMException;
require Message::DOM::DOMCore;
require Message::Util::Error;
require Message::DOM::DOMFeature;
package Message::DOM::DOMMain;
our $VERSION = 20050922.1243;
sub BAD_BASE_URI ();
sub MDOM_NS_EMPTY_URI ();
sub ATTR_SET_NO_EFFECT ();
sub MDOMX_EMPTY_NS_PREFIX ();
sub MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR ();
sub RELATIVE_URI ();
sub MDOM_NEWCHILD_IS_REFCHILD ();
sub MDOM_REPLACE_BY_ITSELF_NO_EFFECT ();
sub AUTOLOAD {

#line 1 "lib/Message/DOM/DOMMain.dis [u] (Chunk #1)"

        my $al = our $AUTOLOAD;
        $al =~ s/.+:://;
        if ({'BAD_BASE_URI', 'Message::DOM::DOMMain::BAD_BASE_URI', 'MDOM_NS_EMPTY_URI', 'Message::DOM::DOMMain::MDOM_NS_EMPTY_URI', 'ATTR_SET_NO_EFFECT', 'Message::DOM::DOMMain::ATTR_SET_NO_EFFECT', 'MDOMX_EMPTY_NS_PREFIX', 'Message::DOM::DOMMain::MDOMX_EMPTY_NS_PREFIX', 'MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR', 'Message::DOM::DOMMain::MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR', 'RELATIVE_URI', 'Message::DOM::DOMMain::RELATIVE_URI', 'MDOM_NEWCHILD_IS_REFCHILD', 'Message::DOM::DOMMain::MDOM_NEWCHILD_IS_REFCHILD', 'MDOM_REPLACE_BY_ITSELF_NO_EFFECT', 'Message::DOM::DOMMain::MDOM_REPLACE_BY_ITSELF_NO_EFFECT'}->{$al}) {
          no strict 'refs';
          *{$AUTOLOAD} = \&{{'BAD_BASE_URI', 'Message::DOM::DOMMain::BAD_BASE_URI', 'MDOM_NS_EMPTY_URI', 'Message::DOM::DOMMain::MDOM_NS_EMPTY_URI', 'ATTR_SET_NO_EFFECT', 'Message::DOM::DOMMain::ATTR_SET_NO_EFFECT', 'MDOMX_EMPTY_NS_PREFIX', 'Message::DOM::DOMMain::MDOMX_EMPTY_NS_PREFIX', 'MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR', 'Message::DOM::DOMMain::MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR', 'RELATIVE_URI', 'Message::DOM::DOMMain::RELATIVE_URI', 'MDOM_NEWCHILD_IS_REFCHILD', 'Message::DOM::DOMMain::MDOM_NEWCHILD_IS_REFCHILD', 'MDOM_REPLACE_BY_ITSELF_NO_EFFECT', 'Message::DOM::DOMMain::MDOM_REPLACE_BY_ITSELF_NO_EFFECT'}->{$al}};
          goto &{$AUTOLOAD};
        } else {
          require Carp;
          Carp::croak (qq<Can't locate method "$AUTOLOAD">);
        }
      
#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #2)"
}
sub import {

#line 1 "lib/Message/DOM/DOMMain.dis [u] (Chunk #3)"

        my $self = shift;
        if (@_) {
          local $Exporter::ExportLevel = $Exporter::ExportLevel + 1;
          $self->SUPER::import (@_);
          for (grep {not /\W/} @_) {
            eval qq{$_};
          }
        }
      
#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #4)"
}
our %EXPORT_TAG = ('ManakaiDOMImplementationExceptionCode', ['MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR'], 'ManakaiDOMImplementationWarningCode', ['BAD_BASE_URI', 'RELATIVE_URI', 'MDOM_NS_EMPTY_URI', 'MDOM_NEWCHILD_IS_REFCHILD', 'ATTR_SET_NO_EFFECT', 'MDOMX_EMPTY_NS_PREFIX', 'MDOM_REPLACE_BY_ITSELF_NO_EFFECT']);
our @EXPORT_OK = ('MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR', 'BAD_BASE_URI', 'RELATIVE_URI', 'MDOM_NS_EMPTY_URI', 'MDOM_NEWCHILD_IS_REFCHILD', 'ATTR_SET_NO_EFFECT', 'MDOMX_EMPTY_NS_PREFIX', 'MDOM_REPLACE_BY_ITSELF_NO_EFFECT');
use Exporter; push our @ISA, 'Exporter';
package Message::DOM::DOMMain::ManakaiDOMObject;
our $VERSION = 20050922.1243;
push our @ISA, 'Message::Util::IF::MUErrorTarget';
sub ___report_error ($$) {
my ($self, $err) = @_;

{
#line 1 "/document (lib/Message/DOM/DOMMain.dis)/ResourceDef[@QName=ManakaiDOM:ManakaiDOMObject][@rdf:type=ManakaiDOM:Class]/ResourceDef[@rdf:type=DISLang|Method]/Return[@rdf:type=DISLang|MethodReturn]/PerlDef [b] (Chunk #11)"

#line 1 "/document (lib/Message/DOM/DOMMain.dis)/ResourceDef[@QName=ManakaiDOM:ManakaiDOMObject][@rdf:type=ManakaiDOM:Class]/ResourceDef[@rdf:type=DISLang|Method]/Return[@rdf:type=DISLang|MethodReturn]/PerlDef [bc] (Chunk #9)"
if 
#line 1 "/document (lib/Message/DOM/DOMMain.dis)/ResourceDef[@QName=ManakaiDOM:ManakaiDOMObject][@rdf:type=ManakaiDOM:Class]/ResourceDef[@rdf:type=DISLang|Method]/Return[@rdf:type=DISLang|MethodReturn]/PerlDef [u] (Chunk #5)"
($err->isa (
#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #6)"
'Message::Util::Error::DOMException::ManakaiDOMException'
#line 1 "/document (lib/Message/DOM/DOMMain.dis)/ResourceDef[@QName=ManakaiDOM:ManakaiDOMObject][@rdf:type=ManakaiDOM:Class]/ResourceDef[@rdf:type=DISLang|Method]/Return[@rdf:type=DISLang|MethodReturn]/PerlDef [u] (Chunk #7)"
)) {
  $err->throw;
} else {
## TODO: Implement warning reporting
  warn $err->stringify;
}
#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #8)"

#line 1 "lib/Message/DOM/DOMMain.dis [/bc] (Chunk #10)"

#line 1 "lib/Message/DOM/DOMMain.dis [/b] (Chunk #12)"
}
}
$Message::DOM::ClassFeature{q<Message::DOM::DOMMain::ManakaiDOMObject>} = {};
$Message::DOM::ClassPoint{q<Message::DOM::DOMMain::ManakaiDOMObject>} = 0;
package Message::DOM::DOMMain::ManakaiDOMStringExtend;
our $VERSION = 20050922.1243;
push our @ISA, 'Message::DOM::IF::StringExtend', 'Message::DOM::IFLatest::StringExtend', 'Message::DOM::IFLevel2::StringExtend', 'Message::DOM::IFLevel3::StringExtend';
sub find_offset_32 ($$) {
my ($self, $offset16) = @_;
my $r = 0;

{
#line 1 "/document (lib/Message/DOM/DOMMain.dis)/ResourceDef[@rdf:type=dis:MultipleResource][@Name=StringExtend][@Name=ManakaiDOMStringExtend][@rdf:type=ManakaiDOM:IF][@rdf:type=ManakaiDOM:PrimitiveTypeClass]/Method[@Name=findOffset32][@rdf:type=DISLang|Method]/Return[@Type=unsigned-long||ManakaiDOM|all][@rdf:type=DISLang|MethodReturn]/PerlDef [b] (Chunk #21)"

#line 1 "/document (lib/Message/DOM/DOMMain.dis)/ResourceDef[@rdf:type=dis:MultipleResource][@Name=StringExtend][@Name=ManakaiDOMStringExtend][@rdf:type=ManakaiDOM:IF][@rdf:type=ManakaiDOM:PrimitiveTypeClass]/Method[@Name=findOffset32][@rdf:type=DISLang|Method]/Return[@Type=unsigned-long||ManakaiDOM|all][@rdf:type=DISLang|MethodReturn]/PerlDef [bc] (Chunk #15)"
my 
#line 1 "/document (lib/Message/DOM/DOMMain.dis)/ResourceDef[@rdf:type=dis:MultipleResource][@Name=StringExtend][@Name=ManakaiDOMStringExtend][@rdf:type=ManakaiDOM:IF][@rdf:type=ManakaiDOM:PrimitiveTypeClass]/Method[@Name=findOffset32][@rdf:type=DISLang|Method]/Return[@Type=unsigned-long||ManakaiDOM|all][@rdf:type=DISLang|MethodReturn]/PerlDef [u] (Chunk #13)"
$s = ref $self eq 'SCALAR' ? $self : \$self;
if (not defined $offset16 or $offset16 < 0 or
    CORE::length ($$s) * 2 < $offset16) {
}
pos ($$s) = 0;
use integer;
while ($offset16 and pos $$s <= CORE::length $$s) {
  if ($$s =~ /[^\x{10000}-\x{10FFFF}]{1,$offset16}/gc) {
    $offset16 -= $+[0] - $-[0];
  } elsif ($$s =~ m{[\x{10000}-\x{10FFFF}]{1,$offset16/2}}gc) {
    $offset16 -= 2 * ($+[0] - $-[0]);
    last if $offset16 < 0;
  } else {
    
#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #14)"

#line 1 "lib/Message/DOM/DOMMain.dis [/bc] (Chunk #16)"
report Message::Util::Error::DOMException::CoreException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#values' => {
        count => $offset16,
        position => 1,
      }, '-type' => 'MDOM_DEBUG_BUG', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'find_offset_32', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMMain::ManakaiDOMStringExtend';

#line 20 "/document (lib/Message/DOM/DOMMain.dis)/ResourceDef[@rdf:type=dis:MultipleResource][@Name=StringExtend][@Name=ManakaiDOMStringExtend][@rdf:type=ManakaiDOM:IF][@rdf:type=ManakaiDOM:PrimitiveTypeClass]/Method[@Name=findOffset32][@rdf:type=DISLang|Method]/Return[@Type=unsigned-long||ManakaiDOM|all][@rdf:type=DISLang|MethodReturn]/PerlDef [bc] (Chunk #19)"

#line 20 "/document (lib/Message/DOM/DOMMain.dis)/ResourceDef[@rdf:type=dis:MultipleResource][@Name=StringExtend][@Name=ManakaiDOMStringExtend][@rdf:type=ManakaiDOM:IF][@rdf:type=ManakaiDOM:PrimitiveTypeClass]/Method[@Name=findOffset32][@rdf:type=DISLang|Method]/Return[@Type=unsigned-long||ManakaiDOM|all][@rdf:type=DISLang|MethodReturn]/PerlDef [u] (Chunk #17)"
;
  }
}
if ($offset16 > 0) {
}
$r = pos ($$s);
#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #18)"

#line 1 "lib/Message/DOM/DOMMain.dis [/bc] (Chunk #20)"

#line 1 "lib/Message/DOM/DOMMain.dis [/b] (Chunk #22)"
}
$r}
sub find_offset_16 ($$) {
my ($self, $offset32) = @_;
my $r = 0;

{
#line 1 "/document (lib/Message/DOM/DOMMain.dis)/ResourceDef[@rdf:type=dis:MultipleResource][@Name=StringExtend][@Name=ManakaiDOMStringExtend][@rdf:type=ManakaiDOM:IF][@rdf:type=ManakaiDOM:PrimitiveTypeClass]/Method[@Name=findOffset16][@rdf:type=DISLang|Method]/Return[@Type=DOMMain|unsigned-long||ManakaiDOM|all][@rdf:type=DISLang|MethodReturn]/PerlDef [b] (Chunk #27)"

#line 1 "/document (lib/Message/DOM/DOMMain.dis)/ResourceDef[@rdf:type=dis:MultipleResource][@Name=StringExtend][@Name=ManakaiDOMStringExtend][@rdf:type=ManakaiDOM:IF][@rdf:type=ManakaiDOM:PrimitiveTypeClass]/Method[@Name=findOffset16][@rdf:type=DISLang|Method]/Return[@Type=DOMMain|unsigned-long||ManakaiDOM|all][@rdf:type=DISLang|MethodReturn]/PerlDef [bc] (Chunk #25)"
my 
#line 1 "/document (lib/Message/DOM/DOMMain.dis)/ResourceDef[@rdf:type=dis:MultipleResource][@Name=StringExtend][@Name=ManakaiDOMStringExtend][@rdf:type=ManakaiDOM:IF][@rdf:type=ManakaiDOM:PrimitiveTypeClass]/Method[@Name=findOffset16][@rdf:type=DISLang|Method]/Return[@Type=DOMMain|unsigned-long||ManakaiDOM|all][@rdf:type=DISLang|MethodReturn]/PerlDef [u] (Chunk #23)"
$s = ref $self eq 'SCALAR' ? $self : \$self;
if (not defined $offset32 or $offset32 < 0 or
    CORE::length ($$s) < $offset32) {
}
my $ss = substr $$s, 0, $offset32;
if ($ss =~ /[\x{10000}-\x{10FFFF}]/) {
  while ($ss =~ /[\x{10000}-\x{10FFFF}]+/g) {
    $r += $+[0] - $-[0];
  }
}
#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #24)"

#line 1 "lib/Message/DOM/DOMMain.dis [/bc] (Chunk #26)"

#line 1 "lib/Message/DOM/DOMMain.dis [/b] (Chunk #28)"
}
$r}
$Message::DOM::ClassFeature{q<Message::DOM::DOMMain::ManakaiDOMStringExtend>} = {};
$Message::DOM::ClassPoint{q<Message::DOM::DOMMain::ManakaiDOMStringExtend>} = 0;
package Message::DOM::IFLatest::StringIndexOutOfBoundsException;
our $VERSION = 20050922.1243;
push our @ISA, 'Message::Util::Error';
package Message::DOM::DOMMain::ManakaiDOMStringIndexOutOfBoundsException;
our $VERSION = 20050922.1243;
push our @ISA, 'Message::Util::Error::DOMException::ManakaiDOMException', 'Message::DOM::DOMMain::ManakaiDOMObject', 'Message::DOM::IF::StringIndexOutOfBoundsException', 'Message::DOM::IFLatest::StringIndexOutOfBoundsException', 'Message::DOM::IFLevel2::StringIndexOutOfBoundsException', 'Message::DOM::IFLevel3::StringIndexOutOfBoundsException', 'Message::Util::IF::ManakaiDOMExceptionIF';
sub ___error_def () {

#line 1 "lib/Message/DOM/DOMMain.dis [u] (Chunk #29)"
{}
#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #30)"
}
$Message::DOM::ClassFeature{q<Message::DOM::DOMMain::ManakaiDOMStringIndexOutOfBoundsException>} = {};
$Message::DOM::ClassPoint{q<Message::DOM::DOMMain::ManakaiDOMStringIndexOutOfBoundsException>} = 0;
package Message::DOM::DOMMain::ManakaiDOMImplementationException;
our $VERSION = 20050922.1243;
push our @ISA, 'Message::Util::Error::DOMException::ManakaiDOMException', 'Message::DOM::DOMMain::ManakaiDOMObject';
sub MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR () {
2}
sub ___error_def () {

#line 1 "lib/Message/DOM/DOMMain.dis [u] (Chunk #31)"
{'MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR', {'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code', '2', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype', {}, 'description', 'An attempt to break surrogate pair, i.e. the first character of the range is the low-surrogate (the second 16-bit unit of the surrogate pair) or the last character of the range is the high-surrogate (the first 16-bit unit of the surrogate pair).'}}
#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #32)"
}
$Message::DOM::ClassFeature{q<Message::DOM::DOMMain::ManakaiDOMImplementationException>} = {};
$Message::DOM::ClassPoint{q<Message::DOM::DOMMain::ManakaiDOMImplementationException>} = 0;
package Message::DOM::DOMMain::ManakaiDOMImplementationWarning;
our $VERSION = 20050922.1243;
push our @ISA, 'Message::Util::Error::DOMException::ManakaiDOMWarning', 'Message::DOM::DOMMain::ManakaiDOMObject';
sub BAD_BASE_URI () {
5}
sub RELATIVE_URI () {
6}
sub ___error_def () {

#line 1 "lib/Message/DOM/DOMMain.dis [u] (Chunk #33)"
{'BAD_BASE_URI', {'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code', '5', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype', {'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#RELATIVE_BASE_URI', {'description', 'The specified base URI reference is a relative URI reference.'}, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NULL_BASE_URI', {'description', 'The specified base URI reference is <DOM::null>.'}}, 'description', 'Malformed base URI reference is specified.'}, 'RELATIVE_URI', {'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code', '6', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype', {}, 'description', 'A relative URI reference is specified; the result is implementation dependent.'}, 'MDOM_NS_EMPTY_URI', {'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code', '4', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype', {}, 'description', 'An empty string namespace URI is coverted into <DOM::null> <SRC::DOM Level 3 Core>.'}, 'MDOM_NEWCHILD_IS_REFCHILD', {'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code', '1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype', {}, 'description', 'The node to be inserted is same as the reference node.'}, 'ATTR_SET_NO_EFFECT', {'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code', '0', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype', {'http://suika.fam.cx/~wakaba/archive/2004/dom/main#MDOMX_NOEFFECT_SINCE_DOC_NOSUPPORT_XML', {'description', 'The action has no effect since a document does not support the <Feature::XML> feature.'}, 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#MDOMX_NOEFFECT_SINCE_NODE_NOSUPPORT_XMLNS', {'description', 'The action has no effect since a node does not support XML Namespaces.'}}, 'description', 'Setting an attribute value has no effect by definition.'}, 'MDOMX_EMPTY_NS_PREFIX', {'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code', '3', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype', {}, 'description', 'An empty namespace prefix is specified; its result is implementation dependent <SRC::DOM Level 3>.'}, 'MDOM_REPLACE_BY_ITSELF_NO_EFFECT', {'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code', '2', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype', {}, 'description', 'An attempt to replace a node by itself is made. It is no effect by definition.'}}
#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #34)"
}
sub MDOM_NS_EMPTY_URI () {
4}
sub MDOM_NEWCHILD_IS_REFCHILD () {
1}
sub ATTR_SET_NO_EFFECT () {
0}
sub MDOMX_EMPTY_NS_PREFIX () {
3}
sub MDOM_REPLACE_BY_ITSELF_NO_EFFECT () {
2}
$Message::DOM::ClassFeature{q<Message::DOM::DOMMain::ManakaiDOMImplementationWarning>} = {'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#manakaidom', {'', '1', '1.0', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::DOMMain::ManakaiDOMImplementationWarning>} = 1;
$Message::DOM::DOMImplementationRegistry = 'Message::DOM::DOMMain::DOMImplementationRegistry';
package Message::DOM::DOMMain::DOMImplementationRegistry;
our $VERSION = 20050922.1243;
push our @ISA, 'Message::DOM::DOMFeature::ImplementationRegistry', 'Message::DOM::IFLatest::DOMImplementationSource', 'Message::DOM::IFLevel3::DOMImplementationSource';
sub get_dom_implementation ($$) {
my ($self, $features) = @_;

{
#line 1 "/document (lib/Message/DOM/DOMFeature.dis)/StringDataTypeDef[@QName=FeaturesString][@rdf:type=ManakaiDOM:DataType]/InputProcessor[@rdf:type=DISLang:InputProcessor]/PerlDef [b] (Chunk #39)"

#line 1 "/document (lib/Message/DOM/DOMFeature.dis)/StringDataTypeDef[@QName=FeaturesString][@rdf:type=ManakaiDOM:DataType]/InputProcessor[@rdf:type=DISLang:InputProcessor]/PerlDef [bc] (Chunk #37)"
if 
#line 1 "/document (lib/Message/DOM/DOMFeature.dis)/StringDataTypeDef[@QName=FeaturesString][@rdf:type=ManakaiDOM:DataType]/InputProcessor[@rdf:type=DISLang:InputProcessor]/PerlDef [u] (Chunk #35)"
(CORE::defined $features) {
  if (CORE::ref ($features) eq 'HASH') {
    my $new = {};
    for my $fname (keys %{$features}) {
      if (CORE::ref ($features->{$fname}) eq 'HASH') {
        my $lfname = lc $fname;
        for my $fver (keys %{$features->{$fname}}) {
          $new->{$lfname}->{$fver} = $features->{$fname}->{$fver};
        }
      } else {
        $new->{lc $fname} = {(CORE::defined $features->{$fname}
                                ? $features->{$fname} : '') => 1};
      }
    }
    $features = $new;
  } else {
    my @f = split /\s+/, $features;
    $features = {};
    while (@f) {
      my $name = lc shift @f;
      if (@f and $f[0] =~ /^[\d\.]+$/) {
        $features->{$name}->{shift @f} = 1;
      } else {
        $features->{$name}->{''} = 1;
      }
    }
  }
} else {
  $features = {};
}
#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #36)"

#line 1 "lib/Message/DOM/DOMMain.dis [/bc] (Chunk #38)"

#line 1 "lib/Message/DOM/DOMMain.dis [/b] (Chunk #40)"
}
my $r;

{
#line 1 "/document (lib/Message/DOM/DOMFeature.dis)/ResourceDef[@QName=ImplementationRegistry][@rdf:type=ManakaiDOM|Class]/Method[@Name=getDOMImplementation][@rdf:type=DISLang|Method]/Return[@Type=MinimumImplementation][@rdf:type=DISLang|MethodReturn]/PerlDef [b] (Chunk #71)"

#line 1 "/document (lib/Message/DOM/DOMFeature.dis)/ResourceDef[@QName=ImplementationRegistry][@rdf:type=ManakaiDOM|Class]/Method[@Name=getDOMImplementation][@rdf:type=DISLang|Method]/Return[@Type=MinimumImplementation][@rdf:type=DISLang|MethodReturn]/PerlDef [bc] (Chunk #45)"

#line 1 "/document (lib/Message/DOM/DOMFeature.dis)/ResourceDef[@QName=ImplementationRegistry][@rdf:type=ManakaiDOM|Class]/Method[@Name=getDOMImplementation][@rdf:type=DISLang|Method]/Return[@Type=MinimumImplementation][@rdf:type=DISLang|MethodReturn]/PerlDef [u] (Chunk #41)"
$features->{core}->{'3.0'} = 
#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #42)"
1
#line 1 "/document (lib/Message/DOM/DOMFeature.dis)/ResourceDef[@QName=ImplementationRegistry][@rdf:type=ManakaiDOM|Class]/Method[@Name=getDOMImplementation][@rdf:type=DISLang|Method]/Return[@Type=MinimumImplementation][@rdf:type=DISLang|MethodReturn]/PerlDef [u] (Chunk #43)"
;

#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #44)"

#line 1 "lib/Message/DOM/DOMMain.dis [/bc] (Chunk #46)"

{
#line 1 "/document (lib/Message/DOM/DOMFeature.dis)/StringDataTypeDef[@QName=FeaturesString][@rdf:type=ManakaiDOM:DataType]/ResourceDef[@QName=DOMMain:stringifyFeatures][@rdf:type=dis2pm:BlockCode]/PerlDef [b] (Chunk #51)"

#line 1 "/document (lib/Message/DOM/DOMFeature.dis)/StringDataTypeDef[@QName=FeaturesString][@rdf:type=ManakaiDOM:DataType]/ResourceDef[@QName=DOMMain:stringifyFeatures][@rdf:type=dis2pm:BlockCode]/PerlDef [bc] (Chunk #49)"
my 
#line 1 "/document (lib/Message/DOM/DOMFeature.dis)/StringDataTypeDef[@QName=FeaturesString][@rdf:type=ManakaiDOM:DataType]/ResourceDef[@QName=DOMMain:stringifyFeatures][@rdf:type=dis2pm:BlockCode]/PerlDef [u] (Chunk #47)"
@out;
for my $fname (keys %{$features}) {
  for my $fver (keys %{$features->{$fname}}) {
    push @out, $fname . ' ' . $fver . ' ' if $features->{$fname}->{$fver};
  }
}
$features = join ' ', @out;
#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #48)"

#line 1 "lib/Message/DOM/DOMMain.dis [/bc] (Chunk #50)"

#line 1 "lib/Message/DOM/DOMMain.dis [/b] (Chunk #52)"
}

#line 3 "/document (lib/Message/DOM/DOMFeature.dis)/ResourceDef[@QName=ImplementationRegistry][@rdf:type=ManakaiDOM|Class]/Method[@Name=getDOMImplementation][@rdf:type=DISLang|Method]/Return[@Type=MinimumImplementation][@rdf:type=DISLang|MethodReturn]/PerlDef [bc] (Chunk #55)"

#line 3 "/document (lib/Message/DOM/DOMFeature.dis)/ResourceDef[@QName=ImplementationRegistry][@rdf:type=ManakaiDOM|Class]/Method[@Name=getDOMImplementation][@rdf:type=DISLang|Method]/Return[@Type=MinimumImplementation][@rdf:type=DISLang|MethodReturn]/PerlDef [u] (Chunk #53)"
;

#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #54)"

#line 1 "lib/Message/DOM/DOMMain.dis [/bc] (Chunk #56)"

{
#line 1 "lib/Message/DOM/DOMMain.dis [b] (Chunk #65)"
local $Error::Depth = $Error::Depth + 1;

{
#line 4 "/document (lib/Message/DOM/DOMFeature.dis)/ResourceDef[@QName=ImplementationRegistry][@rdf:type=ManakaiDOM|Class]/Method[@Name=getDOMImplementation][@rdf:type=DISLang|Method]/Return[@Type=MinimumImplementation][@rdf:type=DISLang|MethodReturn]/PerlDef [b] (Chunk #63)"

#line 4 "/document (lib/Message/DOM/DOMFeature.dis)/ResourceDef[@QName=ImplementationRegistry][@rdf:type=ManakaiDOM|Class]/Method[@Name=getDOMImplementation][@rdf:type=DISLang|Method]/Return[@Type=MinimumImplementation][@rdf:type=DISLang|MethodReturn]/PerlDef [bc] (Chunk #61)"

  C: 
#line 4 "/document (lib/Message/DOM/DOMFeature.dis)/ResourceDef[@QName=ImplementationRegistry][@rdf:type=ManakaiDOM|Class]/Method[@Name=getDOMImplementation][@rdf:type=DISLang|Method]/Return[@Type=MinimumImplementation][@rdf:type=DISLang|MethodReturn]/PerlDef [u] (Chunk #57)"
for my $class (
    keys %Message::DOM::ManakaiDOMImplementationRegistry::SourceClass
  ) {
    $r = $class->
#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #58)"
get_dom_implementation
#line 7 "/document (lib/Message/DOM/DOMFeature.dis)/ResourceDef[@QName=ImplementationRegistry][@rdf:type=ManakaiDOM|Class]/Method[@Name=getDOMImplementation][@rdf:type=DISLang|Method]/Return[@Type=MinimumImplementation][@rdf:type=DISLang|MethodReturn]/PerlDef [u] (Chunk #59)"
 ($features);
    last C if defined $r;
  }

#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #60)"

#line 1 "lib/Message/DOM/DOMMain.dis [/bc] (Chunk #62)"

#line 1 "lib/Message/DOM/DOMMain.dis [/b] (Chunk #64)"
}

#line 1 "lib/Message/DOM/DOMMain.dis [/b] (Chunk #66)"
}

#line 12 "/document (lib/Message/DOM/DOMFeature.dis)/ResourceDef[@QName=ImplementationRegistry][@rdf:type=ManakaiDOM|Class]/Method[@Name=getDOMImplementation][@rdf:type=DISLang|Method]/Return[@Type=MinimumImplementation][@rdf:type=DISLang|MethodReturn]/PerlDef [bc] (Chunk #69)"

#line 12 "/document (lib/Message/DOM/DOMFeature.dis)/ResourceDef[@QName=ImplementationRegistry][@rdf:type=ManakaiDOM|Class]/Method[@Name=getDOMImplementation][@rdf:type=DISLang|Method]/Return[@Type=MinimumImplementation][@rdf:type=DISLang|MethodReturn]/PerlDef [u] (Chunk #67)"
;
#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #68)"

#line 1 "lib/Message/DOM/DOMMain.dis [/bc] (Chunk #70)"

#line 1 "lib/Message/DOM/DOMMain.dis [/b] (Chunk #72)"
}
$r}
sub get_dom_implementation_list ($$) {
my ($self, $features) = @_;

{
#line 1 "/document (lib/Message/DOM/DOMFeature.dis)/StringDataTypeDef[@QName=FeaturesString][@rdf:type=ManakaiDOM:DataType]/InputProcessor[@rdf:type=DISLang:InputProcessor]/PerlDef [b] (Chunk #77)"

#line 1 "/document (lib/Message/DOM/DOMFeature.dis)/StringDataTypeDef[@QName=FeaturesString][@rdf:type=ManakaiDOM:DataType]/InputProcessor[@rdf:type=DISLang:InputProcessor]/PerlDef [bc] (Chunk #75)"
if 
#line 1 "/document (lib/Message/DOM/DOMFeature.dis)/StringDataTypeDef[@QName=FeaturesString][@rdf:type=ManakaiDOM:DataType]/InputProcessor[@rdf:type=DISLang:InputProcessor]/PerlDef [u] (Chunk #73)"
(CORE::defined $features) {
  if (CORE::ref ($features) eq 'HASH') {
    my $new = {};
    for my $fname (keys %{$features}) {
      if (CORE::ref ($features->{$fname}) eq 'HASH') {
        my $lfname = lc $fname;
        for my $fver (keys %{$features->{$fname}}) {
          $new->{$lfname}->{$fver} = $features->{$fname}->{$fver};
        }
      } else {
        $new->{lc $fname} = {(CORE::defined $features->{$fname}
                                ? $features->{$fname} : '') => 1};
      }
    }
    $features = $new;
  } else {
    my @f = split /\s+/, $features;
    $features = {};
    while (@f) {
      my $name = lc shift @f;
      if (@f and $f[0] =~ /^[\d\.]+$/) {
        $features->{$name}->{shift @f} = 1;
      } else {
        $features->{$name}->{''} = 1;
      }
    }
  }
} else {
  $features = {};
}
#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #74)"

#line 1 "lib/Message/DOM/DOMMain.dis [/bc] (Chunk #76)"

#line 1 "lib/Message/DOM/DOMMain.dis [/b] (Chunk #78)"
}
my $r;

{
#line 1 "/document (lib/Message/DOM/DOMMain.dis)/ResourceDef[@QName=DOMImplementationRegistry][@rdf:type=ManakaiDOM|Class]/Method[@Name=getDOMImplementationList][@rdf:type=DISLang|Method]/Return[@Type=DOMCore|DOMImplementationList][@rdf:type=DISLang|MethodReturn]/PerlDef [b] (Chunk #95)"

#line 1 "/document (lib/Message/DOM/DOMMain.dis)/ResourceDef[@QName=DOMImplementationRegistry][@rdf:type=ManakaiDOM|Class]/Method[@Name=getDOMImplementationList][@rdf:type=DISLang|Method]/Return[@Type=DOMCore|DOMImplementationList][@rdf:type=DISLang|MethodReturn]/PerlDef [bc] (Chunk #79)"

#line 1 "lib/Message/DOM/DOMMain.dis [/bc] (Chunk #80)"

{
#line 1 "lib/Message/DOM/DOMMain.dis [b] (Chunk #89)"
local $Error::Depth = $Error::Depth + 1;

{
#line 1 "/document (lib/Message/DOM/DOMMain.dis)/ResourceDef[@QName=DOMImplementationRegistry][@rdf:type=ManakaiDOM|Class]/Method[@Name=getDOMImplementationList][@rdf:type=DISLang|Method]/Return[@Type=DOMCore|DOMImplementationList][@rdf:type=DISLang|MethodReturn]/PerlDef [b] (Chunk #87)"

#line 1 "/document (lib/Message/DOM/DOMMain.dis)/ResourceDef[@QName=DOMImplementationRegistry][@rdf:type=ManakaiDOM|Class]/Method[@Name=getDOMImplementationList][@rdf:type=DISLang|Method]/Return[@Type=DOMCore|DOMImplementationList][@rdf:type=DISLang|MethodReturn]/PerlDef [bc] (Chunk #85)"

#line 1 "/document (lib/Message/DOM/DOMMain.dis)/ResourceDef[@QName=DOMImplementationRegistry][@rdf:type=ManakaiDOM|Class]/Method[@Name=getDOMImplementationList][@rdf:type=DISLang|Method]/Return[@Type=DOMCore|DOMImplementationList][@rdf:type=DISLang|MethodReturn]/PerlDef [u] (Chunk #81)"
       ## NOTE: Method name directly written
  $r = bless $self->SUPER::get_dom_implementation_list ($features),
             
#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #82)"
'Message::DOM::DOMCore::ManakaiDOMImplementationList'
#line 3 "/document (lib/Message/DOM/DOMMain.dis)/ResourceDef[@QName=DOMImplementationRegistry][@rdf:type=ManakaiDOM|Class]/Method[@Name=getDOMImplementationList][@rdf:type=DISLang|Method]/Return[@Type=DOMCore|DOMImplementationList][@rdf:type=DISLang|MethodReturn]/PerlDef [u] (Chunk #83)"
;

#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #84)"

#line 1 "lib/Message/DOM/DOMMain.dis [/bc] (Chunk #86)"

#line 1 "lib/Message/DOM/DOMMain.dis [/b] (Chunk #88)"
}

#line 1 "lib/Message/DOM/DOMMain.dis [/b] (Chunk #90)"
}

#line 4 "/document (lib/Message/DOM/DOMMain.dis)/ResourceDef[@QName=DOMImplementationRegistry][@rdf:type=ManakaiDOM|Class]/Method[@Name=getDOMImplementationList][@rdf:type=DISLang|Method]/Return[@Type=DOMCore|DOMImplementationList][@rdf:type=DISLang|MethodReturn]/PerlDef [bc] (Chunk #93)"

#line 4 "/document (lib/Message/DOM/DOMMain.dis)/ResourceDef[@QName=DOMImplementationRegistry][@rdf:type=ManakaiDOM|Class]/Method[@Name=getDOMImplementationList][@rdf:type=DISLang|Method]/Return[@Type=DOMCore|DOMImplementationList][@rdf:type=DISLang|MethodReturn]/PerlDef [u] (Chunk #91)"
;
#line 1 "lib/Message/DOM/DOMMain.dis [/u] (Chunk #92)"

#line 1 "lib/Message/DOM/DOMMain.dis [/bc] (Chunk #94)"

#line 1 "lib/Message/DOM/DOMMain.dis [/b] (Chunk #96)"
}
$r}
$Message::DOM::ClassFeature{q<Message::DOM::DOMMain::DOMImplementationRegistry>} = {};
$Message::DOM::ClassPoint{q<Message::DOM::DOMMain::DOMImplementationRegistry>} = 0;
for ($Message::DOM::IFLevel3::DOMImplementationSource::, $Message::Util::IF::ManakaiDOMExceptionIF::, $Message::DOM::IFLevel3::StringIndexOutOfBoundsException::, $Message::DOM::IF::StringIndexOutOfBoundsException::, $Message::DOM::IFLevel2::StringIndexOutOfBoundsException::, $Message::DOM::IFLevel2::StringExtend::, $Message::DOM::IFLatest::DOMImplementationSource::, $Message::DOM::IF::StringExtend::, $Message::DOM::IFLatest::StringExtend::, $Message::DOM::IFLevel3::StringExtend::, $Message::Util::IF::MUErrorTarget::){}
## License: <http://suika.fam.cx/~wakaba/archive/2004/8/18/license#Perl+MPL>
1;
