Module:
  @QName:
    MDOM:DOMMain
  @AppName:
    @@@: dom
    @@prefix:  w3c.org
    @@ContentType:
      lang:IDL-DOM
    @@For:
      ManakaiDOM:IDL
  @FullName:
    @@lang: en
    @@@: DOM Core DataTypes and Objects
  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2004/dom/main#
  
  @Description:
    @@lang:en
    @@@:
      The <Module:DOMMain> manakai DOM module defines fundemental 
      IDL/DOM data types (e.g. <CODE:unsigned long>, <TYPE:DOMString>) 
      and implements the <IF:DOMImplementationRegistry> object.

  @Author:
    @@FullName: Wakaba
    @@Mail: w@suika.fam.cx
  @License:
     license:Perl+MPL
  @Date:
    @@@:
      $Date: 2004/11/27 10:59:09 $
    @@ContentType:
      dis:Date.RCS
  
  @Feature:
    @@QName: 
      ManakaiDOM:DOMMain
    @@For:
      ManakaiDOM:ManakaiDOM
    @@FullName:
      @@@lang:en
      @@@@:
        The manakai DOM implementation <Module:DOMMain> module
  @Feature:
    @@QName:
      ManakaiDOM:DOMMain
    @@Version: 1.0
    @@For:
      ManakaiDOM:ManakaiDOM1
    @@FullName:
      @@@lang:en
      @@@@:
        The manakai DOM implementation <Module:DOMMain> module, level 1
    @@Contrib:
      DOMCore:DOMImplementation::DOM1
    @@Contrib:
      DOMCore:DOMImplementation::DOM2
    @@Contrib:
      DOMCore:DOMImplementation::DOM3
  @Feature:
    @@QName:
      ManakaiDOM:DOMMain
    @@Version: 2.0
    @@For:
      ManakaiDOM:ManakaiDOM2
    @@FullName:
      @@@lang:en
      @@@@:
        The manakai DOM implementation <Module:DOMMain> module, level 2
    @@Contrib:
      DOMCore:DOMImplementation::DOM2
    @@Contrib:
      DOMCore:DOMImplementation::DOM3
  @Feature:
    @@QName: 
      ManakaiDOM:DOMMain
    @@Version: 3.0
    @@For:
      ManakaiDOM:ManakaiDOM3
    @@FullName:
      @@@lang:en
      @@@@:
        The manakai DOM implementation <Module:DOMMain> module, level 3
    @@Contrib:
      DOMCore:DOMImplementation::DOM3
  
  @Require:
    @@AppModule:
      @@@For:
        ManakaiDOM:ManakaiDOM
      @@@Def:
        @@@@require: Encode
        @@@@ContentType: 
          dis:Perl
      @@@Description:
        @@@@lang:en
        @@@@@:
          The Perl module set to convert character encodings.
    @@Module:
      @@@Name: DOMCore
      @@@Description:
        @@@@lang:en
        @@@@@:
          The DOM Core module.  Note that <Module:DOMCore> module in turn
          requires this (<Module:DOMMain>) module.
      @@@For: 
        !=ManakaiDOM:ManakaiDOMCommon
  @DefaultFor:
    ManakaiDOM:ManakaiDOMLatest

Namespace:
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @lang:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @MDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.
  @MDOM_EXCEPTION:
     http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#

ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:DOM
ElementTypeBinding:
  @Name: IntClsMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isForInternal: 1
    @@ForCheck:
      ManakaiDOM:ForClass
ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethodParameter
ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethodReturn
ElementTypeBinding:
  @Name: Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttribute
    @@ForCheck:
      ManakaiDOM:DOM
ElementTypeBinding:
  @Name: IntClsAttr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttribute
    @@ForCheck:
      ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isForInternal: 1
    @@ForCheck:
      ManakaiDOM:ForClass
ElementTypeBinding:
  @Name: Get
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttrGet
ElementTypeBinding:
  @Name: Set
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttrSet
ElementTypeBinding:
  @Name: Exception
  @ElementType:
    ManakaiDOM:raises
ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase

ElementTypeBinding:
  @Name: PerlDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:Perl

## Definition for built-in IDL types

ResourceDef:
  @Name: IDLDataType
  @Description:
    @@lang:en
    @@@:
      A CORBA IDL data type.
  @rdf:type:
    rdfs:Class
  @ISA:
    ManakaiDOM:DataType
ElementTypeBinding:
  @Name: IDLDataTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: IDLDataType
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:all
      @@@For: 
        ManakaiDOM:all !=ManakaiDOM:all


IDLDataTypeDef:
  @Name: any
  @Description:
    @@lang:en
    @@@: Any data.

IDLDataTypeDef: 
  @Name: Object
  @Description:
    @@lang:en
    @@@: An object.

IDLDataTypeDef:
  @Name: unsigned-long-long
  @Def:
    @@ContentType: 
      lang:IDL-DOM
    @@@: unsigned long long
  @FullName:
    @@lang:en
    @@@: Unsigned long long integer

IDLDataTypeDef:
  @Name: unsigned-long
  @Def:
    @@ContentType: 
      lang:IDL-DOM
    @@@: unsigned long
  @FullName:
    @@lang:en
    @@@: Unsigned long integer

IDLDataTypeDef:
  @Name: long
  @FullName:
    @@lang:en
    @@@: Long integer
  @Description:
    @@lang:en
    @@@: A signed long integer.

IDLDataTypeDef:
  @Name: unsigned-short
  @Def:
    @@ContentType: 
      lang:IDL-DOM
    @@@: unsigned short
  @FullName:
    @@lang:en
    @@@: Unsigned short integer

IDLDataTypeDef:
  @Name: float
  @FullName:
    @@lang:en
    @@@: Floating point number

ElementTypeBinding:
  @Name: Const
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:Const

ResourceDef:
  @Name: boolean
  @rdf:type:
    ManakaiDOM:ConstGroup
  @rdf:type: IDLDataType
  @Description:
    @@lang:en
    @@@: A boolean (truth) value.
  @AliasFor:
    @@@:
      ::ManakaiDOM:all
    @@For:
      ManakaiDOM:all !=ManakaiDOM:all
  @Const:
    @@Name: true
    @@Value:
      @@@@: 1
      @@@ContentType:
        dis:boolean
    @@Description:
      @@@lang:en
      @@@@: The boolean true value.
  @Const:
    @@Name: false
    @@Value:
      @@@@: 0
      @@@ContentType:
        dis:boolean
    @@Description:
      @@@lang:en
      @@@@: The boolean false value.

## Null value

Const:
  @Name: null
  @Type: any
  @AliasFor:
    @@@:
      ::ManakaiDOM:all
    @@For:
      !=ManakaiDOM:all
  @Value:
    @@ContentType: 
      lang:Perl
    @@@: undef
  @Description:
    @@lang:en
    @@@:
       The null value.  Note that <DOM:null> is different from 
       empty string and number zero.


## DataType Definitions from DOM Core Specification IDL

ResourceDef:
  @Name: DOMDataType
  @Description:
    @@lang:en
    @@@:
      A DOM data type.
  @rdf:type:
    rdfs:Class
  @ISA:
    ManakaiDOM:DataType
ElementTypeBinding:
  @Name: DOMDataTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DOMDataType
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:all
      @@@For: 
        !=ManakaiDOM:all

ResourceDef:
  @For:
    ManakaiDOM:DOM
  @rdf:type:
    @@@:
      dis:MultipleResource
    @@ForCheck:
      !ManakaiDOM:ForIF !ManakaiDOM:ForClass
  @resourceFor:
    ManakaiDOM:ForIF
  @resourceFor:
    @@@:
      ManakaiDOM:ForClass
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOMCommon
  @Name: 
    @@@: DOMString
    @@ForCheck:
      ManakaiDOM:ForIF
  @Name:
    @@@: ManakaiDOMString
    @@ForCheck:
      ManakaiDOM:ForClass
  @rdf:type:
    @@@: DOMDataType
    @@ForCheck: 
      ManakaiDOM:ForIF
  @rdf:type:
    @@@: 
      ManakaiDOM:PrimitiveTypeClass
    @@ForCheck:
      ManakaiDOM:ForClass
  @Def:
    @@ContentType:
      lang:IDL-DOM
    @@@: sequence<unsigned short>
    @@ForCheck:
      ManakaiDOM:ForIF
  @ISA:
    @@For:
      ManakaiDOM:ManakaiDOMLatest
    @@@: ManakaiDOMStringExtend
  @Description:
    @@lang:en
    @@@: 
      A string.  It is used to store Unicode characters.
  @IntClsMethod:
    @@Name: new
    @@Description:
      @@@lang:en
      @@@@: 
        Creates a new instance object of this class.
    @@Param:
      @@@Name: arg
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: 
          A string that is used as initial value of the object to create.
      @@@InCase:
        @@@@Value:
          @@@@@is-null:1
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The value of object to create is an empty string.
      @@@InCase:
        @@@@Type: DOMString
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The <P:arg> is returned as is.  To copy <TYPE:DOMString> object, 
            use <M:.clone> method instead.
      @@@InCase:
        @@@@Label: 
          @@@@@lang:en
          @@@@@@: reference to a scalar value
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The value of object to create is the scalar value referred 
            (itself, not copy of it).
    @@Return:
      @@@Type: DOMString
      @@@actualType: ManakaiDOMString
      @@@Description:
        @@@@lang:en
        @@@@@: 
          A newly created string object.
      @@@PerlDef:
        @@@@cast-output: 0
        @@@@@:
          $arg = '' if not defined $arg;
          __CODE{DOMString: s => arg, r => r}__;
  @IntClsAttr:
    @@Name: value
    @@Description:
      @@@lang:en
      @@@@: The value of the string, as Perl utf8 scalar value.
    @@Get:
      @@@Type: any
      @@@PerlDef: $r = $self->{value};
      @@@Operator:
        @@@@ContentType:
          lang:Perl
        @@@@@: ""
    @@Set:
      @@@Type: any
      @@@PerlDef:
          if (ref $given and
              $given->isa ('__CLASS{DOMString}__')) {
            for ('value', <Q:ManakaiDOM:isFullyNormalized>) {
              $self->{$_} = $given->{$_};
            }
          } else {
            __INT{{initOnChange}}__;
            $self->{value} = ''.$given;
          }
  @IntClsAttr:
    @@Name: valueUTF16BE
    @@Description:
      @@@lang:en
      @@@@:
        The Perl byte-string representation, in UTF-16BE (without 
        <CHAR:BOM>) encoding.
    @@Get:
      @@@Type: any
      @@@Def:
        @@@@Type: 
          lang:Perl
        @@@@@:
          $r = Encode::encode ('UTF-16BE', $self->{value});
    @@Set:
      @@@Type: any
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          __INT{{initOnChange}}__;
          $self->{value} = Encode::decode ('UTF-16BE', $given);
  @IntClsAttr:
    @@Name: length
    @@Description:
      @@@lang:en
      @@@@:
        The number of 16-bit units (i.e. the number of two-octet pairs) 
        in the UTF-16BE representation of the string.
        \
        {NOTE:: This attribute is copied from the DOM <IF:CharacterData> 
                interface and ECMAScript <CODE:String> object.
        \
        }
        \
        {NOTE:: Numbers of 16-bit units different from numbers of 
                characters in case strings have one or more characters 
                whose UCS code point is in the range <CODE:U+10000>
                to <CODE:U+10FFFF>.
        \
        }
    @@Get:
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The number of 16-bit units.
      @@@InCase:
        @@@@Value: 0
        @@@@Description:
          @@@@@lang:en
          @@@@@@: 
            Denotes that the string is empty.
      @@@PerlDef:
          $r = CORE::length $self->{value};
          while ($self->{value} =~ /[\x{10000}-\x{10FFFF}]/g) {
            $r++;
          }
  @IntClsMethod:
    @@Name: append
    @@Description:
      @@@lang:en
      @@@@:
        Append the string to the end of the DOMString.
      \
        {NOTE:: This method is copied from the 
                <M:DOMCore:CharacterData.appendData> method.
        \
        }
    @@Operator:
      @@@@: .=
      @@@ContentType: 
        lang:Perl
    @@Param:
      @@@Name: arg
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: 
          Another string to append to this string.
    @@Return:
      @@@PerlDef:
        @@@@cast-input: 0
        @@@@@:
          __INT{{initOnChange}}__;
          $self->{value} .= $arg;
  @IntClsMethod:
    @@Name: setCurrentPosition
    @@Description:
      @@@lang:en
      @@@@:
        Set current position in the DOMString.
    @@Param:
      @@@Name: offset
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@:
          The offset of 16-bit units to which the current position is set.
        \
          {NOTE:: The <P:offset> value must be in the effective range; 
                  in other word, it must not be negative nor be greater 
                  than the number of 16-bit units in the string. 
                  Otherwise, unlike any other public methods, 
                  result is undefined.
          \
          }
    @@Return:
      @@@Exception:
        @@@@Type: 
          ManakaiDOM:ManakaiDOMImplementationException
        @@@@Name: MDOM_INDEX_IN_SURROGATE_PAIR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            An attempt is made to break surrogate pair.
      @@@PerlDef:
          use integer;
          pos ($self->{value}) = 0;
          while ($offset and pos $self->{value} <= CORE::length $self->{value}) {
            if ($self->{value} =~ /[^\x{10000}-\x{10FFFF}]{1,$offset}/gc) {
              $offset -= $+[0] - $-[0];
            } elsif ($self->{value}
                               =~ m{[\x{10000}-\x{10FFFF}]{1,$offset/2}}gc) {
              $offset -= 2 * ($+[0] - $-[0]);
              if ($offset < 0) {
                __EXCEPTION{
                  ManakaiDOMImplementationException.
                    MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR::
                  <Q:MDOM_EXCEPTION:param-name> => 'offset',
                }__;
              }
            } else {
              __EXCEPTION{
                ManakaiDOMImplementationException.MDOM_DEBUG_BUG::
                <Q:MDOM_EXCEPTION:values> => {
                  count => $offset,
                  position => 1,
                },
              }__;
            }                
          }
  @IntClsMethod:
    @@Name: delete
    @@Description:
      @@@lang:en
      @@@@:
        Removes a range of 16-bit units from a string.
        \
        {NOTE:: This method is copied from the 
                <M:DOMCore:CharacterData.deleteData> method. 
        \
        }
    @@Param:
      @@@Name: offset
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The offset from which to start removing.
    @@Param:
      @@@Name: count
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@:
          The number of 16-bit units to delete.  If the sum of the
          parameters offset and count exceeds the length of the
          string then all 16-bit units from offset to the end
          of the string are deleted.
    @@Return:
      @@@Exception:
        @@@@Type: DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            Either the <P:offset> value is negative or greater than the number 
            of 16-bit units in the string, or the <P:count> value is negative. 
      @@@Exception:
        @@@@Type: 
          ManakaiDOM:ManakaiDOMImplementationException
        @@@@Name: MDOM_INDEX_IN_SURROGATE_PAIR
        @@@@Description:
          @@@@@lang:en
          @@@@@@: 
            An attempt is made to break a surrogate pair.
      @@@PerlDef:
          __DEEP{
            $self->__INT{replace}__ ($offset, $count, '');
          }__;
  @IntClsMethod:
    @@Name: insert
    @@Description:
      @@@lang:en
      @@@@:
        Inserts another string at specified 16-bit unit offset in string.
        \
        {NOTE:: This method is copied from the 
                <M:DOMCore:CharacterData.insertData> method.
        \
        }
    @@Param:
      @@@Name: offset
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: 
          The offset to which <P:arg> is inserted.
    @@Param:
      @@@Name: arg
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: 
          Another string to insert.
    @@Return:
      @@@Exception:
        @@@@Type: DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The <P:offset> value is negative or greater than the 
            number of 16-bit units in the string.
      @@@Exception:
        @@@@Type: 
          ManakaiDOM:ManakaiDOMImplementationException
        @@@@Name: MDOM_INDEX_IN_SURROGATE_PAIR
        @@@@Description:
          @@@@@lang:en
          @@@@@@: 
            An attempt is made to break a surrogate pair.
      @@@PerlDef:
        @@@@cast-input: 0
        @@@@@:
          if ($offset < 0 or $offset > CORE::length $self->{value} or
              $offset > $self->length) {
            __EXCEPTION{DOMException.INDEX_SIZE_ERR::
              <Q:MDOM_EXCEPTION:param-name> => 'offset',
            }__;
          }
          __INT__;
      @@@IntDef:
        @@@@Type:
          lang:Perl
        @@@@@:
          __INT{{initOnChange}}__;
          unless ($self->{value} =~ /[\x{10000}-\x{10FFFF}]/) {
            substr ($self->{value}, $offset, 0) = $arg;
          } else {
            unless (substr ($self->{value}, 0, $offset)
                                 =~ /[\x{10000}-\x{10FFFF}]/) {
              substr ($self->{value}, $offset, 0) = $arg;
            } else { # Non-BMP chars before $offset
              __DEEP{
                $self->__INT{setCurrentPosition}__ ($offset);
              }__;
              substr ($self->{value}, pos $self->{value}, 0) = $arg;
            }
          }
  @IntClsMethod:
    @@Name: replace
    @@Description:
      @@@lang:en
      @@@@:
        Replaces a range of 16-bit units in a string 
        with another string.
        \
        {NOTE:: This method is copied from the 
                <M:DOMCore:CharacterData.replaceData> method.
        \
        }
    @@Param:
      @@@Name: offset
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The offset from which to start replacing.
    @@Param:
      @@@Name: count
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@:
          The number of 16-bit units to replace.  If the sum of the
          <P:offset> value and the <P:count> value exceeds the length of the
          string then all 16-bit units from the <P:offset> to the end
          of the string are replaced.
    @@Param:
      @@@Name: arg
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: 
          Another string with which the range is replaced.
    @@Return:
      @@@Exception:
        @@@@Type: DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The <P:offset> is negative or greater than
            the number of 16-bit units in the string, or the 
            <P:count> value is negative.
      @@@Exception:
        @@@@Type: 
          ManakaiDOM:ManakaiDOMImplementationException
        @@@@Name: MDOM_INDEX_IN_SURROGATE_PAIR
        @@@@Description:
          @@@@@lang:en
          @@@@@@: 
            An attempt is made to break asurrogate pair.
      @@@PerlDef:
        @@@@cast-input: 0
        @@@@@:
          if ($offset < 0 or $offset > CORE::length $self->{value} or
              $offset > $self->length) {
            __EXCEPTION{DOMException.INDEX_SIZE_ERR::
              <Q:MDOM_EXCEPTION:param-name> => 'offset',
            }__;
          }
          if ($count < 0) {
            __EXCEPTION{DOMException.INDEX_SIZE_ERR::
              <Q:MDOM_EXCEPTION:param-name> => 'count',
            }__;
          }
          __INT__;
      @@@IntDef:
        @@@@Type:
          lang:Perl
        @@@@@:
          __INT{{initOnChange}}__;
        REPLACE: {
          unless ($self->{value} =~ /[\x{10000}-\x{10FFFF}]/) {
            substr ($self->{value}, $offset, $count) = $arg;
            last REPLACE;
          } else {
            unless (substr ($self->{value}, 0, $offset)
                                 =~ /[\x{10000}-\x{10FFFF}]/) {
              unless (substr ($self->{value}, $offset, $count)
                                 =~ /[\x{10000}-\x{10FFFF}]/) {
                substr ($self->{value}, $offset, $count) = $arg;
                last REPLACE;
              } elsif (CORE::length $self->{value} < $offset + $count) {
                substr ($self->{value}, $offset) = $arg;
                last REPLACE;
              } else {
                pos ($self->{value}) = $offset;
              }
            } else { # Non-BMP chars before $offset
              __DEEP{
                $self->__INT{setCurrentPosition}__ ($offset);
              }__;
            }
          }
          use integer;
          my $s = substr ($self->{value}, pos $self->{value});
          while ($count) {
            if ($s =~ s/[^\x{10000}-\x{10FFFF}]{1,$count}//) {
              $count -= $+[0] - $-[0];
            } elsif ($s =~ s{[\x{10000}-\x{10FFFF}]{1,$count/2}}{}) {
              $count -= 2 * ($+[0] - $-[0]);
              if ($count < 0) {
                __EXCEPTION{
                  ManakaiDOMImplementationException.
                          MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR::
                  <Q:MDOM_EXCEPTION:param-name> => 'count',
                }__;
              }
            } else {
              __EXCEPTION{
                ManakaiDOMImplementationException.MDOM_DEBUG_BUG::
                <Q:MDOM_EXCEPTION:values> => {
                        count => $count,
                        position => 1,
                },
              }__;
            }
           }
           substr ($self->{value}, pos $self->{value}) = $arg . $s;
        } # REPLACE
  @IntClsMethod:
    @@Name: substring
    @@Description:
      @@@lang:en
      @@@@:
        Extract a range of 16-bit units.
      \
        This method is taken from the method substringData in
        the DOM interface CharacterData.
    @@Param:
      @@@Name: offset
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The offset from which to start extract.
    @@Param:
      @@@Name: count
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@:
          The number of 16-bit units to extract.  If the sum of the
          parameters offset and count exceeds the length of the
          DOMString then all 16-bit units from offset to the end
          of the DOMString are returned.
    @@Return:
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: The specified substring.
      @@@Exception:
        @@@@Type: DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified "offset" is negative or greater than
            the number of 16-bit units in the DOMString, or the specified
            "count" is negative.
      @@@Exception:
        @@@@Type: DOMException
        @@@@Name: DOMSTRING_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The specified range does not fit into a DOMString.
      @@@Exception:
        @@@@Type: 
          ManakaiDOM:ManakaiDOMImplementationException
        @@@@Name: MDOM_INDEX_IN_SURROGATE_PAIR
        @@@@Description:
          @@@@@lang:en
          @@@@@@: An attempt is made to break surrogate pair.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          if ($offset < 0 or $offset > CORE::length $self->{value} or
              $offset > $self->length) {
            __EXCEPTION{DOMException.INDEX_SIZE_ERR::
              <Q:MDOM_EXCEPTION:param-name> => 'offset',
            }__;
          }
          if ($count < 0) {
            __EXCEPTION{DOMException.INDEX_SIZE_ERR::
              <Q:MDOM_EXCEPTION:param-name> => 'count',
            }__;
          }
          __INT__;
      @@@IntDef:
        @@@@Type:
          lang:Perl
        @@@@@:
        SUBSTR: {
          unless ($self->{value} =~ /[\x{10000}-\x{10FFFF}]/) {
            $r = substr ($self->{value}, $offset, $count);
            last SUBSTR;
          } else {
            unless (substr ($self->{value}, 0, $offset)
                                 =~ /[\x{10000}-\x{10FFFF}]/) {
              unless (substr ($self->{value}, $offset, $count)
                                 =~ /[\x{10000}-\x{10FFFF}]/) {
                $r = substr ($self->{value}, $offset, $count);
                last SUBSTR;
              } elsif (CORE::length $self->{value} < $offset + $count) {
                $r = substr ($self->{value}, $offset);
                last SUBSTR;
              } else {
                pos ($self->{value}) = $offset;
              }
            } else { # Non-BMP chars before $offset
              __DEEP{
                $self->__INT{setCurrentPosition}__ ($offset);
              }__;
            }
          }
          my $start = pos $self->{value};
          __DEEP{
            $self->__INT{setCurrentPosition}__ ($offset + $count);
          }__;
          $r = substr $self->{value}, $start, pos ($self->{value}) - $start;
        } # SUBSTR
  @IntClsAttr:
    @@Name: isFullyNormalized
    @@Description:
      @@@lang:en
      @@@@:
        Whether a string is fully normalized or not.
        \
        {P:: In DOM Level 3, characters are <DFN:fully normalized> as 
        defined in Appendix B of XML 1.1 specification if:
        \
          - the parameter <CP:normalize-characters> was set to <DOM:true>
            while loading the document or the document was certified as 
            defined in XML 1.1 specification or 
          - the parameter <CP:normalize-characters> was set to <DOM:true>
            while using the method <M:DOMCore:Document.normalizeDocument> 
            interface or while using the method <M:DOMCore:Node.normalize>.
        \
        }
    @@Get:
      @@@Type: boolean
      @@@InCase:
        @@@@Value: true
        @@@@Type: boolean
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The string was certified as fully normalized.
      @@@InCase:
        @@@@Value: false
        @@@@Type: boolean
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The string is not known to be certified as fully normalized.
      @@@PerlDef:
        #$r = $self->{<Q:ManakaiDOM:isFullyNormalized>} ? true : false;
    @@ImplNote:
      @@@lang:en
      @@@@:
        TODO: In this attribute, we should implement certification of string, 
              rather than returning private property value.
  @IntClsMethod:
    @@Name: compare
    @@Operator:
      @@@@: eq
      @@@ContentType: 
        lang:Perl
    @@Description:
      @@@lang:en
      @@@@: The string comparison.
    @@Param:
      @@@Name: str
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: The string to be compared.
    @@Param:
      @@@Name: caseInsensitive
      @@@Type: boolean
      @@@Description:
        @@@@lang:en
        @@@@@: The case-sentitivility of the match.
      @@@InCase:
        @@@@Value: true
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The match is done as case-insensitive.
      @@@InCase:
        @@@@Value: false
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The match is done as case-sensitive.
    @@Return:
      @@@Type: boolean
      @@@Description:
        @@@@lang:en
        @@@@@: Whether the string is fully normalized or not.
      @@@InCase:
        @@@@Value: true
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The string is fully normalized.
      @@@InCase:
        @@@@Value: true
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The string is fully normalized.
      @@@PerlDef:
        @@@@cast-input: 0
        @@@@@:
          if (UNIVERSAL::isa ($str, '__IIF{DOMString}__')) {
            $str = $str->{value};
          }
          if ($caseInsensitive) {
            $r = lc ($str) eq lc ($self->{value});
          } else {
            $r = $str eq $self->{value};
          }
  @IntClsMethod:
    @@Name: initOnChange
    @@Description:
      @@@lang:en
      @@@@: Discade caches when the value has been changed.
    @@Return:
      @@@PerlDef:
        @@@@@:
          delete $self->{<Q:ManakaiDOM:isFullyNormalized>};
    @@ImplNote:
      @@@lang:en
      @@@@:
        This method is not directly called; it is embeded at the 
        cdis2pm phase.
## DataType:DOMString

ResourceDef:
  @For: 
    ManakaiDOM:DOM3
  @rdf:type:
    @@@:
      dis:MultipleResource
    @@ForCheck:
      !ManakaiDOM:ForIF !ManakaiDOM:ForClass
  @resourceFor:
    ManakaiDOM:ForIF
  @resourceFor:
    @@@:
      ManakaiDOM:ForClass
    @@For:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOMCommon
  @Name:
    @@@: StringExtend
    @@ForCheck:
      ManakaiDOM:ForIF
  @Name:
    @@@: ManakaiDOMStringExtend
    @@ForCheck:
      ManakaiDOM:ForClass
  @rdf:type:
    @@@:
      ManakaiDOM:IF
    @@ForCheck:
      ManakaiDOM:ForIF
  @rdf:type:
    @@@:
      ManakaiDOM:Class
    @@ForCheck:
      ManakaiDOM:ForClass
  @Description:
    @@lang:en
    @@@:
      Extensions to a language's native <CODE:String> class or interface.
     \
      {NOTE:: This interface is informatively defined in Appendix 
              of DOM Level 3 Core.
      \
      }
  @Method:
    @@Name: findOffset16
    @@Description:
      @@@lang:en
      @@@@: 
        Returns the UTF-16 offset that corresponding to a UTF-32 offset.
        Unmatched surrogate is counted as a single UTF-16 value.
    @@Param:
      @@@Name: offset32
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The UTF-32 offset.
    @@Return:
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The UTF-16 offset.
      @@@Exception:
        @@@@Type: 
          DOMCore:DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified <P:offset32> is negative or greater than
            the number of characters (i.e. UTF-32 32-bit code units).
      @@@PerlDef:
        @@@@DefaultValue: $offset32
          if (not defined $offset32 or $offset32 < 0 or
              CORE::length ($self->{value}) < $offset32) {
            __EXCEPTION{DOMException.INDEX_SIZE_ERR::
              <Q:MDOM_EXCEPTION:param-name> => 'offset32',
            }__;
          }
          my $ss = substr $self->{value}, 0, $offset32;
          if ($ss =~ /[\x{10000}-\x{10FFFF}]/) {
            while ($ss =~ /[\x{10000}-\x{10FFFF}]+/g) {
              $r += $+[0] - $-[0];
            }
          }
  @Method:
    @@Name: findOffset32
    @@Description:
      @@@lang:en
      @@@@:
        Returns the UTF-32 offset corresponding to a UTF-16 offset.
        Unmatched surrogate is counted as a single UTF-16 value.
    @@Param:
      @@@Name: offset16
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The UTF-16 offset.
    @@Return:
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@:
          The UTF-32 offset.  If the <P:offset16> value is into middle of a 
          surrogate pair, the UTF-32 offset at the end of the pair is 
          returned.
      @@@Exception:
        @@@@Type: DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified <P:offset32> is negative or greater than
            the number of characters (i.e. UTF-32 32-bit code units).
      @@@PerlDef:
        @@@@DefaultValue: $offset16
        @@@@ImplNote:
          @@@@@lang:en
          @@@@@@: 
            <QUOTE:Current position> (see the method 
            <M:ManakaiDOMString.setCurrentPosition>) of the string
            has been changed. 
        @@@@@:
          if (not defined $offset16 or $offset16 < 0 or
              CORE::length ($self->{value}) * 2 < $offset16) {
            __EXCEPTION{DOMException.INDEX_SIZE_ERR::
              <Q:MDOM_EXCEPTION:param-name> => 'offset16',
            }__;
          }
          pos ($self->{value}) = 0;
          use integer;
          while ($offset16 and
                 pos $self->{value} <= CORE::length $self->{value}) {
            if ($self->{value} =~ /[^\x{10000}-\x{10FFFF}]{1,$offset16}/gc) {
              $offset16 -= $+[0] - $-[0];
            } elsif ($self->{value}
                               =~ m{[\x{10000}-\x{10FFFF}]{1,$offset16/2}}gc) {
              $offset16 -= 2 * ($+[0] - $-[0]);
              last if $offset16 < 0;
            } else {
              __EXCEPTION{
                ManakaiDOMImplementationException.MDOM_DEBUG_BUG::
                <Q:MDOM_EXCEPTION:values> => {
                  count => $offset16,
                  position => 1,
                },
              }__;
            }
          }
          if ($offset16 > 0) {
            __EXCEPTION{DOMException.INDEX_SIZE_ERR::
              <Q:MDOM_EXCEPTION:param-name> => 'offset16',
            }__;
          }
          $r = pos ($self->{value});
##IF: StringExtended

ResourceDef:
  @For:
    ManakaiDOM:DOM2
  @rdf:type:
    @@@:
      dis:MultipleResource
    @@ForCheck:
      !ManakaiDOM:ForIF !ManakaiDOM:ForClass
  @resourceFor:
    ManakaiDOM:ForIF
  @resourceFor:
    @@@:
      ManakaiDOM:ForClass
    @@For:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
  @Name:
    @@@:  DOMTimeStamp
    @@ForCheck:
      ManakaiDOM:ForIF
  @Name:
    @@@: ManakaiDOMTimeStamp
    @@ForCheck:
      ManakaiDOM:ForClass
  @rdf:type:
    @@@: DOMDataType
    @@ForCheck:
      ManakaiDOM:ForIF
  @rdf:type:
    @@@: 
      ManakaiDOM:PrimitiveTypeClass
    @@ForCheck:
      ManakaiDOM:ForClass
  @Description:
    @@lang:en
    @@@: 
      An absolute or relative time.  It is represented 
      as a number of milliseconds.
  @AliasFor:
    @@@: unsigned-long-long
    @@ForCheck:
      ManakaiDOM:ForIF
  @ImplNote:
    @@lang:en
    @@@:
      TODO: How implements this type is not yet decided.
    @@ForCheck:
      ManakaiDOM:ForClass

DOMDataTypeDef:
  @Name:  DOMUserData
  @For:
    ManakaiDOM:DOM3
  @AliasFor: any
  @Description:
    @@lang:en
    @@@: A reference to application data.

DOMDataTypeDef:
  @Name:  DOMObject
  @For:
    ManakaiDOM:DOM3
  @AliasFor: Object
  @Description:
    @@lang:en
    @@@: An object reference.

ResourceDef:
  @Name:
    @@@:  DOMImplementationRegistry
    @@For:
      !ManakaiDOM:ManakaiDOM
  @Name:
    @@@: ManakaiDOMImplementationRegistry
    @@For:
      ManakaiDOM:ManakaiDOM
  @rdf:type:
    ManakaiDOM:Class
  @ForCheck:
    ManakaiDOM:DOM3
  @ForCheck:
    !=ManakaiDOM:ManakaiDOM
  @ISA:
    @@@:
      ManakaiDOM:ManakaiDOMObject
    @@For:
      ManakaiDOM:ManakaiDOM

  @Description:
    @@lang:en
    @@@:
      A binding dependent bootstrap for <IF:DOMImplementation> objects.
  @Method:
    @@Name: newInstance
    @@Description:
      @@@lang:en
      @@@@:
        Construct a new instance of <IF:DOMImplementationRegistry> object.
        \
        The <IF:DOMImplementationRegistry> object 
        is initialized by DOM applications or the DOM implementation, 
        depenging on the context, by first checking the values of the 
        array <Perl:@org::w3c::dom::DOMImplementationSourceList>, 
        i.e. names of classes implementing the <IF:DOMImplementationSource> 
        interface.
    @@ImplNote;
      @@@lang:en
      @@@@:
        This method is taken from the normative Java binding.
      \
        Note that in this implementation, unlike the Java binding, 
        <IF:DOMImplementationSource> classes available are not 
        instantiated at this stage.
    @@Return:
      @@@Type: ManakaiDOMImplementationRegistry
      @@@Description:
        @@@@lang:en
        @@@@@:
          A new instance of the <IF:DOMImplementationRegistry>.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          $r = bless [@org::w3c::dom::DOMImplementationSourceList], $self;
    @@For:
      ManakaiDOM:ManakaiDOM
  @Method:
     @@Name:  getDOMImplementation
     @@Param:
        @@@Name:  features
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: A list of desired features that must be implemented.
     @@Return:
       @@@Type:  
         DOMCore:DOMImplementation
       @@@Description:
         @@@@lang:en
         @@@@@:
           The first implementation that has the derired features.
       @@@InCase:
         @@@@Value:
           @@@@@is-null:1
         @@@@Description:
           @@@@@lang:en
           @@@@@@: No implementation found.
       @@@Def:
         @@@@Type:
           lang:Perl
         @@@@@:
           __DEEP{
             for (@{ref $self ? $self
                              : @org::w3c::dom::DOMImplementationSourceList}) {
               $r = $_->getDOMImplementation ($features);
               last if defined $r;
             }
           }__;
  @Method:
     @@Name:  getDOMImplementationList
     @@Param:
        @@@Name:  features
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: A list of desired features that must be implemented.
     @@Return:
       @@@Type:  
         DOMCore:DOMImplementationList
       @@@actualType:
         @@@@: 
           ManakaiDOMCore:ManakaiDOMImplementationList
         @@@For:
           ManakaiDOM:ManakaiDOM
       @@@Description:
         @@@@lang:en
         @@@@@: A list of implementations that support the desired features.
       @@@PerlDef:
           __DEEP{
             $r = __CLASS{DOMImplementationList}__->__INT{new}__;
             for (@{ref $self ? $self
                              : @org::w3c::dom::DOMImplementationSourceList}) {
               $r->__INT{add}__ ($_->getDOMImplementationList ($features));
             }
           }__;
  @Method:
    @@Name: addSource
    @@Description:
      @@@lang:en
      @@@@:
        Adds a <IF:DOMImplementationSource> object to the list of 
        DOM implementation sources available.
    @@For:
      ManakaiDOM:ManakaiDOM
    @@ImplNote:
      @@@lang:en
      @@@@:
        This method has been taken from the normative Java binding of 
        DOM Level 3.
    @@Param:
      @@@Name: s
      @@@Type: 
        DOMCore:DOMImplementationSource
      @@@Description:
        @@@@lang:en
        @@@@@: 
          A <IF:DOMImplementationSource> object to be registered.
    @@Return:
      @@@Exception:
        @@@@Type:
          ManakaiDOM:ManakaiDOMImplementationException
        @@@@Name: PARAM_NULL_POINTER
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The parameter <P:list> is <DOM:null>.
      @@@PerlDef:
          unless (defined $s) {
            __EXCEPTION{ManakaiDOMImplementationException.PARAM_NULL_POINTER::
              <Q:MDOM_EXCEPTION:param-name> => 's',
            }__;
          }
          PUSH: {
            for (@$self) {
              last PUSH if overload::StrVal ($_) eq overload::StrVal ($s);
            }
            push @$self, $s;
          }
## IF:DOMImplementationRegistry

## DOMMain.dis ends here
