Namespace:
  @lang:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @DOM3Core:
     http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/
  @ManakaiDOMImplementationException:
     http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @MDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.
  @MDOM_EXCEPTION:
     http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
Module:
  @QName:
    MDOM:DOMMain
  @BindingName:
    @@@: dom
    @@prefix:  w3c.org
    @@ContentType:
      lang:IDL-DOM
    @@For:
      ManakaiDOM:IDL
  @BindingName:
    @@prefix:
      Message::DOM::
    @@ContentType:
      lang:Perl
    @@For:
      ManakaiDOM:ManakaiDOM
  @FullName:
    @@lang: en
    @@@: DOM Core DataTypes and Objects
  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2004/dom/main#
  
  @Description:
    @@lang:en
    @@@:
      This module implements IDL/DOM core datatypes (such as
      <TYPE:DOMString> and <TYPE:DOMTimestamp>) and objects (such as 
      <IF:DOMImplementationRegistry>).

  @Author:
    @@FullName: Wakaba
    @@Mail: w@suika.fam.cx
  @License:
     license:Perl+MPL
  @Date.RCS:
     $Date: 2004/11/07 07:22:16 $
  
  @Feature:
    @@QName:
      ManakaiDOM:DOMMain
    @@Version: 1.0
    @@Condition[list]:
      DOM1
      DOM2
      DOM3
    @@Description:
      @@@lang:en
      @@@@: The manakai DOM implementation DOMMain Module, Level 1.
    @@Contrib:
      DOMCore:DOMImplementation::DOM1
    @@Contrib:
      DOMCore:DOMImplementation::DOM2
    @@Contrib:
      DOMCore:DOMImplementation::DOM3
  @Feature:
    @@QName:
      ManakaiDOM:DOMMain
    @@Version: 2.0
    @@Condition[list]:
      DOM2
      DOM3
    @@Description:
      @@@lang:en
      @@@@: The manakai DOM implementation DOMMain Module, Level 2.
    @@Contrib:
      DOMCore:DOMImplementation::DOM2
    @@Contrib:
      DOMCore:DOMImplementation::DOM3
  @Feature:
    @@QName: 
      ManakaiDOM:DOMMain
    @@Version: 3.0
    @@Condition: DOM3
    @@Description:
      @@@lang:en
      @@@@: The manakai DOM implementation DOMMain Module, DOM Level 3.
    @@Contrib:
      DOMCore:DOMImplementation::DOM3
  
  @Require:
    @@BindingModule:
      @@@Def:
        @@@@require: overload
        @@@@Type:
          lang:Perl
      @@@Description:
        @@@@lang:en
        @@@@@: Perl operator overloading pragma.
    @@BindingModule:
      @@@Def:
        @@@@require: Encode
        @@@@Type: 
          lang:Perl
      @@@Description:
        @@@@lang:en
        @@@@@:
          The Perl modules to convert character encoding.
    @@Module:
      @@@Name: DOMCore
      @@@Description:
        @@@@lang:en
        @@@@@:
          The DOM Core module.  Note that <Module:DOMCore> module in turn
          requires this (<Module:DOMMain>) module.
  @DefaultFor:
    ManakaiDOM:ManakaiDOMLatest


## Definition for built-in IDL types

DataTypeDef:
  @Name: any
  @IName:any
  @Description:
    @@lang:en
    @@@: Any data.

DataTypeDef: 
  @Name: Object
  @IName:Object
  @Description:
    @@lang:en
    @@@: An object.

DataTypeDef:
  @Name: unsigned-long-long
  @IName:unsigned-long-long
  @Def:
    @@For:
      ManakaiDOM:IDL
    @@ContentType: 
      lang:IDL-DOM
    @@@: unsigned long long
  @FullName:
    @@lang:en
    @@@: Unsigned long long integer
  @Description:
    @@lang:en
    @@@: A unsigned long long integer.

DataTypeDef:
  @Name: unsigned-long
  @IName:unsigned-long
  @Def:
    @@For:
      ManakaiDOM:IDL
    @@ContentType: 
      lang:IDL-DOM
    @@@: unsigned long
  @FullName:
    @@lang:en
    @@@: Unsigned long integer
  @Description: 
    @@lang:en
    @@@: A unsigned long integer.

DataTypeDef:
  @Name: long
  @IName:long
  @FullName:
    @@lang:en
    @@@: Long integer
  @Description:
    @@lang:en
    @@@: A signed long integer.

DataTypeDef:
  @Name: unsigned-short
  @IName:unsigned-short
  @Def:
    @@For:
      ManakaiDOM:IDL
    @@ContentType: 
      lang:IDL-DOM
    @@@: unsigned short
  @FullName:
    @@lang:en
    @@@: Unsigned short integer
  @Description:
    @@lang:en
    @@@: An unsigned short integer.

DataTypeDef:
  @Name: float
  @IName:float
  @FullName:
    @@lang:en
    @@@: Floating point number
  @Description:
    @@lang:en
    @@@: A floating point number.

ClassDef:
  @Name: boolean
  @IName:boolean
  @Type:
    ManakaiDOM:ConstGroup
  @Description:
    @@lang:en
    @@@: A boolean (truth) value.
  @Const:
    @@Name: true
    @@Value:
      @@@@: 1
      @@@ContentType:
        lang:Perl
    @@Description:
      @@@lang:en
      @@@@: The boolean true value.
  @Const:
    @@Name: false
    @@Value:
      @@@@: 0
      @@@ContentType:
        lang:Perl
    @@Description:
      @@@lang:en
      @@@@: The boolean false value.

## Null value

Const:
  @Name: null
  @Type: any
  @Value:
    @@ContentType: 
      lang:Perl
    @@@: undef
  @Description:
    @@lang:en
    @@@:
       The null value.  Note that "null" is different from
       empty strings or zero numbers.

## Definition from DOM Core IDL

DataTypeDef:
  @Name:  DOMString
  @Def:
    @@For:
      ManakaiDOM:IDL
    @@ContentType:
      lang:IDL-DOM
    @@@: sequence<unsigned short>
  @Description:
    @@lang:en
    @@@: 
      A string.  It is used to store Unicode characters.
  @IntMethod:
    @@Name: new
    @@Description:
      @@@lang:en
      @@@@: Return a new instance of the "DOMString".
    @@Param:
      @@@Name: arg
      @@@Type: any
      @@@Description:
        @@@@lang:en
        @@@@@: The initial value of the "DOMString".
      @@@InCase:
        @@@@Value:
          @@@@@is-null:1
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The initial value is empty.
      @@@InCase:
        @@@@Type: DOMString
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The same "DOMString" is returned.  To copy "DOMString",
            use the internal method clone.
      @@@InCase:
        @@@@Label: reference to the scalar value
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The initial value is the scalar value referred.
    @@Return:
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: A new DOMString.
      @@@Def:
        @@@@Type: 
          lang:Perl
        @@@@cast-output: 0
        @@@@@:
          $arg = '' if not defined $arg;
          __CODE{DOMString: s => arg, r => r}__;
  @IntAttr:
    @@Name: value
    @@Description:
      @@@lang:en
      @@@@: The string as the language native value.
    @@Get:
      @@@Type: any
      @@@Def:
        @@@@Type: 
          lang:Perl
        @@@@@: $r = $self->{value};
      @@@Operator:
        @@@@Type:
          lang:Perl
        @@@@@: ""
    @@Set:
      @@@Type: any
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          if (ref $given and
              $given->isa ('__CLASS{DOMString}__')) {
            for ('value', <Q:ManakaiDOM:isFullyNormalized>) {
              $self->{$_} = $given->{$_};
            }
          } else {
            __INT{{initOnChange}}__;
            $self->{value} = ''.$given;
          }
  @IntAttr:
    @@Name: valueUTF16BE
    @@Description:
      @@@lang:en
      @@@@:
        The string represented in UTF-16BE encoding.
    @@Get:
      @@@Type: any
      @@@Def:
        @@@@Type: 
          lang:Perl
        @@@@@:
          $r = Encode::encode ('UTF-16BE', $self->{value});
    @@Set:
      @@@Type: any
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          __INT{{initOnChange}}__;
          $self->{value} = Encode::decode ('UTF-16BE', $given);
  @Attr:
    @@Name: length
    @@Description:
      @@@lang:en
      @@@@:
        The number of 16-bit units (i.e. the number of octets
        in the UTF-16BE representation of the string).
        \
        This attribute is taken from the DOM CharacterData interface
        and ECMAScript String object.
    @@Get:
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The number of 16-bit units.
      @@@InCase:
        @@@@Value: 0
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The DOMString is empty.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          $r = CORE::length $self->{value};
          while ($self->{value} =~ /[\x{10000}-\x{10FFFF}]/g) {
            $r++;
          }
  @IntMethod:
    @@Name: append
    @@Description:
      @@@lang:en
      @@@@:
        Append the string to the end of the DOMString.
      \
        This method is taken from the method appendData in the
        DOM interface CharacterData.
    @@Operator:
      @@@@: .=
      @@@Type: 
        lang:Perl
    @@Param:
      @@@Name: arg
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: The DOMString to append.
    @@Return:
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@cast-input: 0
        @@@@@:
          __INT{{initOnChange}}__;
          $self->{value} .= $arg;
  @IntMethod:
    @@Name: setCurrentPosition
    @@Description:
      @@@lang:en
      @@@@:
        Set current position in the DOMString.
    @@Param:
      @@@Name: offset
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@:
          The offset of 16-bit units to which current position is set.
        \
          The value of this parameter MUST NOT be a negative number and
          MUST NOT be greater than the number of 16-bit units,
          otherwise the result is undefined.
    @@Return:
      @@@Exception:
        @@@@Type: 
          ManakaiDOM:ManakaiDOMImplementationException
        @@@@Name: MDOM_INDEX_IN_SURROGATE_PAIR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            An attempt is made to break surrogate pair.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          use integer;
          pos ($self->{value}) = 0;
          while ($offset and pos $self->{value} <= CORE::length $self->{value}) {
            if ($self->{value} =~ /[^\x{10000}-\x{10FFFF}]{1,$offset}/gc) {
              $offset -= $+[0] - $-[0];
            } elsif ($self->{value}
                               =~ m{[\x{10000}-\x{10FFFF}]{1,$offset/2}}gc) {
              $offset -= 2 * ($+[0] - $-[0]);
              if ($offset < 0) {
                __EXCEPTION{
                  ManakaiDOMImplementationException.
                    MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR::
                  <Q:ManakaiDOMImplementationException:param-name>
                    => 'offset',
                }__;
              }
            } else {
              __EXCEPTION{
                ManakaiDOMImplementationException.MDOM_DEBUG_BUG::
                <Q:ManakaiDOMImplementationException:values> => {
                  count => $offset,
                  position => 1,
                },
              }__;
            }                
          }
  @IntMethod:
    @@Name: delete
    @@Description:
      @@@lang:en
      @@@@:
        Remove a range of 16-bit units from the DOMString.
      \
        This method is taken from the method deleteData in
        the DOM interface CharacterData.
    @@Param:
      @@@Name: offset
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The offset from which to start removing.
    @@Param:
      @@@Name: count
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@:
          The number of 16-bit units to delete.  If the sum of the
          parameters offset and count exceeds the length of the
          DOMString then all 16-bit units from offset to the end
          of the DOMString are deleted.
    @@Return:
      @@@Exception:
        @@@@Type: DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified "offset" is negative or greater than
            the number of 16-bit units in the DOMString, or the specified
            "count" is negative.
      @@@Exception:
        @@@@Type: 
          ManakaiDOM:ManakaiDOMImplementationException
        @@@@Name: MDOM_INDEX_IN_SURROGATE_PAIR
        @@@@Description:
          @@@@@lang:en
          @@@@@@: 
            An attempt is made to break surrogate pair.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          __DEEP{
            $self->__INT{replace}__ ($offset, $count, '');
          }__;
  @IntMethod:
    @@Name: insert
    @@Description:
      @@@lang:en
      @@@@:
        Insert a string at the specified 16-bit unit offset.
      \
        This method is taken from the method insertData in
        the DOM interface CharacterData.
    @@Param:
      @@@Name: offset
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The offset from which to insert.
    @@Param:
      @@@Name: arg
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: The DOMString to insert.
    @@Return:
      @@@Exception:
        @@@@Type: DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified "offset" is negative or greater than
            the number of 16-bit units in the DOMString.
      @@@Exception:
        @@@@Type: 
          ManakaiDOM:ManakaiDOMImplementationException
        @@@@Name: MDOM_INDEX_IN_SURROGATE_PAIR
        @@@@Description:
          @@@@@lang:en
          @@@@@@: An attempt is made to break surrogate pair.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@cast-input: 0
        @@@@@:
          if ($offset < 0 or $offset > CORE::length $self->{value} or
              $offset > $self->length) {
            __EXCEPTION{DOMException.INDEX_SIZE_ERR::
              <Q:ManakaiDOMImplementationException:param-name> => 'offset',
            }__;
          }
          __INT__;
      @@@IntDef:
        @@@@Type:
          lang:Perl
        @@@@@:
          __INT{{initOnChange}}__;
          unless ($self->{value} =~ /[\x{10000}-\x{10FFFF}]/) {
            substr ($self->{value}, $offset, 0) = $arg;
          } else {
            unless (substr ($self->{value}, 0, $offset)
                                 =~ /[\x{10000}-\x{10FFFF}]/) {
              substr ($self->{value}, $offset, 0) = $arg;
            } else { # Non-BMP chars before $offset
              __DEEP{
                $self->__INT{setCurrentPosition}__ ($offset);
              }__;
              substr ($self->{value}, pos $self->{value}, 0) = $arg;
            }
          }
  @IntMethod:
    @@Name: replace
    @@Description:
      @@@lang:en
      @@@@:
        Replace a range of 16-bit units with the specified string.
      \
        This method is taken from the method replaceData in
        the DOM interface CharacterData.
    @@Param:
      @@@Name: offset
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The offset from which to start replacing.
    @@Param:
      @@@Name: count
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@:
          The number of 16-bit units to replace.  If the sum of the
          parameters offset and count exceeds the length of the
          DOMString then all 16-bit units from offset to the end
          of the DOMString are replaced.
    @@Param:
      @@@Name: arg
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: The DOMString with which the range is replaced.
    @@Return:
      @@@Exception:
        @@@@Type: DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified "offset" is negative or greater than
            the number of 16-bit units in the DOMString, or the specified
            "count" is negative.
      @@@Exception:
        @@@@Type: 
          ManakaiDOM:ManakaiDOMImplementationException
        @@@@Name: MDOM_INDEX_IN_SURROGATE_PAIR
        @@@@Description:
          @@@@@lang:en
          @@@@@@: An attempt is made to break surrogate pair.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@cast-input: 0
        @@@@@:
          if ($offset < 0 or $offset > CORE::length $self->{value} or
              $offset > $self->length) {
            __EXCEPTION{DOMException.INDEX_SIZE_ERR::
              <Q:ManakaiDOMImplementationException:param-name> => 'offset',
            }__;
          }
          if ($count < 0) {
            __EXCEPTION{DOMException.INDEX_SIZE_ERR::
              <Q:ManakaiDOMImplementationException:param-name> => 'count',
            }__;
          }
          __INT__;
      @@@IntDef:
        @@@@Type:
          lang:Perl
        @@@@@:
          __INT{{initOnChange}}__;
        REPLACE: {
          unless ($self->{value} =~ /[\x{10000}-\x{10FFFF}]/) {
            substr ($self->{value}, $offset, $count) = $arg;
            last REPLACE;
          } else {
            unless (substr ($self->{value}, 0, $offset)
                                 =~ /[\x{10000}-\x{10FFFF}]/) {
              unless (substr ($self->{value}, $offset, $count)
                                 =~ /[\x{10000}-\x{10FFFF}]/) {
                substr ($self->{value}, $offset, $count) = $arg;
                last REPLACE;
              } elsif (CORE::length $self->{value} < $offset + $count) {
                substr ($self->{value}, $offset) = $arg;
                last REPLACE;
              } else {
                pos ($self->{value}) = $offset;
              }
            } else { # Non-BMP chars before $offset
              __DEEP{
                $self->__INT{setCurrentPosition}__ ($offset);
              }__;
            }
          }
          use integer;
          my $s = substr ($self->{value}, pos $self->{value});
          while ($count) {
            if ($s =~ s/[^\x{10000}-\x{10FFFF}]{1,$count}//) {
              $count -= $+[0] - $-[0];
            } elsif ($s =~ s{[\x{10000}-\x{10FFFF}]{1,$count/2}}{}) {
              $count -= 2 * ($+[0] - $-[0]);
              if ($count < 0) {
                __EXCEPTION{
                  ManakaiDOMImplementationException.
                          MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR::
                  <Q:ManakaiDOMImplementationException:param-name>
                          => 'count',
                }__;
              }
            } else {
              __EXCEPTION{
                ManakaiDOMImplementationException.MDOM_DEBUG_BUG::
                <Q:ManakaiDOMImplementationException:values> => {
                        count => $count,
                        position => 1,
                },
              }__;
            }
           }
           substr ($self->{value}, pos $self->{value}) = $arg . $s;
        } # REPLACE
  @IntMethod:
    @@Name: substring
    @@Description:
      @@@lang:en
      @@@@:
        Extract a range of 16-bit units.
      \
        This method is taken from the method substringData in
        the DOM interface CharacterData.
    @@Param:
      @@@Name: offset
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The offset from which to start extract.
    @@Param:
      @@@Name: count
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@:
          The number of 16-bit units to extract.  If the sum of the
          parameters offset and count exceeds the length of the
          DOMString then all 16-bit units from offset to the end
          of the DOMString are returned.
    @@Return:
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: The specified substring.
      @@@Exception:
        @@@@Type: DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified "offset" is negative or greater than
            the number of 16-bit units in the DOMString, or the specified
            "count" is negative.
      @@@Exception:
        @@@@Type: DOMException
        @@@@Name: DOMSTRING_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The specified range does not fit into a DOMString.
      @@@Exception:
        @@@@Type: 
          ManakaiDOM:ManakaiDOMImplementationException
        @@@@Name: MDOM_INDEX_IN_SURROGATE_PAIR
        @@@@Description:
          @@@@@lang:en
          @@@@@@: An attempt is made to break surrogate pair.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          if ($offset < 0 or $offset > CORE::length $self->{value} or
              $offset > $self->length) {
            __EXCEPTION{DOMException.INDEX_SIZE_ERR::
              <Q:ManakaiDOMImplementationException:param-name> => 'offset',
            }__;
          }
          if ($count < 0) {
            __EXCEPTION{DOMException.INDEX_SIZE_ERR::
              <Q:ManakaiDOMImplementationException:param-name> => 'count',
            }__;
          }
          __INT__;
      @@@IntDef:
        @@@@Type:
          lang:Perl
        @@@@@:
        SUBSTR: {
          unless ($self->{value} =~ /[\x{10000}-\x{10FFFF}]/) {
            $r = substr ($self->{value}, $offset, $count);
            last SUBSTR;
          } else {
            unless (substr ($self->{value}, 0, $offset)
                                 =~ /[\x{10000}-\x{10FFFF}]/) {
              unless (substr ($self->{value}, $offset, $count)
                                 =~ /[\x{10000}-\x{10FFFF}]/) {
                $r = substr ($self->{value}, $offset, $count);
                last SUBSTR;
              } elsif (CORE::length $self->{value} < $offset + $count) {
                $r = substr ($self->{value}, $offset);
                last SUBSTR;
              } else {
                pos ($self->{value}) = $offset;
              }
            } else { # Non-BMP chars before $offset
              __DEEP{
                $self->__INT{setCurrentPosition}__ ($offset);
              }__;
            }
          }
          my $start = pos $self->{value};
          __DEEP{
            $self->__INT{setCurrentPosition}__ ($offset + $count);
          }__;
          $r = substr $self->{value}, $start, pos ($self->{value}) - $start;
        } # SUBSTR
  @IntAttr:
    @@Name: isFullyNormalized
    @@Description:
      @@@lang:en
      @@@@:
        In DOM 3, characters are fully normalized as defined in appendix B 
        of the XML 1.1 specification if (a) the parameter 
        "normalize-characters" was set to "true" while loading the document 
        or the document was certified as defined in XML 1.1 specification or 
        (b) the parameter "normalize-characters" was set to "true" while 
        using the method "normalizeDocument" of the "Document" interface or 
        while using the method "normalize" of the "Node" interface.
      \
        This attribute provides the information whether the string is 
        certified as fully normalized.  Getting of this attribute does 
        not test whether the string is actually normalized nor does 
        do the normalization.
    @@Get:
      @@@Type: boolean
      @@@InCase:
        @@@@Value: true
        @@@@Type: boolean
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The string was certified as fully normalized.
      @@@InCase:
        @@@@Value: false
        @@@@Type: boolean
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The string is not known to be certified as fully normalized.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          $r = $self->{<Q:ManakaiDOM:isFullyNormalized>} ? true : false;
  @IntMethod:
    @@Name: compare
    @@Operator:
      @@@@: eq
      @@@Type: 
        lang:Perl
    @@Description:
      @@@lang:en
      @@@@: The string comparison.
    @@Param:
      @@@Name: str
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: The string to be compared.
    @@Param:
      @@@Name: caseInsensitive
      @@@Type: boolean
      @@@Description:
        @@@@lang:en
        @@@@@: The case-sentitivility of the match.
      @@@InCase:
        @@@@Value: true
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The match is done as case-insensitive.
      @@@InCase:
        @@@@Value: false
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The match is done as case-sensitive.
      @@@IsOptional: 1
    @@Return:
      @@@Type: boolean
      @@@Description:
        @@@@lang:en
        @@@@@: Whether the string is fully normalized or not.
      @@@InCase:
        @@@@Value: true
        @@@@Type: boolean
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The string is fully normalized.
      @@@InCase:
        @@@@Value: true
        @@@@Type: boolean
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The string is fully normalized.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@cast-input: 0
        @@@@@:
          if (UNIVERSAL::isa ($str, '__IIF{DOMString}__')) {
            $str = $str->{value};
          }
          if ($caseInsensitive) {
            $r = lc ($str) eq lc ($self->{value});
          } else {
            $r = $str eq $self->{value};
          }
  @IntMethod:
    @@Name: initOnChange
    @@Description:
      @@@lang:en
      @@@@: Discade caches when the value has been changed.
    @@Return:
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          delete $self->{<Q:ManakaiDOM:isFullyNormalized>};
  @Method:
    @@Name: findOffset16
    @@Description:
      @@@lang:en
      @@@@: 
        Return the UTF-16 offset that corresponding to a UTF-32 offset.
        Unmatched surrogates count as a single UTF-16 value.
      \
        This method is taken from the "StringExtend" informative interface.
    @@SpecLevel: 3
    @@Param:
      @@@Name: offset32
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The UTF-32 offset.
    @@Return:
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The UTF-16 offset.
      @@@Exception:
        @@@@Type: DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified "offset32" is negative or greater than
            the number of characters (UTF-32 32-bit code units).
      @@@DefaultValue:
        @@@@Type: 
          lang:Perl
        @@@@@: $offset32
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          if (not defined $offset32 or $offset32 < 0 or
              CORE::length ($self->{value}) < $offset32) {
            __EXCEPTION{DOMException.INDEX_SIZE_ERR::
              <Q:MDOM_EXCEPTION:param-name> => 'offset32',
            }__;
          }
          my $ss = substr $self->{value}, 0, $offset32;
          if ($ss =~ /[\x{10000}-\x{10FFFF}]/) {
            while ($ss =~ /[\x{10000}-\x{10FFFF}]+/g) {
              $r += $+[0] - $-[0];
            }
          }
  @Method:
    @@Name: findOffset32
    @@Description:
      @@@lang:en
      @@@@:
        Return the UTF-32 offset corresponding to a UTF-16 offset.
        Unmatched surrogates count as a single UTF-16 value.
      \
        This method is taken from the "StringExtend" informative interface.
    @@SpecLevel: 3
    @@Param:
      @@@Name: offset16
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The UTF-16 offset.
    @@Return:
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@:
          The UTF-32 offset.  If the "offset16" is into the middle of a 
          surrogate pair, the UTF-32 offset of the end of the pair is 
          returned.
      @@@Exception:
        @@@@Type: DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified "offset32" is negative or greater than
            the number of characters (UTF-32 32-bit code units).
      @@@DefaultValue:
        @@@@Type:
          lang:Perl
        @@@@@: $offset16
      @@@Def:
         @@@@ImplNote:
           @@@@@lang:en
           @@@@@@: "Current position" of the value is changed. 
        @@@@Type:
          lang:Perl
        @@@@@:
          if (not defined $offset16 or $offset16 < 0 or
              CORE::length ($self->{value}) * 2 < $offset16) {
            __EXCEPTION{DOMException.INDEX_SIZE_ERR::
              <Q:MDOM_EXCEPTION:param-name> => 'offset16',
            }__;
          }
          pos ($self->{value}) = 0;
          use integer;
          while ($offset16 and
                 pos $self->{value} <= CORE::length $self->{value}) {
            if ($self->{value} =~ /[^\x{10000}-\x{10FFFF}]{1,$offset16}/gc) {
              $offset16 -= $+[0] - $-[0];
            } elsif ($self->{value}
                               =~ m{[\x{10000}-\x{10FFFF}]{1,$offset16/2}}gc) {
              $offset16 -= 2 * ($+[0] - $-[0]);
              last if $offset16 < 0;
            } else {
              __EXCEPTION{
                ManakaiDOMImplementationException.MDOM_DEBUG_BUG::
                <Q:ManakaiDOMImplementationException:values> => {
                  count => $offset16,
                  position => 1,
                },
              }__;
            }
          }
          if ($offset16 > 0) {
            __EXCEPTION{DOMException.INDEX_SIZE_ERR::
              <Q:MDOM_EXCEPTION:param-name> => 'offset16',
            }__;
          }
          $r = pos ($self->{value});
## DataType:DOMString

DataTypeDef:
  @Name:  DOMTimeStamp
  @For:
    ManakaiDOM:DOM2
  @Description:
    @@lang:en
    @@@: An absolute or relative time.  A number of milliseconds.
  @AliasOf:
    @@For:
      *
    @@@: unsigned-long-long

DataTypeDef:
  @Name:  DOMUserData
  @IName: DOMUserData
  @For:
    ManakaiDOM:DOM3
  @AliasOf:
    @@For:
      *
    @@@: any

  @Description:
    @@lang:en
    @@@: A reference to application data.

DataTypeDef:
  @Name:  DOMObject
  @IName: DOMObject
  @For:
    ManakaiDOM:DOM3
  @AliasOf: Object

  @Description:
    @@lang:en
    @@@: An object reference.

ClassDef:
  @Name:  DOMImplementationRegistry
  @Type:
    ManakaiDOM:Class
  @For:
    ManakaiDOM:DOM3
  @ISA:
    @@@:
      ManakaiDOM:ManakaiDOMObject
    @@For:
      ManakaiDOM:ManakaiDOM

  @Description:
    @@lang:en
    @@@:
      A binding dependent bootstrap for <IF:DOMImplementation> objects.
  @Method:
    @@Name: newInstance
    @@Description:
      @@@lang:en
      @@@@:
        Construct a new instance of <IF:DOMImplementationRegistry> object.
        \
        The <IF:DOMImplementationRegistry> object 
        is initialized by DOM applications or the DOM implementation, 
        depenging on the context, by first checking the values of the 
        array <Perl:@org::w3c::dom::DOMImplementationSourceList>, 
        i.e. names of classes implementing the <IF:DOMImplementationSource> 
        interface.
    @@ImplNote;
      @@@lang:en
      @@@@:
        This method is taken from the normative Java binding.
      \
        Note that in this implementation, unlike the Java binding, 
        <IF:DOMImplementationSource> classes available are not 
        instantiated at this stage.
    @@Return:
      @@@Type: DOMImplementationRegistry
      @@@Description:
        @@@@lang:en
        @@@@@:
          A new instance of the <IF:DOMImplementationRegistry>.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          $r = bless [@org::w3c::dom::DOMImplementationSourceList], $self;
  @Method:
     @@Name:  getDOMImplementation
     @@Param:
        @@@Name:  features
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: A list of desired features that must be implemented.
     @@Return:
       @@@Type:  DOMImplementation
       @@@Description:
         @@@@lang:en
         @@@@@:
           The first implementation that has the derired features.
       @@@InCase:
         @@@@Value:
           @@@@@is-null:1
         @@@@Description:
           @@@@@lang:en
           @@@@@@: No implementation found.
       @@@Def:
         @@@@Type:
           lang:Perl
         @@@@@:
           __DEEP{
             for (@{ref $self ? $self
                              : @org::w3c::dom::DOMImplementationSourceList}) {
               $r = $_->getDOMImplementation ($features);
               last if defined $r;
             }
           }__;
  @Method:
     @@Name:  getDOMImplementationList
     @@Param:
        @@@Name:  features
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: A list of desired features that must be implemented.
     @@Return:
       @@@Type:  DOMImplementationList
       @@@Description:
         @@@@lang:en
         @@@@@: A list of implementations that support the desired features.
       @@@Def:
         @@@@Type:
           lang:Perl
         @@@@@:
           __DEEP{
             $r = __CLASS{DOMImplementationList}__->__INT{new}__;
             for (@{ref $self ? $self
                              : @org::w3c::dom::DOMImplementationSourceList}) {
               $r->__INT{add}__ ($_->getDOMImplementationList ($features));
             }
           }__;
  @Method:
    @@Name: addSource
    @@Description:
      @@@lang:en
      @@@@:
        Add a <IF:DOMImplementationSource> object to the list.
    @@ImplNote:
      @@@lang:en
      @@@@:
        This method is taken from the normative Java binding.
    @@Param:
      @@@Name: s
      @@@Type: DOMImplementationSource
      @@@Description:
        @@@@lang:en
        @@@@@: 
          A <IF:DOMImplementationSource> object to be registered.
    @@Return:
      @@@Exception:
        @@@@Type:
          ManakaiDOM:ManakaiDOMImplementationException
        @@@@Name: PARAM_NULL_POINTER
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The parameter <P:list> is <DOM:null>.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          unless (defined $s) {
            __EXCEPTION{ManakaiDOMImplementationException.PARAM_NULL_POINTER::
              <Q:ManakaiDOMImplementationException:param-name> => 's',
            }__;
          }
          PUSH: {
            for (@$self) {
              last PUSH if overload::StrVal ($_) eq overload::StrVal ($s);
            }
            push @$self, $s;
          }
## IF:DOMImplementationRegistry

## DOMMain.dis ends here
