Module:
  @QName:
    MDOM:DOMMain
  @AppName:
    @@@: dom
    @@prefix:  w3c.org
    @@ContentType:
      lang:IDL-DOM
    @@For:
      ManakaiDOM:IDL
  @FullName:
    @@lang: en
    @@@: DOM Core DataTypes and Objects
  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2004/dom/main#
  
  @Description:
    @@lang:en
    @@@:
      The <Module:DOMMain> manakai DOM module defines fundemental 
      IDL/DOM data types (e.g. <CODE:unsigned long>, <TYPE:DOMString>) 
      and implements the <IF:DOMImplementationRegistry> object.

  @Author:
    @@FullName: Wakaba
    @@Mail: w@suika.fam.cx
  @License:
     license:Perl+MPL
  @Date:
    @@@:
      $Date: 2004/12/26 09:24:37 $
    @@ContentType:
      dis:Date.RCS
  
  @Require:
    @@Module:
      @@@Name: DISCore
    @@Module:
      @@@Name: DISPerl
    @@Module:
      @@@Name: DOMMain
      @@@WithFor:
        ManakaiDOM:ManakaiDOMCommon
    @@Module:
      @@@Name: DOMMain
      @@@WithFor:
        ManakaiDOM:ManakaiDOMLatest
    @@AppModule:
      @@@For:
        ManakaiDOM:ManakaiDOM
      @@@Def:
        @@@@require: Encode
        @@@@ContentType: 
          dis:Perl
      @@@Description:
        @@@@lang:en
        @@@@@:
          The Perl module set to convert character encodings.
    @@Module:
      @@@Name: DOMCore
      @@@Description:
        @@@@lang:en
        @@@@@:
          The DOM Core module.  Note that <Module:DOMCore> module in turn
          requires this (<Module:DOMMain>) module.
      @@@For: 
        !=ManakaiDOM:ManakaiDOMCommon
  @DefaultFor:
    ManakaiDOM:ManakaiDOMLatest

Namespace:
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @dis2pm:
    http://suika.fam.cx/~wakaba/archive/2004/11/8/dis2pm#
  @DOMMain:
    http://suika.fam.cx/~wakaba/archive/2004/dom/main#
  @infoset:
    http://www.w3.org/2001/04/infoset#
  @lang:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @MDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.
  @MDOMX:
    http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @MUError:\
  @MUErrorCore:-
  @owl:
    http://www.w3.org/2002/07/owl#
  @perl:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#Perl--
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#
  @TreeCore:\
  @xml:
    http://www.w3.org/XML/1998/namespace
  @xmlns:
    http://www.w3.org/2000/xmlns/

ResourceDef:
  @QName:
    MDOM:
  @rdf:type:
    dis:ModuleGroup
  @FullName:
    @@lang:en
    @@@:
      The manakai DOM modules
  @AppName:
    @@@:
      Message::DOM::IFLatest::
    @@ContentType:
      lang:Perl
    @@For:
      ManakaiDOM:ManakaiDOMLatest
    @@ForCheck:
      ManakaiDOM:ForIF
  @AppName:
    @@@:
      Message::DOM::IFLevel3::
    @@ContentType:
      lang:Perl
    @@For:
      ManakaiDOM:ManakaiDOM3
    @@ForCheck:
      ManakaiDOM:ForIF
  @AppName:
    @@@:
      Message::DOM::IFLevel2::
    @@ContentType:
      lang:Perl
    @@For:
      ManakaiDOM:ManakaiDOM2
    @@ForCheck:
      ManakaiDOM:ForIF
  @AppName:
    @@@:
      Message::DOM::IFLevel1::
    @@ContentType:
      lang:Perl
    @@For:
      ManakaiDOM:ManakaiDOM1
    @@ForCheck:
      ManakaiDOM:ForIF
  @AppName:
    @@@:
      Message::DOM::IF::
    @@ContentType:
      lang:Perl
    @@For:
      ManakaiDOM:ManakaiDOM
    @@ForCheck:
      ManakaiDOM:ForIF
  @AppName:
    @@@:
      Message::DOM::
    @@For:
      ManakaiDOM:ManakaiDOMLatest
  @AppName:
    @@@:
      Message::DOM::
    @@ManakaiDOM:moduleSuffix: Level3
    @@For: 
      ManakaiDOM:ManakaiDOM3
  @AppName:
    @@@:
      Message::DOM::
    @@ManakaiDOM:moduleSuffix: Level2
    @@For: 
      ManakaiDOM:ManakaiDOM2
  @AppName:
    @@@:
      Message::DOM::
    @@ManakaiDOM:moduleSuffix: Level1
    @@For: 
      ManakaiDOM:ManakaiDOM1
  @AppName:
    @@@:
      Message::DOM::
    @@For:
      ManakaiDOM:ManakaiDOMCommon

## -- "For" definitions

## For a language

ForDef:
  @QName:
    ManakaiDOM:IDL
  @FullName:
    @@lang:en
    @@@: For DOM IDL definition
ForDef:
  @QName:
    ManakaiDOM:Perl
  @FullName:
    @@lang:en
    @@@: For Perl 5 binding
ForDef:
  @QName:
    ManakaiDOM:Java
  @FullName:
    @@lang:en
    @@@: For Java binding

## For the Document Object Model

ForDef:
  @QName:
    ManakaiDOM:DOM
  @FullName:
    @@lang:en
    @@@: For DOM
ForDef:
  @QName:
    ManakaiDOM:DOM1
  @FullName:
    @@lang:en
    @@@: For DOM Level 1
  @ISA:
    ManakaiDOM:DOM
ForDef:
  @QName:
    ManakaiDOM:DOM2
  @FullName:
    @@lang:en
    @@@: For DOM Level 2
  @ISA:
    ManakaiDOM:DOM1
ForDef:
  @QName:
    ManakaiDOM:DOM3
  @FullName:
    @@lang:en
    @@@: For DOM Level 3
  @ISA:
    ManakaiDOM:DOM2
ForDef:
  @QName:
    ManakaiDOM:DOMLatest
  @FullName:
    @@lang:en
    @@@: For the latest level of DOM
  @ISA:
    ManakaiDOM:DOM3

ForDef:
  @QName: 
    ManakaiDOM:DOMHTMLFeature
  @FullName:
    @@lang:en
    @@@: For DOM HTML feature, any version
  @ISA:
    ManakaiDOM:DOM

ForDef:
  @QName: 
    ManakaiDOM:DOMXMLFeature
  @FullName:
    @@lang:en
    @@@: For DOM XML feature, any version
  @ISA:
    ManakaiDOM:DOM

## For the manakai DOM implementation

ForDef:
  @QName:
    ManakaiDOM:ManakaiDOM
  @FullName:
    @@lang:en
    @@@: For the manakai DOM implementation
  @Implement:
    ManakaiDOM:DOM
  @ISA:
    ManakaiDOM:Perl
ForDef:
  @QName:
    ManakaiDOM:ManakaiDOM1
  @FullName:
    @@lang:en
    @@@: For the manakai DOM Level 1 implementation
  @Implement:
    ManakaiDOM:DOM1
  @Implement: 
    ManakaiDOM:DOMXMLFeature
  @Implement: 
    ManakaiDOM:DOMHTMLFeature
  @ISA:
    ManakaiDOM:ManakaiDOM
ForDef:
  @QName:
    ManakaiDOM:ManakaiDOM2
  @FullName:
    @@lang:en
    @@@: For the manakai DOM Level 2 implementation
  @Implement:
    ManakaiDOM:DOM2
  @ISA:
    ManakaiDOM:ManakaiDOM1
ForDef:
  @QName:
    ManakaiDOM:ManakaiDOM3
  @FullName:
    @@lang:en
    @@@: For the manakai DOM Level 3 implementation
  @Implement:
    ManakaiDOM:DOM3
  @ISA:
    ManakaiDOM:ManakaiDOM2
ForDef:
  @QName:
    ManakaiDOM:ManakaiDOMLatest
  @FullName:
    @@lang:en
    @@@: For the manakai implementation of the latest level of DOM
  @Implement:
    ManakaiDOM:DOMLatest
  @ISA:
    ManakaiDOM:ManakaiDOM3
ForDef:
  @QName:
    ManakaiDOM:ManakaiDOMCommon
  @FullName:
    @@lang:en
    @@@: For the manakai implementation of DOM, level/feature independent
  @Implement:
    ManakaiDOM:DOM
  @ISA:
    ManakaiDOM:ManakaiDOM

## "For" for "multiple resource" definition

ForDef:
  @QName:
    ManakaiDOM:ForIF
  @FullName:
    @@lang:en
    @@@: For an interface definition
ForDef:
  @QName:
    ManakaiDOM:ForClass
  @FullName:
    @@lang:en
    @@@: For a class definition

## -- Abstract programming language "object" types

ElementTypeBinding:
  @Name: ResourceTypeDef
  @ElementType: 
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      rdfs:Class
    @@ISA:
      rdfs:Class

ElementTypeBinding:
  @Name: PropDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      rdfs:Property

ElementTypeBinding:
  @Name: TreeElementType
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:TreeElementType
    @@AliasFor:
      @@@:
        ::ManakaiDOM:all
      @@@For:
        !=ManakaiDOM:all

ResourceTypeDef:
  @QName: 
    ManakaiDOM:IF
  @FullName:
    @@lang:en
    @@@: Interface
  @Description:
    @@lang:en
    @@@:
      An programming interface.

ResourceTypeDef:
  @QName: 
    ManakaiDOM:Class
  @FullName:
    @@lang:en
    @@@: Class
  @Description:
    @@lang:en
    @@@:
      A programming language class.
ElementTypeBinding:
  @Name: ClassDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:Class
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:ManakaiDOMCommon
      @@@For:
        ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOMCommon

ResourceTypeDef:
  @QName: 
    ManakaiDOM:PrimitiveTypeClass
  @Description:
    @@lang:en
    @@@:
      A programing language primitive type class (aka wrapper class). 
      \
      <Q:PrimitiveTypeClass> may or may not have its instance object; 
      it is typically accessed via class method, not via object method.
  @ISA: 
    ManakaiDOM:Class

ResourceTypeDef:
  @QName: 
    ManakaiDOM:ExceptionIF
  @FullName:
    @@lang:en
    @@@: Exception interface
  @Description:
    @@lang:en
    @@@:
      An exception type.

ResourceTypeDef:
  @QName: 
    ManakaiDOM:ExceptionClass
  @FullName:
    @@lang:en
    @@@: Exception class
  @Description:
    @@lang:en
    @@@:
      A concrete implementation of an exception type.
ElementTypeBinding:
  @Name: ExceptionDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:ExceptionClass
    @@ISA: 
      ManakaiDOM:ManakaiDOMException
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:ManakaiDOMCommon
      @@@For:
        ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOMCommon

ResourceTypeDef:
  @QName: 
    ManakaiDOM:WarningClass
  @FullName:
    @@lang:en
    @@@: Warning class
  @Description:
    @@lang:en
    @@@:
      A warning type (including its implementation).
ElementTypeBinding:
  @Name: WarningDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:WarningClass
    @@ISA: 
      ManakaiDOM:ManakaiDOMWarning
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:ManakaiDOMCommon
      @@@For:
        ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOMCommon

ResourceTypeDef:
  @QName: 
    ManakaiDOM:ExceptionOrWarningSubType
  @FullName:
    @@lang:en
    @@@: Exception/warning subtype
  @Description:
    @@lang:en
    @@@:
      A subtype of an exception or warning.
ElementTypeBinding:
  @Name: SubTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:ExceptionOrWarningSubType
    @@ForCheck:
      ManakaiDOM:ManakaiDOM
    @@aliasChild:1
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:ManakaiDOMCommon
      @@@For:
        !=ManakaiDOM:ManakaiDOMCommon

PropDef:
  @QName: 
    ManakaiDOM:exceptionOrWarningParameter
  @FullName:
    @@lang:en
    @@@: Parameter (for an exception or warning)
  @rdfs:domain: 
    ManakaiDOM:Const
  @Description:
    @@lang:en
    @@@:
      Declares the existence of an additional information about the exception.
ElementTypeBinding:
  @Name: XParam
  @ElementType:
    ManakaiDOM:exceptionOrWarningParameter
  @ShadowContent:
    @@ForCheck:
      ManakaiDOM:ManakaiDOM

ResourceTypeDef:
  @QName: 
    ManakaiDOM:ConstGroup
  @FullName:
    @@lang:en
    @@@: Constant group
  @Description:
    @@lang:en
    @@@:
      A set of constant values.

ResourceTypeDef:
  @QName: 
    ManakaiDOM:Const
  @FullName:
    @@lang:en
    @@@: Constant value
  @Description:
    @@lang:en
    @@@: A constant value.
ElementTypeBinding:
  @Name: Const
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: 
      ManakaiDOM:Const
ElementTypeBinding:
  @Name: XConst
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: 
      ManakaiDOM:Const
    @@aliasChild: 1
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:ManakaiDOMCommon
      @@@For:
        !=ManakaiDOM:ManakaiDOMCommon

PropDef:
  @QName: 
    dis:IsBitMask
  @dataType:
    DOMMain:boolean
  @Description:
    @@lang:en
    @@@:
      Whether the constant group is defined as bitmask values or not.

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMAttribute
  @FullName:
    @@lang:en
    @@@: DOM attribute
  @Description:
    @@lang:en
    @@@: A DOM attribute.
ElementTypeBinding:
  @Name: Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttribute
    @@ForCheck:
      ManakaiDOM:DOM
ElementTypeBinding:
  @Name: IntClsAttr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttribute
    @@ForCheck:
      ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isForInternal: 1
    @@ForCheck:
      ManakaiDOM:ForClass

ResourceTypeDef:
  @QName: 
    ManakaiDOM:DOMAttrGet
  @Description:
    @@lang:en
    @@@: A DOM attribute getter.
ElementTypeBinding:
  @Name: Get
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttrGet

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMAttrSet
  @Description:
    @@lang:en
    @@@: A DOM attribute setter.
ElementTypeBinding:
  @Name: Set
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttrSet

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMMethod
  @Description:
    @@lang:en
    @@@: A DOM method.
ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:DOM
ElementTypeBinding:
  @Name: IntClsMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isForInternal: 1
    @@ForCheck:
      ManakaiDOM:ForClass
ElementTypeBinding:
  @Name: IntMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isForInternal: 1

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMMethodParameter
  @Description:
    @@lang:en
    @@@: A DOM method parameter.
ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethodParameter

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMMethodReturn
  @Description:
    @@lang:en
    @@@: A DOM method return value.
ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethodReturn

PropDef:
  @QName:
    dis:Read
  @FullName:
    @@lang:en
    @@@: Is readable
  @Description:
    @@lang:en
    @@@: Whether the subject resource is readable or not.
  @dataType:
    dis:Boolean
PropDef:
  @QName:
    dis:Write
  @FullName:
    @@lang:en
    @@@: Is writable
  @Description:
    @@lang:en
    @@@: Whether the subject resource is writable or not.
  @dataType: 
    dis:Boolean

ResourceTypeDef:
  @QName:
    ManakaiDOM:InCase
  @Description:
    @@lang:en
    @@@: 
      <QUOTE:In case> description.
ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase

PropDef:
  @QName: 
    ManakaiDOM:raises
  @Description:
    @@lang:en
    @@@:
      An exception the method or attribute might raise.
ElementTypeBinding:
  @Name: Exception
  @ElementType:
    ManakaiDOM:raises

TreeElementType:
  @Name: raiseException
  @Description:
    @@lang:en
    @@@:
      Raises an exception.  Content: Same as <Q::ManakaiDOM:raises>.

PropDef:
  @QName: 
    ManakaiDOM:alwaysWarns
  @Description:
    @@lang:en
    @@@:
      A warning that is reported everytime the method or attribute is called. 
      \
      {NOTE:: By the configuration for warning level, it might not be 
              reported.
      \
      }

PropDef:
  @QName:
    dis:Operator
  @Description:
    @@lang:en
    @@@:
      An operator the subject resource (either method or attribute) 
      is to be used to evaluate an expression whose at least one operand object 
      is of a class to which the subject resource belongs.

PropDef:
  @QName:
    ManakaiDOM:isRedefining
  @dataType:
    DOMMain:boolean
  @Description:
    @@lang:en
    @@@:
      Whether the subject resource (either method or attribute) 
      redefines another resource defined in one of ancestor inheriting 
      class or not.

ResourceTypeDef:
  @QName: 
    ManakaiDOM:DataType
  @Description:
    @@lang:en
    @@@:
      A data type.
  @rdf:type:
    rdfs:Class
  @ISA:
    rdfs:Datatype
ElementTypeBinding:
  @Name: DataTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DataType

PropDef:
  @QName:
    dis:Type
  @rdfs:domain:
    rdfs:Resource
  @rdfs:range:
    rdfs:Resource
  @Description:
    @@lang:en
    @@@:
      The data type of the resource defined, including 
      class attribute type and method return value type.

PropDef:
  @QName:
    dis:actualType
  @rdfs:domain:
    rdfs:Resource
  @rdfs:range:
    rdfs:Resource
  @Description:
    @@lang:en
    @@@:
      The actual data type of the resource defined, including 
      class attribute type and method return value type. 
ElementTypeBinding:
  @Name: actualType
  @ElementType:
    dis:actualType
  @ShadowContent:
    @@ForCheck:
      ManakaiDOM:ManakaiDOM

PropDef:
  @QName:
    dis:Value
  @Description:
    @@lang:en
    @@@:
      A value of the resource.
PropDef:
  @QName:
    dis:DefaultValue
  @Description:
    @@lang:en
    @@@: The default value of the resource.
PropDef:
  @QName:
    dis:Def
  @Description:
    @@lang:en
    @@@:
      A definition of the resource.
PropDef:
  @QName:
    dis:IntDef
  @Description:
    @@lang:en
    @@@:
      OBSOLETE: A definition of the resource (for internal use).
PropDef:
  @QName:
    dis:IsAbstract
  @Description:
    @@lang:en
    @@@:
      Whether the resource is defined abstractly or concretly. 
      Abstractly defined resource must be concretly overloaded 
      by inheriting class.

PropDef:
  @QName:
    dis:IsFinal
  @Description: 
    @@lang:en
    @@@:
      Whether a subject resource is overridable or not. 
      \
      - <CODE::-1> :: The subject resource have to be overrided.
      \
      - <CODE::0>  :: The subject resource is able to be overrided. 
      \
      - <CODE::1>  :: The subject resource is unable to be overrided.
  @dataType:
    DISCore:Tristate

PropDef:
  @QName:
    ManakaiDOM:isForInternal
  @dataType:
    dis:Boolean
  @Description:
    @@lang:en
    @@@:
      Whether the subject resource is prepared for the internal use.  
      In other word, the subject resource is a public member or 
      a private member.

PropDef:
  @QName:
    ManakaiDOM:isStatic
  @dataType:
    dis:Boolean
  @Description:
    @@lang:en
    @@@:
      Whether the subject resource is a static member of another resource 
      to which the subject belongs.  It is used to declare a method 
      is a static method (class method). 
      \
      Note that, for the purpose of <Q::ManakaiDOM:isStatic>, the fact 
      that a method is static does not means the method should not 
      be called via an object.  Inappropriateness of the use as an 
      object method should be indicated by other property.

## -- lang:dis vocabulary

TreeElementType:
  @QName:
    dis:GetProp
  @dataType:
    dis:TypeQName
  @rdfs:range:
    rdfs:Property
  @Description:
    @@lang:en
    @@@:
      Gets the non-nodal value of a <Class::ManakaiDOM:ManakaiDOMNodeReference> 
      property (actualy <Class::ManakaiDOM:ManakaiDOMNodeObject> property). 

TreeElementType:
  @QName:
    dis:SetProp
  @dataType:
    dis:TypeQName
  @rdfs:range:
    rdfs:Property
  @Description:
    @@lang:en
    @@@:
      Sets the non-nodal value of a <Class::ManakaiDOM:ManakaiDOMNodeReference> 
      property (actualy <Class::ManakaiDOM:ManakaiDOMNodeObject> property). 

TreeElementType:
  @QName:
    dis:CheckReadOnly
  @dataType:
    dis:Boolean
  @rdfs:domain:
    dis:SetProp
  @Description:
    @@lang:en
    @@@:
      Whether if the node to set an attribute value is read-only is 
      checked before the setting or not. 

TreeElementType:
  @QName:
    dis:GetPropNode
  @dataType:
    dis:TypeQName
  @rdfs:range:
    rdfs:Property
  @Description:
    @@lang:en
    @@@:
      Gets the nodal value of a <Class::ManakaiDOM:ManakaiDOMNodeReference> 
      property (actualy <Class::ManakaiDOM:ManakaiDOMNodeObject> property). 

## -- DOM specific properties and types

Const:
  @Name: null
  @Type: any
  @AliasFor:
    @@@:
      ::ManakaiDOM:all
    @@For:
      !=ManakaiDOM:all
  @Value:
    @@ContentType: 
      lang:Perl
    @@@: undef
  @Description:
    @@lang:en
    @@@:
       The null value.  Note that <DOM:null> is different from 
       empty string and number zero.

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMConfigParameter
  @Description:
    @@lang:en
    @@@: A DOM configuration parameter.

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMEvent
  @Description:
    @@lang:en
    @@@: A DOM event definition.

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMError
  @Description:
    @@lang:en
    @@@: A DOM error definition.

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMConfigParameterSet
  @Description:
    @@lang:en
    @@@: A set of DOM configuration parameters.

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMEventSet
  @Description:
    @@lang:en
    @@@: A set of DOM event definitions.

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMErrorSet
  @Description:
    @@lang:en
    @@@: A set of DOM error definitions.

PropDef:
  @QName:
    dis:NSVersion
  @Description:
    @@lang:en
    @@@:
      A namespace-aware variant of the method or attribute.

PropDef:
  @QName:
    dis:NoNSVersion
  @Description:
    @@lang:en
    @@@: A namespace-unaware variant of the method or attribute.

PropDef:
  @Name: isNamespaceAware
  @Description:
    @@lang:en
    @@@: 
      Whether a subject resource is namespace-aware or not.  Note that 
      the property value of <CODE::false> does not mean the subject 
      resource is namespace unaware; it might be namespace-neutral.
  @dataType:
    dis:Boolean

PropDef:
  @Name: isNamespaceUnaware
  @Description:
    @@lang:en
    @@@:
      Whether a subject resource is namespace-unaware or not.

## -- Manakai specific properties and datatypes

PropDef:
  @QName:
    dis:Role
  @Description:
    @@lang:en
    @@@:
      A role of class in the DOM system.
  @rdfs:domain:
    ManakaiDOM:Class
  @rdfs:range:
    ManakaiDOM:IF
  @dataType:
    dis:TypeForQNames

ElementTypeBinding:
  @Name: ImplementLevel3
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@@:
      ::ManakaiDOM:ManakaiDOM3
    @@ForCheck:
      ManakaiDOM:ForIF
    @@For:
      ManakaiDOM:ManakaiDOMLatest

PropDef:
  @QName:
    ManakaiDOM:inputNormalizer
  @Description:
    @@lang:en
    @@@:
      A code fragment that normalizes inputs, including method parameter 
      values and new attribute values. 
      \
      If the code is written in Perl (<TYPE::lang:Perl>), any occurence 
      of <Perl::$INPUT> in the code is replaced by the variable name 
      containing the input. 
  @rdfs:domain:
    ManakaiDOM:DataType

TreeElementType:
  @QName:
    ManakaiDOM:InputNormalize
  @Description:
    @@lang:en
    @@@:
      Inserts an input normalizing code, if any, for a parameter.

PropDef:
  @QName:
    ManakaiDOM:noInputNormalize
  @Description:
    @@lang:en
    @@@:
      Whether an input normalizer code should be automatically 
      inserted by code generator.  If <CODE::false> and a normalizer 
      (<Q::ManakaiDOM:inputNormalizer>) is defined, it is inserted 
      between input (parameter) declaration and actual code.  Otherwise, 
      no code is inserted. 
  @dataType:
    dis:Boolean

## -- Other

DataTypeDef:
  @QName:
    lang:Java
  @FullName:
    @@lang:en
    @@@: Java code

DataTypeDef:
  @QName:
    lang:muf
  @FullName:
    @@lang:en
    @@@: 
      <PerlModule::Message::Util::Formatter> template

## -- Obsolete properties

PropDef:
  @QName:
    dis:Redefine
  @Description:
    @@lang:en
    @@@: Declares redefining (obsolete)
PropDef:
  @QName:
    dis:RedefinedBy
  @Description:
    @@lang:en
    @@@: Declares redefined in elsewhere (obsolete)
PropDef:
  @QName:
    dis:Redefined
  @Description:
    @@lang:en
    @@@: Declares redefined in elsewhere (obsolete)

## -- Sugar

ElementTypeBinding:
  @Name: PerlDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:Perl

ResourceTypeDef:
  @QName:
    dis2pm:InlineCode
  @Description:
    @@lang:en
    @@@:
      An inline code fragment referred by <CODE::<lt>CODE::<VAR::qname><gt>> 
      preprocessed token.
      \
      {NOTE:: If a code fragment is written in Perl (i.e. typed as 
              <Q::dis:Perl> or its subtypes), line breaks are 
              replaced by a <CHAR::SPACE>.  Use escape (<Perl::\n>) if 
              it is significant.
      \
      }

ResourceTypeDef:
  @QName:
    dis2pm:BlockCode
  @Description:
    @@lang:en
    @@@:
      A block code fragment referred by <CODE::__CODE{<VAR::qname>}__> 
      preprocessed block.


## -- DOM Feature

StringDataTypeDef:
  @QName: 
    ManakaiDOM:ManakaiDOMFeatureName
  @FullName:
    @@lang:en
    @@@: DOM feature name
  @Description:
    @@lang:en
    @@@:
      A DOM feature name. 
      \
      In some context, a feature name might be prefixed by <CHAR::PLUS SIGN> 
      to indicate that feature is not required to be <EM::directly> 
      accessible.

StringDataTypeDef:
  @QName: 
    ManakaiDOM:ManakaiDOMFeatureVersion
  @FullName:
    @@lang:en
    @@@: DOM feature version
  @Description:
    @@lang:en
    @@@: 
      A DOM feature version number. 
      \
      In most contexts, an empty string and the <DOM:null> value are 
      also valid values.  Both values indicate that any version of 
      that feature is acceptable.

StringDataTypeDef:
  @QName: 
    ManakaiDOM:ManakaiDOMFeatures
  @For:
    ManakaiDOM:ManakaiDOM3
  @FullName:
    @@lang:en
    @@@: 
      A DOM <P:features>
  @Description:
    @@lang:en
    @@@:
      A list of zero or more pairs of a <TYPE::ManakaiDOM:ManakaiDOMFeature> 
      and an optional <TYPE::ManakaiDOM:ManakaiDOMFeatureVersion>, 
      separated by white space.
      \
      In the manakai DOM implementation, method parameters and attributes 
      whose actual datatype is <P::features> also accept a reference 
      to hash whose key is a feature name and value is corresponding 
      a feature version (or an empty string).  Don't forget to quote 
      version number when its fraction part is <CODE:0> (e.g. 
      quote <FeatureVer:2.0> like <Perl:'2.0'>).
  @ManakaiDOM:inputNormalizer:
    @@ContentType:
      lang:Perl
    @@@:
      if (CORE::defined $INPUT) {
        unless (CORE::ref $INPUT) {
          my @f = split /\s+/, $INPUT;
          $INPUT = {};
          while (@f) {
            my $name = shift @f;
            if (@f and $f[0] =~ /^[\d\.]+$/) {
              $INPUT->{$name} = shift @f;
            } else {
              $INPUT->{$name} = '';
            }
          }
        }
      } else {
        $INPUT = {};
      }
    @@ImplNote:
      @@@lang:en
      @@@@:
        In current specifications of DOM, order of features are not 
        significant and treatement for dupulication of a feature name 
        is not specified.  
        If <P::features> in future levels of DOM does not 
        have this characteristic, this and some other implementation 
        must be revisited for that levels. 
  @ResourceDef:
    @@QName:
      DOMMain:stringifyFeatures
    @@rdf:type:
      dis2pm:BlockCode
    @@Description:
      @@@lang:en
      @@@@:
        Converts a manakai internal hash representation of <P::features> 
        (<PerlVar::$IN>) to a DOM standard string representation of it 
        (<PerlVar::$OUT>). 
        \
        Note that whether input is valid feature name-value pairs is 
        not checked; bad input will produce bad output.
    @@PerlDef:
      $OUT = join ' ', %{$IN};

ResourceDef:
  @QName: docSupportsXMLFeature
  @rdf:type:
    dis2pm:InlineCode
  @Description:
    @@lang:en
    @@@:
      Whether a document has support for the <Feature::XML> feature or not.
  @PerlDef:
    ($DOCOBJ->{<Q::DOMCore:hasFeature>}->{XML})

ResourceDef:
  @QName: DOMFeature
  @FullName:
    @@lang:en
    @@@: DOM feature
  @rdf:type:
    rdfs:Class
  @ISA:
    rdfs:Class
ElementTypeBinding:
  @Name: FeatureDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DOMMain:DOMFeature

PropDef:
  @QName:
    dis:Version
  @FullName:
    @@lang:en
    @@@: Feature version
  @Description:
    @@lang:en
    @@@:
      A version number of a feature to define.
  @rdfs:domain: DOMFeature

PropDef:
  @QName: featureImplementedBy
  @Description:
    @@lang:en
    @@@:
      A subject resource is a feature (<Q::DOMMain:DOMFeature>) and 
      it is implemented by object resource.
  @rdfs:domain: DOMFeature
  @dataType:
    dis:TypeForQNames
ElementTypeBinding:
  @Name: fImplBy
  @ElementType: 
    DOMMain:featureImplementedBy
  @ShadowContent:
    @@ForCheck:
      ManakaiDOM:ManakaiDOM

FeatureDef:
  @QName: 
    ManakaiDOM:ManakaiDOMMain
  @Version: 1.0
  @FullName:
    @@lang:en
    @@@:
      The Manakai DOM Implementation Main Module, version 1.0
  @fImplBy:
    DOMCore:ManakaiDOMImplementation::ManakaiDOM:DOM
ImplNote:
  @Feature:
    @@QName: 
      ManakaiDOM:DOMMain
    @@For:
      ManakaiDOM:ManakaiDOM
    @@FullName:
      @@@lang:en
      @@@@:
        The manakai DOM implementation <Module:DOMMain> module
  @Feature:
    @@QName:
      ManakaiDOM:DOMMain
    @@Version: 1.0
    @@For:
      ManakaiDOM:ManakaiDOM1
    @@FullName:
      @@@lang:en
      @@@@:
        The manakai DOM implementation <Module:DOMMain> module, level 1
    @@Contrib:
      DOMCore:DOMImplementation::DOM1
    @@Contrib:
      DOMCore:DOMImplementation::DOM2
    @@Contrib:
      DOMCore:DOMImplementation::DOM3
  @Feature:
    @@QName:
      ManakaiDOM:DOMMain
    @@Version: 2.0
    @@For:
      ManakaiDOM:ManakaiDOM2
    @@FullName:
      @@@lang:en
      @@@@:
        The manakai DOM implementation <Module:DOMMain> module, level 2
    @@Contrib:
      DOMCore:DOMImplementation::DOM2
    @@Contrib:
      DOMCore:DOMImplementation::DOM3
  @Feature:
    @@QName: 
      ManakaiDOM:DOMMain
    @@Version: 3.0
    @@For:
      ManakaiDOM:ManakaiDOM3
    @@FullName:
      @@@lang:en
      @@@@:
        The manakai DOM implementation <Module:DOMMain> module, level 3
    @@Contrib:
      DOMCore:DOMImplementation::DOM3


## -- IDL datatypes

ResourceDef:
  @Name: IDLDataType
  @Description:
    @@lang:en
    @@@:
      A CORBA IDL data type.
  @rdf:type:
    rdfs:Class
  @ISA:
    ManakaiDOM:DataType
ElementTypeBinding:
  @Name: IDLDataTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: IDLDataType
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:all
      @@@For: 
        ManakaiDOM:all !=ManakaiDOM:all

IDLDataTypeDef:
  @Name: any
  @Description:
    @@lang:en
    @@@: Any data.

IDLDataTypeDef: 
  @Name: Object
  @Description:
    @@lang:en
    @@@: An object.

IDLDataTypeDef:
  @Name: unsigned-long-long
  @Def:
    @@ContentType: 
      lang:IDL-DOM
    @@@: unsigned long long
  @FullName:
    @@lang:en
    @@@: Unsigned long long integer

IDLDataTypeDef:
  @Name: unsigned-long
  @Def:
    @@ContentType: 
      lang:IDL-DOM
    @@@: unsigned long
  @FullName:
    @@lang:en
    @@@: Unsigned long integer

IDLDataTypeDef:
  @Name: long
  @FullName:
    @@lang:en
    @@@: Long integer
  @Description:
    @@lang:en
    @@@: A signed long integer.

IDLDataTypeDef:
  @Name: unsigned-short
  @Def:
    @@ContentType: 
      lang:IDL-DOM
    @@@: unsigned short
  @FullName:
    @@lang:en
    @@@: Unsigned short integer

IDLDataTypeDef:
  @Name: float
  @FullName:
    @@lang:en
    @@@: Floating point number

ResourceDef:
  @Name: boolean
  @rdf:type:
    ManakaiDOM:ConstGroup
  @rdf:type: IDLDataType
  @Description:
    @@lang:en
    @@@: A boolean (truth) value.
  @AliasFor:
    @@@:
      ::ManakaiDOM:all
    @@For:
      ManakaiDOM:all !=ManakaiDOM:all
  @Const:
    @@Name: true
    @@Type: boolean
    @@Value:
      @@@@: 1
      @@@ContentType:
        dis:Boolean
    @@Description:
      @@@lang:en
      @@@@: The boolean true value.
  @Const:
    @@Name: false
    @@Type: boolean
    @@Value:
      @@@@: 0
      @@@ContentType:
        dis:Boolean
    @@Description:
      @@@lang:en
      @@@@: The boolean false value.

## -- DOM Core Specification datatypes

ResourceDef:
  @Name: DOMDataType
  @Description:
    @@lang:en
    @@@:
      A DOM data type.
  @rdf:type:
    rdfs:Class
  @ISA:
    ManakaiDOM:DataType
ElementTypeBinding:
  @Name: DOMDataTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DOMDataType
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:all
      @@@For: 
        !=ManakaiDOM:all

ResourceDef:
  @For:
    ManakaiDOM:DOM2
  @rdf:type:
    @@@:
      dis:MultipleResource
    @@ForCheck:
      !ManakaiDOM:ForIF !ManakaiDOM:ForClass
  @resourceFor:
    ManakaiDOM:ForIF
  @resourceFor:
    @@@:
      ManakaiDOM:ForClass
    @@For:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
  @Name:
    @@@:  DOMTimeStamp
    @@ForCheck:
      ManakaiDOM:ForIF
  @Name:
    @@@: ManakaiDOMTimeStamp
    @@ForCheck:
      ManakaiDOM:ForClass
  @rdf:type:
    @@@: DOMDataType
    @@ForCheck:
      ManakaiDOM:ForIF
  @rdf:type:
    @@@: 
      ManakaiDOM:PrimitiveTypeClass
    @@ForCheck:
      ManakaiDOM:ForClass
  @Description:
    @@lang:en
    @@@: 
      An absolute or relative time.  It is represented 
      as a number of milliseconds.
  @AliasFor:
    @@@: unsigned-long-long
    @@ForCheck:
      ManakaiDOM:ForIF
  @ImplNote:
    @@lang:en
    @@@:
      TODO: How implements this type is not yet decided.
    @@ForCheck:
      ManakaiDOM:ForClass

DOMDataTypeDef:
  @Name:  DOMUserData
  @For:
    ManakaiDOM:DOM3
  @AliasFor: any
  @Description:
    @@lang:en
    @@@: A reference to application data.

DOMDataTypeDef:
  @Name:  DOMObject
  @For:
    ManakaiDOM:DOM3
  @AliasFor: Object
  @Description:
    @@lang:en
    @@@: An object reference.

ResourceDef:
  @For:
    ManakaiDOM:DOM
  @rdf:type:
    @@@:
      dis:MultipleResource
    @@ForCheck:
      !ManakaiDOM:ForIF !ManakaiDOM:ForClass
  @resourceFor:
    ManakaiDOM:ForIF
  @resourceFor:
    @@@:
      ManakaiDOM:ForClass
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOMCommon
  @Name: 
    @@@: DOMString
    @@ForCheck:
      ManakaiDOM:ForIF
  @Name:
    @@@: ManakaiDOMString
    @@ForCheck:
      ManakaiDOM:ForClass
  @rdf:type:
    @@@: DOMDataType
    @@ForCheck: 
      ManakaiDOM:ForIF
  @rdf:type:
    @@@: 
      ManakaiDOM:PrimitiveTypeClass
    @@ForCheck:
      ManakaiDOM:ForClass
  @Def:
    @@ContentType:
      lang:IDL-DOM
    @@@: sequence<unsigned short>
    @@ForCheck:
      ManakaiDOM:ForIF
  @ImplementLevel3: 
  @ISA:
    @@For:
      ManakaiDOM:ManakaiDOMLatest
    @@@: ManakaiDOMStringExtend
  @Description:
    @@lang:en
    @@@: 
      A string.  It is used to store Unicode characters.
  @IntClsAttr:
    @@Name: valueUTF16BE
    @@Description:
      @@@lang:en
      @@@@:
        The character string in UTF-16BE (without <CHAR::BOM>) Perl byte-string. 
    @@Get:
      @@@Type: any
      @@@PerlDef:
        @@@@require: Encode
        @@@@@:
          $r = Encode::encode ('UTF-16BE',
                               ref $self eq 'SCALAR' ? $$self : $self);
  @IntClsAttr:
    @@Name: length
    @@Description:
      @@@lang:en
      @@@@:
        The number of 16-bit units, i.e. the number of two-octet pairs, 
        in the UTF-16BE (without <CHAR::BOM>) representation of a string. 
        \
        {NOTE:: The number of 16-bit units in a string is different 
                from the number of characters in the string if 
                there is one or more characters whose UCS code point 
                is into the range <CODE::U+10000> to <CODE::U+10FFFF>.
        \
        }
    @@Get:
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The number of 16-bit units.
      @@@PerlDef:
          my $s = ref $self eq 'SCALAR' ? $self : \$self;
          $r = CORE::length $$s;
          $r++ while $$s =~ /[\x{10000}-\x{10FFFF}]/g;
  @IntClsMethod:
    @@Name: append
    @@Description:
      @@@lang:en
      @@@@:
        Appends another string at the end of a string.
    @@Param:
      @@@Name: arg
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: 
          Another string to append to this string.
    @@Return:
      @@@PerlDef:
        @@@@cast-input: 0
        @@@@@:
          if (ref $self eq 'SCALAR') {
            $$self .= ref $arg eq 'SCALAR' ? $$arg : $arg;
          }
          # else: no effect
  @IntClsMethod:
    @@Name: setCurrentPosition
    @@Description:
      @@@lang:en
      @@@@:
        Sets the current position to the specified 16-bit unit offset.
        \
        {NOTE:: The current position here is same as the one 
                that is able to access by the Perl 
                <Perl::<PerlFunc::pos> (<PerlVar::$s>)> operator.
        \
        }
    @@Param:
      @@@Name: offset
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@:
          The offset of 16-bit units to which the current position is set.
        \
          {NOTE:: The <P::offset> value must be in the effective range; 
                  in other word, it must not be negative nor be greater 
                  than the number of 16-bit units in the string. 
                  Otherwise, unlike any other public methods, 
                  result is undefined.
          \
          }
    @@Return:
      @@@Exception:
        @@@@@:
          MDOMX:MDOM_INDEX_IN_SURROGATE_PAIR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            An attempt is made to break a surrogate pair.
      @@@PerlDef:
          return unless ref $self eq 'SCALAR'; # no effect
          use integer;
          pos ($$self) = 0;
          while ($offset and pos $$self <= CORE::length $$self) {
            if ($$self =~ /[^\x{10000}-\x{10FFFF}]{1,$offset}/gc) {
              $offset -= $+[0] - $-[0];
            } elsif ($$self =~ m{[\x{10000}-\x{10FFFF}]{1,$offset/2}}gc) {
              $offset -= 2 * ($+[0] - $-[0]);
              if ($offset < 0) {
                __EXCEPTION{
                  MDOMX:MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR::
                    MDOMX:param-name => 'offset',
                }__;
              }
            } else {
              __EXCEPTION{
                MDOMX:MDOM_DEBUG_BUG::
                  MDOMX:values => {{
                    count => $offset,
                    position => 1,
                  }},
              }__;
            }                
          }
  @IntClsMethod:
    @@Name: delete
    @@Description:
      @@@lang:en
      @@@@:
        Removes a range of 16-bit units from a string.
    @@Param:
      @@@Name: offset
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The offset from which to start removing.
    @@Param:
      @@@Name: count
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@:
          The number of 16-bit units to delete.  If the sum of the
          parameters offset and count exceeds the length of the
          string then all 16-bit units from offset to the end
          of the string are deleted.
    @@Return:
      @@@Exception:
        @@@@Type: 
          DOMCore:DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            Either the <P::offset> value is negative or greater than the number 
            of 16-bit units in the string, or the <P::count> value is negative. 
      @@@Exception:
        @@@@@:
          MDOMX:MDOM_INDEX_IN_SURROGATE_PAIR
        @@@@Description:
          @@@@@lang:en
          @@@@@@: 
            An attempt is made to break a surrogate pair.
      @@@PerlDef:
          __DEEP{
            <M::ManakaiDOMString.replace> ($self, $offset, $count, '');
          }__;
  @IntClsMethod:
    @@Name: insert
    @@Description:
      @@@lang:en
      @@@@:
        Inserts another string at specified 16-bit unit offset in string.
    @@Param:
      @@@Name: offset
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: 
          The offset to which <P::arg> is inserted.
    @@Param:
      @@@Name: arg
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: 
          Another string to insert.
    @@Return:
      @@@Exception:
        @@@@Type: 
          DOMCore:DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The <P::offset> value is negative or greater than the 
            number of 16-bit units in the string.
      @@@Exception:
        @@@@@:
          MDOMX:MDOM_INDEX_IN_SURROGATE_PAIR
        @@@@Description:
          @@@@@lang:en
          @@@@@@: 
            An attempt is made to break a surrogate pair.
      @@@PerlDef:
        @@@@cast-input: 0
        @@@@@:
          return unless ref $self eq 'SCALAR';
          if ($offset < 0 or $offset > CORE::length $$self or
              $offset > <M::ManakaiDOMString.length> ($self)) {
            __EXCEPTION{DOMCore:ManakaiDOMException.INDEX_SIZE_ERR::
              MDOMX:param-name => 'offset',
            }__;
          }
          unless ($$self =~ /[\x{10000}-\x{10FFFF}]/) {
            substr ($$self, $offset, 0) = ref $arg eq 'SCALAR' ? $$arg : $arg;
          } else {
            unless (substr ($$self, 0, $offset) =~ /[\x{10000}-\x{10FFFF}]/) {
              substr ($$self, $offset, 0) = ref $arg eq 'SCALAR' ? $$arg : $arg;
            } else { # Non-BMP chars before $offset
              __DEEP{
                <M::ManakaiDOMString.setCurrentPosition> ($self, $offset);
              }__;
              substr ($$self, pos $$self, 0)
                                        = ref $arg eq 'SCALAR' ? $$arg : $arg;
            }
          }
  @IntClsMethod:
    @@Name: replace
    @@Description:
      @@@lang:en
      @@@@:
        Replaces a range of 16-bit units in a string 
        with another string.
    @@Param:
      @@@Name: offset
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The offset from which to start replacing.
    @@Param:
      @@@Name: count
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@:
          The number of 16-bit units to replace.  If the sum of the
          <P::offset> value and the <P::count> value exceeds the length of the
          string then all 16-bit units from the <P::offset> to the end
          of the string are replaced.
    @@Param:
      @@@Name: arg
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: 
          Another string with which the range is replaced.
    @@Return:
      @@@Exception:
        @@@@Type: 
          DOMCore:DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The <P:offset> is negative or greater than
            the number of 16-bit units in the string, or the 
            <P:count> value is negative.
      @@@Exception:
        @@@@@: 
          MDOMX:MDOM_INDEX_IN_SURROGATE_PAIR
        @@@@Description:
          @@@@@lang:en
          @@@@@@: 
            An attempt is made to break a surrogate pair.
      @@@PerlDef:
        @@@@cast-input: 0
        @@@@@:
          return unless ref $self eq 'SCALAR';
          if ($offset < 0 or $offset > CORE::length $$self or
              $offset > <M::ManakaiDOMString.length> ($self)) {
            __EXCEPTION{DOMCore:ManakaiDOMException.INDEX_SIZE_ERR::
              MDOMX:param-name => 'offset',
            }__;
          }
          if ($count < 0) {
            __EXCEPTION{DOMCore:ManakaiDOMException.INDEX_SIZE_ERR::
              MDOMX:param-name => 'count',
            }__;
          }
        REPLACE: {
          unless ($$self =~ /[\x{10000}-\x{10FFFF}]/) {
            substr ($$self, $offset, $count)
                                 = ref $arg eq 'SCALAR' ? $$arg : $arg;
            last REPLACE;
          } else {
            unless (substr ($$self, 0, $offset)
                                 =~ /[\x{10000}-\x{10FFFF}]/) {
              unless (substr ($$self, $offset, $count)
                                 =~ /[\x{10000}-\x{10FFFF}]/) {
                substr ($$self, $offset, $count)
                                 = ref $arg eq 'SCALAR' ? $$arg : $arg;
                last REPLACE;
              } elsif (CORE::length $$self < $offset + $count) {
                substr ($$self, $offset) = ref $arg eq 'SCALAR' ? $$arg : $arg;
                last REPLACE;
              } else {
                pos ($$self) = $offset;
              }
            } else { # Non-BMP chars before $offset
              __DEEP{
                <M::ManakaiDOMString.setCurrentPosition> ($self, $offset);
              }__;
            }
          }
          use integer;
          my $s = substr ($$self, pos $$self);
          while ($count) {
            if ($s =~ s/[^\x{10000}-\x{10FFFF}]{1,$count}//) {
              $count -= $+[0] - $-[0];
            } elsif ($s =~ s{[\x{10000}-\x{10FFFF}]{1,$count/2}}{}) {
              $count -= 2 * ($+[0] - $-[0]);
              if ($count < 0) {
                __EXCEPTION{
                MDOMX:MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR::
                  MDOMX:param-name => 'count',
                }__;
              }
            } else {
              __EXCEPTION{
              MDOMX:MDOM_DEBUG_BUG::
                MDOMX:values => {{
                        count => $count,
                        position => 1,
                }},
              }__;
            }
           }
           substr ($$self, pos $$self)
                         = (ref $arg eq 'SCALAR' ? $$arg : $arg) . $s;
        } # REPLACE
  @IntClsMethod:
    @@Name: substring
    @@Description:
      @@@lang:en
      @@@@:
        Extracts a range of 16-bit units.
    @@Param:
      @@@Name: offset
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The offset from which to start extract.
    @@Param:
      @@@Name: count
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@:
          The number of 16-bit units to extract.  If the sum of the
          parameters offset and count exceeds the length of the
          DOMString then all 16-bit units from offset to the end
          of the DOMString are returned.
    @@Return:
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: The specified substring.
      @@@Exception:
        @@@@Type: 
          DOMCore:DOMException
        @@@@actualType:
          DOMCore:ManakaiDOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified "offset" is negative or greater than
            the number of 16-bit units in the DOMString, or the specified
            "count" is negative.
      @@@Exception:
        @@@@Type: 
          DOMCore:DOMException
        @@@@actualType:
          DOMCore:ManakaiDOMException
        @@@@Name: DOMSTRING_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The specified range does not fit into a DOMString.
      @@@Exception:
        @@@@@:
          MDOMX:MDOM_INDEX_IN_SURROGATE_PAIR
        @@@@Description:
          @@@@@lang:en
          @@@@@@: An attempt is made to break surrogate pair.
      @@@PerlDef:
          my $s = ref $self eq 'SCALAR' ? $self : \$self;
          if ($offset < 0 or $offset > CORE::length $$s or
              $offset > <M::ManakaiDOMString.length> ($self)) {
            __EXCEPTION{DOMCore:ManakaiDOMException.INDEX_SIZE_ERR::
              MDOMX:param-name => 'offset',
            }__;
          }
          if ($count < 0) {
            __EXCEPTION{DOMCore:ManakaiDOMException.INDEX_SIZE_ERR::
              MDOMX:param-name => 'count',
            }__;
          }
        SUBSTR: {
          unless ($$s =~ /[\x{10000}-\x{10FFFF}]/) {
            $r = substr ($$s, $offset, $count);
            last SUBSTR;
          } else {
            unless (substr ($$s, 0, $offset) =~ /[\x{10000}-\x{10FFFF}]/) {
              unless (substr ($$s, $offset, $count)
                                 =~ /[\x{10000}-\x{10FFFF}]/) {
                $r = substr ($$s, $offset, $count);
                last SUBSTR;
              } elsif (CORE::length $$s < $offset + $count) {
                $r = substr ($$s, $offset);
                last SUBSTR;
              } else {
                pos ($$s) = $offset;
              }
            } else { # Non-BMP chars before $offset
              __DEEP{
                <M::ManakaiDOMString.setCurrentPosition> ($s, $offset);
              }__;
            }
          }
          my $start = pos $$s;
          __DEEP{
            <M::ManakaiDOMString.setCurrentPosition> ($s, $offset + $count);
          }__;
          $r = substr $$s, $start, pos ($$s) - $start;
        } # SUBSTR
  @IntClsAttr:
    @@Name: isFullyNormalized
    @@Description:
      @@@lang:en
      @@@@:
        Whether a string is fully normalized or not.
        \
        {P:: In DOM Level 3, characters are <DFN:fully normalized> as 
        defined in Appendix B of XML 1.1 specification if:
        \
          - the parameter <CP:normalize-characters> was set to <DOM:true>
            while loading the document or the document was certified as 
            defined in XML 1.1 specification or 
          - the parameter <CP:normalize-characters> was set to <DOM:true>
            while using the method <M:DOMCore:Document.normalizeDocument> 
            interface or while using the method <M:DOMCore:Node.normalize>.
        \
        }
    @@Get:
      @@@Type: boolean
      @@@InCase:
        @@@@Value: true
        @@@@Type: boolean
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The string was certified as fully normalized.
      @@@InCase:
        @@@@Value: false
        @@@@Type: boolean
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The string is not known to be certified as fully normalized.
    @@ImplNote:
      @@@lang:en
      @@@@:
        TODO: In this attribute, we should implement certification of string, 
              rather than returning private property value.
  @IntClsMethod:
    @@Name: compare
    @@Description:
      @@@lang:en
      @@@@: The string comparison.
    @@Param:
      @@@Name: str
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: The string to be compared.
    @@Param:
      @@@Name: caseInsensitive
      @@@Type: boolean
      @@@Description:
        @@@@lang:en
        @@@@@: The case-sentitivility of the match.
      @@@InCase:
        @@@@Value: true
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The match is done as case-insensitive.
      @@@InCase:
        @@@@Value: false
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The match is done as case-sensitive.
    @@Return:
      @@@Type: boolean
      @@@Description:
        @@@@lang:en
        @@@@@: Whether the string is fully normalized or not.
      @@@InCase:
        @@@@Value: true
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The string is fully normalized.
      @@@InCase:
        @@@@Value: true
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The string is fully normalized.
      @@@PerlDef:
        @@@@cast-input: 0
        @@@@@:
          my $str0 = ref $self eq 'SCALAR' ? $self : \$self;
          my $str1 = ref $str eq 'SCALAR' ? $str : ref $str ? \(''.$str) : \$str;
          if ($caseInsensitive) {
            $r = lc ($str0) eq lc ($str1) ? true : false;
          } else {
            $r = $str0 eq $str1 ? true : false;
          }
## DataType:DOMString

ResourceDef:
  @For: 
    ManakaiDOM:DOM3
  @rdf:type:
    @@@:
      dis:MultipleResource
    @@ForCheck:
      !ManakaiDOM:ForIF !ManakaiDOM:ForClass
  @resourceFor:
    ManakaiDOM:ForIF
  @resourceFor:
    @@@:
      ManakaiDOM:ForClass
    @@For:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOMCommon
  @Name:
    @@@: StringExtend
    @@ForCheck:
      ManakaiDOM:ForIF
  @Name:
    @@@: ManakaiDOMStringExtend
    @@ForCheck:
      ManakaiDOM:ForClass
  @rdf:type:
    @@@:
      ManakaiDOM:IF
    @@ForCheck:
      ManakaiDOM:ForIF
  @rdf:type:
    @@@:
      ManakaiDOM:PrimitiveTypeClass
    @@ForCheck:
      ManakaiDOM:ForClass
  @ImplementLevel3: 
  @Description:
    @@lang:en
    @@@:
      Extensions to a language's native <CODE:String> class or interface.
     \
      {NOTE:: This interface is informatively defined in Appendix 
              of DOM Level 3 Core.
      \
      }
  @Method:
    @@Name: findOffset16
    @@Description:
      @@@lang:en
      @@@@: 
        Returns the UTF-16 offset that corresponding to a UTF-32 offset.
        Unmatched surrogate is counted as a single UTF-16 value.
    @@Param:
      @@@Name: offset32
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The UTF-32 offset.
    @@Return:
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The UTF-16 offset.
      @@@Exception:
        @@@@Type: 
          DOMCore:DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified <P:offset32> is negative or greater than
            the number of characters (i.e. UTF-32 32-bit code units).
      @@@PerlDef:
        @@@@DefaultValue: $offset32
        @@@@@:
          my $s = ref $self eq 'SCALAR' ? $self : \$self;
          if (not defined $offset32 or $offset32 < 0 or
              CORE::length ($$s) < $offset32) {
            __EXCEPTION{DOMCore:ManakaiDOMException.INDEX_SIZE_ERR::
              MDOMX:param-name => 'offset32',
            }__;
          }
          my $ss = substr $$s, 0, $offset32;
          if ($ss =~ /[\x{10000}-\x{10FFFF}]/) {
            while ($ss =~ /[\x{10000}-\x{10FFFF}]+/g) {
              $r += $+[0] - $-[0];
            }
          }
  @Method:
    @@Name: findOffset32
    @@Description:
      @@@lang:en
      @@@@:
        Returns the UTF-32 offset corresponding to a UTF-16 offset.
        Unmatched surrogate is counted as a single UTF-16 value.
    @@Param:
      @@@Name: offset16
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The UTF-16 offset.
    @@Return:
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@:
          The UTF-32 offset.  If the <P:offset16> value is into middle of a 
          surrogate pair, the UTF-32 offset at the end of the pair is 
          returned.
      @@@Exception:
        @@@@Type: 
          DOMCore:DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified <P::offset32> is negative or greater than
            the number of characters (i.e. UTF-32's 32-bit code units).
      @@@PerlDef:
        @@@@DefaultValue: $offset16
        @@@@ImplNote:
          @@@@@lang:en
          @@@@@@: 
            <QUOTE::Current position> (see the method 
            <M::ManakaiDOMString.setCurrentPosition>) of the string
            has been changed. 
        @@@@@:
          my $s = ref $self eq 'SCALAR' ? $self : \$self;
          if (not defined $offset16 or $offset16 < 0 or
              CORE::length ($$s) * 2 < $offset16) {
            __EXCEPTION{DOMCore:ManakaiDOMException.INDEX_SIZE_ERR::
              MDOMX:param-name => 'offset16',
            }__;
          }
          pos ($$s) = 0;
          use integer;
          while ($offset16 and pos $$s <= CORE::length $$s) {
            if ($$s =~ /[^\x{10000}-\x{10FFFF}]{1,$offset16}/gc) {
              $offset16 -= $+[0] - $-[0];
            } elsif ($$s =~ m{[\x{10000}-\x{10FFFF}]{1,$offset16/2}}gc) {
              $offset16 -= 2 * ($+[0] - $-[0]);
              last if $offset16 < 0;
            } else {
              __EXCEPTION{
              MDOMX:MDOM_DEBUG_BUG::
                MDOMX:values => {{
                  count => $offset16,
                  position => 1,
                }},
              }__;
            }
          }
          if ($offset16 > 0) {
            __EXCEPTION{DOMCore:ManakaiDOMException.INDEX_SIZE_ERR::
              MDOMX:param-name => 'offset16',
            }__;
          }
          $r = pos ($$s);
##IF: StringExtended

## -- DOM specialized string types

ElementTypeBinding:
  @Name: StringDataTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DataType
    @@ISA:
      @@@@:
        DOMMain:ManakaiDOMString
      @@@For:
        !=ManakaiDOM:ManakaiDOMCommon
    @@AliasFor: 
      @@@@:
        ::ManakaiDOM:ManakaiDOMLatest
      @@@For:
        ManakaiDOM:ManakaiDOMCommon
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM

StringDataTypeDef:
  @QName: 
    ManakaiDOM:ManakaiDOMURI
  @FullName: 
    @@lang:en
    @@@: DOM URI
  @Description:
    @@lang:en
    @@@:
      A DOM URI.  It is a specialized case of the <TYPE:DOMString> and 
      that met the conditions:
    \
      1. An absolute identifier absolutely identifies a resource on the Web.
    \
      2. Simple string equality of absolute resource identifiers. 
      No other equaivalence is considered significant to the 
      DOM specification.
    \
      3. A relative identifier is easily detected and made absolute 
      relative to an absolute identifier.
    \
      4. Retrieval of content of a resource may be accomplished 
      where required.
  @ImplNote:
    @@lang:en
    @@@:
      Examples of DOM URI include RFC 2396/2773 URI reference and 
      IRI reference.

StringDataTypeDef:
  @QName: 
    ManakaiDOM:ManakaiDOMNamespaceURI
  @FullName:
    @@lang:en
    @@@: DOM Namespace URI
  @Description:
    @@lang:en
    @@@:
      A namespace URI.  In general, DOM implementations does not 
      perform any URI normalization or canonicalization.  The URIs 
      given to the DOM are assumed to be valid and no lexical 
      checking is performed.
      
      Absolute URI references are treated 
      as strings and compared literally.  How relative namespace URI 
      references are treated is undefined.  DOM applications should 
      use "null" if they wish to have no namespace.
      
      Some programing languages can differentiate empty strings 
      from "null".  Empty strings were specified as a legal namespace 
      URI in the DOM Level 2 Specification but the DOM Level 2 Errata 
      refines this as the implementaton dependent matter.  The 
      DOM Level 3 Specification again refines to be converted to "null".
  @ImplNote:
    @@lang:en
    @@@: 
      The "dis2pm.pl" is coded so that if the input (the parameter of 
      a method or the given value of an attribute) is typed as 
      "ManakaiDOMNamespaceURI", the Perl code to check the empty 
      string is outputed as part of the implementation.
  @ManakaiDOM:inputNormalizer:
    @@ContentType:
      lang:Perl
    @@@:
      if (CORE::defined $INPUT and CORE::length $INPUT == 0) {
        __WARNING{MDOMX:MDOM_NS_EMPTY_URI::
          MDOMX:param-name => {$INPUT},
        }__;
        __FOR{ManakaiDOM:ManakaiDOM3 | ManakaiDOM:ManakaiDOMCommon::
          $INPUT = undef;
        }__;
      }

ImplNote:
  @lang:en
  @@:
    TODO: Move key identifier(s) to keyboard event module.

StringDataTypeDef:
  @QName:
    ManakaiDOM:ManakaiDOMKeyIdentifier
  @For:
    ManakaiDOM:ManakaiDOM3
  @FullName:
    @@lang:en
    @@@: DOM key identifier
  @Description:
    @@lang:en
    @@@:
      A key identifier.
    \
      {NOTE:: A set of key identifiers are defined in the Appendix A 
              of the <CITE:DOM Level 3 Events> Specification.
    \
      }

StringDataTypeDef:
  @QName:
    ManakaiDOM:ManakaiDOMKeyIdentifiers
  @For:
    ManakaiDOM:ManakaiDOM3
  @FullName:
    @@lang:en
    @@@: List of DOM key identifiers
  @Description:
    @@lang:en
    @@@:
      Zero or more <TYPE:ManakaiDOM:ManakaiDOMKeyIdentifier> separated 
      by white space (XML 1.0 <CODE:S>). 
      \
      In the manakai DOM implementations, method parameters and 
      attributes whose actual datatype is 
      <TYPE::ManakaiDOM:ManakaiDOMKeyIdentifiers> also accept a reference 
      to an array whose items are key identifier strings as well as 
      a plain string of identifiers.
  @ManakaiDOM:inputNormalizer:
    @@ContentType:
      lang:Perl
    @@@:
      if (CORE::defined $INPUT) {
        unless (CORE::ref $INPUT) {
          $INPUT = [CORE::split /[\x20\x09\x0D\x0A]/, $INPUT];
        }
      } else {
        $INPUT = [];
      }

StringDataTypeDef:
  @QName: ManakaiDOMXMLName
  @FullName:
    @@lang:en
    @@@: XML Name
  @ManakaiDOM:inputNormalizer:

  @ResourceDef:
    @@QName: validateXMLName
    @@rdf:type:
      dis2pm:InlineCode
    @@aliasChild:1
    @@Def:
      @@@ContentType:
        dis:Perl
      @@@DISPerl:selectByProp:
        @@@@DISPerl:propName:
          infoset:version
        @@@@DISPerl:case:
          @@@@@Value:
            @@@@@@@: 1.0
            @@@@@@Type:
              DOMMain:DOMString
          @@@@@@:
            ($INPUT =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
        @@@@DISPerl:case:
          @@@@@Value:
            @@@@@@@: 1.1
            @@@@@@Type:
              DOMMain:DOMString
          @@@@@@:
            ($INPUT =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
        @@@@DISPerl:else:
          ** NOT IMPLEMENTED **

  @ResourceDef:
    @@QName: ensureXMLName
    @@rdf:type: 
      dis2pm:BlockCode
    @@Description:
      @@@lang:en
      @@@@: 
        Tests whether a string is a legal XML Name and 
        if not, raises an exception.
        \
        {NOTE:: This code fragment does not support non-<Feature::XML>. 
        \
        }
    @@PerlDef:
        if (defined $INPUT) {
          __FOR{ManakaiDOM:DOM3::
            if (($XMLVERSION eq '1.0' and
                 <Code::DOMMain:validateXMLName:: $INPUT = $INPUT,
                            infoset:version = '1.0'>) or
                ($XMLVERSION eq '1.1' and
                 <Code::DOMMain:validateXMLName:: $INPUT = $INPUT,
                            infoset:version = '1.1'>)) {
              __EXCEPTION{MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_PARAM_NAME',
                infoset:version => {$XMLVERSION},
              }__;
            }
          }__;
          __FOR{ManakaiDOM:DOM2 !ManakaiDOM:DOM3::
            unless (<Code::DOMMain:validateXMLName:: $INPUT = $INPUT,
                           infoset:version = '1.0'>) {
              __EXCEPTION{MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_PARAM_NAME',
                infoset:version => '1.0',
              }__;
            }
          }__;
        }

StringDataTypeDef:
  @QName: ManakaiDOMXMLNCName
  @ISA: ManakaiDOMXMLName
  @FullName:
    @@lang:en
    @@@: XML NCName
  @ManakaiDOM:inputNormalizer:

  @ResourceDef:
    @@QName: validateXMLNCName
    @@rdf:type:
      dis2pm:InlineCode
    @@aliasChild:1
    @@Def:
      @@@ContentType:
        dis:Perl
      @@@DISPerl:selectByProp:
        @@@@DISPerl:propName:
          infoset:version
        @@@@DISPerl:case:
          @@@@@Value:
            @@@@@@@: 1.0
            @@@@@@Type:
              DOMMain:DOMString
          @@@@@@:
            ($INPUT =~ /\A\p{InXML_NCNameStartChar10}\p{InXMLNCNameChar10}*\z/)
        @@@@DISPerl:case:
          @@@@@Value:
            @@@@@@@: 1.1
            @@@@@@Type:
              DOMMain:DOMString
          @@@@@@:
            ($INPUT =~ /\A\p{InXMLNCNameStartChar11}\p{InXMLNCNameChar11}*\z/)
        @@@@DISPerl:else:
          ** NOT IMPLEMENTED **

StringDataTypeDef:
  @QName: ManakaiDOMNamespacePrefix
  @ISA: ManakaiDOMXMLNCName
  @FullName:
    @@lang:en
    @@@: XML Namespace Prefix

  @ResourceDef:
    @@QName: ensureNamespacePrefix
    @@rdf:type:
      dis2pm:BlockCode
    @@Description:
      @@@lang:en
      @@@@: 
        Tests whether a string is a legal XML Namespace prefix and 
        if not, raises an exception.
        \
        {NOTE:: This code fragment does not support non-<Feature::XML>. 
        \
        }
    @@Description:
      @@@lang:en
      @@@@:
        DOM Level 3 defines that the treatement for empty prefix 
        is implementation dependent.  The manakai DOM implementation 
        assumes ut as uf <DOM::null> is specified.
      @@@For:
        ManakaiDOM:DOM3
    @@PerlDef:
        __FOR{ManakaiDOM:DOM3::
          if (defined $INPUT and $INPUT eq '') {
            __WARNING{DOMMain:MDOMX_EMPTY_NS_PREFIX::
              MDOMX:param-name => '$INPUT_PARAM_NAME',
            }__;
          }
        }__;
        if (defined $INPUT) {
          __FOR{ManakaiDOM:DOM3::
            if (($XMLVERSION eq '1.0' and
                 <Code::DOMMain:validateXMLName:: $INPUT = $INPUT,
                            infoset:version = '1.0'>) or
                ($XMLVERSION eq '1.1' and
                 <Code::DOMMain:validateXMLName:: $INPUT = $INPUT,
                            infoset:version = '1.1'>)) {
              __EXCEPTION{MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_PARAM_NAME',
                infoset:version => {$XMLVERSION},
              }__;
            } elsif (index ($INPUT, ':') > -1) {
              __EXCEPTION{MDOMX:MDOM_NS_BAD_NCNAME::
                infoset:name => {$INPUT},
                MDOMX:param-name => '$INPUT_PARAM_NAME',
                infoset:version => {$XMLVERSION},
              }__;
            }
          }__;
          __FOR{ManakaiDOM:DOM2 !ManakaiDOM:DOM3::
            unless (<Code::DOMMain:validateXMLName:: $INPUT = $INPUT,
                           infoset:version = '1.0'>) {
              __EXCEPTION{MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_PARAM_NAME',
                infoset:version => '1.0',
              }__;
            } elsif (index ($INPUT, ':') > -1) {
              __EXCEPTION{MDOMX:MDOM_NS_BAD_NCNAME::
                infoset:name => {$INPUT},
                MDOMX:param-name => '$INPUT_PARAM_NAME',
                infoset:version => '1.0',
              }__;
            }
          }__;
        }

StringDataTypeDef:
  @QName: ManakaiDOMXMLLocalName
  @ISA: ManakaiDOMXMLNCName
  @FullName:
    @@lang:en
    @@@: XML local name

StringDataTypeDef:
  @Name: ManakaiDOMXMLQName
  @ISA: ManakaiDOMXMLName
  @FullName:
    @@lang:en
    @@@:
      XML Qualified Name
  @ManakaiDOM:inputNormalizer:
    @@ContentType:
      dis:Perl
    @@DISPerl:selectByProp:
      @@@DISPerl:propName:
        infoset:version
      @@@DISPerl:case:
        @@@@Value: 1.0
        @@@@@:
          unless (<Code::DOMMain:validateXMLName:: $INPUT = $INPUT,
                           infoset:version = '1.0'>) {
            __EXCEPTION{
              MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.0',
            }__;
          }
          unless (<Code::DOMMain:validateXMLQName:: $INPUT = $INPUT,
                      infoset:version = '1.0'>) {
            __EXCEPTION{
              MDOMX:MDOM_NS_MALFORMED_QNAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.0',
            }__;
          }
      @@@DISPerl:case:
        @@@@Value: 1.1
        @@@@@:
          unless (<Code::DOMMain:validateXMLName:: $INPUT = $INPUT,
                      infoset:version = '1.1'>) {
            __EXCEPTION{
              MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.1',
            }__;
          }
          unless (<Code::DOMMain:validateXMLQName:: $INPUT = $INPUT,
                      infoset:version = '1.1'>) {
            __EXCEPTION{
              MDOMX:MDOM_NS_MALFORMED_QNAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.1',
            }__;
          }
      @@@DISPerl:else: ** NOT IMPLEMENTED **

  @ResourceDef:
    @@QName: validateXMLQName
    @@rdf:type:
      dis2pm:InlineCode
    @@aliasChild:1
    @@Def:
      @@@ContentType:
        dis:Perl
      @@@DISPerl:selectByProp:
        @@@@DISPerl:propName:
          infoset:version
        @@@@DISPerl:case:
          @@@@@Value: 1.0
          @@@@@@:
            ($INPUT =~ /\A\p{InXML_NCNameStartChar10}\p{InXMLNCNameChar10}*(?::\p{InXML_NCNameStartChar10}\p{InXMLNCNameChar10}*)?\z/)
        @@@@DISPerl:case:
          @@@@@Value: 1.1
          @@@@@@:
            ($INPUT =~ /\A\p{InXMLNCNameStartChar11}\p{InXMLNCNameChar11}*(?::\p{InXMLNCNameStartChar11}\p{InXMLNCNameChar11}*)?\z/)
        @@@@DISPerl:else:
          ** NOT IMPLEMENTED **

  @ResourceDef:
    @@QName: ensureXMLQName
    @@rdf:type: 
      dis2pm:BlockCode
    @@Description:
      @@@lang:en
      @@@@:
        Checks whether a string is a legal XML qualified name and if not 
        then raises an exception.
    @@PerlDef:
      @@@For:
        ManakaiDOM:DOM3
      @@@@:
        if ($XMLVERSION eq '1.1') {
          unless (<Code::DOMMain:validateXMLName:: $INPUT = $INPUT,
                      infoset:version = '1.1'>) {
            __EXCEPTION{
              MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.1',
            }__;
          }
          unless (<Code::DOMMain:validateXMLQName:: $INPUT = $INPUT,
                      infoset:version = '1.1'>) {
            __EXCEPTION{
              MDOMX:MDOM_NS_MALFORMED_QNAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.1',
            }__;
          }
        } else {
          unless (<Code::DOMMain:validateXMLName:: $INPUT = $INPUT,
                           infoset:version = '1.0'>) {
            __EXCEPTION{
              MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.0',
            }__;
          }
          unless (<Code::DOMMain:validateXMLQName:: $INPUT = $INPUT,
                      infoset:version = '1.0'>) {
            __EXCEPTION{
              MDOMX:MDOM_NS_MALFORMED_QNAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.0',
            }__;
          }
        }
     @@PerlDef:
       @@@For:
         ManakaiDOM:DOM2 !ManakaiDOM:DOM3
       @@@@:
          unless (<Code::DOMMain:validateXMLName:: $INPUT = $INPUT,
                           infoset:version = '1.0'>) {
            __EXCEPTION{
              MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.0',
            }__;
v          }
          unless (<Code::DOMMain:validateXMLQName:: $INPUT = $INPUT,
                      infoset:version = '1.0'>) {
            __EXCEPTION{
              MDOMX:MDOM_NS_MALFORMED_QNAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.0',
            }__;
          }
        

ResourceDef:
  @QName: checkXMLNamesQName
  @rdf:type:
    dis2pm:BlockCode
  @Description:
    @@lang:en
    @@@:
      Checks validness of XML Namespace Name (Namespace URI) and QName. 
      \
      {NOTE:: This code fragment checks their combination; it does not 
              test whether the URI or the QName is itself valid or not.
      \
      }
  @PerlDef:
    if (defined $PREFIX) {
      if (not defined $NSURI) {
        __EXCEPTION{MDOMX:MDOM_NS_PREFIX_WITH_NULL_URI::
          infoset:prefix => {$PREFIX},
        }__;
      } elsif ($PREFIX eq 'xml' and $NSURI ne <Q::xml:>) {
        __EXCEPTION{MDOMX:MDOM_NS_XML_WITH_OTHER_URI::
          infoset:namespaceName => {$NSURI},
        }__;
      } elsif ($PREFIX eq 'xmlns' and $NSURI ne <Q::xmlns:>) {
        __EXCEPTION{MDOMX:MDOM_NS_XMLNS_WITH_OTHER_URI::
          infoset:namespaceName => {$NSURI},
        }__;
      } elsif ($NSURI eq <Q::xml:> and $PREFIX ne 'xml') {
        __EXCEPTION{MDOMX:MDOM_NS_OTHER_WITH_XML_URI::
          infoset:prefix => {$PREFIX},
        }__;
      } elsif ($NSURI eq <Q::xmlns:> and $PREFIX ne 'xmlns') {
        __EXCEPTION{MDOMX:MDOM_NS_OTHER_WITH_XMLNS_URI::
          infoset:prefix => {$PREFIX},
        }__;
      } elsif ($NSURI eq <Q::xmlns:> and $PREFIX eq 'xmlns' and
               $LNAME eq 'xmlns') {
        __EXCEPTION{MDOMX:MDOM_NS_XMLNS_XMLNS}__;
      }
    } else { ## No prefix
      if ($NSURI eq <Q::xml:>) {
        __EXCEPTION{MDOMX:MDOM_NS_OTHER_WITH_XML_URI::
          infoset:prefix => {undef},
        }__;
      } elsif ($NSURI eq <Q::xmlns:> and $LNAME ne 'xmlns') {
        __EXCEPTION{MDOMX:MDOM_NS_OTHER_WITH_XMLNS_URI::
          infoset:prefix => {undef},
        }__;
      }
    }

## -- The bootstrap object

ResourceDef:
  @Name:
    @@@:  DOMImplementationRegistry
    @@For:
      !ManakaiDOM:ManakaiDOM
  @Name:
    @@@: ManakaiDOMImplementationRegistry
    @@For:
      ManakaiDOM:ManakaiDOM
  @rdf:type:
    ManakaiDOM:Class
  @ForCheck:
    ManakaiDOM:DOM3
  @ForCheck:
    !=ManakaiDOM:ManakaiDOM
  @ISA:
    @@@:
      ManakaiDOM:ManakaiDOMObject
    @@For:
      ManakaiDOM:ManakaiDOM

  @Description:
    @@lang:en
    @@@:
      A binding dependent bootstrap for <IF::DOMCore:DOMImplementation> objects.
  @Description:
    @@For:
      ManakaiDOM:ManakaiDOM
    @@lang:en
    @@@:
      A bootstrap class/object from which DOM implementations can be 
      retrieved.  For the manakai <Class::ManakaiDOMImplementationRegistry> 
      implementation, DOM applications can access the registry both 
      via class methods and via object methods.  That is, applications 
      are free, but need not to instantiate a 
      <Class::ManakaiDOMImplementationRegistry> object to get 
      DOM implementations. 
      \
      {NOTE:: Authors of DOM applications will usually want to access 
              the registry by the means of class methods (i.e. no 
              instance objects), since most applications don't 
              require more than one implementations.
      \
      }
  @Method:
    @@For:
      ManakaiDOM:ManakaiDOM
    @@Name: newInstance
    @@ManakaiDOM:isStatic: 1
    @@Description:
      @@@lang:en
      @@@@:
        Constructs and returns a new instance of 
        <Class::ManakaiDOMImplementationRegistry>. 
        \
        The newly created object initially has DOM implementation sources 
        registered to the array 
        <Perl::@org::w3c::dom::DOMImplementationSourceList> at the time 
        of the instantiation.  No addition of sources afterwards to the 
        object is reflected to the global registry and vice versa.
    @@ImplNote;
      @@@lang:en
      @@@@:
        This method is taken from the normative Java binding.
      \
        Note that in this implementation, unlike the Java binding, 
        <IF:DOMImplementationSource> classes available are not 
        instantiated at this stage.
    @@Return:
      @@@Type: ManakaiDOMImplementationRegistry
      @@@Description:
        @@@@lang:en
        @@@@@:
          A new instance of the <IF:ManakaiDOMImplementationRegistry>.
      @@@PerlDef:
          $r = bless [@org::w3c::dom::DOMImplementationSourceList], $self;
    @@For:
      ManakaiDOM:ManakaiDOM
  @Method:
     @@Name:  getDOMImplementation
     @@ManakaiDOM:isStatic: 1
     @@Description:
       @@@lang:en
       @@@@:
         Seeks and returns the first implementation that implements 
         desired features. 
     @@Param:
        @@@Name:  features
        @@@Type:  DOMString
        @@@actualType:
          ManakaiDOM:ManakaiDOMFeatures
        @@@Description:
          @@@@lang:en
          @@@@@: 
            A list of desired features that must be implemented.
     @@Return:
       @@@Type:  
         DOMCore:DOMImplementation
       @@@Description:
         @@@@lang:en
         @@@@@:
           The first implementation that has the derired features. 
           \
           {NOTE:: DOM implementations returned by this method 
                   might not be manakai DOM objects.
           \
           }
       @@@InCase:
         @@@@Value:
           @@@@@is-null:1
         @@@@Description:
           @@@@@lang:en
           @@@@@@: 
             No implementation implementing the desired features is found.
       @@@PerlDef:
           __CODE{DOMMain:stringifyFeatures:: $IN => $features,
                                              $OUT => $features}__;
           __DEEP{
             for (ref $self ? @$self
                            : @org::w3c::dom::DOMImplementationSourceList) {
               $r = $_-><M::DOMCore:DOMImplementationSource.getDOMImplementation>
                                      ($features);
               last if defined $r;
             }
           }__;
      @@@ImplNote:
        @@@@lang:en
        @@@@@:
          Stringify of <P::features> is required for non-manakai impl. sources.
  @Method:
     @@Name:  getDOMImplementationList
     @@ManakaiDOM:isStatic: 1
     @@Description:
       @@@lang:en
       @@@@:
         Returns a list of all the DOM implementations that implement 
         desired features.
     @@Param:
        @@@Name:  features
        @@@Type:  DOMString
        @@@actualType:
          ManakaiDOM:ManakaiDOMFeatures
        @@@Description:
          @@@@lang:en
          @@@@@: A list of desired features that must be implemented.
     @@Return:
       @@@Type:  
         DOMCore:DOMImplementationList
       @@@actualType:
         DOMCore:ManakaiDOMImplementationList
       @@@Description:
         @@@@lang:en
         @@@@@: 
           A list of DOM implementations that support the desired features. 
           \
           {NOTE:: Whilst the returned list itself is a manakai object, 
                   its containing implementation objects might not 
                   be part of manakai.
           \
           }
       @@@PerlDef:
           __CODE{DOMMain:stringifyFeatures:: $IN => $features,
                                              $OUT => $features}__;
           __DEEP{
             $r = <ClassM::DOMCore:ManakaiDOMImplementationList.new>;
             for (ref $self ? @$self
                            : @org::w3c::dom::DOMImplementationSourceList) {
               $r-><M::DOMCore:ManakaiDOMImplementationList.add>
                         ($_-><M::DOMCore:ManakaiDOMImplementationSource
                                       .getDOMImplementationList> ($features));
             }
           }__;
  @Method:
    @@Name: addSource
    @@ManakaiDOM:isStatic: 1
    @@Description:
      @@@lang:en
      @@@@:
        Registers a <IF::DOMCore:DOMImplementationSource> object to the 
        list of DOM implementation sources available to this registry. 
        \
        When this method is called as a class method, i.e. with no 
        object, the new source is added to the global registry.  
        Otherwise, the new source is added to the local, the object's own 
        registry and it unable to access via other registries. 
        \
        {NOTE:: This method is a manakai-specific method.  Its name and 
                most of behaviour follow that of the normative Java binding as 
                defined in the <CITE::DOM Level 3 Specification>.
        \
        }
    @@For:
      ManakaiDOM:ManakaiDOM
    @@Param:
      @@@Name: s
      @@@Type: 
        DOMCore:DOMImplementationSource
      @@@Description:
        @@@@lang:en
        @@@@@: 
          A <IF::DOMCore:DOMImplementationSource> object to be registered. 
    @@Return:
      @@@PerlDef:
        @@@@require: overload
        @@@@@:
          my $reg = ref $self ? $self
                              : \@org::w3c::dom::DOMImplementationSourceList;
          PUSH: {
            ## Checks if $s is already in list
            for (@$reg) {
              last PUSH if overload::StrVal ($_) eq overload::StrVal ($s) or
                           $_ eq $s;
            }
            push @$reg, $s;
          }
## Object:DOMImplementationRegistry

## -- Manakai object

ClassDef:
  @QName: 
    ManakaiDOM:ManakaiDOMObject
  @For: 
    ManakaiDOM:ManakaiDOM
  @Description:
    @@lang:en
    @@@:
      The common class that is inherited by all manakai DOM object classes.
  
  @IntMethod:
    @@Operator:
      ManakaiDOM:MUErrorHandler
    @@Description:
      @@@lang:en
      @@@@:
        This method is a generic error handler; all manakai exceptions 
        and warnings associated to an object are once reported to this method 
        and then delivered to appropriate entities. 
        \
        If the error is an exception (such as <X::DOMCore:DOMException> or 
        <X::ManakaiDOM:ManakaiDOMImplementationException>), it is 
        simply thrown.  If the error is only a warning, it is reported 
        via the <IF::DOMCore:DOMError> interface. 
        \
        See <PerlModule::Message::Util::Error> documentation for more 
        information on the error reporting mechanism.
        \
        {NOTE:: This kind of methods are named as <Perl::___report_error> 
                in the convention of <PerlModule::Message::Util::Error>. 
        \
        }
    @@Param:
      @@@Name:err
      @@@Type: 
        ManakaiDOM:ManakaiDOMExceptionOrWarning
      @@@Description:
        @@@@lang:en
        @@@@@:
          An exception object that describes what kind of error it is 
          and how it should be recovered. 
          \
          {NOTE:: Exception objects in manakai implementation 
                  inherit the class <PerlModule::Message::Util::Error>, 
                  that in turn inherits <PerlModule::Error>.
          \
          }
    @@Return:
      @@@PerlDef:
          if ($err->isa (<ClassName::ManakaiDOM:ManakaiDOMException>)) {
            $err->throw;
          } else {
            \## TODO: Implement warning reporting
            warn $err->stringify;
          }

ClassDef:
  @QName: 
    ManakaiDOM:ManakaiDOMExceptionOrWarning
  @For: 
    ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
  @ISA: 
    ManakaiDOM:ManakaiDOMObject
  @Description:
    @@lang:en
    @@@:
      A common class that is inherited by all manakai DOM 
      exception or warning classes.  DOM applications are 
      able to test whether a object is an instance of 
      manakai exception/warning or not. 
  @Attr:
    @@Name:text
    @@Description:
      @@@lang:en
      @@@@:
        Returns a short plain-text message, written in the 
        <CODE::i-default> language, that describes 
        what is happened. 
        \
        {NOTE:: This attribute is also defined in the class 
                <PerlModule::Message::Util::Error> and it is 
                overridden here for the purpose of manakai 
                exception and warning reporting. 
        \
        }
        \
        {NOTE:: This attribute only provides a mechanism for programer 
                to know what is occuring; for reporting error to end 
                user, DOM application should implement its own 
                mechanism with localized message.
        \
        }
    @@Get:
      @@@Type:
        DOMMain:DOMString
      @@@Description:
        @@@@lang:en
        @@@@@:
          An error message written in <CODE::i-default> language.
      @@@PerlDef:
          my $template;
          if (defined $self->{<Q::MDOMX:subtype>} and
              defined $self->{<Q::MUErrorCore:def>}->{<Q::MDOMX:subtype>}
                   ->{$self->{<Q::MDOMX:subtype>}}
                   ->{<Q::MUError:description>}) {
            $template = $self->{<Q::MUErrorCore:def>}
                   ->{<Q::MDOMX:subtype>}
                   ->{$self->{<Q::MDOMX:subtype>}}
                   ->{<Q::MUError:description>};
          } elsif (defined $self->{<Q::MUErrorCore:def>}
                   ->{<Q::MUError:description>}) {
            $template = $self->{<Q::MUErrorCore:def>}
                   ->{<Q::MUError:description>};
          } else {
            $template = $self->{<Q::MUErrorCore:type>};
          }
          $r = $self->_FORMATTER_PACKAGE_->new
                    ->replace ($template, param => $self);

  @ResourceDef:
    @@QName:
      ManakaiDOM:getExceptionCode
    @@rdf:type:
      dis2pm:BlockCode
    @@aliasChild:1
    @@PerlDef:
      $r = $self->{<Q::MUErrorCore:def>}->{<Q::DOMCore:code>};
    @@Description:
      @@@lang:en
      @@@@:
        Returns the exception/warning code of that exception/warning object. 

ResourceDef:
  @QName: 
    ManakaiDOM:ManakaiDOMException
  @rdf:type:
    ManakaiDOM:ExceptionClass
  @ISA: 
    ManakaiDOM:ManakaiDOMExceptionOrWarning
  @For: 
    ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
  @AliasFor:
    @@@:
      ::ManakaiDOM:ManakaiDOMCommon
    @@For: 
      !=ManakaiDOM:ManakaiDOMCommon
  @Description:
    @@lang:en
    @@@:
      An abstract class that is inherited by all manakai DOM exception classes.

ResourceDef:
  @QName: 
    ManakaiDOM:ManakaiDOMWarning
  @rdf:type:
    ManakaiDOM:WarningClass
  @ISA: 
    ManakaiDOM:ManakaiDOMExceptionOrWarning
  @For: 
    ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
  @AliasFor:
    @@@:
      ::ManakaiDOM:ManakaiDOMCommon
    @@For: 
      !=ManakaiDOM:ManakaiDOMCommon
  @Description:
    @@lang:en
    @@@:
      An abstract class that is inherited by all manakai DOM warning classes.

ClassDef:
  @QName: 
    ManakaiDOM:ManakaiDOMNodeObject
  @ISA: 
    ManakaiDOM:ManakaiDOMObject
  @Description:
    @@lang:en
    @@@:
      An internal node object that is able to be accessed via 
      <Class::ManakaiDOM:ManakaiDOMNodeReference>.
  @ImplNote:
    @@lang:en
    @@@:
      In manakai DOM implementation, most of DOM objects including 
      <IF::DOMCore:Element> and <IF::DOMCore:Document> instances 
      are implemented as a reference, i.e. 
      <Class::ManakaiDOM:ManakaiDOMNodeReference>, to node object.
  @IntMethod:
    @@Name: new
    @@Description:
      @@@lang:en
      @@@@: 
        Constructs a new instance of 
        <Class::ManakaiDOM:ManakaiDOMNodeObject> and returns it.
    @@Return:
      @@@Type: 
        ManakaiDOM:ManakaiDOMNodeObject
      @@@Description:
        @@@@lang:en
        @@@@@: 
          The newly created <Class::ManakaiDOM:ManakaiDOMNodeObject> instance.
      @@@PerlDef:
          $r = bless {
            <Q::TreeCore:origin> => [],
            <Q::TreeCore:subnode> => [],
            <Q::TreeCore:subnode2> => [],
            <Q::TreeCore:irefnode> => [],
            <Q::TreeCore:urefnode> => [],
            <Q::TreeCore:anydata> => [],
            <Q::TreeCore:anydata2> => [],
            <Q::TreeCore:rc> => 0,
            <Q::TreeCore:treeID> => <Code::ManakaiDOM:generateUniqueID>,
            <Q::TreeCore:nodeID> => <Code::ManakaiDOM:generateUniqueID>,
            <Q::DOMCore:hasFeature> => {},
          }, ref $self || $self;
  @IntMethod:
    @@Name: newReference
    @@Description:
      @@@lang:en
      @@@@:
        Creates a new reference to this node and returns it.
    @@Param:
      @@@Name: class
      @@@Type:
        DOMMain:any
      @@@Description:
        @@@@lang:en
        @@@@@:
          A Perl class package name with which the newly created 
          reference is blessed.  The <P:class> class must be a 
          subclass of <Class::ManakaiDOM:ManakaiDOM:ManakaiDOMNodeReference>.
    @@Return:
      @@@Type: 
        ManakaiDOM:ManakaiDOMNodeReference
      @@@Description:
        @@@@lang:en
        @@@@@:
          The newly created node reference.
      @@@PerlDef:
          $r = bless {
            <Q::TreeCore:node> => $self,
          }, ref $class ? ref $class : $class ? $class :
             <ClassName::ManakaiDOM:ManakaiDOMNodeReference>;
          $self->{<Q::TreeCore:rc>}++;
  @IntMethod:
    @@Name: isExternallyReferred
    @@Description:
      @@@lang:en
      @@@@:
        Tests and returns whether the tree that contains this node 
        is externally referred or not.
    @@Return:
      @@@Type: 
        DOMMain:boolean
      @@@InCase:
        @@@@Value: true
        @@@@Description:
          @@@@@lang:en
          @@@@@@: 
            There is one or more nodes that has been 
            referred from <Class::ManakaiDOM:ManakaiDOMNodeReference> objects.
      @@@InCase:
        @@@@Value: false
        @@@@Description:
          @@@@@lang:en
          @@@@@@: No external reference to the node in this tree found.
      @@@PerlDef:
          if ($self->{<Q::TreeCore:rc>}) {
            $r = true;
          } else {
            for (@{$self-><M::ManakaiDOM:ManakaiDOMNodeObject.getRootNodes>}) {
              if ($_-><M::ManakaiDOM:ManakaiDOMNodeObject
                                       .isExternallyReferredDownward>) {
                $r = true;
                last;
              }
            }
          }
  @IntMethod:
    @@Name: isExternallyReferredDownward
    @@Description:
      @@@lang:en
      @@@@: Check whether the node or any of subnodes is externally referred.
    @@Return:
      @@@Type: 
        DOMMain:boolean
      @@@PerlDef:
          if ($self->{<Q::TreeCore:rc>}) {
            $r = true;
          } else {
            DW:{
            SUBNODES:
            for my $key (@{$self->{<Q::TreeCore:subnode>}}) {
              for (ref $self->{$key} eq 'ARRAY' ? @{$self->{$key}}
                                                : values %{$self->{$key}||{}}) {
                if ($_-><M::ManakaiDOM:ManakaiDOMNodeObject
                                        .isExternallyReferredDownward>) {
                  $r = true;
                  last DW;
                }
              }
            }
            SUBNODES2:
            for my $key (@{$self->{<Q::TreeCore:subnode2>}}) {
              for (ref $self->{$key} eq 'ARRAY' ? @{$self->{$key}}
                                                : values %{$self->{$key}||{}}) {
                for (ref $_ eq 'ARRAY' ? @$_ : values %$_) {
                  if ($_-><M::ManakaiDOM:ManakaiDOMNodeObject
                                       .isExternallyReferredDownward>) {
                    $r = true;
                    last DW;
                  }
                }
              }
            }}
          }
  @IntMethod:
    @@Name: destroy
    @@Description:
      @@@lang:en
      @@@@: Destroy this tree.
    @@Return:
      @@@PerlDef:
          $_-><M::ManakaiDOM:ManakaiDOMNodeObject.destroyDownward>
          for @{$self-><M::ManakaiDOM:ManakaiDOMNodeObject.getRootNodes>};
    @@ImplNote:
      @@@lang:en
      @@@@:
        This method is different from Perl <Perl:DESTROY> special method.
  @IntMethod:
    @@Name: destroyDownward
    @@Description:
      @@@lang:en
      @@@@: Destroy this node and subnodes.
    @@Return:
      @@@PerlDef:
          CORE::delete $self->{$_} for @{$self->{<Q::TreeCore:origin>}};
          for my $key (@{$self->{<Q::TreeCore:subnode>}}) {
            my @node = ref $self->{$key} eq 'ARRAY' ? @{$self->{$key}}
                                         : values %{$self->{$key}||{}};
            CORE::delete $self->{$key};
            $_-><M::ManakaiDOM:ManakaiDOMNodeObject.destroyDownward> for @node;
          }
          for my $key (@{$self->{<Q::TreeCore:subnode2>}}) {
            my @node = map {ref $_ eq 'ARRAY' ? @$_ : values %$_}
                       ref $self->{$key} eq 'ARRAY' ? @{$self->{$key}}
                                         : values %{$self->{$key}||{}};
            CORE::delete $self->{$key};
            $_-><M::ManakaiDOM:ManakaiDOMNodeObject.destroyDownward> for @node;
          }
   \       for my $key (@{$self->{<Q::TreeCore:irefnode>}},
   \                    @{$self->{<Q::TreeCore:urefnode>}},
   \                    @{$self->{<Q::TreeCore:anydata>}},
   \                    @{$self->{<Q::TreeCore:anydata2>}}) {
            CORE::delete $self->{$key};
          }
  @IntMethod:
    @@Name: importTree
    @@Description:
      @@@lang:en
      @@@@: Change internal tree identifier to be same as this node.
    @@Param:
      @@@Name: node
      @@@Type: 
        ManakaiDOM:ManakaiDOMNodeObject
      @@@Description:
        @@@@lang:en
        @@@@@: The node that belongs to the tree the identifier is changed.
    @@Return:
      @@@PerlDef:
          unless ($node->{<Q::TreeCore:treeID>} eq
                  $self->{<Q::TreeCore:treeID>}) {
            $_-><M::ManakaiDOM:ManakaiDOMNodeObject.changeTreeIDDownward>
                                                  ($self->{<Q::TreeCore:treeID>})
              for @{$node-><M::ManakaiDOM:ManakaiDOMNodeObject.getRootNodes>};
          }
  @IntMethod:
    @@Name: changeTreeIDDownward
    @@Description:
      @@@lang:en
      @@@@:
        Change internal tree identifier of the node and subnodes.
        This method is intended to be used by the internal method 
        importTree.
    @@Param:
      @@@Name: treeID
      @@@Type: 
        DOMMain:DOMString
      @@@Description:
        @@@@lang:en
        @@@@@:
          The new tree identifier to which the tree identifier of this node
          is changed.
    @@Return:
      @@@PerlDef:
          $self->{<Q::TreeCore:treeID>} = ''.$treeID;
          for my $key (@{$self->{<Q::TreeCore:subnode>}}) {
            for (ref $self->{$key} eq 'ARRAY' ? @{$self->{$key}}
                                              : values %{$self->{$key}||{}}) {
              $_-><M::ManakaiDOM:ManakaiDOMNodeObject
                                     .changeTreeIDDownward> ($treeID);
            }
          }
          for my $key (@{$self->{<Q::TreeCore:subnode2>}}) {
            for (ref $self->{$key} eq 'ARRAY' ? @{$self->{$key}}
                                              : values %{$self->{$key}||{}}) {
              for (ref $_ eq 'ARRAY' ? @$_ : values %$_) {
                $_-><M::ManakaiDOM:ManakaiDOMNodeObject
                                      .changeTreeIDDownward> ($treeID);
              }
            }
          }
  @IntMethod:
    @@Name: getRootNodes
    @@Description:
      @@@lang:en
      @@@@:
        Get all root nodes (i.e. nodes that does not have the origin) in 
        the tree. 
    @@Return:
      @@@Type:
        perl:ARRAY
      @@@PerlDef:
          for (@{$self->{<Q::TreeCore:origin>}}) {
            next unless $self->{$_};
            NEW: for my $new (@{$self->{$_}
                -><M::ManakaiDOM:ManakaiDOMNodeObject.getRootNodes>}) {
              for my $old (@$r) {
                next NEW if $old eq $new;
              }
              push @$r, $new;
            }
          }
          push @$r, $self if @$r == 0;
  @IntMethod:
    @@Name: isSameNode
    @@Description:
      @@@lang:en
      @@@@: Check whether the two nodes are same or not.
    @@Operator:
      @@@ContentType:
        lang:Perl
      @@@@: eq
    @@Param:
      @@@Name: node
      @@@Type: 
        ManakaiDOM:ManakaiDOMNodeObject
      @@@Description:
        @@@@lang:en
        @@@@@: The node to be compared.
    @@Return:
      @@@Type: 
        DOMMain:boolean
      @@@Description:
        @@@@lang:en
        @@@@@: Whether the two nodes are same or not.
      @@@PerlDef:
          if (ref $node and
              UNIVERSAL::isa ($node,
                              <ClassName::ManakaiDOM:ManakaiDOMNodeObject>) and
              $node->{<Q::TreeCore:nodeID>} eq $self->{<Q::TreeCore:nodeID>}) {
            $r = true;
          }
  @IntMethod:
    @@Name: orphanate
    @@Description:
      @@@lang:en
      @@@@:
        This method should be called when this node is orphanated, i.e. 
        all references from <QUOTE:origin> nodes (and all references 
        from this node to <QUOTE:origin> nodes corresponding to them) 
        are deleted.  This methods destoroies the tree rooted by this 
        node if the tree is no longer externally referred; otherwise, 
        the tree identifier associated to each node is rewritten to 
        newly generated one.
        \
        {NOTE:: Interaction on deleting a relationship from multiply 
                organized <QUOTE:trees> (such as DOM tree and 
                styled displaying tree) is less studied.  This 
                method might be revisited or another method might 
                be necessary when style sheet, XBL, or other 
                technologies are implemented.
        \
        }
    @@Return:
      @@@PerlDef:
          if ($self-><M::ManakaiDOM:ManakaiDOMNodeObject.isExternallyReferred>) {
            my $id = <Code::ManakaiDOM:generateUniqueID>;
            $_-><M::ManakaiDOM:ManakaiDOMNodeObject.changeTreeIDDownward> ($id)
              for @{$self-><M::ManakaiDOM:ManakaiDOMNodeObject.getRootNodes>};
            ## NOTE:: "Root nodes" should be this node itself
            ##        by (current) definition of this method.
          } else {
            $self-><M::ManakaiDOM:ManakaiDOMNodeObject.destroy>;
          }
##Class:ManakaiDOMNodeObject

ClassDef:
  @QName: 
    ManakaiDOM:ManakaiDOMNodeReference
  @ISA: 
    ManakaiDOM:ManakaiDOMObject
  @IntMethod:
    @@Name: destroy
    @@Description:
      @@@lang:en
      @@@@: Destroy this reference object.
    @@Operator:
      @@@Type:
        lang:Perl
      @@@@: DESTROY
    @@Return:
      @@@PerlDef:
          my $node = $self->{<Q::TreeCore:node>};
          if ($node) {
            delete $self->{<Q::TreeCore:node>};
            $node->{<Q::TreeCore:rc>}--;
            unless ($node-><M::ManakaiDOM:ManakaiDOMNodeObject
                                              .isExternallyReferred>) {
              $node-><M::ManakaiDOM:ManakaiDOMNodeObject.destroy>;
            }
          } else {
            warn "An object of type ".ref ($self).
                 " that does not have associated node object is ".
                 "to be destroied; there might be a memory-leak code";
          }
##Class:ManakaiDOMNodeReference

## - For ManakaiDOMNodeObject
## TreeCore:nodeID  - The world-unique identifier of the node object.
## TreeCore:origin  - Hash key names of the origin properties.
## TreeCore:rc      - The number that denotes how many external references 
##                    ("ManakaiDOMNodeReference"s) there are.
## TreeCore:subnode - Hash key names of subnode properties.
## TreeCore:subnode2 - Hash key names of two-step subnode properties.
## TreeCore:treeID  - The world-unique identifier of the grove.
## - For ManakaiDOMNodeReference
## TreeCore:node    - The node object ("ManakaiDOMNodeObject") to which
##                    this is referring.


## -- Manakai implementation-specific exception and warning

ExceptionDef:
  @QName: 
    ManakaiDOM:ManakaiDOMImplementationException
  @ISA: 
    ManakaiDOM:ManakaiDOMException
  @For: 
    ManakaiDOM:ManakaiDOM
  @Description:
    @@lang:en
    @@@:
      A set of manakai DOM implementation-dependent exceptions.

  @Attr:
     @@Name:  code
     @@Description:
       @@@lang:en
       @@@@:
         The error code that denotes what kind of exception occures.
     @@Get:
       @@@Type:  
         DOMMain:unsigned-short
       @@@actualType: 
         ManakaiDOM:ManakaiDOMImplementationExceptionCode
       @@@PerlDef: 
         __CODE{ManakaiDOM:getExceptionCode}__;

  @ResourceDef:
    @@QName: 
      ManakaiDOM:ManakaiDOMImplementationExceptionCode
    @@rdf:type:
      ManakaiDOM:ConstGroup
    @@ISA:
      DOMMain:unsigned-short
    @@aliasChild: 1
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:ManakaiDOMCommon
      @@@For:
        !=ManakaiDOM:ManakaiDOMCommon

    @@XConst:
      @@@QName: 
        MDOMX:MDOM_TYPE_MISMATCH_ERR
      @@@Type: unsigned-short
      @@@Value: 0
      @@@Description:
        @@@@lang:en
        @@@@@:
          The type of an object is incompatible with the expected 
          type of the parameter.
      @@@Def:
        @@@@lang:en
        @@@@ContentType:
          lang:muf
        @@@@@:
            The type of an object specified as the value of parameter
            %t (name => {<Q::MDOMX:param-name>},
            prefix => { "}, suffix => {"}); is incompatible with the
            expected type%t (name => {<Q::MDOMX:class>}, 
            prefix => {: "}, suffix => {"}).
      @@@XParam:
        @@@@QName:
          MDOMX:param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter name.
          
      @@@XParam:
        @@@@QName:
          MDOMX:class
        @@@@Type:
          perl:package-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: Class name to which given value belongs.
          

    @@XConst:
      @@@QName: 
        MDOMX:PARAM_NULL_POINTER
      @@@Type: unsigned-short
      @@@Value: 1
      @@@Description:
        @@@@lang:en
        @@@@@: The null value is passed as a parameter.
      @@@Def:
        @@@@lang:en
        @@@@ContentType:
          lang:muf
        @@@@@:
            The null value is passed to the parameter%t (
            name => {<Q::MDOMX:param-name>},
            prefix => { "}, suffix => {"});.
      @@@XParam:
        @@@@QName:
          MDOMX:param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The name of the parameter to which the null value is given.

    @@XConst:
      @@@QName: 
        MDOMX:MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR
      @@@Type: unsigned-long
      @@@Value: 2
      @@@Description:
        @@@@lang:en
        @@@@@: 
          An attempt to break surrogate pair, i.e. the first character of 
          the range is the low-surrogate (the second 16-bit unit of the surrogate
          pair) or the last character of the range is the high-surrogate 
          (the first 16-bit unit of the surrogate pair).
      @@@XParam:
        @@@@QName:
          MDOMX:param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter to which inappropriate value is specified.

    @@XConst:
      @@@QName: 
        MDOMX:MDOM_DEBUG_BUG
      @@@Type: unsigned-short
      @@@Value: 3
      @@@Description:
        @@@@lang:en
        @@@@@:
          Unexpected case occurs.  In general, this exception is not 
          reported.  If the DOM implementation has a bug and 
          something unexpected is occur, this exception is raised. 
        \
          DOM application MUST NOT try to catch this exception. 
          If this exception is raised, please report to the 
          author of that module.
      @@@XParam:
        @@@@QName:
          MDOMX:values
        @@@@Type: 
          perl:hash
        @@@@Description:
          @@@@@lang:en
          @@@@@@: Arbitrary values for debugging.
  
    @@XConst:
      @@@QName: 
        MDOMX:MDOM_IMPL_BY_APP
      @@@Type: unsigned-short
      @@@Value: 4
      @@@Description:
        @@@@lang:en
        @@@@@:
          The callee method or attribute is expected to be implemented, 
          by the DOM application, by overriding it in the inheritting class. 

WarningDef:
  @QName: 
    ManakaiDOM:ManakaiDOMImplementationWarning
  @ISA: 
    ManakaiDOM:ManakaiDOMWarning
  @Description:
    @@lang:en
    @@@:
      Warnings for the implementation dependent matters and 
      "no effect" actions.
  
  @Attr:
     @@Name:  code
     @@Get:
       @@@Type:  
         DOMMain:unsigned-short
       @@@actualType:
         ManakaiDOM:ManakaiDOMImplementationWarningCode
       @@@Description:
         @@@@lang:en
         @@@@@:
           The warning code from the constant value group
           ManakaiDOMImplementationWarningCode.
       @@@PerlDef: 
         __CODE{ManakaiDOM:getExceptionCode}__;

  @ResourceDef:
    @@QName: 
      ManakaiDOM:ManakaiDOMImplementationWarningCode
    @@rdf:type:
      ManakaiDOM:ConstGroup
    @@ISA: 
      DOMMain:unsigned-short
    @@aliasChild:1
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:ManakaiDOMCommon
      @@@For:
        !=ManakaiDOM:ManakaiDOMCommon
    
    @@XConst:
      @@@QName: 
        MDOMX:ATTR_SET_NO_EFFECT
      @@@Type: unsigned-short
      @@@Value: 0
      @@@Description:
        @@@@lang:en
        @@@@@:
          Setting an attribute value has no effect by definition.
      @@@SubTypeDef:
        @@@@QName: MDOMX_NOEFFECT_SINCE_DOC_NOSUPPORT_XML
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The action has no effect since a document does not 
            support the <Feature::XML> feature. 
      @@@SubTypeDef:
        @@@@QName: MDOMX_NOEFFECT_SINCE_NODE_NOSUPPORT_XMLNS
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The action has no effect since a node does not 
            support XML Namespaces.

    @@XConst:
      @@@QName: 
        MDOMX:MDOM_NEWCHILD_IS_REFCHILD
      @@@Type: unsigned-short
      @@@Value: 1
      @@@Description:
        @@@@lang:en
        @@@@@:
          The node to be inserted is same as the reference node.
      @@@XParam:
        @@@@QName:
          MDOMX:newChild-param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter name for "newChild" node.
      @@@XParam:
        @@@@QName:
          MDOMX:refChild-param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter name for "refChild" node.

    @@XConst:
      @@@QName: 
        MDOMX:MDOM_REPLACE_BY_ITSELF_NO_EFFECT
      @@@Type:unsigned-short
      @@@Value:2
      @@@Description:
        @@@@lang:en
        @@@@@:
          An attempt to replace a node by itself is made. 
          It is no effect by definition.

    @@XConst:
      @@@QName: MDOMX_EMPTY_NS_PREFIX
      @@@Type: unsigned-short
      @@@Value: 3
      @@@Description:
        @@@@lang:en
        @@@@@:
          An empty namespace prefix is specified; its result 
          is implementation dependent <SRC::DOM Level 3>. 
    
    @@XConst:
      @@@QName: 
        MDOMX:MDOM_NS_EMPTY_URI
      @@@Type: unsigned-short
      @@@Value: 4
      @@@Description:
        @@@@lang:en
        @@@@@:
          The DOM Level 2 Core Specification defines that even the empty 
          string is treated as a real namespace URI.  The Errata for 
          the DOM Level 2 Specifications says that it is an error and 
          the way empty strings are treated is implementation dependent. 
        @@@@For:
          !ManakaiDOM:DOM3
      @@@Description:
        @@@@lang:en
        @@@@@:
          An empty string namespace URI is coverted into <DOM::null> 
          <SRC::DOM Level 3 Core>. 
        @@@@For:
          ManakaiDOM:DOM3
      @@@XParam:
        @@@@QName:
          MDOMX:param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter to which inappropriate value is specified.

## -- Frequently used code fragments

ResourceDef:
  @QName:
    ManakaiDOM:generateUniqueID
  @rdf:type:
    dis2pm:InlineCode
  @Description:
    @@lang:en
    @@@:
      Generates a global-unique opaque string. 
      \
      {NOTE:: A URI reference is generated by this code. 
      \
      }
  @For:
    ManakaiDOM:ManakaiDOM
  @AliasFor:
    @@@:
      ::ManakaiDOM:ManakaiDOMCommon
    @@For:
      !=ManakaiDOM:ManakaiDOMCommon
  @PerlDef:
      (
        sprintf 'mid:%d.%d.%s.dom.manakai@suika.fam.cx',
                time, $$,
                ['A'..'Z', 'a'..'z', '0'..'9']->[rand 62] .
                ['A'..'Z', 'a'..'z', '0'..'9']->[rand 62] .
                ['A'..'Z', 'a'..'z', '0'..'9']->[rand 62] .
                ['A'..'Z', 'a'..'z', '0'..'9']->[rand 62] .
                ['A'..'Z', 'a'..'z', '0'..'9']->[rand 62]
      )

## DOMMain.dis ends here
