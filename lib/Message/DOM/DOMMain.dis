Module:
  @QName:
    MDOM:DOMMain
  @FullName:
    @@lang: en
    @@@:
      DOM Basic Types

  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2004/dom/main#
  
  @Description:
    @@lang:en
    @@@:
      This module provides DOM basic types such as <TYPE::DOMString>
      and classes and properties to describe common DOM concept
      such as <TYPE::ManakaiDOM:ManakaiDOMURI> and
      <TFQ::reflectGet::ManakaiDOM:all>.  In addition,
      it provides the <Class::DOMImplementationRegistry>
      object from which DOM applications can obtain
      various DOM implementations.

  @DISCore:author: DISCore|Wakaba
  @License:
     license:Perl+MPL
  @Date:
    @@@:
      $Date: 2005/10/08 15:05:42 $
    @@ContentType:
      dis:Date.RCS
  
  @Require:
    @@Module:
      @@@QName:
        DISlib:DISIDL
      @@@WithFor:
        ManakaiDOM:all
    @@Module:
      @@@QName:
        DISlib:DISPerl
      @@@WithFor:
        ManakaiDOM:all
    @@Module:
      @@@QName:
        Util:ManakaiNode
      @@@WithFor:
        ManakaiDOM:Perl
    @@Module:
      @@@QName:
        UtilError:DOMException
      @@@WithFor:
        ManakaiDOM:Perl
    @@Module:
      @@@Name: DOMMain
      @@@WithFor:
        ManakaiDOM:ManakaiDOM
    @@Module:
      @@@Name: DOMMain
      @@@WithFor:
        ManakaiDOM:ManakaiDOM1
    @@Module:
      @@@Name: DOMMain
      @@@WithFor:
        ManakaiDOM:ManakaiDOM2
    @@Module:
      @@@Name: DOMMain
      @@@WithFor:
        ManakaiDOM:ManakaiDOM3
    @@Module:
      @@@Name: DOMMain
      @@@WithFor:
        ManakaiDOM:ManakaiDOMLatest
    @@Module:
      @@@Name: DOMFeature
      @@@WithFor:
        ManakaiDOM:ManakaiDOMLatest
    @@Module:
      @@@Name: DOMCore
      @@@Description:
        @@@@lang:en
        @@@@@:
          The DOM Core module.  Note that <Module::MDOM:DOMCore> module in turn
          requires this (<Module::MDOM:DOMMain>) module.
  @DefaultFor:
    ManakaiDOM:ManakaiDOMLatest

Namespace:
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @dis2pm:
    http://suika.fam.cx/~wakaba/archive/2004/11/8/dis2pm#
  @DISlib:
    http://suika.fam.cx/~wakaba/archive/2004/dis/
  @DOMEvents:
    http://suika.fam.cx/~wakaba/archive/2004/dom/events#
  @DOMMain:
    http://suika.fam.cx/~wakaba/archive/2004/dom/main#
  @DOMMetaImpl:
    http://suika.fam.cx/~wakaba/archive/2004/dom/meta#
  @dx:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#
  @ecore:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/
  @Err:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/
  @f:
    http://suika.fam.cx/~wakaba/archive/2004/dom/feature#
  @html5:
    http://www.w3.org/1999/xhtml
  @idl:
    http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#
  @infoset:
    http://www.w3.org/2001/04/infoset#
  @j:
    http://suika.fam.cx/~wakaba/archive/2004/dis/Java#
  @jlang:
    java:java.lang.
  @js:
    http://suika.fam.cx/~wakaba/archive/2004/dis/ECMAScript#
  @kwd:
    http://suika.fam.cx/~wakaba/archive/2005/rfc2119/
  @lang:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @MDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.
  @MDOMX:
    http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @p:
    http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#
  @TreeCore:\
  @Util:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/
  @UtilError:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/
  @xml:
    http://www.w3.org/XML/1998/namespace
  @xmlns:
    http://www.w3.org/2000/xmlns/

ResourceDef:
  @ForCheck:
    !=ManakaiDOM|all
    ManakaiDOM|ManakaiDOM !=ManakaiDOM|ManakaiDOM !ManakaiDOM|ManakaiDOM3
  @QName:
    MDOM:
  @rdf:type:
    dis:ModuleGroup
  @FullName:
    @@lang:en
    @@@:
      The manakai DOM modules
  @DISPerl:packageName:
    @@@:
      Message::DOM::
    @@For: ManakaiDOM|ManakaiDOM
    @@ManakaiDOM:moduleSuffix:
      @@@@: Level2
      @@@For: ManakaiDOM|ManakaiDOM2 !ManakaiDOM|ManakaiDOM3
    @@ManakaiDOM:moduleSuffix:
      @@@@: Level1
      @@@For: ManakaiDOM|ManakaiDOM1 !ManakaiDOM|ManakaiDOM2
  @DISPerl:interfacePackageName:
    @@@:
      Message::DOM::IFLevel2::
    @@For: ManakaiDOM|ManakaiDOM2 !ManakaiDOM|ManakaiDOM3
  @DISPerl:interfacePackageName:
    @@@:
      Message::DOM::IFLevel1::
    @@For: ManakaiDOM|ManakaiDOM1 !ManakaiDOM|ManakaiDOM2

ElementTypeBinding:
  @Name: ResourceTypeDef
  @ElementType: 
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      rdfs:Class
    @@rdfs:subClassOf:
      rdfs:Class::ManakaiDOM:all
    @@subsetOf:
      rdfs:Class::ManakaiDOM:all
    @@For: =ManakaiDOM|all

ElementTypeBinding:
  @Name: PropDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      rdf:Property
    @@For: =ManakaiDOM|all

ElementTypeBinding:
  @Name: TreeElementType
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:TreeElementType
    @@For: =ManakaiDOM|all

ResourceTypeDef:
  @QName: ErrorClass
  @FullName:
    @@lang:en
    @@@:
      <IF::DOMCore:DOMError> class
  @Description:
    @@lang:en
    @@@:
      <IF::DOMError> type and its implementation pairs. 

ElementTypeBinding:
  @Name: WarningDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:WarningClass
    @@ISA: 
      ManakaiDOM:ManakaiDOMWarning::ManakaiDOM:Perl
    @@ISA:
      ManakaiDOM:ManakaiDOMObject
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM

ElementTypeBinding:
  @Name: SubTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: dx|ErrorSubCode

ElementTypeBinding:
  @Name: XParam
  @ElementType:
    ecore:hasParameter

ElementTypeBinding:
  @Name: Const
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: 
      ManakaiDOM:Const

ElementTypeBinding:
  @Name: XConst
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: dx|ErrorCode

ElementTypeBinding:
  @Name: Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Attribute
    @@ForCheck:
      ManakaiDOM:DOM !=ManakaiDOM|ManakaiDOM

ElementTypeBinding:
  @Name: Get
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|AttributeGet

ElementTypeBinding:
  @Name: Set
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|AttributeSet

ResourceTypeDef:
  @QName: ReflectGet
  @enDesc:
    Getter templates for DOM attributes <QUOTE::reflecting> 
    element attributes.
  @rdfs:subClassOf:
    DISCore:AnyDefContainer

ResourceTypeDef:
  @QName: ReflectSet
  @enDesc:
    Setter templates for DOM attributes <QUOTE::reflecting>
    element attributes.
  @rdfs:subClassOf:
    DISCore:AnyDefContainer

PropDef:
  @QName: reflectGet
  @enDesc:
    Getter template for a <QUOTE::reflecting> DOM attribute.
  @dataType: dis|TFQNames
  @rdfs:range: ReflectGet

PropDef:
  @QName: reflectSet
  @enDesc:
    Setter template for a <QUOTE::reflecting> DOM attribute.
  @dataType: dis|TFQNames
  @rdfs:range: ReflectSet

ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Method
    @@ForCheck: !=ManakaiDOM|ManakaiDOM

ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|MethodParameter

ElementTypeBinding:
  @Name: FormatDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISCore|LexicalType
    @@For: =ManakaiDOM|all
    @@rdfs:subClassOf:
      DISCore:String::ManakaiDOM:all

FormatDef:
  @QName: DOMMethodParameterName
  @Description:
    @@lang:en
    @@@:
      A DOM method parameter name. 

ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|MethodReturn

ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase

## -- lang:dis vocabulary

TreeElementType:
  @QName:
    dis:CheckReadOnly
  @dataType:
    dis:Boolean
  @rdfs:domain:
    dis:SetProp
  @Description:
    @@lang:en
    @@@:
      Whether if the node to set an attribute value is read-only is 
      checked before the setting or not. 

TreeElementType:
  @QName:
    dis:GetPropNode
  @dataType:
    dis:TypeQName
  @rdfs:range:
    rdf:Property
  @Description:
    @@lang:en
    @@@:
      Gets the nodal value of a <Class::ManakaiDOM:ManakaiDOMNodeReference> 
      property (actualy <Class::ManakaiDOM:ManakaiDOMNodeObject> property). 

## -- DOM specific properties and types

Const:
  @Name: null
  @Type: 
    ManakaiDOM:any::ManakaiDOM:all
  @ForCheck:
    ManakaiDOM:all
  @Value:
    @@ContentType: 
      lang:Perl
    @@@: undef
  @Description:
    @@lang:en
    @@@:
       The null value.  Note that <DOM::null> is different from 
       empty string and number zero.

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMConfigParameter
  @Description:
    @@lang:en
    @@@: A DOM configuration parameter.

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMEvent
  @Description:
    @@lang:en
    @@@: A DOM event definition.

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMError
  @Description:
    @@lang:en
    @@@: A DOM error definition.

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMConfigParameterSet
  @Description:
    @@lang:en
    @@@: A set of DOM configuration parameters.

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMEventSet
  @Description:
    @@lang:en
    @@@: A set of DOM event definitions.

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMErrorSet
  @Description:
    @@lang:en
    @@@: A set of DOM error definitions.

PropDef:
  @QName:
    dis:NSVersion
  @Description:
    @@lang:en
    @@@:
      A namespace-aware variant of the method or attribute.

PropDef:
  @QName:
    dis:NoNSVersion
  @Description:
    @@lang:en
    @@@: A namespace-unaware variant of the method or attribute.

PropDef:
  @Name: isNamespaceAware
  @Description:
    @@lang:en
    @@@: 
      Whether a subject resource is namespace-aware or not.  Note that 
      the property value of <CODE::false> does not mean the subject 
      resource is namespace unaware; it might be namespace-neutral.
  @dataType:
    dis:Boolean

PropDef:
  @Name: isNamespaceUnaware
  @Description:
    @@lang:en
    @@@:
      Whether a subject resource is namespace-unaware or not.

## -- Obsolete properties

## NOTE: These definitions will be removed after 
##       all these instances removed from the <QUOTE::dis> source files.

PropDef:
  @QName:
    dis:Redefine
  @Description:
    @@lang:en
    @@@: Declares redefining (obsolete)
PropDef:
  @QName:
    dis:RedefinedBy
  @Description:
    @@lang:en
    @@@: Declares redefined in elsewhere (obsolete)
PropDef:
  @QName:
    dis:Redefined
  @Description:
    @@lang:en
    @@@: Declares redefined in elsewhere (obsolete)

## -- Sugar

ElementTypeBinding:
  @Name: PerlDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:Perl

## -- DOM Feature

ResourceDef:
  @QName: 
    DOMMain:docSupportsXMLFeature
  @rdf:type:
    dis2pm:InlineCode
  @Description:
    @@lang:en
    @@@:
      Whether a document has support for the <Feature::XML> feature or not.
  @PerlDef:
    ($DOCOBJ->{<H::DOMCore:hasFeature>}->{XML})

ElementTypeBinding:
  @Name: FeatureDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DOMFeature|Feature
    @@For: =ManakaiDOM|all

ElementTypeBinding:
  @Name: FeatureVerDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DOMFeature|Feature

ElementTypeBinding:
  @Name: featureQName
  @ElementType:
    f:name
  @ShadowContent:
    @@ContentType: DISCore|QName

## -- Manakai object

ResourceDef:
  @QName: 
    ManakaiDOM:ManakaiDOMObject
  @rdf:type:
    ManakaiDOM:Class
  @For: 
    ManakaiDOM:ManakaiDOM

  @Implement: ecore|MUErrorTarget||ManakaiDOM|Perl

  @Description:
    @@lang:en
    @@@:
      The common class that is inherited by all manakai DOM object classes.
  
  @ResourceDef:
    @@rdf:type: DISLang|Method
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isForInternal: 1
    @@Operator:
      @@@@:
        ManakaiDOM:MUErrorHandler
      @@@ContentType:
        dis:TypeQName
    @@Description:
      @@@lang:en
      @@@@:
        This method is a generic error handler; all manakai exceptions 
        and warnings associated to an object are once reported to this method 
        and then delivered to appropriate entities. 
        \
        If the error is an exception (such as <IF::DOMCore:DOMException> or 
        <IF::ManakaiDOM:ManakaiDOMImplementationException>), it is 
        simply thrown.  If the error is only a warning, it is reported 
        via the <IF::DOMCore:DOMError> interface. 
        \
        See <PerlModule::Message::Util::Error> documentation for more 
        information on the error reporting mechanism.
        \
        {NOTE:: This kind of methods are named as <Perl::___report_error> 
                in the convention of <PerlModule::Message::Util::Error>. 
        \
        }
    @@Param:
      @@@Name:err
      @@@Type: 
        ManakaiDOM:ManakaiDOMExceptionOrWarning::ManakaiDOM:Perl
      @@@Description:
        @@@@lang:en
        @@@@@:
          An exception object that describes what kind of error it is 
          and how it should be recovered. 
          \
          {NOTE:: Exception objects in manakai implementation 
                  inherit the class <PerlModule::Message::Util::Error>, 
                  which in turn inherits <PerlModule::Error>.
          \
          }
    @@Return:
      @@@PerlDef:
          if ($err->isa (<ClassName::dx|Exception
                                   ::ManakaiDOM:Perl>)) {
            $err->throw;
          } else {
            \## TODO: Implement warning reporting
            warn $err->stringify;
          }

## -- DOM Core Specification datatypes

ResourceDef:
  @Name: DOMDataType
  @Description:
    @@lang:en
    @@@:
      A DOM data type.
  @rdf:type:
    rdfs:Class
  @rdfs:subClassOf: idl|IDLDataType
  @For: =ManakaiDOM|all

ElementTypeBinding:
  @Name: DOMDataTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DOMDataType

ResourceDef:
  @For:
    ManakaiDOM:DOM2
  @QName: DOMTimeStamp
  @enLabel:
    <DOM::DOMTimeStamp>

  @rdf:type: DOMDataType
  @Description:
    @@lang:en
    @@@: 
      An absolute or relative time.  It is represented 
      as a number of milliseconds.

  @rdfs:subClassOf: idl|unsignedLongLong||ManakaiDOM|all

  @idl:typedefAs: idl|unsignedLongLong
  @idl:java: j|long
  @idl:perl: p|Number
  @idl:ecmascript: js|Date
##DOMTimeStamp

DOMDataTypeDef:
  @QName: DOMUserData
  @For: ManakaiDOM|DOM3
  @enLabel:
    <DOM::DOMUserData>
  
  @enDesc: A reference to application data.

  @Def:
    @@ContentType: lang|dis
    @@DISLang:dataTypeAliasFor: DOMMain|any||ManakaiDOM|all
    @@For: ManakaiDOM|IDL

  @idl:java: jlang|Object
  @idl:ecmascript: js|AnyType
  @idl:perl: p|Any
##DOMUserData

ElementTypeBinding:
  @Name: enDesc
  @ElementType:
    dis:Description
  @ShadowContent:
    @@lang:en

DOMDataTypeDef:
  @QName: DOMObject
  @For: ManakaiDOM|DOM3
  @enLabel:
    <DOM::DOMObject>

  @rdfs:subClassOf: idl|Object||ManakaiDOM|all
  
  @enDesc: An object reference.

  @idl:typedefAs: idl|Object  
  @idl:java: j|Object
  @idl:ecmascript:
    @@@: js|Object
    @@ImplNote:
      @@@lang:en
      @@@@:
        DOM spec text describes as the <TYPE::DOMObject> is bound
        to <TYPE::js|ObjectType> type while DOM ECMAScript binding
        appendix describes as it is an object which
        implements the <Class::js|Object> interface.
  @idl:perl: p|Object
##DOMObject

ResourceDef:
  @QName: DOMString
  @rdf:type: DOMDataType
  @enLabel:
    <DOM::DOMString>

  @idl:sequenceOf: idl|unsignedShort
  @idl:java: jlang|String
  @idl:ecmascript: js|StringType
  @idl:perl: p|CharacterString

  @rdfs:subClassOf:
    DISLang:String

  @Description:
    @@lang:en
    @@@: 
      A string.  It is used to store Unicode characters.
##DOMString

ResourceDef:
  @QName: ManakaiDOMString
  @AliasFor: DOMString
  @ImplNote:
    @@lang:en
    @@@:
      This is a historical variant for <TYPE::DOMString>.
  @For: ManakaiDOM|ManakaiDOM

ResourceDef:
  @For: 
    ManakaiDOM:DOM2
  @For:
    =ManakaiDOM:ManakaiDOM

  @rdf:type:
    @@@:
      dis:MultipleResource
    @@ForCheck:
      !ManakaiDOM:ForIF !ManakaiDOM:ForClass
  @resourceFor:
    ManakaiDOM:ForIF
  @resourceFor:
    @@@:
      ManakaiDOM:ForClass
    @@For:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM

  @Name:
    @@@: StringExtend
    @@ForCheck:
      ManakaiDOM:ForIF
  @Name:
    @@@: ManakaiDOMStringExtend
    @@ForCheck:
      ManakaiDOM:ForClass

  @rdf:type:
    @@@:
      ManakaiDOM:IF
    @@ForCheck:
      ManakaiDOM:ForIF
  @rdf:type:
    @@@:
      ManakaiDOM:PrimitiveTypeClass
    @@ForCheck:
      ManakaiDOM:ForClass

  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOM||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck:
      ManakaiDOM|ManakaiDOM ManakaiDOM|ForClass
  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOM2||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck:
      ManakaiDOM|ManakaiDOM2 ManakaiDOM|ForClass
  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOM3||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck:
      ManakaiDOM|ManakaiDOM3 ManakaiDOM|ForClass
  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOMLatest||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck:
      ManakaiDOM|ManakaiDOMLatest ManakaiDOM|ForClass

  @Description:
    @@lang:en
    @@@:
      Extensions to a language's native <CODE::String> class or interface.
     \
      {NOTE:: This interface is defined in the informative Appendix B
              of the <CITE::DOM Level 2 Core> specification and Appendix E
              of the <CITE::DOM Level 3 Core> specification.
      }

  @Method:
    @@Name: findOffset16
    @@plMName: find_offset_16
    @@Description:
      @@@lang:en
      @@@@: 
        Returns the UTF-16 offset corresponding to a UTF-32 offset.

        {NOTE:: Applications can always round-trip from a 
                UTF-32 offset to a UTF-16 offset and back.
                Applications can round-trip from UTF-16
                offset to a UTF-32 offset and back, however, if
                and only if the UTF-16 offset is not in the middle
                of a surrogate pair.  Unmatched surrogates
                count as a single UTF-16 value.
        }
    @@Param:
      @@@Name: offset32
      @@@Type:
        @@@@@: DOMMain|unsigned-long||ManakaiDOM|all
        @@@@ImplNote:
          @@@@@lang:en
          @@@@@@:
            <CODE::int> in spec.
      @@@Description:
        @@@@lang:en
        @@@@@: The UTF-32 offset.
    @@Return:
      @@@Type:
        @@@@@: DOMMain|unsigned-long||ManakaiDOM|all
        @@@@ImplNote:
          @@@@@lang:en
          @@@@@@:
            <CODE::int> in spec.
      @@@Description:
        @@@@lang:en
        @@@@@: The UTF-16 offset.
      @@@ecore:raises:
        @@@@@: StringIndexOutOfBoundsException
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified <P::offset32> is negative or greater than
            the number of characters, i.e. the number of UTF-32 32-bit
            code units.
      @@@PerlDef:
        @@@@DefaultValue: $offset32
        @@@@ForCheck: ManakaiDOM|ForClass
        @@@@@:
          my $s = ref $self eq 'SCALAR' ? $self : \$self;
          if (not defined $offset32 or $offset32 < 0 or
              CORE::length ($$s) < $offset32) {
#            __EXCEPTION{ManakaiDOMStringIndexOutOfBoundsException::
#              MDOMX:param-name => 'offset32',
#            }__;
          }
          my $ss = substr $$s, 0, $offset32;
          if ($ss =~ /[\x{10000}-\x{10FFFF}]/) {
            while ($ss =~ /[\x{10000}-\x{10FFFF}]+/g) {
              $r += $+[0] - $-[0];
            }
          }
  @Method:
    @@Name: findOffset32
    @@plMName: find_offset_32
    @@Description:
      @@@lang:en
      @@@@:
        Returns the UTF-32 offset corresponding to a UTF-16
        offset.

        {NOTE:: If the UTF-16 offset is into the middle of a 
                surrogate pair, then the UTF-32 offset of 
                the <EM::end> of the pair, i.e.
                the index of the character after the end of the pair
                is returned.  While applications can always
                round-trip from a UTF-32 offset to a UTF-16 offset
                and back, they can round-trip from a UTF-16 offset
                to a UTF-32 offset and back if and only if
                the UTF-16 offset is not in the middle of a
                surrogate pair.  Unmatched surrogates count
                as a single UTF-16 value.
        }

        {eg::  
          {P:: A pseudo-code

             {CODE::<html5:var::len32> = findOffset32 (<html5:var
                    ::str>, <html5:var::str>.length);
             }

               would return the number of characters in
               the string <html5:var::str>.
          }
        }
    @@enDesc:
      @@@@:
        {NOTE:: This function is implemented in a way that
                breaks the <Perl::pos> (position) of the string
                being changed.
        }
      @@@ForCheck: ManakaiDOM|ForClass

    @@Param:
      @@@Name: offset16
      @@@Type: unsigned-long||ManakaiDOM|all
      @@@Description:
        @@@@lang:en
        @@@@@: The UTF-16 offset.
    @@Return:
      @@@Type: unsigned-long||ManakaiDOM|all
      @@@Description:
        @@@@lang:en
        @@@@@:
          The UTF-32 offset.  If the <P::offset16> value is into middle of a 
          surrogate pair, the UTF-32 offset at the end of the pair is 
          returned.
      @@@ecore:raises:
        @@@@@: StringIndexOutOfBoundsException
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified <P::offset16> is negative or greater than
            the number of UTF-16 16-bit code-units.
      @@@PerlDef:
        @@@@DefaultValue: $offset16
        @@@@ForCheck: ManakaiDOM|ForClass
        @@@@@:
          my $s = ref $self eq 'SCALAR' ? $self : \$self;
          if (not defined $offset16 or $offset16 < 0 or
              CORE::length ($$s) * 2 < $offset16) {
#            __EXCEPTION{ManakaiDOMStringIndexOutOfBoundsException::
#              MDOMX:param-name => 'offset16',
#            }__;
          }
          pos ($$s) = 0;
          use integer;
          while ($offset16 and pos $$s <= CORE::length $$s) {
            if ($$s =~ /[^\x{10000}-\x{10FFFF}]{1,$offset16}/gc) {
              $offset16 -= $+[0] - $-[0];
            } elsif ($$s =~ m{[\x{10000}-\x{10FFFF}]{1,$offset16/2}}gc) {
              $offset16 -= 2 * ($+[0] - $-[0]);
              last if $offset16 < 0;
            } else {
              __EXCEPTION{
              MDOMX:MDOM_DEBUG_BUG||ManakaiDOM:Perl::
                MDOMX:values => {{
                  count => $offset16,
                  position => 1,
                }},
              }__;
            }
          }
          if ($offset16 > 0) {
#            __EXCEPTION{ManakaiDOMStringIndexOutOfBoundsException::
#              MDOMX:param-name => 'offset16',
#            }__;
          }
          $r = pos ($$s);
##StringExtend

ResourceDef:
  @rdf:type:
    @@@: dis|MultipleResource
    @@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass
  @resourceFor: ManakaiDOM|ForIF
  @resourceFor:
    @@@: ManakaiDOM|ForClass
    @@ForCheck: ManakaiDOM|ManakaiDOM !=ManakaiDOM|ManakaiDOM
  @For: ManakaiDOM|DOM2
  @For: =ManakaiDOM|ManakaiDOM

  @rdf:type:
    @@@: Err|MUErrorInterface
    @@ForCheck: ManakaiDOM|ForIF

  @rdf:type:
    @@@: Err|MUErrorClass
    @@ForCheck: ManakaiDOM|ForClass

  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOM||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM
  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOM2||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM2
  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOM3||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM3
  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOMLatest||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOMLatest

  @AppISA:
    @@@:
      Message::Util::Error
    @@For: ManakaiDOM|ManakaiDOM
  @ISA:
    @@@: ManakaiDOM|ManakaiDOMObject
    @@ForCheck: ManakaiDOM|ForClass

  @QName:
    @@@: StringIndexOutOfBoundsException
    @@ForCheck:
      ManakaiDOM:ForIF
  @QName:
    @@@: ManakaiDOMStringIndexOutOfBoundsException
    @@ForCheck:
      ManakaiDOM:ForClass
##StringIndexOutOfBoundsException

ElementTypeBinding:
  @Name: plMName
  @ElementType:
    DISPerl:methodName
  @ShadowContent:
    @@For: ManakaiDOM|Perl

## -- DOM specialized string types

ElementTypeBinding:
  @Name: StringDataTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DataType
    @@rdfs:subClassOf: DOMString
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM

StringDataTypeDef:
  @QName: 
    ManakaiDOM:ManakaiDOMURI
  @FullName: 
    @@lang:en
    @@@: DOM URI
  @Description:
    @@lang:en
    @@@:
      {P:: DOM URI.  It is a specialized case of the <TYPE::DOMString> and 
      that met the conditions:
    \
      = An absolute identifier absolutely identifies a resource on the Web.
    \
      = Simple string equality of absolute resource identifiers. 
      No other equaivalence is considered significant to the 
      DOM specification.
    \
      = A relative identifier is easily detected and made absolute 
      relative to an absolute identifier.
    \
      = Retrieval of content of a resource may be accomplished 
      where required.
      
      }
      
      {NOTE:: Examples of DOM URI would include RFC 3986 URI and
              RFC 3987 IRI.
      }

  @ResourceDef:
    @@QName: isRelativeDOMURI
    @@rdf:type:
      dis2pm:InlineCode
    @@Description:
      @@@lang:en
      @@@@:
        Whether a string is a relative DOM URI or not. 
    @@PerlDef:
      @@@@:
        ($INPUT !~ /\A[0-9A-Za-z+_.%-]+:/)
      @@@ImplNote:
        @@@@lang:en
        @@@@@:
          {TODO:: I18n consideration
          \
          }

StringDataTypeDef:
  @QName: RFC2732URIReference
  @Label:
    @@lang:en
    @@@:
      RFC 2396 / 2732 URI reference
  @FullName:
    @@lang:en
    @@@:
      URI reference as defined in RFC 2396 amended by RFC 2732
  @rdfs:subClassOf:
    ManakaiDOM:ManakaiDOMURI

StringDataTypeDef:
  @QName: RFC2396URIReference
  @Label:
    @@lang:en
    @@@:
      RFC 2396 URI reference
  @FullName:
    @@lang:en
    @@@:
      URI reference as defined in RFC 2396
  @rdfs:subClassOf: RFC2732URIReference

StringDataTypeDef:
  @QName: RFC2396URI
  @Label:
    @@lang:en
    @@@:
      RFC 2396 URI
  @FullName:
    @@lang:en
    @@@:
      URI as defined in RFC 2396
  @rdfs:subClassOf: RFC2396URIReference

StringDataTypeDef:
  @QName: RFC2396AbsoluteURI
  @Label:
    @@lang:en
    @@@:
      RFC 2396 absolute URI
  @FullName:
    @@lang:en
     @@@:
       Absolute URI as defined in RFC 2396
  @rdfs:subClassOf: RFC2396URI

## TODO: Output escape

StringDataTypeDef:
  @QName: 
    ManakaiDOM:ManakaiDOMNamespaceURI
  @FullName:
    @@lang:en
    @@@: DOM Namespace URI
  @rdfs:subClassOf:
    ManakaiDOM:ManakaiDOMURI
  @Description:
    @@lang:en
    @@@:
      A namespace URI.  In general, DOM implementations does not 
      perform any URI normalization or canonicalization.  The URIs 
      given to the DOM are assumed to be valid and no lexical 
      checking is performed.
      
      Absolute URI references are treated 
      as strings and compared literally.  How relative namespace URI 
      references are treated is undefined.  DOM applications should 
      use <DOM::null> if they wish to have no namespace.
      
      Some programing languages can differentiate empty strings 
      from <DOM::null>.  Empty strings were specified as a legal namespace 
      URI in the DOM Level 2 Specification but the DOM Level 2 Errata 
      refines this as the implementaton dependent matter.  The 
      DOM Level 3 Specification again refines to be converted to <DOM::null>.
  @ImplNote:
    @@lang:en
    @@@: 
      The <FILE::dis2pm.pl> is coded so that if the input (the parameter of 
      a method or the given value of an attribute) is typed as 
      <TYPE::ManakaiDOMNamespaceURI>, the Perl code to check the empty 
      string is outputed as part of the implementation.

  @ResourceDef:
    @@rdf:type: DISLang|InputProcessor
    @@PerlDef:
      if (CORE::defined $INPUT and CORE::length $INPUT == 0) {
        __WARNING{MDOMX:MDOM_NS_EMPTY_URI::
          MDOMX:param-name => {$INPUT},
        }__;
        __FOR{ManakaiDOM:DOM3::
          $INPUT = undef;
        }__;
      }

StringDataTypeDef:
  @QName: ManakaiDOMSchemaType
  @FullName:
    @@lang:en
    @@@:
      Schema language type
  @Description:
    @@lang:en
    @@@:
      An absolute URI representing the type of the schema language 
      <SRC::DOM Level 3 Core <CP::schema-type>, DOM Level 3 Load and Save
            <M::DOMLS:DOMImplementationLS.createLSParser>>.
      \
      {NOTE:: Schema languages other than XML Schema and XML DTD 
              are outside of the scope of W3C; they should 
              recommend their identifying absolute URI 
              <SRC::DOM Level 3 Core <CP::schema-type>, 
                    DOM Level 3 Load and Save 
                    <M::DOMLS:DOMImplementationLS.createLSParser>>.
      \
      }
  @rdfs:subClassOf:
    ManakaiDOM:ManakaiDOMURI
  @InCase:
    @@Value:
      @@@@:
        http://www.w3.org/2001/XMLSchema
      @@@ContentType: DISCore|URI
    @@Description:
      @@@lang:en
      @@@@:
        The XML Schema definition language 
        <SRC::DOM Level 3 Core <CP::schema-type>, 
              DOM Level 3 Load and Save
              <M::DOMLS:DOMImplementationLS.createLSParser>>.
  @InCase:
    @@Value:
      @@@@:
        http://www.w3.org/TR/REC-xml
      @@@ContentType: DISCore|URI
    @@Description:
      @@@lang:en
      @@@@:
        The XML 1.0 Document Type Definition 
        <SRC::DOM Level 3 Core <CP::schema-type>, 
              DOM Level 3 Load and Save
        <M::DOMLS:DOMImplementationLS.createLSParser>>.

ImplNote:
  @lang:en
  @@:
    TODO: Move key identifier(s) to keyboard event module.

StringDataTypeDef:
  @QName:
    ManakaiDOM:ManakaiDOMKeyIdentifier
  @For:
    ManakaiDOM:ManakaiDOM3
  @FullName:
    @@lang:en
    @@@: DOM key identifier
  @Description:
    @@lang:en
    @@@:
      A key identifier.
    \
      {NOTE:: A set of key identifiers are defined in the Appendix A 
              of the <CITE::DOM Level 3 Events> Specification.
    \
      }

StringDataTypeDef:
  @QName:
    ManakaiDOM:ManakaiDOMKeyIdentifiers
  @For:
    ManakaiDOM:ManakaiDOM3
  @FullName:
    @@lang:en
    @@@: List of DOM key identifiers
  @Description:
    @@lang:en
    @@@:
      Zero or more <TYPE::ManakaiDOM:ManakaiDOMKeyIdentifier> separated 
      by white space (XML 1.0 <CODE::S>). 
      \
      In the manakai DOM implementations, method parameters and 
      attributes whose actual datatype is 
      <TYPE::ManakaiDOM:ManakaiDOMKeyIdentifiers> also accept a reference 
      to an array whose items are key identifier strings as well as 
      a plain string of identifiers.

  @ResourceDef:
    @@rdf:type: DISLang|InputProcessor
    @@PerlDef:
      if (CORE::defined $INPUT) {
        unless (CORE::ref $INPUT) {
          $INPUT = [CORE::split /[\x20\x09\x0D\x0A]/, $INPUT];
        }
      } else {
        $INPUT = [];
      }

StringDataTypeDef:
  @QName: ManakaiDOMXMLName
  @FullName:
    @@lang:en
    @@@: XML Name
  @ResourceDef:
    @@rdf:type: DISLang|InputProcessor
    @@PerlDef: \

  @ResourceDef:
    @@QName: testXML10Name
    @@enDesc:
      Tests whether a scalar variable string is a valid XML 1.0 
      <CODE::Name> or not.
    @@PerlDef:
      ($INPUT =~ /\A\p{inxml:_NameStartChar10}\p{inxml:NameChar10}*\z/)
    @@rdf:type:
      dis2pm:InlineCode
    @@aliasChild:1
  
  @ResourceDef:
    @@QName: testXML11Name
    @@enDesc: 
      Tests whether a scalar variable string is a valid XML 1.1
      <CODE::Name> or not.
    @@PerlDef:
      ($INPUT =~ /\A\p{inxml:NameStartChar11}\p{inxml:NameChar11}*\z/)
    @@rdf:type:
      dis2pm:InlineCode
    @@aliasChild: 1

  @ResourceDef:
    @@QName: ensureXMLName
    @@rdf:type: 
      dis2pm:BlockCode
    @@Description:
      @@@lang:en
      @@@@: 
        Tests whether a string is a legal XML Name and 
        if not, raises an exception.
        \
        {NOTE:: This code fragment does not support non-<Feature::XML>. 
        \
        }
    @@ImplNote:
      @@@lang:en
      @@@@:
        What should be done for HTML name is not studied yet. 
    @@PerlDef:
        if (defined $INPUT) {
          __FOR{ManakaiDOM:DOM3::
            if (((not defined $XMLVERSION or $XMLVERSION eq '1.0') and
                 not <Code::DOMMain:testXML10Name:: $INPUT = $INPUT>) or
                ($XMLVERSION eq '1.1' and
                 not <Code::DOMMain:testXML11Name:: $INPUT = $INPUT>)) {
              __EXCEPTION{MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_PARAM_NAME',
                infoset:version => {$XMLVERSION},
              }__;
            }
          }__;
          __FOR{!ManakaiDOM:DOM3::
            unless (<Code::DOMMain:testXML10Name:: $INPUT = $INPUT>) {
              __EXCEPTION{MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_PARAM_NAME',
                infoset:version => '1.0',
              }__;
            }
          }__;
        }

StringDataTypeDef:
  @QName: ManakaiDOMXMLNCName
  @rdfs:subClassOf: ManakaiDOMXMLName
  @FullName:
    @@lang:en
    @@@: XML NCName

  @ResourceDef:
    @@rdf:type: DISLang|InputProcessor
    @@PerlDef:\

  @ResourceDef:
    @@QName: testXML10NCName
    @@rdf:type:
      dis2pm:InlineCode
    @@aliasChild:1
    @@enDesc:
      Tests whether a scalar variable string is a valid XML Namespace
      1.0 <CODE::NCName> or not.
    @@PerlDef:
      ($INPUT =~ /\A\p{inxml:_NCNameStartChar10}\p{inxml:NCNameChar10}*\z/)

  @ResourceDef:
    @@QName: testXML11NCName
    @@rdf:type:
      dis2pm:InlineCode
    @@aliasChild:1
    @@enDesc:
      Tests whether a scalar variable string is a valid XML Namespace
      1.1 <CODE::NCName> or not.
    @@PerlDef:
      ($INPUT =~ /\A\p{inxml:NCNameStartChar11}\p{inxml:NCNameChar11}*\z/)

StringDataTypeDef:
  @QName: ManakaiDOMNamespacePrefix
  @rdfs:subClassOf: ManakaiDOMXMLNCName
  @FullName:
    @@lang:en
    @@@: XML Namespace Prefix

  @ResourceDef:
    @@QName: ensureNamespacePrefix
    @@rdf:type:
      dis2pm:BlockCode
    @@Description:
      @@@lang:en
      @@@@: 
        Tests whether a string is a legal XML Namespace prefix and 
        if not, raises an exception.
        \
        {NOTE:: This code fragment does not support non-<Feature::XML>. 
        \
        }
    @@Description:
      @@@lang:en
      @@@@:
        The DOM Level 3 Core Specification specifies that how
        the empty prefix string is treated is implementation-dependent;
        the manakai DOM implementations does not distingulish
        it with the <DOM::null> value.
      @@@For:
        ManakaiDOM:DOM3
    @@PerlDef:
        __FOR{ManakaiDOM:DOM3::
          if (defined $INPUT and $INPUT eq '') {
            __WARNING{DOMMain:MDOMX_EMPTY_NS_PREFIX::
              MDOMX:param-name => '$INPUT_PARAM_NAME',
            }__;
          }
        }__;
        if (defined $INPUT) {
          __FOR{ManakaiDOM:DOM3::
            if (($XMLVERSION eq '1.0' and
                 not <Code::DOMMain:testXML10Name:: $INPUT = $INPUT>) or
                ($XMLVERSION eq '1.1' and
                 not <Code::DOMMain:testXML11Name:: $INPUT = $INPUT>)) {
              __EXCEPTION{MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_PARAM_NAME',
                infoset:version => {$XMLVERSION},
              }__;
            } elsif (index ($INPUT, ':') > -1) {
              __EXCEPTION{MDOMX:MDOM_NS_BAD_NCNAME::
                infoset:name => {$INPUT},
                MDOMX:param-name => '$INPUT_PARAM_NAME',
                infoset:version => {$XMLVERSION},
              }__;
            }
          }__;
          __FOR{ManakaiDOM:DOM2 !ManakaiDOM:DOM3::
            unless (<Code::DOMMain:testXML10Name:: $INPUT = $INPUT>) {
              __EXCEPTION{MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_PARAM_NAME',
                infoset:version => '1.0',
              }__;
            } elsif (index ($INPUT, ':') > -1) {
              __EXCEPTION{MDOMX:MDOM_NS_BAD_NCNAME::
                infoset:name => {$INPUT},
                MDOMX:param-name => '$INPUT_PARAM_NAME',
                infoset:version => '1.0',
              }__;
            }
          }__;
        }

StringDataTypeDef:
  @QName: ManakaiDOMXMLLocalName
  @rdfs:subClassOf: ManakaiDOMXMLNCName
  @FullName:
    @@lang:en
    @@@: XML local name

StringDataTypeDef:
  @Name: ManakaiDOMXMLQName
  @rdfs:subClassOf: ManakaiDOMXMLName
  @enLabel:
    XML QName
  @FullName:
    @@lang:en
    @@@:
      XML Qualified Name

  @ResourceDef:
    @@QName: ensureXMLQName
    @@rdf:type: 
      dis2pm:BlockCode
    @@Description:
      @@@lang:en
      @@@@:
        Checks whether a string is a legal XML qualified name and if not 
        then raises an exception.
    @@aliasChild:1
    @@PerlDef:
      @@@For:
        ManakaiDOM:DOM3
      @@@@:
        if ($XMLVERSION eq '1.1') {
          unless (<Code::DOMMain:testXML11Name:: $INPUT = $INPUT>) {
            __EXCEPTION{
              MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.1',
            }__;
          }
          unless (<Code::DOMMain:testXML11QName:: $INPUT = $INPUT>) {
            __EXCEPTION{
              MDOMX:MDOM_NS_MALFORMED_QNAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.1',
            }__;
          }
        } else {
          unless (<Code::DOMMain:testXML10Name:: $INPUT = $INPUT>) {
            __EXCEPTION{
              MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.0',
            }__;
          }
          unless (<Code::DOMMain:testXML10QName:: $INPUT = $INPUT>) {
            __EXCEPTION{
              MDOMX:MDOM_NS_MALFORMED_QNAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.0',
            }__;
          }
        }
     @@PerlDef:
       @@@For:
         ManakaiDOM:DOM2 !ManakaiDOM:DOM3
       @@@@:
          unless (<Code::DOMMain:testXML10Name:: $INPUT = $INPUT>) {
            __EXCEPTION{
              MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.0',
            }__;
          }
          unless (<Code::DOMMain:testXML10QName:: $INPUT = $INPUT>) {
            __EXCEPTION{
              MDOMX:MDOM_NS_MALFORMED_QNAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.0',
            }__;
          }

StringDataTypeDef:
  @QName: ManakaiDOMXML10QName
  @rdfs:subClassOf: ManakaiDOMXML10QName
  @enDesc:
    XML 1.0 Namespace Qualified Names.
  @enLabel:
    XML 1.0 QName
  
  @ResourceDef:
    @@rdf:type: DISLang|InputProcessor
    @@PerlDef:
      unless (<Code::DOMMain:testXML10Name:: $INPUT = $INPUT>) {
        __EXCEPTION{MDOMX:MDOM_BAD_NAME::
            DOMCore:name => {$INPUT},
            MDOMX:param-name => '$INPUT_NAME',
            infoset:version => '1.0',
        }__;
      }
      unless (<Code::DOMMain:testXML10QName:: $INPUT = $INPUT>) {
        __EXCEPTION{MDOMX:MDOM_NS_MALFORMED_QNAME::
          DOMCore:name => {$INPUT},
          MDOMX:param-name => '$INPUT_NAME',
          infoset:version => '1.0',
        }__;
      }

  @ResourceDef:
    @@QName: testXML10QName
    @@rdf:type:
      dis2pm:InlineCode
    @@enDesc:
      Tests whether a scalar variable string is a valid XML
      Namespace 1.0 qualified name or not.
    @@aliasChild:1
    @@PerlDef:
      ($INPUT =~ /\A\p{inxml:_NCNameStartChar10}\p{inxml:NCNameChar10
                  }*(?::\p{inxml:_NCNameStartChar10}\p{inxml:NCNameChar10}*)?\z/)

ElementTypeBinding:
  @Name: enLabel
  @ElementType:
    dis:Label
  @ShadowContent:
    @@lang:en

StringDataTypeDef:
  @QName: ManakaiDOMXML11QName
  @rdfs:subClassOf: ManakaiDOMXMLQName
  @enDesc:
    XML 1.1 Namespace Qualified Name.
  @enLabel:
    XML 1.1 QName
  
  @ResourceDef:
    @@rdf:type: DISLang|InputProcessor
    @@PerlDef:
      unless (<Code::DOMMain:testXML11Name:: $INPUT = $INPUT>) {
        __EXCEPTION{MDOMX:MDOM_BAD_NAME::
          DOMCore:name => {$INPUT},
          MDOMX:param-name => '$INPUT_NAME',
          infoset:version => '1.1',
        }__;
      }
      unless (<Code::DOMMain:testXML11QName:: $INPUT = $INPUT>) {
        __EXCEPTION{MDOMX:MDOM_NS_MALFORMED_QNAME::
          DOMCore:name => {$INPUT},
          MDOMX:param-name => '$INPUT_NAME',
          infoset:version => '1.1',
        }__;
      }

  @ResourceDef:
    @@QName: testXML11QName
    @@rdf:type:
      dis2pm:InlineCode
    @@enDesc:
      Tests whether a scalar variable string is a valid XML
      Namespace 1.1 qualified name or not.
    @@aliasChild:1
    @@PerlDef:
      ($INPUT =~ /\A\p{inxml:NCNameStartChar11}\p{inxml:NCNameChar11
                  }*(?::\p{inxml:NCNameStartChar11}\p{inxml:NCNameChar11}*)?\z/)

        

ResourceDef:
  @QName: checkXMLNamesQName
  @rdf:type:
    dis2pm:BlockCode
  @Description:
    @@lang:en
    @@@:
      Checks validness of XML Namespace Name (Namespace URI) and QName. 
      \
      {NOTE:: This code fragment checks their combination; it does not 
              test whether the URI or the QName is itself valid or not.
      \
      }
  @PerlDef:
    if (defined $PREFIX) {
      if (not defined $NSURI) {
        __EXCEPTION{MDOMX:MDOM_NS_PREFIX_WITH_NULL_URI::
          infoset:prefix => {$PREFIX},
        }__;
      } elsif ($PREFIX eq 'xml' and $NSURI ne <Q::xml:>) {
        __EXCEPTION{MDOMX:MDOM_NS_XML_WITH_OTHER_URI::
          infoset:namespaceName => {$NSURI},
        }__;
      } elsif ($PREFIX eq 'xmlns' and $NSURI ne <Q::xmlns:>) {
        __EXCEPTION{MDOMX:MDOM_NS_XMLNS_WITH_OTHER_URI::
          infoset:namespaceName => {$NSURI},
        }__;
      } elsif ($NSURI eq <Q::xml:> and $PREFIX ne 'xml') {
        __EXCEPTION{MDOMX:MDOM_NS_OTHER_WITH_XML_URI::
          infoset:prefix => {$PREFIX},
        }__;
      } elsif ($NSURI eq <Q::xmlns:> and $PREFIX ne 'xmlns') {
        __EXCEPTION{MDOMX:MDOM_NS_OTHER_WITH_XMLNS_URI::
          infoset:prefix => {$PREFIX},
        }__;
      } elsif ($NSURI eq <Q::xmlns:> and $PREFIX eq 'xmlns' and
               $LNAME eq 'xmlns') {
        __EXCEPTION{MDOMX:MDOM_NS_XMLNS_XMLNS}__;
      }
    } else { ## No prefix
      if ($NSURI eq <Q::xml:>) {
        __EXCEPTION{MDOMX:MDOM_NS_OTHER_WITH_XML_URI::
          infoset:prefix => {undef},
        }__;
      } elsif ($NSURI eq <Q::xmlns:> and $LNAME ne 'xmlns') {
        __EXCEPTION{MDOMX:MDOM_NS_OTHER_WITH_XMLNS_URI::
          infoset:prefix => {undef},
        }__;
      }
    }

## -- Manakai implementation-specific exception and warning

ResourceDef:
  @QName:
    ManakaiDOM:ManakaiDOMImplementationException
  @For: 
    ManakaiDOM:ManakaiDOM

  @rdf:type: dx|Class

  @DISPerl:ISA: dx|Exception
  @DISPerl:ISA: ManakaiDOM|ManakaiDOMObject

  @Description:
    @@lang:en
    @@@:
      A set of manakai DOM implementation-dependent exceptions.

  @ResourceDef:
    @@QName: 
      ManakaiDOM:ManakaiDOMImplementationExceptionCode
    @@rdf:type:
      ManakaiDOM:ConstGroup
    @@rdfs:subClassOf:
      DOMMain:unsigned-short::ManakaiDOM:all
    @@aliasChild: 1
    @@Type: unsigned-short||ManakaiDOM|all

    @@XConst:
      @@@QName: 
        MDOMX:MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR
      @@@Value:
        @@@@@: 2
        @@@@ContentType: DISCore|Integer
      @@@Description:
        @@@@lang:en
        @@@@@: 
          An attempt to break surrogate pair, i.e. the first character of 
          the range is the low-surrogate (the second 16-bit unit of the surrogate
          pair) or the last character of the range is the high-surrogate 
          (the first 16-bit unit of the surrogate pair).
      @@@XParam:
        @@@@QName:
          MDOMX:param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter to which inappropriate value is specified.

WarningDef:
  @QName: 
    ManakaiDOM:ManakaiDOMImplementationWarning

  @Description:
    @@lang:en
    @@@:
      Warnings for the implementation-dependent matters and 
      <QUOTE::no effect> actions.

  @ResourceDef:
    @@QName: 
      ManakaiDOM:ManakaiDOMImplementationWarningCode
    @@rdf:type:
      ManakaiDOM:ConstGroup
    @@rdfs:subClassOf: 
      DOMMain:unsigned-short||ManakaiDOM|all
    @@Type: unsigned-short||ManakaiDOM|all
    
    @@XConst:
      @@@QName: 
        MDOMX:ATTR_SET_NO_EFFECT
      @@@Value:
        @@@@@: 0
        @@@@ContentType: DISCore|Integer
      @@@Description:
        @@@@lang:en
        @@@@@:
          Setting an attribute value has no effect by definition.
      @@@SubTypeDef:
        @@@@QName: MDOMX_NOEFFECT_SINCE_DOC_NOSUPPORT_XML
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The action has no effect since a document does not 
            support the <Feature::XML> feature. 
      @@@SubTypeDef:
        @@@@QName: MDOMX_NOEFFECT_SINCE_NODE_NOSUPPORT_XMLNS
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The action has no effect since a node does not 
            support XML Namespaces.

    @@XConst:
      @@@QName: 
        MDOMX:MDOM_NEWCHILD_IS_REFCHILD
      @@@Value:
        @@@@@: 1
        @@@@ContentType: DISCore|Integer
      @@@Description:
        @@@@lang:en
        @@@@@:
          The node to be inserted is same as the reference node.
      @@@XParam:
        @@@@QName:
          MDOMX:newChild-param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter name for "newChild" node.
      @@@XParam:
        @@@@QName:
          MDOMX:refChild-param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter name for "refChild" node.

    @@XConst:
      @@@QName: 
        MDOMX:MDOM_REPLACE_BY_ITSELF_NO_EFFECT
      @@@Value:
        @@@@@: 2
        @@@@ContentType: DISCore|Integer
      @@@Description:
        @@@@lang:en
        @@@@@:
          An attempt to replace a node by itself is made. 
          It is no effect by definition.

    @@XConst:
      @@@QName: MDOMX_EMPTY_NS_PREFIX
      @@@Value:
        @@@@@: 3
        @@@@ContentType: DISCore|Integer
      @@@Description:
        @@@@lang:en
        @@@@@:
          An empty namespace prefix is specified; its result 
          is implementation dependent <SRC::DOM Level 3>. 
    
    @@XConst:
      @@@QName: 
        MDOMX:MDOM_NS_EMPTY_URI
      @@@Value:
        @@@@@: 4
        @@@@ContentType: DISCore|Integer
      @@@Description:
        @@@@lang:en
        @@@@@:
          The DOM Level 2 Core Specification defines that even the empty 
          string is treated as a real namespace URI.  The Errata for 
          the DOM Level 2 Specifications says that it is an error and 
          the way empty strings are treated is implementation dependent. 
        @@@@For:
          !ManakaiDOM:DOM3
      @@@Description:
        @@@@lang:en
        @@@@@:
          An empty string namespace URI is coverted into <DOM::null> 
          <SRC::DOM Level 3 Core>. 
        @@@@For:
          ManakaiDOM:DOM3
      @@@XParam:
        @@@@QName:
          MDOMX:param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter to which inappropriate value is specified.

    @@XConst:
      @@@QName:
        MDOMX:BAD_BASE_URI
      @@@Value:
        @@@@@: 5
        @@@@ContentType: DISCore|Integer
      @@@Description:
        @@@@lang:en
        @@@@@:
          Malformed base URI reference is specified.
      @@@SubTypeDef:
        @@@@QName:
          MDOMX:NULL_BASE_URI
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified base URI reference is <DOM::null>. 
      @@@SubTypeDef:
        @@@@QName:
          MDOMX:RELATIVE_BASE_URI
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified base URI reference is a relative URI reference.
        @@@@XParam:
          @@@@@QName:
            infoset:baseURI
          @@@@@Type:
            ManakaiDOM:ManakaiDOMURI
          @@@@@Description:
            @@@@@@lang:en
            @@@@@@@:
              The specified relative base URI reference.

    @@XConst:
      @@@QName:
        MDOMX:RELATIVE_URI
      @@@Value:
        @@@@@: 6
        @@@@ContentType: DISCore|Integer
      @@@Description:
        @@@@lang:en
        @@@@@:
          A relative URI reference is specified; the result is 
          implementation dependent.
      @@@XParam:
        @@@@QName:
          MDOMX:uri
        @@@@Type:
          ManakaiDOM:ManakaiDOMURI
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified URI reference.

## -- Bootstrap DOMImplementationRegistry object

ResourceDef:
  @QName: 
    DOMMain:ManakaiDOMImplementationRegistryVar
  @rdf:type:
    DISPerl:ScalarVariable
  @DISPerl:variableName:
    Message::DOM::DOMImplementationRegistry
  @DefaultValue:
    @@@:
      <ClassName::DOMImplementationRegistry::ManakaiDOM:ManakaiDOMLatest>
    @@ContentType:
      lang:Perl
  @Type: DISLang|String||ManakaiDOM|all
  @For:
    ManakaiDOM:ManakaiDOMLatest

ResourceDef:
  @QName: DOMImplementationRegistry
  @rdf:type: ManakaiDOM|Class

  @For: ManakaiDOM|DOM3

  @Implement: DOMCore|DOMImplementationSource||ManakaiDOM|ManakaiDOM3
  @Implement:
    @@@: DOMCore|DOMImplementationSource||ManakaiDOM|ManakaiDOMLatest
    @@For: ManakaiDOM|ManakaiDOMLatest

  @ISA: DOMFeature|ImplementationRegistry

  @enDesc:
    The <Class::DOMImplementationRegistry> object provides 
    two methods to find DOM implementations.

  @Method:
     @@Name:  getDOMImplementation
     @@ManakaiDOM:isStatic: 1
     @@Description:
       @@@lang:en
       @@@@:
         Seeks and returns the first implementation that implements 
         desired features. 
     @@Param:
        @@@Name:  features
        @@@Type:  DOMMain|DOMString||ManakaiDOM|all
        @@@actualType: DOMFeature|FeaturesString
        @@@Description:
          @@@@lang:en
          @@@@@: 
            A list of desired features that must be implemented.
     @@Return:
       @@@Type: DOMCore|DOMImplementation
       @@@enDesc:
         The first DOM implementation that has the desired features.
         The object returned by this method <kwd:MUST> implement
         the <IF::DOMCore:DOMImplementation> interface defined
         in DOM Level 3 and it <kwd:MUST> has the feature
         <Feature::Core> version <FeatureVer::3.0>.
       @@@enDesc:
         @@@@For: ManakaiDOM|ManakaiDOM
         @@@@@:
           {NOTE:: The object returned by this method might not
                   be a manakai object.
           }
       @@@InCase:
         @@@@Value:
           @@@@@is-null:1
         @@@@Description:
           @@@@@lang:en
           @@@@@@: 
             No implementation implementing the desired features is found.
      @@@Def:
        @@@@ContentType:
          lang:dis
        @@@@DISPerl:cloneCode:
          DOMFeature|ImplementationRegistry.getDOMImplementation

  @Method:
     @@Name:  getDOMImplementationList
     @@ManakaiDOM:isStatic: 1
     @@Description:
       @@@lang:en
       @@@@:
         Returns a list of all the DOM implementations that implement 
         desired features.
     @@Param:
        @@@Name:  features
        @@@Type:  DISLang|String||ManakaiDOM|all
        @@@actualType: DOMFeature|FeaturesString
        @@@Description:
          @@@@lang:en
          @@@@@: A list of desired features that must be implemented.
     @@Return:
       @@@Type:  DOMCore|DOMImplementationList
       @@@actualType: DOMCore|ManakaiDOMImplementationList
       @@@Description:
         @@@@lang:en
         @@@@@: 
           A list of DOM implementations that support the desired features. 
           The object returned by this method <kwd:MUST> implement
           the <IF::DOMCore:DOMImplementation> interface defined
           in DOM Level 3 and it <kwd:MUST> has the feature
           <Feature::Core> version <FeatureVer::3.0>.

           {NOTE:: Since implementation sources reports the same
                   implementation, the list <kwd:MAY> contain an implementation
                   more than one times.
           }
       @@@enDesc:
         @@@@For: ManakaiDOM|ManakaiDOM
         @@@@@:
           {NOTE:: Although the list returned by this method itself
                   is a manakai object, each item in the list might
                   not a manakai object.
           }
       @@@PerlDef:
         __DEEP{       ## NOTE: Method name directly written
           $r = bless $self->SUPER::get_dom_implementation_list ($features),
                      <ClassName::DOMCore|ManakaiDOMImplementationList>;
         }__;
##DOMImplementationRegistry
