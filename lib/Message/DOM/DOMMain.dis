Module:
  @QName:
    MDOM:DOMMain
  @FullName:
    @@lang: en
    @@@:
      DOM Commonly-used Datatypes and Objects
  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2004/dom/main#
  
  @Description:
    @@lang:en
    @@@:
      The <Module:DOMMain> manakai DOM module defines fundemental 
      IDL/DOM data types (e.g. <CODE:unsigned long>, <TYPE:DOMString>) 
      and implements the <IF:DOMImplementationRegistry> object.

  @Author:
    @@FullName: Wakaba
    @@Mail: w@suika.fam.cx
  @License:
     license:Perl+MPL
  @Date:
    @@@:
      $Date: 2005/05/22 13:32:00 $
    @@ContentType:
      dis:Date.RCS
  
  @Require:
    @@Module:
      @@@QName:
        DISlib:DISIDL
      @@@WithFor:
        ManakaiDOM:all
    @@Module:
      @@@QName:
        DISlib:DISPerl
      @@@WithFor:
        ManakaiDOM:all
    @@Module:
      @@@QName:
        Util:ManakaiNode
      @@@WithFor:
        ManakaiDOM:all
    @@Module:
      @@@QName:
        UtilError:DOMException
      @@@WithFor:
        ManakaiDOM:Perl
    @@Module:
      @@@Name: DOMMain
      @@@WithFor:
        ManakaiDOM:ManakaiDOMCommon
    @@Module:
      @@@Name: DOMMain
      @@@WithFor:
        ManakaiDOM:ManakaiDOMLatest
    @@Module:
      @@@Name: DOMMetaImpl
      @@@WithFor:
        ManakaiDOM:ManakaiDOMLatest
    @@Module:
      @@@Name: DOMCore
      @@@Description:
        @@@@lang:en
        @@@@@:
          The DOM Core module.  Note that <Module:DOMCore> module in turn
          requires this (<Module:DOMMain>) module.
      @@@For: 
        !=ManakaiDOM:ManakaiDOMCommon
  @DefaultFor:
    ManakaiDOM:ManakaiDOMLatest

Namespace:
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @dis2pm:
    http://suika.fam.cx/~wakaba/archive/2004/11/8/dis2pm#
  @DISlib:
    http://suika.fam.cx/~wakaba/archive/2004/dis/
  @DOMEvents:
    http://suika.fam.cx/~wakaba/archive/2004/dom/events#
  @DOMMain:
    http://suika.fam.cx/~wakaba/archive/2004/dom/main#
  @dx:
    http://suika.fam.cx/~wakaba/archive/2004/dis/XML#
  @infoset:
    http://www.w3.org/2001/04/infoset#
  @lang:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @MDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.
  @MDOMX:
    http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @owl:
    http://www.w3.org/2002/07/owl#
  @perl:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#Perl--
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#
  @TreeCore:\
  @Util:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/
  @UtilError:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/
  @xml:
    http://www.w3.org/XML/1998/namespace
  @xmlns:
    http://www.w3.org/2000/xmlns/

ResourceDef:
  @QName:
    MDOM:
  @rdf:type:
    dis:ModuleGroup
  @FullName:
    @@lang:en
    @@@:
      The manakai DOM modules
  @AppName:
    @@@:
      Message::DOM::IFLatest::
    @@ContentType:
      lang:Perl
    @@For:
      ManakaiDOM:ManakaiDOMLatest
    @@ForCheck:
      ManakaiDOM:ForIF
  @AppName:
    @@@:
      Message::DOM::IFLevel3::
    @@ContentType:
      lang:Perl
    @@For:
      ManakaiDOM:ManakaiDOM3
    @@ForCheck:
      ManakaiDOM:ForIF
  @AppName:
    @@@:
      Message::DOM::IFLevel2::
    @@ContentType:
      lang:Perl
    @@For:
      ManakaiDOM:ManakaiDOM2
    @@ForCheck:
      ManakaiDOM:ForIF
  @AppName:
    @@@:
      Message::DOM::IFLevel1::
    @@ContentType:
      lang:Perl
    @@For:
      ManakaiDOM:ManakaiDOM1
    @@ForCheck:
      ManakaiDOM:ForIF
  @AppName:
    @@@:
      Message::DOM::IF::
    @@ContentType:
      lang:Perl
    @@For:
      ManakaiDOM:ManakaiDOM
    @@ForCheck:
      ManakaiDOM:ForIF
  @AppName:
    @@@:
      Message::DOM::
    @@For:
      ManakaiDOM:ManakaiDOMLatest
  @AppName:
    @@@:
      Message::DOM::
    @@ManakaiDOM:moduleSuffix: Level3
    @@For: 
      ManakaiDOM:ManakaiDOM3
  @AppName:
    @@@:
      Message::DOM::
    @@ManakaiDOM:moduleSuffix: Level2
    @@For: 
      ManakaiDOM:ManakaiDOM2
  @AppName:
    @@@:
      Message::DOM::
    @@ManakaiDOM:moduleSuffix: Level1
    @@For: 
      ManakaiDOM:ManakaiDOM1
  @AppName:
    @@@:
      Message::DOM::
    @@For:
      ManakaiDOM:ManakaiDOMCommon

## -- "For" definitions

## For the Document Object Model

ForDef:
  @QName:
    ManakaiDOM:DOM
  @FullName:
    @@lang:en
    @@@: For DOM
ForDef:
  @QName:
    ManakaiDOM:DOM1
  @FullName:
    @@lang:en
    @@@: For DOM Level 1
  @ISA:
    ManakaiDOM:DOM
ForDef:
  @QName:
    ManakaiDOM:DOM2
  @FullName:
    @@lang:en
    @@@: For DOM Level 2
  @ISA:
    ManakaiDOM:DOM1
ForDef:
  @QName:
    ManakaiDOM:DOM3
  @FullName:
    @@lang:en
    @@@: For DOM Level 3
  @ISA:
    ManakaiDOM:DOM2
ForDef:
  @QName:
    ManakaiDOM:DOMLatest
  @FullName:
    @@lang:en
    @@@: For the latest level of DOM
  @ISA:
    ManakaiDOM:DOM3

ForDef:
  @QName: 
    ManakaiDOM:DOMHTMLFeature
  @FullName:
    @@lang:en
    @@@: For DOM HTML feature, any version
  @ISA:
    ManakaiDOM:DOM

ForDef:
  @QName: 
    ManakaiDOM:DOMXMLFeature
  @FullName:
    @@lang:en
    @@@: For DOM XML feature, any version
  @ISA:
    ManakaiDOM:DOM

ForDef:
  @QName:
    ManakaiDOM:DOMEventsFeature
  @FullName:
    @@lang:en
    @@@:  For DOM Events feature, any version
  @ISA:
    ManakaiDOM:DOM

## For the manakai DOM implementation

ForDef:
  @QName:
    ManakaiDOM:ManakaiDOM
  @FullName:
    @@lang:en
    @@@: For the manakai DOM implementation
  @Implement:
    ManakaiDOM:DOM
  @ISA:
    ManakaiDOM:Perl
ForDef:
  @QName:
    ManakaiDOM:ManakaiDOM1
  @FullName:
    @@lang:en
    @@@: For the manakai DOM Level 1 implementation
  @Implement:
    ManakaiDOM:DOM1
  @Implement: 
    ManakaiDOM:DOMXMLFeature
  @Implement: 
    ManakaiDOM:DOMHTMLFeature
  @Implement:
    ManakaiDOM:DOMEventsFeature
  @ISA:
    ManakaiDOM:ManakaiDOM
ForDef:
  @QName:
    ManakaiDOM:ManakaiDOM2
  @FullName:
    @@lang:en
    @@@: For the manakai DOM Level 2 implementation
  @Implement:
    ManakaiDOM:DOM2
  @ISA:
    ManakaiDOM:ManakaiDOM1
ForDef:
  @QName:
    ManakaiDOM:ManakaiDOM3
  @FullName:
    @@lang:en
    @@@: For the manakai DOM Level 3 implementation
  @Implement:
    ManakaiDOM:DOM3
  @ISA:
    ManakaiDOM:ManakaiDOM2
ForDef:
  @QName:
    ManakaiDOM:ManakaiDOMLatest
  @FullName:
    @@lang:en
    @@@: For the manakai implementation of the latest level of DOM
  @Implement:
    ManakaiDOM:DOMLatest
  @ISA:
    ManakaiDOM:ManakaiDOM3
ForDef:
  @QName:
    ManakaiDOM:ManakaiDOMCommon
  @FullName:
    @@lang:en
    @@@: For the manakai implementation of DOM, level/feature independent
  @Implement:
    ManakaiDOM:DOM
  @ISA:
    ManakaiDOM:ManakaiDOM

## -- Abstract programming language "object" types

ElementTypeBinding:
  @Name: ResourceTypeDef
  @ElementType: 
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      rdfs:Class
    @@rdfs:subClassOf:
      rdfs:Class::ManakaiDOM:all
    @@subsetOf:
      rdfs:Class::ManakaiDOM:all

ElementTypeBinding:
  @Name: PropDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      rdf:Property

ElementTypeBinding:
  @Name: TreeElementType
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:TreeElementType
    @@AliasFor:
      @@@:
        ::ManakaiDOM:all
      @@@For:
        !=ManakaiDOM:all

ElementTypeBinding:
  @Name: ClassDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:Class
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:ManakaiDOMCommon
      @@@For:
        ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOMCommon

ElementTypeBinding:
  @Name: ExceptionDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:ExceptionClass
    @@ISA: 
      ManakaiDOM:ManakaiDOMException::ManakaiDOM:Perl
    @@ISA:
      ManakaiDOM:ManakaiDOMObject
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM

ResourceTypeDef:
  @QName: ErrorClass
  @FullName:
    @@lang:en
    @@@:
      <IF::DOMCore:DOMError> class
  @Description:
    @@lang:en
    @@@:
      <IF::DOMError> type and its implementation pairs. 

ElementTypeBinding:
  @Name: WarningDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:WarningClass
    @@ISA: 
      ManakaiDOM:ManakaiDOMWarning::ManakaiDOM:Perl
    @@ISA:
      ManakaiDOM:ManakaiDOMObject
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM

ElementTypeBinding:
  @Name: SubTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:ExceptionOrWarningSubType
    @@ForCheck:
      ManakaiDOM:ManakaiDOM

ElementTypeBinding:
  @Name: XParam
  @ElementType:
    ManakaiDOM:exceptionOrWarningParameter
  @ShadowContent:
    @@ForCheck:
      ManakaiDOM:ManakaiDOM

ElementTypeBinding:
  @Name: Const
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: 
      ManakaiDOM:Const
ElementTypeBinding:
  @Name: XConst
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: 
      ManakaiDOM:Const

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMAttribute
  @FullName:
    @@lang:en
    @@@: DOM attribute
  @Description:
    @@lang:en
    @@@: A DOM attribute.
  @rdfs:subClassOf:
    DISLang:Attribute

ElementTypeBinding:
  @Name: Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttribute
    @@ForCheck:
      ManakaiDOM:DOM
ElementTypeBinding:
  @Name: IntClsAttr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttribute
    @@ForCheck:
      ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isForInternal: 1
    @@ForCheck:
      ManakaiDOM:ForClass

ResourceTypeDef:
  @QName: 
    ManakaiDOM:DOMAttrGet
  @Description:
    @@lang:en
    @@@: A DOM attribute getter.
  @rdfs:subClassOf:
    DISLang:AttributeGet
ElementTypeBinding:
  @Name: Get
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttrGet

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMAttrSet
  @Description:
    @@lang:en
    @@@: A DOM attribute setter.
  @rdfs:subClassOf:
    DISLang:AttributeSet
ElementTypeBinding:
  @Name: Set
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttrSet

ResourceTypeDef:
  @QName: ReflectGet
  @enDesc:
    Getter templates for DOM attributes <QUOTE::reflecting> 
    element attributes.
  @rdfs:subClassOf:
    DISCore:AnyDefContainer

ResourceTypeDef:
  @QName: ReflectSet
  @enDesc:
    Setter templates for DOM attributes <QUOTE::reflecting>
    element attributes.
  @rdfs:subClassOf:
    DISCore:AnyDefContainer

PropDef:
  @QName: reflectGet
  @enDesc:
    Getter template for a <QUOTE::reflecting> DOM attribute.
  @dataType: dis|TFQNames
  @rdfs:range: ReflectGet

PropDef:
  @QName: reflectSet
  @enDesc:
    Setter template for a <QUOTE::reflecting> DOM attribute.
  @dataType: dis|TFQNames
  @rdfs:range: ReflectSet

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMMethod
  @Description:
    @@lang:en
    @@@: A DOM method.
  @rdfs:subClassOf:
    DISLang:Method
ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:DOM
ElementTypeBinding:
  @Name: IntClsMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isForInternal: 1
    @@ForCheck:
      ManakaiDOM:ForClass
ElementTypeBinding:
  @Name: IntMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isForInternal: 1

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMMethodParameter
  @Description:
    @@lang:en
    @@@: A DOM method parameter.
  @rdfs:subClassOf:
    DISLang:MethodParameter
ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethodParameter

ElementTypeBinding:
  @Name: FormatDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISCore:StringDataType
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:all
      @@@For:
        !=ManakaiDOM:all
    @@rdfs:subClassOf:
      DISCore:String::ManakaiDOM:all

FormatDef:
  @QName: DOMMethodParameterName
  @Description:
    @@lang:en
    @@@:
      A DOM method parameter name. 

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMMethodReturn
  @Description:
    @@lang:en
    @@@: A DOM method return value.
  @rdfs:subClassOf:
    DISLang:MethodReturn
ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethodReturn


ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase

ElementTypeBinding:
  @Name: Exception
  @ElementType:
    ManakaiDOM:raises

ElementTypeBinding:
  @Name: DataTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DataType

ElementTypeBinding:
  @Name: actualType
  @ElementType:
    dis:actualType
  @ShadowContent:
    @@ForCheck:
      ManakaiDOM:ManakaiDOM

## -- lang:dis vocabulary

TreeElementType:
  @QName:
    dis:CheckReadOnly
  @dataType:
    dis:Boolean
  @rdfs:domain:
    dis:SetProp
  @Description:
    @@lang:en
    @@@:
      Whether if the node to set an attribute value is read-only is 
      checked before the setting or not. 

TreeElementType:
  @QName:
    dis:GetPropNode
  @dataType:
    dis:TypeQName
  @rdfs:range:
    rdf:Property
  @Description:
    @@lang:en
    @@@:
      Gets the nodal value of a <Class::ManakaiDOM:ManakaiDOMNodeReference> 
      property (actualy <Class::ManakaiDOM:ManakaiDOMNodeObject> property). 

## -- DOM specific properties and types

Const:
  @Name: null
  @Type: 
    ManakaiDOM:any::ManakaiDOM:all
  @ForCheck:
    ManakaiDOM:all
  @Value:
    @@ContentType: 
      lang:Perl
    @@@: undef
  @Description:
    @@lang:en
    @@@:
       The null value.  Note that <DOM:null> is different from 
       empty string and number zero.

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMConfigParameter
  @Description:
    @@lang:en
    @@@: A DOM configuration parameter.

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMEvent
  @Description:
    @@lang:en
    @@@: A DOM event definition.

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMError
  @Description:
    @@lang:en
    @@@: A DOM error definition.

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMConfigParameterSet
  @Description:
    @@lang:en
    @@@: A set of DOM configuration parameters.

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMEventSet
  @Description:
    @@lang:en
    @@@: A set of DOM event definitions.

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMErrorSet
  @Description:
    @@lang:en
    @@@: A set of DOM error definitions.

PropDef:
  @QName:
    dis:NSVersion
  @Description:
    @@lang:en
    @@@:
      A namespace-aware variant of the method or attribute.

PropDef:
  @QName:
    dis:NoNSVersion
  @Description:
    @@lang:en
    @@@: A namespace-unaware variant of the method or attribute.

PropDef:
  @Name: isNamespaceAware
  @Description:
    @@lang:en
    @@@: 
      Whether a subject resource is namespace-aware or not.  Note that 
      the property value of <CODE::false> does not mean the subject 
      resource is namespace unaware; it might be namespace-neutral.
  @dataType:
    dis:Boolean

PropDef:
  @Name: isNamespaceUnaware
  @Description:
    @@lang:en
    @@@:
      Whether a subject resource is namespace-unaware or not.

## -- Manakai specific properties and datatypes

ElementTypeBinding:
  @Name: ImplementLevel1
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@@:
      ::ManakaiDOM:ManakaiDOM1
    @@ForCheck:
      ManakaiDOM:ForIF
    @@For:
      ManakaiDOM:ManakaiDOM2
ElementTypeBinding:
  @Name: ImplementLevel2
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@@:
      ::ManakaiDOM:ManakaiDOM2
    @@ForCheck:
      ManakaiDOM:ForIF
    @@For:
      ManakaiDOM:ManakaiDOM3
ElementTypeBinding:
  @Name: ImplementLevel3
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@@:
      ::ManakaiDOM:ManakaiDOM3
    @@ForCheck:
      ManakaiDOM:ForIF
    @@For:
      ManakaiDOM:ManakaiDOMLatest

## -- Obsolete properties

## NOTE: These definitions will be removed after 
##       all these instances removed from the <QUOTE::dis> source files.

PropDef:
  @QName:
    dis:Redefine
  @Description:
    @@lang:en
    @@@: Declares redefining (obsolete)
PropDef:
  @QName:
    dis:RedefinedBy
  @Description:
    @@lang:en
    @@@: Declares redefined in elsewhere (obsolete)
PropDef:
  @QName:
    dis:Redefined
  @Description:
    @@lang:en
    @@@: Declares redefined in elsewhere (obsolete)

## -- Sugar

ElementTypeBinding:
  @Name: PerlDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:Perl

## -- DOM Feature

ElementTypeBinding:
  @Name: MDOMFeature
  @ElementType:
    DOMMain:implementFeature
  @ShadowContent:
    @@@: ManakaiDOMFeature10

ElementTypeBinding:
  @Name: DOMMFeature
  @ElementType:
    DOMMain:implementFeature
  @ShadowContent:
    @@@: DOMMainFeature10
    @@For:
      ManakaiDOM:DOM1
  @ShadowSibling:
    @@DOMMain:implementFeature:
      @@@@: DOMMainFeature20
      @@@For:
        ManakaiDOM:DOM2
    @@DOMMain:implementFeature:
      @@@@: DOMMainFeature30
      @@@For:
        ManakaiDOM:DOM3

ResourceDef:
  @QName: 
    DOMMain:docSupportsXMLFeature
  @rdf:type:
    dis2pm:InlineCode
  @Description:
    @@lang:en
    @@@:
      Whether a document has support for the <Feature::XML> feature or not.
  @PerlDef:
    ($DOCOBJ->{<Q::DOMCore:hasFeature>}->{XML})

ElementTypeBinding:
  @Name: FeatureDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DOMMain:DOMFeature
    @@ForCheck:
      ManakaiDOM:all

ElementTypeBinding:
  @Name: FeatureVerDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DOMMain:DOMFeature

ElementTypeBinding:
  @Name: featureQName
  @ElementType:
    dis:AppName
  @ShadowContent:
    @@ContentType:
      dis:TypeQName

FeatureDef:
  @QName: 
    DOMMain:ManakaiDOMFeature
  @featureQName:
    ManakaiDOM:ManakaiDOM
  @FeatureVerDef:
    @@QName: 
      DOMMain:ManakaiDOMFeature10
    @@Version: 1.0
    @@DOMMetaImpl:instanceFeatureOf: 
      DOMMain:ManakaiDOMFeature
    @@FullName:
      @@@lang:en
      @@@@:
        The Manakai DOM Implementation Main Module, version 1.0
    @@Description:
      @@@lang:en
      @@@@:
        The manakai DOM implementation main module, version 1.0. 
        It includes basic classes internally used in the implementations. 
        \
        {NOTE:: Previous versions of manakai DOM implementation has 
                a separate <Module::MDOM:ManakaiDOMMain> module and 
                it provides this feature; 
                it has been merged into the <Module::MDOM:DOMMain> module.
        \
        }

FeatureDef:
  @QName: 
    ManakaiDOM:DOMMain
  @FullName:
    @@lang:en
    @@@:
      The manakai DOM implementation <Module::DOMMain> module
  @FeatureVerDef:
    @@Version: 1.0
    @@FullName:
      @@@lang:en
      @@@@:
        The manakai DOM implementation <Module::DOMMain> module, level 1
    @@QName: 
      DOMMain:DOMMainFeature10
    @@DOMMetaImpl:instanceFeatureOf:
      ManakaiDOM:DOMMain
  @FeatureVerDef:
    @@Version: 2.0
    @@FullName:
      @@@lang:en
      @@@@:
        The manakai DOM implementation <Module::DOMMain> module, level 2
    @@QName: 
      DOMMain:DOMMainFeature20
    @@DOMMetaImpl:instanceFeatureOf: 
      DOMMain:DOMMainFeature10
  @FeatureVerDef:
    @@Version: 3.0
    @@FullName:
      @@@lang:en
      @@@@:
        The manakai DOM implementation <Module::DOMMain> module, level 3
    @@QName: 
      DOMMain:DOMMainFeature30
    @@DOMMetaImpl:instanceFeatureOf: 
      DOMMain:DOMMainFeature20

## -- DOM Core Specification datatypes

ResourceDef:
  @Name: DOMDataType
  @Description:
    @@lang:en
    @@@:
      A DOM data type.
  @rdf:type:
    rdfs:Class
  @rdfs:subClassOf:
    ManakaiDOM:DataType
ElementTypeBinding:
  @Name: DOMDataTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DOMDataType

ResourceDef:
  @For:
    ManakaiDOM:DOM2
  @ImplementLevel2:
  @ImplementLevel3:
  @rdf:type:
    @@@:
      dis:MultipleResource
    @@ForCheck:
      !ManakaiDOM:ForIF !ManakaiDOM:ForClass
  @resourceFor:
    ManakaiDOM:ForIF
  @resourceFor:
    @@@:
      ManakaiDOM:ForClass
    @@For:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
  @Name:
    @@@:  DOMTimeStamp
    @@ForCheck:
      ManakaiDOM:ForIF
  @Name:
    @@@: ManakaiDOMTimeStamp
    @@ForCheck:
      ManakaiDOM:ForClass
  @rdf:type:
    @@@:
      ManakaiDOM:IF
    @@ForCheck:
      ManakaiDOM:ForIF ManakaiDOM:ManakaiDOM
  @rdf:type:
    @@@: DOMDataType
    @@ForCheck:
      ManakaiDOM:ForIF !ManakaiDOM:ManakaiDOM
  @rdf:type:
    @@@: 
      ManakaiDOM:PrimitiveTypeClass
    @@ForCheck:
      ManakaiDOM:ForClass
  @AliasFor:
    @@@:
      ::ManakaiDOM:ManakaiDOMLatest
    @@ForCheck:
      ManakaiDOM:ForIF ManakaiDOM:ManakaiDOMCommon
  @Description:
    @@lang:en
    @@@: 
      An absolute or relative time.  It is represented 
      as a number of milliseconds.
  @Def:
    @@ContentType:
      lang:dis
    @@DISLang:dataTypeAliasFor: 
      DOMMain:unsigned-long-long::ManakaiDOM:all
    @@ForCheck:
      ManakaiDOM:ForIF ManakaiDOM:IDL
  @ImplNote:
    @@lang:en
    @@@:
      TODO: How implements this type is not yet decided.
    @@ForCheck:
      ManakaiDOM:ForClass ManakaiDOM:ManakaiDOM

DOMDataTypeDef:
  @Name:  DOMUserData
  @For:
    ManakaiDOM:DOM3
  @AliasFor: 
    DOMMain:any::ManakaiDOM:all
  @Description:
    @@lang:en
    @@@: A reference to application data.

DOMDataTypeDef:
  @Name:  DOMObject
  @For:
    ManakaiDOM:DOM3
  @AliasFor: 
    DOMMain:Object::ManakaiDOM:all
  @Description:
    @@lang:en
    @@@: An object reference.

ResourceDef:
  @For:
    ManakaiDOM:DOM
  @rdf:type:
    @@@:
      dis:MultipleResource
    @@ForCheck:
      !ManakaiDOM:ForIF !ManakaiDOM:ForClass
  @resourceFor:
    ManakaiDOM:ForIF
  @resourceFor:
    @@@:
      ManakaiDOM:ForClass
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOMCommon
  @Name: 
    @@@: DOMString
    @@ForCheck:
      ManakaiDOM:ForIF
  @Name:
    @@@: ManakaiDOMString
    @@ForCheck:
      ManakaiDOM:ForClass
  @AliasFor:
    @@@:
      ::ManakaiDOM:ManakaiDOMLatest
    @@ForCheck:
      ManakaiDOM:ForIF ManakaiDOM:ManakaiDOMCommon
  @rdf:type:
    @@@: DOMDataType
    @@ForCheck: 
      ManakaiDOM:ForIF !ManakaiDOM:ManakaiDOM
  @rdf:type:
    @@@:
      ManakaiDOM:IF
    @@ForCheck:
      ManakaiDOM:ForIF ManakaiDOM:ManakaiDOM
  @rdf:type:
    @@@: 
      ManakaiDOM:PrimitiveTypeClass
    @@ForCheck:
      ManakaiDOM:ForClass
  @Def:
    @@ContentType:
      lang:IDL-DOM
    @@@: sequence<unsigned short>
    @@ForCheck:
      ManakaiDOM:ForIF ManakaiDOM:IDL
  @ImplementLevel1:
  @ImplementLevel2:
  @ImplementLevel3: 
  @rdfs:subClassOf:
    DISLang:String
  @ISA:
    @@ForCheck:
      ManakaiDOM:ManakaiDOMLatest ManakaiDOM:ForClass
    @@@: ManakaiDOMStringExtend
  @DOMMFeature:

  @Description:
    @@lang:en
    @@@: 
      A string.  It is used to store Unicode characters.
  @IntClsAttr:
    @@Name: valueUTF16BE
    @@Description:
      @@@lang:en
      @@@@:
        The character string in UTF-16BE (without <CHAR::BOM>) Perl byte-string. 
    @@Get:
      @@@Type: 
        DOMMain:any::ManakaiDOM:all
      @@@PerlDef:
        @@@@require: Encode
        @@@@@:
          $r = Encode::encode ('UTF-16BE',
                               ref $self eq 'SCALAR' ? $$self : $self);
  @IntClsMethod:
    @@Name: length
    @@Description:
      @@@lang:en
      @@@@:
        The number of 16-bit units, i.e. the number of two-octet pairs, 
        in the UTF-16BE (without <CHAR::BOM>) representation of a string. 
        \
        {NOTE:: The number of 16-bit units in a string is different 
                from the number of characters in the string if 
                there is one or more characters whose UCS code point 
                is into the range <CODE::U+10000> to <CODE::U+10FFFF>.
        \
        }
    @@Return:
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The number of 16-bit units.
      @@@PerlDef:
          my $s = ref $self eq 'SCALAR' ? $self : \$self;
          $r = CORE::length $$s;
          $r++ while $$s =~ /[\x{10000}-\x{10FFFF}]/g;
  @IntClsMethod:
    @@Name: append
    @@Description:
      @@@lang:en
      @@@@:
        Appends another string at the end of a string.
    @@Param:
      @@@Name: arg
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: 
          Another string to append to this string.
    @@Return:
      @@@PerlDef:
        @@@@cast-input: 0
        @@@@@:
          if (ref $self eq 'SCALAR') {
            $$self .= ref $arg eq 'SCALAR' ? $$arg : $arg;
          }
          # else: no effect
  @IntClsMethod:
    @@Name: setCurrentPosition
    @@Description:
      @@@lang:en
      @@@@:
        Sets the current position to the specified 16-bit unit offset.
        \
        {NOTE:: The current position here is same as the one 
                that is able to access by the Perl 
                <Perl::<PerlFunc::pos> (<PerlVar::$s>)> operator.
        \
        }
    @@Param:
      @@@Name: offset
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@:
          The offset of 16-bit units to which the current position is set.
        \
          {NOTE:: The <P::offset> value must be in the effective range; 
                  in other word, it must not be negative nor be greater 
                  than the number of 16-bit units in the string. 
                  Otherwise, unlike any other public methods, 
                  result is undefined.
          \
          }
    @@Return:
      @@@Exception:
        @@@@@:
          MDOMX:MDOM_INDEX_IN_SURROGATE_PAIR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            An attempt is made to break a surrogate pair.
      @@@PerlDef:
          return unless ref $self eq 'SCALAR'; # no effect
          use integer;
          pos ($$self) = 0;
          while ($offset and pos $$self <= CORE::length $$self) {
            if ($$self =~ /[^\x{10000}-\x{10FFFF}]{1,$offset}/gc) {
              $offset -= $+[0] - $-[0];
            } elsif ($$self =~ m{[\x{10000}-\x{10FFFF}]{1,$offset/2}}gc) {
              $offset -= 2 * ($+[0] - $-[0]);
              if ($offset < 0) {
                __EXCEPTION{
                  MDOMX:MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR::
                    MDOMX:param-name => 'offset',
                }__;
              }
            } else {
              __EXCEPTION{
                MDOMX:MDOM_DEBUG_BUG||ManakaiDOM:Perl::
                  MDOMX:values => {{
                    count => $offset,
                    position => 1,
                  }},
              }__;
            }                
          }
  @IntClsMethod:
    @@Name: delete
    @@Description:
      @@@lang:en
      @@@@:
        Removes a range of 16-bit units from a string.
    @@Param:
      @@@Name: offset
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The offset from which to start removing.
    @@Param:
      @@@Name: count
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@:
          The number of 16-bit units to delete.  If the sum of the
          parameters offset and count exceeds the length of the
          string then all 16-bit units from offset to the end
          of the string are deleted.
    @@Return:
      @@@Exception:
        @@@@Type: 
          DOMCore:DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            Either the <P::offset> value is negative or greater than the number 
            of 16-bit units in the string, or the <P::count> value is negative. 
      @@@Exception:
        @@@@@:
          MDOMX:MDOM_INDEX_IN_SURROGATE_PAIR
        @@@@Description:
          @@@@@lang:en
          @@@@@@: 
            An attempt is made to break a surrogate pair.
      @@@PerlDef:
          __DEEP{
            <M::ManakaiDOMString.replace> ($self, $offset, $count, '');
          }__;
  @IntClsMethod:
    @@Name: insert
    @@Description:
      @@@lang:en
      @@@@:
        Inserts another string at specified 16-bit unit offset in string.
    @@Param:
      @@@Name: offset
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: 
          The offset to which <P::arg> is inserted.
    @@Param:
      @@@Name: arg
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: 
          Another string to insert.
    @@Return:
      @@@Exception:
        @@@@Type: 
          DOMCore:DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The <P::offset> value is negative or greater than the 
            number of 16-bit units in the string.
      @@@Exception:
        @@@@@:
          MDOMX:MDOM_INDEX_IN_SURROGATE_PAIR
        @@@@Description:
          @@@@@lang:en
          @@@@@@: 
            An attempt is made to break a surrogate pair.
      @@@PerlDef:
        @@@@cast-input: 0
        @@@@@:
          return unless ref $self eq 'SCALAR';
          if ($offset < 0 or $offset > CORE::length $$self or
              $offset > <ClassM::ManakaiDOMString.length> ($self)) {
            __EXCEPTION{DOMCore:ManakaiDOMException.INDEX_SIZE_ERR::
              MDOMX:param-name => 'offset',
            }__;
          }
          unless ($$self =~ /[\x{10000}-\x{10FFFF}]/) {
            substr ($$self, $offset, 0) = ref $arg eq 'SCALAR' ? $$arg : $arg;
          } else {
            unless (substr ($$self, 0, $offset) =~ /[\x{10000}-\x{10FFFF}]/) {
              substr ($$self, $offset, 0) = ref $arg eq 'SCALAR' ? $$arg : $arg;
            } else { # Non-BMP chars before $offset
              __DEEP{
                <M::ManakaiDOMString.setCurrentPosition> ($self, $offset);
              }__;
              substr ($$self, pos $$self, 0)
                                        = ref $arg eq 'SCALAR' ? $$arg : $arg;
            }
          }
  @IntClsMethod:
    @@Name: replace
    @@Description:
      @@@lang:en
      @@@@:
        Replaces a range of 16-bit units in a string 
        with another string.
    @@Param:
      @@@Name: offset
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The offset from which to start replacing.
    @@Param:
      @@@Name: count
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@:
          The number of 16-bit units to replace.  If the sum of the
          <P::offset> value and the <P::count> value exceeds the length of the
          string then all 16-bit units from the <P::offset> to the end
          of the string are replaced.
    @@Param:
      @@@Name: arg
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: 
          Another string with which the range is replaced.
    @@Return:
      @@@Exception:
        @@@@Type: 
          DOMCore:DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The <P:offset> is negative or greater than
            the number of 16-bit units in the string, or the 
            <P:count> value is negative.
      @@@Exception:
        @@@@@: 
          MDOMX:MDOM_INDEX_IN_SURROGATE_PAIR
        @@@@Description:
          @@@@@lang:en
          @@@@@@: 
            An attempt is made to break a surrogate pair.
      @@@PerlDef:
        @@@@cast-input: 0
        @@@@@:
          return unless ref $self eq 'SCALAR';
          if ($offset < 0 or $offset > CORE::length $$self or
              $offset > <ClassM::ManakaiDOMString.length> ($self)) {
            __EXCEPTION{DOMCore:ManakaiDOMException.INDEX_SIZE_ERR::
              MDOMX:param-name => 'offset',
            }__;
          }
          if ($count < 0) {
            __EXCEPTION{DOMCore:ManakaiDOMException.INDEX_SIZE_ERR::
              MDOMX:param-name => 'count',
            }__;
          }
        REPLACE: {
          unless ($$self =~ /[\x{10000}-\x{10FFFF}]/) {
            substr ($$self, $offset, $count)
                                 = ref $arg eq 'SCALAR' ? $$arg : $arg;
            last REPLACE;
          } else {
            unless (substr ($$self, 0, $offset)
                                 =~ /[\x{10000}-\x{10FFFF}]/) {
              unless (substr ($$self, $offset, $count)
                                 =~ /[\x{10000}-\x{10FFFF}]/) {
                substr ($$self, $offset, $count)
                                 = ref $arg eq 'SCALAR' ? $$arg : $arg;
                last REPLACE;
              } elsif (CORE::length $$self < $offset + $count) {
                substr ($$self, $offset) = ref $arg eq 'SCALAR' ? $$arg : $arg;
                last REPLACE;
              } else {
                pos ($$self) = $offset;
              }
            } else { # Non-BMP chars before $offset
              __DEEP{
                <M::ManakaiDOMString.setCurrentPosition> ($self, $offset);
              }__;
            }
          }
          use integer;
          my $s = substr ($$self, pos $$self);
          while ($count) {
            if ($s =~ s/[^\x{10000}-\x{10FFFF}]{1,$count}//) {
              $count -= $+[0] - $-[0];
            } elsif ($s =~ s{[\x{10000}-\x{10FFFF}]{1,$count/2}}{}) {
              $count -= 2 * ($+[0] - $-[0]);
              if ($count < 0) {
                __EXCEPTION{
                MDOMX:MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR::
                  MDOMX:param-name => 'count',
                }__;
              }
            } else {
              __EXCEPTION{
              MDOMX:MDOM_DEBUG_BUG||ManakaiDOM:Perl::
                MDOMX:values => {{
                        count => $count,
                        position => 1,
                }},
              }__;
            }
           }
           substr ($$self, pos $$self)
                         = (ref $arg eq 'SCALAR' ? $$arg : $arg) . $s;
        } # REPLACE
  @IntClsMethod:
    @@Name: substring
    @@Description:
      @@@lang:en
      @@@@:
        Extracts a range of 16-bit units.
    @@Param:
      @@@Name: offset
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The offset from which to start extract.
    @@Param:
      @@@Name: count
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@:
          The number of 16-bit units to extract.  If the sum of the
          parameters offset and count exceeds the length of the
          DOMString then all 16-bit units from offset to the end
          of the DOMString are returned.
    @@Return:
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: The specified substring.
      @@@Exception:
        @@@@Type: 
          DOMCore:DOMException
        @@@@actualType:
          DOMCore:ManakaiDOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified "offset" is negative or greater than
            the number of 16-bit units in the DOMString, or the specified
            "count" is negative.
      @@@Exception:
        @@@@Type: 
          DOMCore:DOMException
        @@@@actualType:
          DOMCore:ManakaiDOMException
        @@@@Name: DOMSTRING_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The specified range does not fit into a DOMString.
      @@@Exception:
        @@@@@:
          MDOMX:MDOM_INDEX_IN_SURROGATE_PAIR
        @@@@Description:
          @@@@@lang:en
          @@@@@@: An attempt is made to break surrogate pair.
      @@@PerlDef:
          my $s = ref $self eq 'SCALAR' ? $self : \$self;
          if ($offset < 0 or $offset > CORE::length $$s or
              $offset > <ClassM::ManakaiDOMString.length> ($self)) {
            __EXCEPTION{DOMCore:ManakaiDOMException.INDEX_SIZE_ERR::
              MDOMX:param-name => 'offset',
            }__;
          }
          if ($count < 0) {
            __EXCEPTION{DOMCore:ManakaiDOMException.INDEX_SIZE_ERR::
              MDOMX:param-name => 'count',
            }__;
          }
        SUBSTR: {
          unless ($$s =~ /[\x{10000}-\x{10FFFF}]/) {
            $r = substr ($$s, $offset, $count);
            last SUBSTR;
          } else {
            unless (substr ($$s, 0, $offset) =~ /[\x{10000}-\x{10FFFF}]/) {
              unless (substr ($$s, $offset, $count)
                                 =~ /[\x{10000}-\x{10FFFF}]/) {
                $r = substr ($$s, $offset, $count);
                last SUBSTR;
              } elsif (CORE::length $$s < $offset + $count) {
                $r = substr ($$s, $offset);
                last SUBSTR;
              } else {
                pos ($$s) = $offset;
              }
            } else { # Non-BMP chars before $offset
              __DEEP{
                <M::ManakaiDOMString.setCurrentPosition> ($s, $offset);
              }__;
            }
          }
          my $start = pos $$s;
          __DEEP{
            <M::ManakaiDOMString.setCurrentPosition> ($s, $offset + $count);
          }__;
          $r = substr $$s, $start, pos ($$s) - $start;
        } # SUBSTR
  @IntClsAttr:
    @@Name: isFullyNormalized
    @@Description:
      @@@lang:en
      @@@@:
        Whether a string is fully normalized or not.
        \
        {P:: In DOM Level 3, characters are <DFN:fully normalized> as 
        defined in Appendix B of XML 1.1 specification if:
        \
          - the parameter <CP:normalize-characters> was set to <DOM:true>
            while loading the document or the document was certified as 
            defined in XML 1.1 specification or 
          - the parameter <CP:normalize-characters> was set to <DOM:true>
            while using the method <M:DOMCore:Document.normalizeDocument> 
            interface or while using the method <M:DOMCore:Node.normalize>.
        \
        }
    @@Get:
      @@@Type: boolean
      @@@InCase:
        @@@@Value: true
        @@@@Type: boolean
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The string was certified as fully normalized.
      @@@InCase:
        @@@@Value: false
        @@@@Type: boolean
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The string is not known to be certified as fully normalized.
    @@ImplNote:
      @@@lang:en
      @@@@:
        TODO: In this attribute, we should implement certification of string, 
              rather than returning private property value.
  @IntClsMethod:
    @@Name: compare
    @@Description:
      @@@lang:en
      @@@@: The string comparison.
    @@Param:
      @@@Name: str
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: The string to be compared.
    @@Param:
      @@@Name: caseInsensitive
      @@@Type: boolean
      @@@Description:
        @@@@lang:en
        @@@@@: The case-sentitivility of the match.
      @@@InCase:
        @@@@Value: true
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The match is done as case-insensitive.
      @@@InCase:
        @@@@Value: false
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The match is done as case-sensitive.
    @@Return:
      @@@Type: boolean
      @@@Description:
        @@@@lang:en
        @@@@@: Whether the string is fully normalized or not.
      @@@InCase:
        @@@@Value: true
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The string is fully normalized.
      @@@InCase:
        @@@@Value: true
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The string is fully normalized.
      @@@PerlDef:
        @@@@cast-input: 0
        @@@@@:
          my $str0 = ref $self eq 'SCALAR' ? $self : \$self;
          my $str1 = ref $str eq 'SCALAR' ? $str : ref $str ? \(''.$str) : \$str;
          if ($caseInsensitive) {
            $r = lc ($str0) eq lc ($str1) ? true : false;
          } else {
            $r = $str0 eq $str1 ? true : false;
          }
## DataType:DOMString

ResourceDef:
  @QName: boolean
  @AliasFor:
    DOMMain:boolean::ManakaiDOM:all
  @ForCheck:
    !=ManakaiDOM:all

ResourceDef:
  @QName: unsigned-long
  @AliasFor:
    DOMMain:unsigned-long::ManakaiDOM:all
  @ForCheck:
    !=ManakaiDOM:all

ResourceDef:
  @For: 
    ManakaiDOM:DOM3
  @rdf:type:
    @@@:
      dis:MultipleResource
    @@ForCheck:
      !ManakaiDOM:ForIF !ManakaiDOM:ForClass
  @resourceFor:
    ManakaiDOM:ForIF
  @resourceFor:
    @@@:
      ManakaiDOM:ForClass
    @@For:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOMCommon
  @Name:
    @@@: StringExtend
    @@ForCheck:
      ManakaiDOM:ForIF
  @Name:
    @@@: ManakaiDOMStringExtend
    @@ForCheck:
      ManakaiDOM:ForClass
  @rdf:type:
    @@@:
      ManakaiDOM:IF
    @@ForCheck:
      ManakaiDOM:ForIF
  @rdf:type:
    @@@:
      ManakaiDOM:PrimitiveTypeClass
    @@ForCheck:
      ManakaiDOM:ForClass
  @ImplementLevel3: 
  @Description:
    @@lang:en
    @@@:
      Extensions to a language's native <CODE:String> class or interface.
     \
      {NOTE:: This interface is informatively defined in Appendix 
              of DOM Level 3 Core.
      \
      }
  @Method:
    @@Name: findOffset16
    @@Description:
      @@@lang:en
      @@@@: 
        Returns the UTF-16 offset that corresponding to a UTF-32 offset.
        Unmatched surrogate is counted as a single UTF-16 value.
    @@Param:
      @@@Name: offset32
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The UTF-32 offset.
    @@Return:
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The UTF-16 offset.
      @@@Exception:
        @@@@Type: 
          DOMCore:DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified <P:offset32> is negative or greater than
            the number of characters (i.e. UTF-32 32-bit code units).
      @@@PerlDef:
        @@@@DefaultValue: $offset32
        @@@@@:
          my $s = ref $self eq 'SCALAR' ? $self : \$self;
          if (not defined $offset32 or $offset32 < 0 or
              CORE::length ($$s) < $offset32) {
            __EXCEPTION{DOMCore:ManakaiDOMException.INDEX_SIZE_ERR::
              MDOMX:param-name => 'offset32',
            }__;
          }
          my $ss = substr $$s, 0, $offset32;
          if ($ss =~ /[\x{10000}-\x{10FFFF}]/) {
            while ($ss =~ /[\x{10000}-\x{10FFFF}]+/g) {
              $r += $+[0] - $-[0];
            }
          }
  @Method:
    @@Name: findOffset32
    @@Description:
      @@@lang:en
      @@@@:
        Returns the UTF-32 offset corresponding to a UTF-16 offset.
        Unmatched surrogate is counted as a single UTF-16 value.
    @@Param:
      @@@Name: offset16
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@: The UTF-16 offset.
    @@Return:
      @@@Type: unsigned-long
      @@@Description:
        @@@@lang:en
        @@@@@:
          The UTF-32 offset.  If the <P:offset16> value is into middle of a 
          surrogate pair, the UTF-32 offset at the end of the pair is 
          returned.
      @@@Exception:
        @@@@Type: 
          DOMCore:DOMException
        @@@@Name: INDEX_SIZE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified <P::offset32> is negative or greater than
            the number of characters (i.e. UTF-32's 32-bit code units).
      @@@PerlDef:
        @@@@DefaultValue: $offset16
        @@@@ImplNote:
          @@@@@lang:en
          @@@@@@: 
            <QUOTE::Current position> (see the method 
            <M::ManakaiDOMString.setCurrentPosition>) of the string
            has been changed. 
        @@@@@:
          my $s = ref $self eq 'SCALAR' ? $self : \$self;
          if (not defined $offset16 or $offset16 < 0 or
              CORE::length ($$s) * 2 < $offset16) {
            __EXCEPTION{DOMCore:ManakaiDOMException.INDEX_SIZE_ERR::
              MDOMX:param-name => 'offset16',
            }__;
          }
          pos ($$s) = 0;
          use integer;
          while ($offset16 and pos $$s <= CORE::length $$s) {
            if ($$s =~ /[^\x{10000}-\x{10FFFF}]{1,$offset16}/gc) {
              $offset16 -= $+[0] - $-[0];
            } elsif ($$s =~ m{[\x{10000}-\x{10FFFF}]{1,$offset16/2}}gc) {
              $offset16 -= 2 * ($+[0] - $-[0]);
              last if $offset16 < 0;
            } else {
              __EXCEPTION{
              MDOMX:MDOM_DEBUG_BUG||ManakaiDOM:Perl::
                MDOMX:values => {{
                  count => $offset16,
                  position => 1,
                }},
              }__;
            }
          }
          if ($offset16 > 0) {
            __EXCEPTION{DOMCore:ManakaiDOMException.INDEX_SIZE_ERR::
              MDOMX:param-name => 'offset16',
            }__;
          }
          $r = pos ($$s);
##IF: StringExtended

## -- DOM specialized string types

ElementTypeBinding:
  @Name: StringDataTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DataType
    @@rdfs:subClassOf:
      @@@@:
        DOMMain:ManakaiDOMString
      @@@For:
        !=ManakaiDOM:ManakaiDOMCommon
    @@AliasFor: 
      @@@@:
        ::ManakaiDOM:ManakaiDOMLatest
      @@@For:
        ManakaiDOM:ManakaiDOMCommon
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM

StringDataTypeDef:
  @QName: 
    ManakaiDOM:ManakaiDOMURI
  @FullName: 
    @@lang:en
    @@@: DOM URI
  @Description:
    @@lang:en
    @@@:
      A DOM URI.  It is a specialized case of the <TYPE:DOMString> and 
      that met the conditions:
    \
      1. An absolute identifier absolutely identifies a resource on the Web.
    \
      2. Simple string equality of absolute resource identifiers. 
      No other equaivalence is considered significant to the 
      DOM specification.
    \
      3. A relative identifier is easily detected and made absolute 
      relative to an absolute identifier.
    \
      4. Retrieval of content of a resource may be accomplished 
      where required.
  @ImplNote:
    @@lang:en
    @@@:
      Examples of DOM URI include RFC 2396/2773 URI reference and 
      IRI reference.

  @ResourceDef:
    @@QName: isRelativeDOMURI
    @@rdf:type:
      dis2pm:InlineCode
    @@Description:
      @@@lang:en
      @@@@:
        Whether a string is a relative DOM URI or not. 
    @@PerlDef:
      @@@@:
        ($INPUT !~ /\A[0-9A-Za-z+_.%-]+:/)
      @@@ImplNote:
        @@@@lang:en
        @@@@@:
          {TODO:: I18n consideration
          \
          }

StringDataTypeDef:
  @QName: RFC2732URIReference
  @FullName:
    @@lang:en
    @@@:
      RFC 2396 + RFC 2732 URI reference
  @rdfs:subClassOf:
    ManakaiDOM:ManakaiDOMURI

StringDataTypeDef:
  @QName: RFC2396URIReference
  @FullName:
    @@lang:en
    @@@:
      RFC 2396 URI reference
  @rdfs:subClassOf: RFC2732URIReference

StringDataTypeDef:
  @QName: RFC2396URI
  @FullName:
    @@lang:en
    @@@:
      RFC 2396 URI
  @rdfs:subClassOf: RFC2396URIReference

StringDataTypeDef:
  @QName: RFC2396AbsoluteURI
  @FullName:
    @@lang:en
     @@@:
       RFC 2396 Absolute URI
  @rdfs:subClassOf: RFC2396URI

## TODO: Output escape

StringDataTypeDef:
  @QName: 
    ManakaiDOM:ManakaiDOMNamespaceURI
  @FullName:
    @@lang:en
    @@@: DOM Namespace URI
  @rdfs:subClassOf:
    ManakaiDOM:ManakaiDOMURI
  @Description:
    @@lang:en
    @@@:
      A namespace URI.  In general, DOM implementations does not 
      perform any URI normalization or canonicalization.  The URIs 
      given to the DOM are assumed to be valid and no lexical 
      checking is performed.
      
      Absolute URI references are treated 
      as strings and compared literally.  How relative namespace URI 
      references are treated is undefined.  DOM applications should 
      use "null" if they wish to have no namespace.
      
      Some programing languages can differentiate empty strings 
      from "null".  Empty strings were specified as a legal namespace 
      URI in the DOM Level 2 Specification but the DOM Level 2 Errata 
      refines this as the implementaton dependent matter.  The 
      DOM Level 3 Specification again refines to be converted to "null".
  @ImplNote:
    @@lang:en
    @@@: 
      The "dis2pm.pl" is coded so that if the input (the parameter of 
      a method or the given value of an attribute) is typed as 
      "ManakaiDOMNamespaceURI", the Perl code to check the empty 
      string is outputed as part of the implementation.

  @DISLang:InputProcessor:
    @@PerlDef:
      if (CORE::defined $INPUT and CORE::length $INPUT == 0) {
        __WARNING{MDOMX:MDOM_NS_EMPTY_URI::
          MDOMX:param-name => {$INPUT},
        }__;
        __FOR{ManakaiDOM:ManakaiDOM3 | ManakaiDOM:ManakaiDOMCommon::
          $INPUT = undef;
        }__;
      }

StringDataTypeDef:
  @QName: ManakaiDOMSchemaType
  @FullName:
    @@lang:en
    @@@:
      Schema language type
  @Description:
    @@lang:en
    @@@:
      An absolute URI representing the type of the schema language 
      <SRC::DOM Level 3 Core <CP::schema-type>, DOM Level 3 Load and Save
            <M::DOMLS:DOMImplementationLS.createLSParser>>.
      \
      {NOTE:: Schema languages other than XML Schema and XML DTD 
              are outside of the scope of W3C; they should 
              recommend their identifying absolute URI 
              <SRC::DOM Level 3 Core <CP::schema-type>, 
                    DOM Level 3 Load and Save 
                    <M::DOMLS:DOMImplementationLS.createLSParser>>.
      \
      }
  @rdfs:subClassOf:
    ManakaiDOM:ManakaiDOMURI
  @InCase:
    @@Value:
      http://www.w3.org/2001/XMLSchema
    @@Description:
      @@@lang:en
      @@@@:
        The XML Schema definition language 
        <SRC::DOM Level 3 Core <CP::schema-type>, 
              DOM Level 3 Load and Save
              <M::DOMLS:DOMImplementationLS.createLSParser>>.
  @InCase:
    @@Value:
      http://www.w3.org/TR/REC-xml
    @@Description:
      @@@lang:en
      @@@@:
        The XML 1.0 Document Type Definition 
        <SRC::DOM Level 3 Core <CP::schema-type>, 
              DOM Level 3 Load and Save
        <M::DOMLS:DOMImplementationLS.createLSParser>>.

ImplNote:
  @lang:en
  @@:
    TODO: Move key identifier(s) to keyboard event module.

StringDataTypeDef:
  @QName:
    ManakaiDOM:ManakaiDOMKeyIdentifier
  @For:
    ManakaiDOM:ManakaiDOM3
  @FullName:
    @@lang:en
    @@@: DOM key identifier
  @Description:
    @@lang:en
    @@@:
      A key identifier.
    \
      {NOTE:: A set of key identifiers are defined in the Appendix A 
              of the <CITE:DOM Level 3 Events> Specification.
    \
      }

StringDataTypeDef:
  @QName:
    ManakaiDOM:ManakaiDOMKeyIdentifiers
  @For:
    ManakaiDOM:ManakaiDOM3
  @FullName:
    @@lang:en
    @@@: List of DOM key identifiers
  @Description:
    @@lang:en
    @@@:
      Zero or more <TYPE:ManakaiDOM:ManakaiDOMKeyIdentifier> separated 
      by white space (XML 1.0 <CODE:S>). 
      \
      In the manakai DOM implementations, method parameters and 
      attributes whose actual datatype is 
      <TYPE::ManakaiDOM:ManakaiDOMKeyIdentifiers> also accept a reference 
      to an array whose items are key identifier strings as well as 
      a plain string of identifiers.

  @DISLang:InputProcessor:
    @@PerlDef:
      if (CORE::defined $INPUT) {
        unless (CORE::ref $INPUT) {
          $INPUT = [CORE::split /[\x20\x09\x0D\x0A]/, $INPUT];
        }
      } else {
        $INPUT = [];
      }

StringDataTypeDef:
  @QName: ManakaiDOMXMLName
  @FullName:
    @@lang:en
    @@@: XML Name
  @DISLang:InputProcessor:
    @@PerlDef: \

  @ResourceDef:
    @@QName: testXML10Name
    @@enDesc:
      Tests whether a scalar variable string is a valid XML 1.0 
      <CODE::Name> or not.
    @@PerlDef:
      ($INPUT =~ /\A\p{inxml:_NameStartChar10}\p{inxml:NameChar10}*\z/)
    @@rdf:type:
      dis2pm:InlineCode
    @@aliasChild:1
  
  @ResourceDef:
    @@QName: testXML11Name
    @@enDesc: 
      Tests whether a scalar variable string is a valid XML 1.1
      <CODE::Name> or not.
    @@PerlDef:
      ($INPUT =~ /\A\p{inxml:NameStartChar11}\p{inxml:NameChar11}*\z/)
    @@rdf:type:
      dis2pm:InlineCode
    @@aliasChild: 1

  @ResourceDef:
    @@QName: ensureXMLName
    @@rdf:type: 
      dis2pm:BlockCode
    @@Description:
      @@@lang:en
      @@@@: 
        Tests whether a string is a legal XML Name and 
        if not, raises an exception.
        \
        {NOTE:: This code fragment does not support non-<Feature::XML>. 
        \
        }
    @@ImplNote:
      @@@lang:en
      @@@@:
        What should be done for HTML name is not studied yet. 
    @@PerlDef:
        if (defined $INPUT) {
          __FOR{ManakaiDOM:DOM3::
            if (((not defined $XMLVERSION or $XMLVERSION eq '1.0') and
                 not <Code::DOMMain:testXML10Name:: $INPUT = $INPUT>) or
                ($XMLVERSION eq '1.1' and
                 not <Code::DOMMain:testXML11Name:: $INPUT = $INPUT>)) {
              __EXCEPTION{MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_PARAM_NAME',
                infoset:version => {$XMLVERSION},
              }__;
            }
          }__;
          __FOR{!ManakaiDOM:DOM3::
            unless (<Code::DOMMain:testXML10Name:: $INPUT = $INPUT>) {
              __EXCEPTION{MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_PARAM_NAME',
                infoset:version => '1.0',
              }__;
            }
          }__;
        }

StringDataTypeDef:
  @QName: ManakaiDOMXMLNCName
  @rdfs:subClassOf: ManakaiDOMXMLName
  @FullName:
    @@lang:en
    @@@: XML NCName

  @DISLang:InputProcessor:
    @@PerlDef:\

  @ResourceDef:
    @@QName: testXML10NCName
    @@rdf:type:
      dis2pm:InlineCode
    @@aliasChild:1
    @@enDesc:
      Tests whether a scalar variable string is a valid XML Namespace
      1.0 <CODE::NCName> or not.
    @@PerlDef:
      ($INPUT =~ /\A\p{inxml:_NCNameStartChar10}\p{inxml:NCNameChar10}*\z/)

  @ResourceDef:
    @@QName: testXML11NCName
    @@rdf:type:
      dis2pm:InlineCode
    @@aliasChild:1
    @@enDesc:
      Tests whether a scalar variable string is a valid XML Namespace
      1.1 <CODE::NCName> or not.
    @@PerlDef:
      ($INPUT =~ /\A\p{inxml:NCNameStartChar11}\p{inxml:NCNameChar11}*\z/)

StringDataTypeDef:
  @QName: ManakaiDOMNamespacePrefix
  @rdfs:subClassOf: ManakaiDOMXMLNCName
  @FullName:
    @@lang:en
    @@@: XML Namespace Prefix

  @ResourceDef:
    @@QName: ensureNamespacePrefix
    @@rdf:type:
      dis2pm:BlockCode
    @@Description:
      @@@lang:en
      @@@@: 
        Tests whether a string is a legal XML Namespace prefix and 
        if not, raises an exception.
        \
        {NOTE:: This code fragment does not support non-<Feature::XML>. 
        \
        }
    @@Description:
      @@@lang:en
      @@@@:
        The DOM Level 3 Core Specification specifies that how
        the empty prefix string is treated is implementation-dependent;
        the manakai DOM implementations does not distingulish
        it with the <DOM::null> value.
      @@@For:
        ManakaiDOM:DOM3
    @@PerlDef:
        __FOR{ManakaiDOM:DOM3::
          if (defined $INPUT and $INPUT eq '') {
            __WARNING{DOMMain:MDOMX_EMPTY_NS_PREFIX::
              MDOMX:param-name => '$INPUT_PARAM_NAME',
            }__;
          }
        }__;
        if (defined $INPUT) {
          __FOR{ManakaiDOM:DOM3::
            if (($XMLVERSION eq '1.0' and
                 not <Code::DOMMain:testXML10Name:: $INPUT = $INPUT>) or
                ($XMLVERSION eq '1.1' and
                 not <Code::DOMMain:testXML11Name:: $INPUT = $INPUT>)) {
              __EXCEPTION{MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_PARAM_NAME',
                infoset:version => {$XMLVERSION},
              }__;
            } elsif (index ($INPUT, ':') > -1) {
              __EXCEPTION{MDOMX:MDOM_NS_BAD_NCNAME::
                infoset:name => {$INPUT},
                MDOMX:param-name => '$INPUT_PARAM_NAME',
                infoset:version => {$XMLVERSION},
              }__;
            }
          }__;
          __FOR{ManakaiDOM:DOM2 !ManakaiDOM:DOM3::
            unless (<Code::DOMMain:testXML10Name:: $INPUT = $INPUT>) {
              __EXCEPTION{MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_PARAM_NAME',
                infoset:version => '1.0',
              }__;
            } elsif (index ($INPUT, ':') > -1) {
              __EXCEPTION{MDOMX:MDOM_NS_BAD_NCNAME::
                infoset:name => {$INPUT},
                MDOMX:param-name => '$INPUT_PARAM_NAME',
                infoset:version => '1.0',
              }__;
            }
          }__;
        }

StringDataTypeDef:
  @QName: ManakaiDOMXMLLocalName
  @rdfs:subClassOf: ManakaiDOMXMLNCName
  @FullName:
    @@lang:en
    @@@: XML local name

StringDataTypeDef:
  @Name: ManakaiDOMXMLQName
  @rdfs:subClassOf: ManakaiDOMXMLName
  @FullName:
    @@lang:en
    @@@:
      XML Qualified Name

  @ResourceDef:
    @@QName: ensureXMLQName
    @@rdf:type: 
      dis2pm:BlockCode
    @@Description:
      @@@lang:en
      @@@@:
        Checks whether a string is a legal XML qualified name and if not 
        then raises an exception.
    @@aliasChild:1
    @@PerlDef:
      @@@For:
        ManakaiDOM:DOM3
      @@@@:
        if ($XMLVERSION eq '1.1') {
          unless (<Code::DOMMain:testXML11Name:: $INPUT = $INPUT>) {
            __EXCEPTION{
              MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.1',
            }__;
          }
          unless (<Code::DOMMain:testXML11QName:: $INPUT = $INPUT>) {
            __EXCEPTION{
              MDOMX:MDOM_NS_MALFORMED_QNAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.1',
            }__;
          }
        } else {
          unless (<Code::DOMMain:testXML10Name:: $INPUT = $INPUT>) {
            __EXCEPTION{
              MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.0',
            }__;
          }
          unless (<Code::DOMMain:testXML10QName:: $INPUT = $INPUT>) {
            __EXCEPTION{
              MDOMX:MDOM_NS_MALFORMED_QNAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.0',
            }__;
          }
        }
     @@PerlDef:
       @@@For:
         ManakaiDOM:DOM2 !ManakaiDOM:DOM3
       @@@@:
          unless (<Code::DOMMain:testXML10Name:: $INPUT = $INPUT>) {
            __EXCEPTION{
              MDOMX:MDOM_BAD_NAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.0',
            }__;
v          }
          unless (<Code::DOMMain:testXML10QName:: $INPUT = $INPUT>) {
            __EXCEPTION{
              MDOMX:MDOM_NS_MALFORMED_QNAME::
                DOMCore:name => {$INPUT},
                MDOMX:param-name => '$INPUT_NAME',
                infoset:version => '1.0',
            }__;
          }

StringDataTypeDef:
  @QName: ManakaiDOMXML10QName
  @rdfs:subClassOf: ManakaiDOMXML10QName
  @enDesc:
    XML 1.0 Namespace Qualified Names.
  
  @DISLang:InputProcessor:
    @@PerlDef:
      unless (<Code::DOMMain:testXML10Name:: $INPUT = $INPUT>) {
        __EXCEPTION{MDOMX:MDOM_BAD_NAME::
            DOMCore:name => {$INPUT},
            MDOMX:param-name => '$INPUT_NAME',
            infoset:version => '1.0',
        }__;
      }
      unless (<Code::DOMMain:testXML10QName:: $INPUT = $INPUT>) {
        __EXCEPTION{MDOMX:MDOM_NS_MALFORMED_QNAME::
          DOMCore:name => {$INPUT},
          MDOMX:param-name => '$INPUT_NAME',
          infoset:version => '1.0',
        }__;
      }

  @ResourceDef:
    @@QName: testXML10QName
    @@rdf:type:
      dis2pm:InlineCode
    @@enDesc:
      Tests whether a scalar variable string is a valid XML
      Namespace 1.0 qualified name or not.
    @@aliasChild:1
    @@PerlDef:
      ($INPUT =~ /\A\p{inxml:_NCNameStartChar10}\p{inxml:NCNameChar10
                  }*(?::\p{inxml:_NCNameStartChar10}\p{inxml:NCNameChar10}*)?\z/)

StringDataTypeDef:
  @QName: ManakaiDOMXML11QName
  @rdfs:subClassOf: ManakaiDOMXMLQName
  @enDesc:
    XML 1.1 Namespace Qualified Names.
  
  @DISLang:InputProcessor:
    @@PerlDef:
      unless (<Code::DOMMain:testXML11Name:: $INPUT = $INPUT>) {
        __EXCEPTION{MDOMX:MDOM_BAD_NAME::
          DOMCore:name => {$INPUT},
          MDOMX:param-name => '$INPUT_NAME',
          infoset:version => '1.1',
        }__;
      }
      unless (<Code::DOMMain:testXML11QName:: $INPUT = $INPUT>) {
        __EXCEPTION{MDOMX:MDOM_NS_MALFORMED_QNAME::
          DOMCore:name => {$INPUT},
          MDOMX:param-name => '$INPUT_NAME',
          infoset:version => '1.1',
        }__;
      }

  @ResourceDef:
    @@QName: testXML11QName
    @@rdf:type:
      dis2pm:InlineCode
    @@enDesc:
      Tests whether a scalar variable string is a valid XML
      Namespace 1.1 qualified name or not.
    @@aliasChild:1
    @@PerlDef:
      ($INPUT =~ /\A\p{inxml:NCNameStartChar11}\p{inxml:NCNameChar11
                  }*(?::\p{inxml:NCNameStartChar11}\p{inxml:NCNameChar11}*)?\z/)

        

ResourceDef:
  @QName: checkXMLNamesQName
  @rdf:type:
    dis2pm:BlockCode
  @Description:
    @@lang:en
    @@@:
      Checks validness of XML Namespace Name (Namespace URI) and QName. 
      \
      {NOTE:: This code fragment checks their combination; it does not 
              test whether the URI or the QName is itself valid or not.
      \
      }
  @PerlDef:
    if (defined $PREFIX) {
      if (not defined $NSURI) {
        __EXCEPTION{MDOMX:MDOM_NS_PREFIX_WITH_NULL_URI::
          infoset:prefix => {$PREFIX},
        }__;
      } elsif ($PREFIX eq 'xml' and $NSURI ne <Q::xml:>) {
        __EXCEPTION{MDOMX:MDOM_NS_XML_WITH_OTHER_URI::
          infoset:namespaceName => {$NSURI},
        }__;
      } elsif ($PREFIX eq 'xmlns' and $NSURI ne <Q::xmlns:>) {
        __EXCEPTION{MDOMX:MDOM_NS_XMLNS_WITH_OTHER_URI::
          infoset:namespaceName => {$NSURI},
        }__;
      } elsif ($NSURI eq <Q::xml:> and $PREFIX ne 'xml') {
        __EXCEPTION{MDOMX:MDOM_NS_OTHER_WITH_XML_URI::
          infoset:prefix => {$PREFIX},
        }__;
      } elsif ($NSURI eq <Q::xmlns:> and $PREFIX ne 'xmlns') {
        __EXCEPTION{MDOMX:MDOM_NS_OTHER_WITH_XMLNS_URI::
          infoset:prefix => {$PREFIX},
        }__;
      } elsif ($NSURI eq <Q::xmlns:> and $PREFIX eq 'xmlns' and
               $LNAME eq 'xmlns') {
        __EXCEPTION{MDOMX:MDOM_NS_XMLNS_XMLNS}__;
      }
    } else { ## No prefix
      if ($NSURI eq <Q::xml:>) {
        __EXCEPTION{MDOMX:MDOM_NS_OTHER_WITH_XML_URI::
          infoset:prefix => {undef},
        }__;
      } elsif ($NSURI eq <Q::xmlns:> and $LNAME ne 'xmlns') {
        __EXCEPTION{MDOMX:MDOM_NS_OTHER_WITH_XMLNS_URI::
          infoset:prefix => {undef},
        }__;
      }
    }

## -- Manakai implementation-specific exception and warning

ExceptionDef:
  @QName: 
    ManakaiDOM:ManakaiDOMImplementationException
  @For: 
    ManakaiDOM:ManakaiDOM
  @Description:
    @@lang:en
    @@@:
      A set of manakai DOM implementation-dependent exceptions.
  @MDOMFeature:

  @Attr:
     @@Name:  code
     @@Description:
       @@@lang:en
       @@@@:
         The error code that denotes what kind of exception occures.
     @@Get:
       @@@Type:  
         DOMMain:unsigned-short::ManakaiDOM:all
       @@@actualType: 
         ManakaiDOM:ManakaiDOMImplementationExceptionCode
       @@@PerlDef: 
         __CODE{ManakaiDOM:getExceptionCode||ManakaiDOM:Perl}__;

  @ResourceDef:
    @@QName: 
      ManakaiDOM:ManakaiDOMImplementationExceptionCode
    @@rdf:type:
      ManakaiDOM:ConstGroup
    @@rdfs:subClassOf:
      DOMMain:unsigned-short::ManakaiDOM:all
    @@aliasChild: 1
    @@Type: unsigned-short

    @@XConst:
      @@@QName: 
        MDOMX:MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR
      @@@Value: 2
      @@@Description:
        @@@@lang:en
        @@@@@: 
          An attempt to break surrogate pair, i.e. the first character of 
          the range is the low-surrogate (the second 16-bit unit of the surrogate
          pair) or the last character of the range is the high-surrogate 
          (the first 16-bit unit of the surrogate pair).
      @@@XParam:
        @@@@QName:
          MDOMX:param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter to which inappropriate value is specified.

WarningDef:
  @QName: 
    ManakaiDOM:ManakaiDOMImplementationWarning
  @MDOMFeature:

  @Description:
    @@lang:en
    @@@:
      Warnings for the implementation dependent matters and 
      "no effect" actions.
  
  @Attr:
     @@Name:  code
     @@Get:
       @@@Type:  
         DOMMain:unsigned-short
       @@@actualType:
         ManakaiDOM:ManakaiDOMImplementationWarningCode
       @@@Description:
         @@@@lang:en
         @@@@@:
           The warning code from the constant value group
           ManakaiDOMImplementationWarningCode.
       @@@PerlDef: 
         __CODE{ManakaiDOM:getExceptionCode||ManakaiDOM:Perl}__;

  @ResourceDef:
    @@QName: 
      ManakaiDOM:ManakaiDOMImplementationWarningCode
    @@rdf:type:
      ManakaiDOM:ConstGroup
    @@rdfs:subClassOf: 
      DOMMain:unsigned-short
    @@Type: unsigned-short
    
    @@XConst:
      @@@QName: 
        MDOMX:ATTR_SET_NO_EFFECT
      @@@Type: unsigned-short
      @@@Value: 0
      @@@Description:
        @@@@lang:en
        @@@@@:
          Setting an attribute value has no effect by definition.
      @@@SubTypeDef:
        @@@@QName: MDOMX_NOEFFECT_SINCE_DOC_NOSUPPORT_XML
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The action has no effect since a document does not 
            support the <Feature::XML> feature. 
      @@@SubTypeDef:
        @@@@QName: MDOMX_NOEFFECT_SINCE_NODE_NOSUPPORT_XMLNS
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The action has no effect since a node does not 
            support XML Namespaces.

    @@XConst:
      @@@QName: 
        MDOMX:MDOM_NEWCHILD_IS_REFCHILD
      @@@Type: unsigned-short
      @@@Value: 1
      @@@Description:
        @@@@lang:en
        @@@@@:
          The node to be inserted is same as the reference node.
      @@@XParam:
        @@@@QName:
          MDOMX:newChild-param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter name for "newChild" node.
      @@@XParam:
        @@@@QName:
          MDOMX:refChild-param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter name for "refChild" node.

    @@XConst:
      @@@QName: 
        MDOMX:MDOM_REPLACE_BY_ITSELF_NO_EFFECT
      @@@Type:unsigned-short
      @@@Value:2
      @@@Description:
        @@@@lang:en
        @@@@@:
          An attempt to replace a node by itself is made. 
          It is no effect by definition.

    @@XConst:
      @@@QName: MDOMX_EMPTY_NS_PREFIX
      @@@Type: unsigned-short
      @@@Value: 3
      @@@Description:
        @@@@lang:en
        @@@@@:
          An empty namespace prefix is specified; its result 
          is implementation dependent <SRC::DOM Level 3>. 
    
    @@XConst:
      @@@QName: 
        MDOMX:MDOM_NS_EMPTY_URI
      @@@Type: unsigned-short
      @@@Value: 4
      @@@Description:
        @@@@lang:en
        @@@@@:
          The DOM Level 2 Core Specification defines that even the empty 
          string is treated as a real namespace URI.  The Errata for 
          the DOM Level 2 Specifications says that it is an error and 
          the way empty strings are treated is implementation dependent. 
        @@@@For:
          !ManakaiDOM:DOM3
      @@@Description:
        @@@@lang:en
        @@@@@:
          An empty string namespace URI is coverted into <DOM::null> 
          <SRC::DOM Level 3 Core>. 
        @@@@For:
          ManakaiDOM:DOM3
      @@@XParam:
        @@@@QName:
          MDOMX:param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter to which inappropriate value is specified.

    @@XConst:
      @@@QName:
        MDOMX:BAD_BASE_URI
      @@@Value:5
      @@@Description:
        @@@@lang:en
        @@@@@:
          Malformed base URI reference is specified.
      @@@SubTypeDef:
        @@@@QName:
          MDOMX:NULL_BASE_URI
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified base URI reference is <DOM::null>. 
      @@@SubTypeDef:
        @@@@QName:
          MDOMX:RELATIVE_BASE_URI
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified base URI reference is a relative URI reference.
        @@@@XParam:
          @@@@@QName:
            infoset:baseURI
          @@@@@Type:
            ManakaiDOM:ManakaiDOMURI
          @@@@@Description:
            @@@@@@lang:en
            @@@@@@@:
              The specified relative base URI reference.

    @@XConst:
      @@@QName:
        MDOMX:RELATIVE_URI
      @@@Value: 6
      @@@Description:
        @@@@lang:en
        @@@@@:
          A relative URI reference is specified; the result is 
          implementation dependent.
      @@@XParam:
        @@@@QName:
          MDOMX:uri
        @@@@Type:
          ManakaiDOM:ManakaiDOMURI
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The specified URI reference.

ResourceDef:
  @QName: unsigned-short
  @AliasFor:
    DOMMain:unsigned-short::ManakaiDOM:all
  @ForCheck:
    !=ManakaiDOM:all

## DOMMain.dis ends here
