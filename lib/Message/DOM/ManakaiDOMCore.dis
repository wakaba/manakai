Namespace:
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @dis2pm:
    http://suika.fam.cx/~wakaba/archive/2004/11/8/dis2pm#
  @DOMXML:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
  @infoset:
     http://www.w3.org/2001/04/infoset#
  @lang:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @MDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @MDOM_EXCEPTION:
     http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @null:
    http://suika.fam.cx/~wakaba/-temp/2003/09/27/null
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#
  @TreeCore: \
  @xhtml1:
    http://www.w3.org/1999/xhtml
  @xml:
    http://www.w3.org/XML/1998/namespace
  @xmlns:
    http://www.w3.org/2000/xmlns/
Module:
  @QName: 
    MDOM:ManakaiDOMCore
  @FullName:
    @@lang:en
    @@@: Manakai DOM Core Module
  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2004/mdom-core#
  
  @Description:
    @@lang:en
    @@@:
      The Manakai DOM Core Module provides supplemental interfaces 
      that should be used with the DOM Core Module.
  
  @Author:
    @@FullName:Wakaba
    @@Mail:w@suika.fam.cx
  @License:
     license:Perl+MPL
  @Date.RCS:
     $Date: 2004/12/28 13:10:20 $

  @Require:
    @@Module:
      @@@Name: DOMCore
    @@Module:
      @@@Name: ManakaiDOMCore
      @@@WithFor:
        ManakaiDOM:ManakaiDOM
      @@@For:
        ManakaiDOM:ManakaiDOM
    @@Module:
      @@@Name: ManakaiDOMCore
      @@@WithFor:
        ManakaiDOM:ManakaiDOM1
      @@@For:
        ManakaiDOM:ManakaiDOM1
    @@Module:
      @@@Name: ManakaiDOMCore
      @@@WithFor:
        ManakaiDOM:ManakaiDOM2
      @@@For:
        ManakaiDOM:ManakaiDOM2
    @@Module:
      @@@Name: ManakaiDOMCore
      @@@WithFor:
        ManakaiDOM:ManakaiDOM3
      @@@For:
        ManakaiDOM:ManakaiDOM3
  @DefaultFor:
    ManakaiDOM:ManakaiDOMLatest



ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:DOM
ElementTypeBinding:
  @Name: IntMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isForInternal: 1
ElementTypeBinding:
  @Name: ReMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isRedefining: 1
ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethodParameter
ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethodReturn
ElementTypeBinding:
  @Name: Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttribute
    @@ForCheck:
      ManakaiDOM:DOM
ElementTypeBinding:
  @Name: IntAttr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttribute
    @@ForCheck:
      ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isForInternal: 1
ElementTypeBinding:
  @Name: ReAttr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttribute
    @@ForCheck:
      ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isRedefining: 1
ElementTypeBinding:
  @Name: Get
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttrGet
ElementTypeBinding:
  @Name: Set
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttrSet
ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase
ElementTypeBinding:
  @Name: Exception
  @ElementType:
    ManakaiDOM:raises

ElementTypeBinding:
  @Name: PerlDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:Perl

ElementTypeBinding:
  @Name: ClassDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:Class
    @@For:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM

ClassDef:
  @Name:  ManakaiDOMChildNodeList

  @ISA:
    ManakaiDOM:ManakaiDOMNodeReference
  @Implement: 
    DOMCore:NodeList
  @Description:
    @@lang:en
    @@@:
      An ordered collection of child nodes.
  @Method:
     @@Name:  item
     @@Description:
       @@@lang:en
       @@@@:
         Return a child node.
     @@Param:
        @@@Name:  index
        @@@Type:  unsigned-long
        @@@Description:
          @@@@lang:en
          @@@@@: The index of the node into the child node list.
     @@Return:
        @@@Type:  
          DOMCore:Node
        @@@Description:
          @@@@lang:en
          @@@@@: 
            The child node at the "index"th position.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The "index" is invalid, i.e. it is greater than or 
              equal to the number of nodes in the list.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            $r = $self->{<Q::TreeCore:node>}->{<Q::infoset:children>}->[$index];
            if (defined $r) {
                   ## Condition sensitive
              $r = __CLASS{Node}__->__INT{getNodeReference}__ ($r);
            }
    @@SpecLevel:1
    @@Level[list]:
      1
      2
      3
  @Attr:
     @@Name:  length
     @@Description:
       @@@lang:en
       @@@@:
         The number of nodes in the list.
     @@Get:
        @@@Type:  unsigned-long
        @@@Def:
          @@@@Type:
             lang:Perl
          @@@@@:
            $r = @{$self->{<Q::TreeCore:node>}->{<Q::infoset:children>}};

  @IntMethod:
    @@Name: isEqualNodeList
    @@Operator:
      @@@Type:
        lang:Perl
      @@@@:==
    @@Description:
      @@@lang:en
      @@@@:
        Return whether two <IF:NodeList>s are equal.
    @@Param:
      @@@Name:arg
      @@@Type:ManakaiDOMChildNodeList
      @@@Description:
        @@@@lang:en
        @@@@@:
          The node list to compare equality with.
    @@Return:
      @@@Type:boolean
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
   \      EQ: {
   \        last EQ unless @{$self->{<Q::TreeCore:node>}
   \                              ->{<Q::infoset:children>}} ==
   \                       @{$arg->{<Q::TreeCore:node>}
                                 ->{<Q::infoset:children>}};
            for my $i (0..$#{$self->{<Q::TreeCore:node>}
                                  ->{<Q::infoset:children>}}) {
              unless ($self->{<Q::TreeCore:node>}
                                  ->{<Q::infoset:children>}->[$i] ==
                      $arg->{<Q::TreeCore:node>}
                                  ->{<Q::infoset:children>}->[$i]) {
                last EQ;
              }
            }
            $r = true;
          }
    @@ImplNote:
      @@@lang:en
      @@@@:
        See: <M:Node.isEqualNode>.
    @@SpecLevel:3
## IF:ManakaiDOMChildNodeList

ClassDef:
  @Name: ManakaiDOMGetElementsNodeList
  @ISA:
    ManakaiDOM:ManakaiDOMNodeReference
  @Implement:
    DOMCore:NodeList
  @Description:
    @@lang:en
    @@@:
      An ordered collection of nodes, returned by <CODE:getElementsBy>-methods.
  @Method:
     @@Name:  item
     @@Description:
       @@@lang:en
       @@@@:
         Return an item in the collection.
     @@Param:
        @@@Name:  index
        @@@Type:  unsigned-long
        @@@Description:
          @@@@lang:en
          @@@@@: The index of the item into the collection.
     @@Return:
        @@@Type:  
          DOMCore:Node
        @@@Description:
          @@@@lang:en
          @@@@@: 
            The node at the <P:index>th position in the collection.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The <P:index> is greater than or 
              equal to the number of nodes in the list.
       @@@Def:
         @@@@Type:
           lang:Perl
         @@@@@:
           $r = $self->{<Q::TreeCore:node>}
                     ->__SUPER{ManakaiDOMNodeObjectNode::}__::__INT{getElementBy}__
                         ($self->{<Q::ManakaiDOMCore:nodeMatch>}, \$index);
           if (defined $r) {
                  ## Conditional
             $r = __CLASS{Node}__->__INT{getNodeReference}__ ($r, $self);
           }
         @@@@ImplNote:
           @@@@@lang:en
           @@@@@@:
             TODO: Cache mechanism required.
     @@SpecLevel:1
     @@Level[list]:
       1
       2
       3
  @Attr:
     @@Name:  length
     @@Description:
       @@@lang:en
       @@@@:
         The number of nodes in the list.
     @@Get:
        @@@Type:  unsigned-long
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            my $l = $self->{<Q::TreeCore:node>}
                         ->__SUPER{ManakaiDOMNodeObjectNode::}__::__INT{getElementsBy}__
                             ($self->{<Q::ManakaiDOMCore:nodeMatch>});
            $r = @$l;
## IF:ManakaiDOMGetElementsNodeList

ClassDef:
  @Name: ManakaiDOMAttributes
  @ISA:
    ManakaiDOM:ManakaiDOMNodeReference
  @Implement:
    DOMCore:NamedNodeMap
  @Description:
    @@lang:en
    @@@:
      A list of attributes attached to an <IF:Element> node.

  @ImplNote:
    @@lang:en
    @@@:
      An element may have two (or more) attributes that have the same 
      <A:Node.nodeName>, but different <A:Node.namespaceURI>s. 
      Which of them is returned by DOM Level 1 methods is 
      implementation dependent.  The only guarantee is 
      that all methods that access a named item by its <A:Node.nodeName> 
      will access the same item, and all methods by its namespace URI
      and local name will access the same item. 
      <SRC:<CITE:DOM Level 2 Core> 1.4.8 XML Namespaces,
      <CITE:DOM Level 3 Core> 1.3.3 XML Namespaces>

  @IntMethod:
    @@Name:selectAttrNodeObject
    @@Description:
      @@@lang:en
      @@@@:
        Select an <IF:ManakaiDOMNodeObject> object that represents an 
        <IF:Attr> node.
    @@NSVersion:selectAttrNodeObjectNS
    @@Param:
      @@@Name:name
      @@@Type:
        DOMMain:DOMString
      @@@Description:
        @@@@lang:en
        @@@@@:
          The name of the attribute to select.
    @@Return:
      @@@Type: 
        ManakaiDOM:ManakaiDOMNodeObject
      @@@Description:
        @@@@lang:en
        @@@@@:
          The <IF:ManakaiDOMNodeObject> object.
      @@@InCase:
        @@@@Value:
          @@@@@is-null:1
        @@@@Description:
          @@@@@lang:en
          @@@@@@: There is no such attribute.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
            my $attr = $self->{<Q::TreeCore:node>}->{<Q::infoset:attributes>};
            if ($attr->{<Q::ManakaiDOM:noNS>}->{$name}) {
              $r = $attr->{<Q::ManakaiDOM:noNS>}->{$name};
              __WHEN{IS{<Q::DOMCore:removeAttribute>}::
                delete $attr->{<Q::ManakaiDOM:noNS>};
              }__;
            } elsif ($name eq 'xmlns') {
              for my $a (keys %{$attr->{<Q::xmlns:>}||{}}) {
                if ($attr->{<Q::xmlns:>}->{$a}->{<Q::infoset:localName>}) {
                  $r = $attr->{<Q::xmlns:>}->{$a};
                  __WHEN{IS{<Q::DOMCore:removeAttribute>}::
                    delete $attr->{<Q::xmlns:>}->{$a};
                  }__;
                  last;
                }
              }
            } elsif ($name eq 'xmlns:xmlns') {
              # 
            } else {
              for my $ns (keys %$attr) {
                if ($ns eq <Q::ManakaiDOM:noNS>) {
                  # 
                } else {
                  for my $a (keys %{$attr->{$ns}||{}}) {
                    if (defined $attr->{$ns}->{$a}->{<Q::infoset:prefix>} and
                        $attr->{$ns}->{$a}->{<Q::infoset:prefix>}.':'.
                        $attr->{$ns}->{$a}->{<Q::infoset:localName>} eq $name) {
                      $r = $attr->{$ns}->{$a};
                      __WHEN{IS{<Q::DOMCore:removeAttribute>}::
                        delete $attr->{$ns}->{$a};
                      }__;
                      last;
                    } elsif (not defined $attr->{$ns}->{$a}->{<Q::infoset:prefix>}
                         and
                         $attr->{$ns}->{$a}->{<Q::infoset:localName>} eq $name) {
                      $r = $attr->{$ns}->{$a};
                      __WHEN{IS{<Q::DOMCore:removeAttribute>}::
                        delete $attr->{$ns}->{$a};
                      }__;
                      last;
                    }
                  }
                }
              }
            }
    @@ImplNote:
      @@@lang:en
      @@@@:
        The same internal method is defined in <IF:Element>.

  @Method:
     @@Name:  getNamedItem
     @@Description:
       @@@lang:en
       @@@@: Retrieve an attribute node specified by name.
     @@NSVersion:getNamedItemNS
     @@Param:
        @@@Name:  name
        @@@Type:  
           DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:
            The <A:nodeName> of a node to retrieve, i.e. 
            the qualified name of the attribute.
     @@Return:
        @@@Type:  
          DOMCore:Attr
        @@@Description:
          @@@@lang:en
          @@@@@:
            The attribute node.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The <P:name> does not identify any node in this map.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            __INT{{selectAttrNodeObject}}__;
            if ($r) {
                         ## Condition sensitive
              $r = __CLASS{Node}__->__INT{getNodeReference}__ ($r, $self);
            }
          @@@@ImplNote:
            @@@@@lang:en
            @@@@@@:
              This code is same as <M:Element.getAttributeNode>.
    @@SpecLevel:1
    @@Level[list]:
      1
      2
      3
  @Method:
     @@Name:  setNamedItem
     @@Description:
       @@@lang:en
       @@@@:
         Add a node using its <A:nodeName> attribute.  If a node with 
         that name is already present in this map, it is replaced 
         by the new one.
         \
         Replacing a node by itself has no effect.
     @@ImplNote:
       @@@lang:en
       @@@@: 
         <QUOTE:Replacing ... no effect> is clarified by the DOM Level 2 Errata. 
     @@NSVersion:setNamedItemNS
     @@Param:
        @@@Name:  arg
        @@@Type:  
          DOMCore:Attr
        @@@Description:
          @@@@lang:en
          @@@@@: A node to store in this map.
     @@Return:
        @@@Type:  
          DOMCore:Attr
        @@@Description:
          @@@@lang:en
          @@@@@:
            If the "arg" node replaces an existing node, the replaced node.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The "arg" node does not replace any node in the map.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: WRONG_DOCUMENT_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The "arg" node was created from a different document.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NO_MODIFICATION_ALLOWED_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: This map is read-only.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: INUSE_ATTRIBUTE_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The "arg" node is already an 
              attribute of another "Element" object.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: HIERARCHY_REQUEST_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              An attempt is made to add a node that is unable to 
              belong to this map.
          @@@@SpecLevel:2
          @@@@ImplNote:
            @@@@@lang:en
            @@@@@@: This exception has added by the DOM Level 2 Errata.
         @@@Def:
           @@@@Type:
             lang:Perl
           @@@@@:
            if ($self->{<Q::TreeCore:node>}->{<Q::DOMCore:read-only>}) {
              __EXCEPTION{
                DOMException.NO_MODIFICATION_ALLOWED_ERR.
                MDOM_EXCEPTION:NOMOD_THIS::
              }__;
            }
            my $attrNode = $arg->{<Q::TreeCore:node>};
            if ($attrNode->{<Q::infoset:ownerElement>}) {
              __EXCEPTION{
                DOMException.INUSE_ATTRIBUTE_ERR::
                  <Q::MDOM_EXCEPTION:param-name> => 'arg',
              }__;
            } elsif ($attrNode->{<Q::DOMCore:ownerDocument>}
                              ->{<Q::TreeCore:nodeID>} ne
                     $self->{<Q::TreeCore:node>}->{<Q::DOMCore:ownerDocument>}
                          ->{<Q::TreeCore:nodeID>}) {
              __EXCEPTION{
                DOMException.WRONG_DOCUMENT_ERR::
              }__;
            } elsif ($attrNode->{<Q::DOMCore:nodeType>} ne
                     <Q::infoset:Attribute>) {
              __EXCEPTION{
                DOMException.HIERARCHY_REQUEST_ERR.
                MDOM_EXCEPTION:HIERARCHY_BAD_TYPE::
                  <Q::MDOM_EXCEPTION:param-name> => 'arg',
                  <Q::DOMCore:nodeType> => $attrNode->{<Q::DOMCore:nodeType>},
              }__;
            }

            if (defined $attrNode->{<Q::infoset:localName>}) {
              $r = $self->{<Q::TreeCore:node>}->{<Q::infoset:attributes>}
                     ->{defined $attrNode->{<Q::infoset:namespaceName>}
                              ? $attrNode->{<Q::infoset:namespaceName>}
                              : <Q::null:>}
                     ->{$attrNode->{<Q::infoset:localName>}};
            } else {
              $r = $self->{<Q::TreeCore:node>}->{<Q::infoset:attributes>}
                     ->{<Q::ManakaiDOM:noNS>}
                     ->{$attrNode->{<Q::DOMCore:name>}};
            }

            if ($r->{<Q::TreeCore:nodeID>} eq $attrNode->{<Q::TreeCore:nodeID>}) {
              __WARNING{
                ManakaiDOMImplementationException.
                MDOM_REPLACE_BY_ITSELF_NO_EFFECT::
              }__;
              $r = $arg;
            } else {
              $attrNode->{<Q::infoset:ownerElement>} = $self->{<Q::TreeCore:node>};
              if (defined $attrNode->{<Q::infoset:localName>}) {
                $self->{<Q::TreeCore:node>}->{<Q::infoset:attributes>}
                     ->{defined $attrNode->{<Q::infoset:namespaceName>}
                              ? $attrNode->{<Q::infoset:namespaceName>}
                              : <Q::null:>}
                     ->{$attrNode->{<Q::infoset:localName>}} = $attrNode;
              } else {
                $self->{<Q::TreeCore:node>}->{<Q::infoset:attributes>}
                     ->{<Q::ManakaiDOM:noNS>}
                     ->{$attrNode->{<Q::DOMCore:name>}} = $attrNode;
              }
              if ($r) {
                delete $r->{<Q::infoset:parent>};
                $r->__SUPER{ManakaiDOMNodeObject::}__::__INT{orphanate}__;
                     ## Condition sensitive
                $r = __CLASS{Node}__->__INT{getNodeReference}__ ($r, $self)
                  if defined wantarray;
              }
            }
          @@@@ImplNote:
            @@@@@lang:en
            @@@@@@:
              It is unclear whether the node should be returned if 
              the node is <QUOTE:replaced> by itself.
            \
              This code is almost same as <M:Element.setAttributeNode>.
              The parameter <P:newAttr> in that method is named as 
              <P:arg> in this method.
    @@SpecLevel:1
    @@Level[list]:
      1
      2
      3
  @Method:
     @@Name:  removeNamedItem
     @@Description:
        @@@lang:en
        @@@@:
          Remove an attribute node specified by name.
     @@ImplNote:
       @@@lang:en
       @@@@:
         New non-<A:specified> attribute will be generated if the schema 
         defines some default value for the attribute removed.
     @@NSVersion:removeNamedItemNS
     @@Param:
        @@@Name:  name
        @@@Type:  
           DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The "nodeName" of the node to remove.
     @@Return:
        @@@Type:  
            DOMCore:Attr
        @@@Description:
          @@@@lang:en
          @@@@@: The attribute node removed from this map.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NOT_FOUND_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: There is no node named "name" in this map.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NO_MODIFICATION_ALLOWED_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: This map is read-only.
          @@@@SpecLevel:1
          @@@@ImplNote:
            @@@@@lang:en
            @@@@@@:
              This exception is added by the DOM Level 1 First Edition Errata.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            if ($self->{<Q::TreeCore:node>}->{<Q::DOMCore:read-only>}) {
              __EXCEPTION{
                DOMException.NO_MODIFICATION_ALLOWED_ERR.
                MDOM_EXCEPTION:NOMOD_THIS::
              }__;
            }
            __INT{{selectAttrNodeObject: <Q::DOMCore:removeAttribute>}}__;
            if ($r) {
              delete $r->{<Q::infoset:ownerElement>};
              $r->__SUPER{ManakaiDOMNodeObject::}__::__INT{orphanate}__;
                  ## Condition sensitive
              $r = __CLASS{Node}__->__INT{getNodeReference}__ ($r, $self)
                  if defined wantarray;
            } else {
              __EXCEPTION{
                DOMException.NOT_FOUND_ERR::
              }__;
            }
          @@@@ImplNote:
            @@@@@lang:en
            @@@@@@:
              TODO: Default attribute
            \
              This code is almost same as <M:Element.removeAttribute>. 
              This method returns an <IF:Attr> removed but that method 
              does not (<M:Element.removeAttributeNode> does).
    @@SpecLevel:1
    @@Level[list]:
      1
      2
      3
  @Method:
     @@Name:  item
     @@Description:
       @@@lang:en
       @@@@:
         Return an attribute attached to the element.
     @@Param:
        @@@Name:  index
        @@@Type:  unsigned-long
        @@@Description:
          @@@@lang:en
          @@@@@: The index of the item into this map.
     @@Return:
        @@@Type: 
           DOMCore:Attr
        @@@Description:
          @@@@lang:en
          @@@@@: 
            The node at the <P:index>th position in the map.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              The "index" is invalid, i.e. it is greater than or 
              equal to the number of nodes in this map.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            my $i = 0;
            FIND: for my $ns (sort keys %{$self->{<Q::TreeCore:node>}
                                               ->{<Q::infoset:attributes>}}) {
              for my $ln (sort keys %{$self->{<Q::TreeCore:node>}
                                           ->{<Q::infoset:attributes>}->{$ns}}) {
                if ($i++ == $index) {
                  $r = $self->{<Q::TreeCore:node>}->{<Q::infoset:attributes>}
                            ->{$ns}->{$ln};
                  last FIND;
                }
              }
            }
            if ($r) {
                         ## Condition sensitive
              $r = __CLASS{Node}__->__INT{getNodeReference}__ ($r, $self);
            }
    @@ImplNote:
      @@@lang:en
      @@@@:
        How ordering attributes is not specified.
    @@Level[list]:
      1
      2
      3
    @@SpecLevel:1
  @Attr:
     @@Name:  length
     @@Description:
       @@@lang:en
       @@@@: The number of attribute nodes attached to the element.
     @@Get:
        @@@Type:  unsigned-long
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            for (values %{$self->{<Q::TreeCore:node>}->{<Q::infoset:attributes>}}) {
              $r += keys %$_;
            }

  @IntMethod:
     @@Name: selectAttrNodeObjectNS
     @@Description:
       @@@lang:en
       @@@@:
         Select a <IF:ManakaiDOMNodeObject> object that represents 
         an <IF:Attr> node, by namespace URI and local name.
     @@NoNSVersion:selectAttrNodeObject
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:
          ManakaiDOM:ManakaiDOMNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@:
            The namespace URI of the attribute to select.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The attribute to select has no namespace.
     @@Param:
        @@@Name:  localName
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The local name of the attribute to select.
     @@Return:
        @@@Type:
          ManakaiDOM:ManakaiDOMNodeObject
        @@@Description:
          @@@@lang:en
          @@@@@:
            The <IF:ManakaiDOMNOdeObject> object.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: There is no such attribute.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            my $attr = $self->{<Q::TreeCore:node>}->{<Q::infoset:attributes>};
            $namespaceURI = <Q::null:> unless defined $namespaceURI;
            $r = $attr->{$namespaceURI}->{$localName};
            __WHEN{IS{<Q::DOMCore:removeAttribute>}::
              delete $attr->{$namespaceURI}->{$localName} if $r;
            }__;
    @@ImplNote:
      @@@lang:en
      @@@@:
        The same internal method is defined in <IF:Element>.

  @Method:
     @@Name:  getNamedItemNS
     @@Description:
       @@@lang:en
       @@@@:
         Retrieve an attribute node specified by local name and namespace URI.
     @@NoNSVersion:getNamedItem
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:
          ManakaiDOM:ManakaiDOMNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@:
            The namespace URI of the node to retrieve.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The node to retrieve has no namespace.
     @@Param:
        @@@Name:  localName
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The local name of the node to retrieve.
     @@Return:
        @@@Type:
          DOMCore:Attr
        @@@Description:
          @@@@lang:en
          @@@@@:
            An attribute node with the specified local name and 
            namespace URI.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The "namespaceURI" and "localName" does not identify 
              any node in this map.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NOT_SUPPORTED_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The DOM implementation does not support the feature "XML" and 
              the language exposed through the "Document" does not 
              support XML Namespaces.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            __INT{{selectAttrNodeObjectNS}}__;
            if ($r) {
                         ## Condition sensitive
              $r = __CLASS{Node}__->__INT{getNodeReference}__ ($r, $self);
            }
          @@@@ImplNote:
            @@@@@lang:en
            @@@@@@:
              Same code as <M:Element.getAttributeNodeNS>.
     @@Level[list]:
        2
        3
     @@SpecLevel:2
  @Method:
     @@Name:  setNamedItemNS
     @@Description:
       @@@lang:en
       @@@@:
         Add a node using its "namespaceURI" and "localName". 
         If a node with that namespace URI and that local name 
         is already present in this map, it is replaced by the new one. 
         Replacing a node by itself has no effect.
     @@NoNSVersion:setNamedItem
     @@Param:
        @@@Name:  arg
        @@@Type:
          DOMCore:Attr
        @@@Description:
          @@@@lang:en
          @@@@@: An attribute node to set to this attribute.
     @@Return:
        @@@Type:
          DOMCore:Attr
        @@@Description:
          @@@@lang:en
          @@@@@:
            If the "arg" node replaces an existing node, the replaced node.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The "arg" node replaces no existing node in this map.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: WRONG_DOCUMENT_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The "arg" node was created from a different document.
         @@@Exception:
           @@@@Name:NO_MODIFICATION_ALLOWED_ERR
           @@@@Type:DOMException
           @@@@SubType:
             @@@@@QName: 
               MDOM_EXCEPTION:NOMOD_THIS
             @@@@@Description:
               @@@@@@lang:en
               @@@@@@@:
                 This map is read-only.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: INUSE_ATTRIBUTE_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The "arg" node is already an 
              attribute of another "Element" object.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: HIERARCHY_REQUEST_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              An attempt is made to add a node that is unable to 
              belong to this map.
          @@@@SpecLevel:2
          @@@@ImplNote:
            @@@@@lang:en
            @@@@@@: This exception has been added by the DOM Level 2 Errata. 
         @@@Exception:
           @@@@Name:NOT_SUPPORTED_ERR
           @@@@Type:DOMException
           @@@@SubType:
             @@@@@QName:
               MDOM_EXCEPTION:MDOM_IMPL_NOSUPPORT_XML
             @@@@@Description:
               @@@@@@lang:en
               @@@@@@@:
                 The DOM implementation does not support the feature 
                 <Feature:XML> and the language exposed through the 
                 <IF:Document> does not support XML Namespaces.
             @@@@@SpecLevel:2
           @@@@SubType:
             @@@@@QName:
               MDOM_EXCEPTION:MDOM_NODE_NOSUPPORT_XMLNS
             @@@@@Description:
               @@@@@@lang:en
               @@@@@@@:
                 The <P:arg> node does not support XML Namespace.
             @@@@@SpecLevel[list]:
         @@@Def:
           @@@@Type:
             lang:Perl
           @@@@@:
            if ($self->{<Q::TreeCore:node>}->{<Q::DOMCore:read-only>}) {
              __EXCEPTION{
                DOMException.NO_MODIFICATION_ALLOWED_ERR.
                MDOM_EXCEPTION:NOMOD_THIS::
              }__;
            }
            my $attrNode = $arg->{<Q::TreeCore:node>};
            if ($attrNode->{<Q::infoset:ownerElement>}) {
              __EXCEPTION{
                DOMException.INUSE_ATTRIBUTE_ERR::
                  <Q::MDOM_EXCEPTION:param-name> => 'arg',
              }__;
            } elsif ($attrNode->{<Q::DOMCore:ownerDocument>}
                              ->{<Q::TreeCore:nodeID>} ne
                     $self->{<Q::TreeCore:node>}->{<Q::DOMCore:ownerDocument>}
                          ->{<Q::TreeCore:nodeID>}) {
              __EXCEPTION{
                DOMException.WRONG_DOCUMENT_ERR::
              }__;
            } elsif ($attrNode->{<Q::DOMCore:nodeType>} ne
                     <Q::infoset:Attribute>) {
              __EXCEPTION{
                DOMException.HIERARCHY_REQUEST_ERR.
                MDOM_EXCEPTION:HIERARCHY_BAD_TYPE::
                  <Q::MDOM_EXCEPTION:param-name> => 'arg',
                  <Q::DOMCore:nodeType> => $attrNode->{<Q::DOMCore:nodeType>},
              }__;
            }

            if (defined $attrNode->{<Q::infoset:localName>}) {
              $r = $self->{<Q::TreeCore:node>}->{<Q::infoset:attributes>}
                     ->{defined $attrNode->{<Q::infoset:namespaceName>}
                              ? $attrNode->{<Q::infoset:namespaceName>}
                              : <Q::null:>}
                     ->{$attrNode->{<Q::infoset:localName>}};
            } else {
              __EXCEPTION{
                DOMException.NOT_SUPPORTED_ERR.
                MDOM_EXCEPTION:MDOM_NODE_NOSUPPORT_XMLNS::
                  <Q::MDOM_EXCEPTION:param-name> => 'arg',
              }__;
            }

            if ($r->{<Q::TreeCore:nodeID>} eq $attrNode->{<Q::TreeCore:nodeID>}) {
              __WARNING{
                ManakaiDOMImplementationException.
                MDOM_REPLACE_BY_ITSELF_NO_EFFECT::
              }__;
              $r = $arg;
            } else {
              $attrNode->{<Q::infoset:ownerElement>} = $self->{<Q::TreeCore:node>};
              if (defined $attrNode->{<Q::infoset:localName>}) {
                $self->{<Q::TreeCore:node>}->{<Q::infoset:attributes>}
                     ->{defined $attrNode->{<Q::infoset:namespaceName>}
                              ? $attrNode->{<Q::infoset:namespaceName>}
                              : <Q::null:>}
                     ->{$attrNode->{<Q::infoset:localName>}} = $attrNode;
              } else {
                $self->{<Q::TreeCore:node>}->{<Q::infoset:attributes>}
                     ->{<Q::ManakaiDOM:noNS>}
                     ->{$attrNode->{<Q::DOMCore:name>}} = $attrNode;
              }
              if ($r) {
                delete $r->{<Q::infoset:parent>};
                $r->__SUPER{ManakaiDOMNodeObject::}__::__INT{orphanate}__;
                     ## Condition sensitive
                $r = __CLASS{Node}__->__INT{getNodeReference}__ ($r, $self)
                  if defined wantarray;
              }
            }
          @@@@ImplNote:
            @@@@@lang:en
            @@@@@@:
              It is unclear whether the node should be returned if 
              the node is <QUOTE:replaced> by itself.
             \
              This code is almost same as <M:Element.setAttributeNodeNS>
              without some points.
     @@Level[list]:  
        2
        3
     @@ImplNote:
       @@@lang:en
       @@@@:
         The DOM Level 2 Specification said that the HTML-only DOM 
         implenentations do not need to implement this method. 
         The DOM Level 2 Errata and the DOM Level 3 Specification 
         says that the NOT_SUPPORTED_ERR should be raised.
     @@SpecLevel:2
  @Method:
     @@Name:  removeNamedItemNS
     @@Description:
        @@@lang:en
        @@@@:
          Remove a node specified by local name and namespace URI.
     @@ImplNote:
       @@@lang:en
       @@@@:
         New non-"specified" attribute will be generated if the schema 
         defines some default value for the attribute removed.
     @@NoNSVersion:removeNamedItem
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:
          ManakaiDOM:ManakaiDOMNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@: The namespace URI of the node to remove.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The node to remove has no namespace.
     @@Param:
        @@@Name:  localName
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The local name of the node to remove.
     @@Return:
        @@@Type: 
          DOMCore:Attr
        @@@Description:
          @@@@lang:en
          @@@@@: The node removed from this map.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NOT_FOUND_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              There is no node with the specified "namespaceURI" and 
              "localName" in the map.
        @@@Exception:
          @@@@Type: 
             DOMCore:DOMException
          @@@@Name: NO_MODIFICATION_ALLOWED_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: This map is read-only.
         @@@Exception:
           @@@@Type: 
             DOMCore:DOMException
           @@@@Name: NOT_SUPPORTED_ERR
          @@@@SubType:
            @@@@@QName:
              MDOM_EXCEPTION:MDOM_IMPL_NOSUPPORT_XML
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@:
                The DOM implementation does not support the feature 
                <Feature:XML> and the language exposed through 
                the <IF:Document> does not support XML Namespaces.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            if ($self->{<Q::TreeCore:node>}->{<Q::DOMCore:read-only>}) {
              __EXCEPTION{
                DOMException.NO_MODIFICATION_ALLOWED_ERR.
                MDOM_EXCEPTION:NOMOD_THIS::
              }__;
            }
            __INT{{selectAttrNodeObjectNS: <Q::DOMCore:removeAttribute>}}__;
            if ($r) {
              delete $r->{<Q::infoset:ownerElement>};
              $r->__SUPER{ManakaiDOMNodeObject::}__::__INT{orphanate}__;
                     ## Condition sensitive
              $r = __CLASS{Node}__->__INT{getNodeReference}__ ($r, $self)
                  if defined wantarray;
            } else {
              __EXCEPTION{
                DOMException.NOT_FOUND_ERR::
              }__;
            }
         @@@@ImplNote:
           @@@@@lang:en
           @@@@@@:
             TODO: default attribute
         @@@@ImplNote:
           @@@@@lang:en
           @@@@@@:
             Almost same as <M:Element.removeAttributeNS>.
     @@ImplNote:
       @@@lang:en
       @@@@:
         The DOM Level 2 Specification said that the HTML-only DOM 
         implenentations do not need to implement this method. 
         The DOM Level 2 Errata and the DOM Level 3 Specification 
         says that the NOT_SUPPORTED_ERR should be raised.
     @@Level[list]:  
        2
        3
     @@SpecLevel:2

  @IntMethod:
    @@Name: isEqualNamedNodeMap
    @@Operator:
      @@@Type:
        lang:Perl
      @@@@:==
    @@Description:
      @@@lang:en
      @@@@:
        Return whether two <IF:NamedNodeMap>s are equal.
    @@Param:
      @@@Name:arg
      @@@Type:ManakaiDOMAttributes
      @@@Description:
        @@@@lang:en
        @@@@@:
          The node list to compare equality with.
    @@Return:
      @@@Type:boolean
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          EQ: {
            for my $ns (keys %{$self->{<Q::TreeCore:node>}
                                    ->{<Q::infoset:attributes>}}) {
              last EQ unless $arg->{<Q::TreeCore:node>}
                                 ->{<Q::infoset:attributes>}->{$ns};
              last EQ unless keys (%{$arg->{<Q::TreeCore:node>}
                                 ->{<Q::infoset:attributes>}->{$ns}}) ==
                             keys (%{$self->{<Q::TreeCore:node>}
                                 ->{<Q::infoset:attributes>}->{$ns}});
              for my $ln (keys %{$self->{<Q::TreeCore:node>}
                                      ->{<Q::infoset:attributes>}->{$ns}}) {
                last EQ unless $arg->{<Q::TreeCore:node>}
                                   ->{<Q::infoset:attributes>}->{$ns}->{$ln};
                last EQ unless $self->{<Q::TreeCore:node>}
                                    ->{<Q::infoset:attributes>}->{$ns}->{$ln} ==
                               $arg->{<Q::TreeCore:node>}
                                    ->{<Q::infoset:attributes>}->{$ns}->{$ln};
              }
            }
            $r = true;
          }
    @@ImplNote:
      @@@lang:en
      @@@@:
        See: <M:Node.isEqualNode>.
    @@SpecLevel:3
## IF:ManakaiDOMAttributes

## ManakaiDOMCore.dis ends here
