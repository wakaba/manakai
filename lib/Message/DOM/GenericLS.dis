Module:
  @QName: MDOM|GenericLS
  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2004/dom/gls#

  @enFN: Generic Load and Save Module

  @enDesc:
    The <Module::MDOM|GenericLS> module provides generic
    load and save factory methods from which parsers and / or
    serializers for various data formats can be retrieved.

  @DISCore:author: DISCore|Wakaba
  @License: license|Perl+MPL
  @Date:
    $Date: 2006/11/04 12:25:13 $

  @Require:
    @@Module: 
      @@@QName: MDOM|DOMFeature
      @@@WithFor: ManakaiDOM|ManakaiDOMLatest
  @DefaultFor: ManakaiDOM|ManakaiDOMLatest

Namespace:
  @c:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @DOMLS:
    http://suika.fam.cx/~wakaba/archive/2004/dom/ls#
  @domperl:
    http://suika.fam.cx/~wakaba/archive/2006/dom/perl/
  @f:
    http://suika.fam.cx/~wakaba/archive/2004/dom/feature#
  @fe:
    http://suika.fam.cx/www/2006/feature/
  @gls:
    http://suika.fam.cx/~wakaba/archive/2004/dom/gls#
  @idl:
    http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#
  @lang:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @MDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#
  @test:
    http://suika.fam.cx/~wakaba/archive/2004/dis/Test#

## -- Features

FeatureDef:
  @QName: Generic
  @featureQName: fe|GenericLS
  @FeatureVerDef:
    @@QName: Generic30
    @@f:instanceOf: Generic
    @@Version: 3.0

ElementTypeBinding:
  @Name: FeatureDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: f|Feature
    @@For: =ManakaiDOM|all

ElementTypeBinding:
  @Name: FeatureVerDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: f|Feature

ElementTypeBinding:
  @Name: featureQName
  @ElementType:
    f:name
  @ShadowContent:
    @@ContentType: DISCore|QName

ElementTypeBinding:
  @Name: IFQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: IFClsDef
  @ElementType: 
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@: dis|MultipleResource
      @@@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass
    @@resourceFor: ManakaiDOM|ForIF
    @@resourceFor:
      @@@@: ManakaiDOM|ForClass
      @@@ForCheck: ManakaiDOM|ManakaiDOM !=ManakaiDOM|ManakaiDOM
    @@For: ManakaiDOM|ManakaiDOMLatest
    @@For: =ManakaiDOM|ManakaiDOM

    @@rdf:type:
      @@@@: DISLang|Interface
      @@@ForCheck: ManakaiDOM|ForIF

    @@rdf:type:
      @@@@: DISLang|Class
      @@@ForCheck: ManakaiDOM|ForClass
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOM||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOMLatest||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOMLatest

    @@f:implements:
      @@@@: gls|Generic30
      @@@For: ManakaiDOM|ManakaiDOMLatest

ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Method
    @@ForCheck: !=ManakaiDOM|ManakaiDOM

ElementTypeBinding:
  @Name: IntMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Method
    @@ForCheck: !=ManakaiDOM|ManakaiDOM ManakaiDOM|ForClass
    @@ManakaiDOM:isForInternal: 1

ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|MethodParameter

ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|MethodReturn

ElementTypeBinding:
  @Name: Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Attribute
    @@ForCheck: !=ManakaiDOM|ManakaiDOM

ElementTypeBinding:
  @Name: Get
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|AttributeGet

ElementTypeBinding:
  @Name: Set
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|AttributeSet

ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase

ElementTypeBinding:
  @Name: PerlDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:Perl
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: Test
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: test|StandaloneTest
    @@ForCheck: ManakaiDOM|ForClass

## -- Implementation

IFClsDef:
  @IFQName: GLSImplementation
  @ClsQName: ManakaiGLSImplementation

  @domperl:implementedByObjectsOf: c|DOMImplementation
  @domperl:classImplementedByObjectsOf: c|ManakaiDOMImplementation

  @enDesc:
    The <IF::GLSImplementation> interface provides
    factory methods taking <TYPE::f|FeaturesString>
    as a parameter to specify desired features that should be
    implemented by parser or serializer.

  @ImplNote:
    @@lang:en
    @@@:
      There is also a JavaScript implementation:
      <URI::http://suika.fam.cx/gate/cvs/www/cx/fam/suika/y2005/LS/Generic.js>.

  @Test:
    @@QName: GLSImplementation.interface.1.test
    @@PerlDef:
      $test->assert_true
          (<ClassName::c|ManakaiDOMImplementation>->isa
              (<IFName::GLSImplementation>));
  @Test:
    @@QName: GLSImplementation.class.1.test
    @@PerlDef:
      $test->assert_true
          (<ClassName::c|ManakaiDOMImplementation>->isa
              (<IFName::ManakaiGLSImplementation>));

  @f:provides: Generic30
  @Test:
    @@enDesc:
      The implementation registry should know this class when the
      module is loaded.
    @@PerlDef:
      I: {
        for my $impl (@{$Message::DOM::ImplementationRegistry
                              ->get_implementation_list
                                  ({<Q::fe:GenericLS> => '3.0'})}) {
          if ($impl->isa (<ClassName::ManakaiGLSImplementation>)) {
            last I;
          }
        }
        $test->assert_never;
      } # I

  @Method:
    @@Name: createGLSParser
    @@enDesc:
      Creates a parser for some language(s).

         {NOTE:: How the method to find parser classes and
                 instantiate them is implementation dependent.
         }
    @@Param:
      @@@Name: features
      @@@Type: f|MIString
      @@@actualType: f|FeaturesString
      @@@enDesc:
        A list of features that must be supported by 
        the object returned.
        \
        {NOTE:: The <CHAR::PLUS SIGN> prefix is reserved for possible
                future use and must not be used
                in this parameter value. 
        \
        }
    @@Return:
      @@@Type: idl|Object||ManakaiDOM|all
      @@@enDesc:
        The newly created parser object, which supports
        the features requested by the <P::features> parameter.
      @@@nullCase:
        @@@@enDesc:
          No parser implementation found that supports 
          all of the requested features.
      @@@PerlDef:
        ## Load modules if necessary
        for my $fname (keys %$features) {
          for my $fver (grep {$features->{$fname}->{$_}}
              keys %{$features->{$fname} or {}}) {
            if ($Message::Util::AutoLoad::Registry::Feature->{$fname}->{$fver}) {
              eval qq{require
                  $Message::Util::AutoLoad::Registry::Feature->{
                  $fname}->{$fver}->{module}};
              die $@ if $@;
            }
          }
        }

            CLS: for my $class (grep {
              $Message::DOM::DOMLS::ParserClass{$_}
            } keys %Message::DOM::DOMLS::ParserClass) {
              for my $fname (keys %$features) {
                my $fkey = $fname;
                #my $plus = $fname =~ s/^\+// ? t rue : f alse;
                FVER: for my $fver (grep {$features->{$fkey}->{$_}}
                                       keys %{$features->{$fkey}}) {
                  if ($Message::DOM::DOMFeature::ClassInfo->{$class}
                          ->{has_feature}->{$fname}->{$fver}) {
                    next FVER; # Feature/version found
                  }
                  next CLS; # Not found
                } # FVER
              } # FNAME

              ## Class found
              $r = $class->new ($self, $features);
              last CLS;    ## NOTE: Method name directly written
            } # CLS

    @@Test:
      @@@PerlDef:
        my $impl = <Class::c|ManakaiDOMImplementation>->_new;
        my $v = $impl-><M::GLSImplementation.createGLSParser> ({
            <Q::DOMLS:NoSuchFeature> => '1.0',
        });
        $test->assert_null ($v);

  @Method:
    @@Name: createGLSSerializer
    @@enDesc:
      Creates a serializer for some object model(s).

         {NOTE:: How the method to find serializer classes and
                 instantiate them implementation dependent.
         }
    @@Param:
      @@@Name: features
      @@@Type: f|MIString
      @@@actualType: f|FeaturesString
      @@@enDesc:
        A list of features that must be supported by 
        the object returned.
        \
        {NOTE:: The <CHAR::PLUS SIGN> prefix is reserved for possible
                future use and must not be used
                in this parameter value. 
        \
        }
    @@Return:
      @@@Type: idl|Object||ManakaiDOM|all
      @@@enDesc:
        The newly created serializer object, which supports
        the features requested by the <P::features> parameter.
      @@@nullCase:
        @@@@enDesc:
          No serializer implementation found that supports 
          all of the requested features.
      @@@PerlDef:
        ## Load modules if necessary
        for my $fname (keys %$features) {
          for my $fver (grep {$features->{$fname}->{$_}}
              keys %{$features->{$fname} or {}}) {
            if ($Message::Util::AutoLoad::Registry::Feature->{$fname}->{$fver}) {
              eval qq{require
                  $Message::Util::AutoLoad::Registry::Feature->{
                  $fname}->{$fver}->{module}};
              die $@ if $@;
            }
          }
        }

            CLS: for my $class (grep {
              $Message::DOM::DOMLS::SerializerClass{$_}
            } keys %Message::DOM::DOMLS::SerializerClass) {
              for my $fname (keys %$features) {
                my $fkey = $fname;
                #my $plus = $fname =~ s/^\+// ? t rue : f alse;
                FVER: for my $fver (grep {$features->{$fkey}->{$_}}
                                       keys %{$features->{$fkey}}) {
                  if ($Message::DOM::DOMFeature::ClassInfo->{$class}
                          ->{has_feature}->{$fname}->{$fver}) {
                    next FVER; # Feature/version found
                  }
                  next CLS; # Not found
                } # FVER
              } # FNAME

              ## Class found
              $r = $class->new ($self, $features);
              last CLS;    ## NOTE: Method name directly written
            } # CLS

    @@Test:
      @@@PerlDef:
        my $impl = <Class::c|ManakaiDOMImplementation>->_new;
        my $v = $impl-><M::GLSImplementation.createGLSSerializer> ({
            <Q::DOMLS:NoSuchFeature> => '1.0',
        });
        $test->assert_null ($v);
##GLSImplementation

ElementTypeBinding:
  @Name: nullCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase
    @@Value:
      @@@is-null:1
      @@@ContentType: DISCore|String

ElementTypeBinding:
  @Name: enDesc
  @ElementType:
    dis:Description
  @ShadowContent:
    @@lang:en

ElementTypeBinding:
  @Name: enFN
  @ElementType:
    dis:FullName
  @ShadowContent:
    @@lang:en

## -- Parsers

ResourceDef:
  @QName: gls|ParserRole
  @rdf:type: DISLang|Role
  @For: =ManakaiDOM|all
  @enDesc:
    Classes playing this role are parsers and 
    may be instantiated via the <M::ManakaiGLSImplementation
    ||ManakaiDOM|ManakaiDOMLatest.createGLSParser> method.

ResourceDef:
  @For: =ManakaiDOM|all
  @QName: DOMLS|ParserRole
  @AliasFor: gls|ParserRole

## -- Serializers

ResourceDef:
  @QName: gls|SerializerRole
  @rdf:type: DISLang|Role
  @For: =ManakaiDOM|all
  @enDesc:
    Classes playing this role are serializers and 
    may be instantiated via the <M::ManakaiGLSImplementation
    ||ManakaiDOM|ManakaiDOMLatest.createGLSSerializer> method.

ResourceDef:
  @QName: DOMLS|SerializerRole
  @AliasFor: gls|SerializerRole
  @For: =ManakaiDOM|all
