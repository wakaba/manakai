#!/usr/bin/perl 
## This file is automatically generated
## 	at 2005-11-25T06:33:33+00:00,
## 	from file "lib/Message/DOM/Tree.dis",
## 	module <http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.Tree>,
## 	for <http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOMLatest>.
## Don't edit by hand!
use strict;
require Message::DOM::DOMCore;
require Message::DOM::DOMMain;
require Message::DOM::DOMXML;
require Message::Util::ManakaiNode;
require Tie::Array;
package Message::DOM::Tree;
our $VERSION = 20051125.0633;
sub ATTRIBUTE_NODE ();
sub CDATA_SECTION_NODE ();
sub COMMENT_NODE ();
sub DOCUMENT_FRAGMENT_NODE ();
sub DOCUMENT_NODE ();
sub DOCUMENT_POSITION_CONTAINED_BY ();
sub DOCUMENT_POSITION_CONTAINS ();
sub DOCUMENT_POSITION_DISCONNECTED ();
sub DOCUMENT_POSITION_FOLLOWING ();
sub DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC ();
sub DOCUMENT_POSITION_PRECEDING ();
sub DOCUMENT_TYPE_NODE ();
sub ELEMENT_NODE ();
sub ENTITY_NODE ();
sub ENTITY_REFERENCE_NODE ();
sub NOTATION_NODE ();
sub PROCESSING_INSTRUCTION_NODE ();
sub TEXT_NODE ();
sub AUTOLOAD {


        my $al = our $AUTOLOAD;
        $al =~ s/.+:://;
        if ({'ATTRIBUTE_NODE', 'Message::DOM::IFLatest::Node::ATTRIBUTE_NODE', 'CDATA_SECTION_NODE', 'Message::DOM::IFLatest::Node::CDATA_SECTION_NODE', 'COMMENT_NODE', 'Message::DOM::IFLatest::Node::COMMENT_NODE', 'DOCUMENT_FRAGMENT_NODE', 'Message::DOM::IFLatest::Node::DOCUMENT_FRAGMENT_NODE', 'DOCUMENT_NODE', 'Message::DOM::IFLatest::Node::DOCUMENT_NODE', 'DOCUMENT_POSITION_CONTAINED_BY', 'Message::DOM::IFLatest::Node::DOCUMENT_POSITION_CONTAINED_BY', 'DOCUMENT_POSITION_CONTAINS', 'Message::DOM::IFLatest::Node::DOCUMENT_POSITION_CONTAINS', 'DOCUMENT_POSITION_DISCONNECTED', 'Message::DOM::IFLatest::Node::DOCUMENT_POSITION_DISCONNECTED', 'DOCUMENT_POSITION_FOLLOWING', 'Message::DOM::IFLatest::Node::DOCUMENT_POSITION_FOLLOWING', 'DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC', 'Message::DOM::IFLatest::Node::DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC', 'DOCUMENT_POSITION_PRECEDING', 'Message::DOM::IFLatest::Node::DOCUMENT_POSITION_PRECEDING', 'DOCUMENT_TYPE_NODE', 'Message::DOM::IFLatest::Node::DOCUMENT_TYPE_NODE', 'ELEMENT_NODE', 'Message::DOM::IFLatest::Node::ELEMENT_NODE', 'ENTITY_NODE', 'Message::DOM::IFLatest::Node::ENTITY_NODE', 'ENTITY_REFERENCE_NODE', 'Message::DOM::IFLatest::Node::ENTITY_REFERENCE_NODE', 'NOTATION_NODE', 'Message::DOM::IFLatest::Node::NOTATION_NODE', 'PROCESSING_INSTRUCTION_NODE', 'Message::DOM::IFLatest::Node::PROCESSING_INSTRUCTION_NODE', 'TEXT_NODE', 'Message::DOM::IFLatest::Node::TEXT_NODE'}->{$al}) {
          no strict 'refs';
          *{$AUTOLOAD} = \&{{'ATTRIBUTE_NODE', 'Message::DOM::IFLatest::Node::ATTRIBUTE_NODE', 'CDATA_SECTION_NODE', 'Message::DOM::IFLatest::Node::CDATA_SECTION_NODE', 'COMMENT_NODE', 'Message::DOM::IFLatest::Node::COMMENT_NODE', 'DOCUMENT_FRAGMENT_NODE', 'Message::DOM::IFLatest::Node::DOCUMENT_FRAGMENT_NODE', 'DOCUMENT_NODE', 'Message::DOM::IFLatest::Node::DOCUMENT_NODE', 'DOCUMENT_POSITION_CONTAINED_BY', 'Message::DOM::IFLatest::Node::DOCUMENT_POSITION_CONTAINED_BY', 'DOCUMENT_POSITION_CONTAINS', 'Message::DOM::IFLatest::Node::DOCUMENT_POSITION_CONTAINS', 'DOCUMENT_POSITION_DISCONNECTED', 'Message::DOM::IFLatest::Node::DOCUMENT_POSITION_DISCONNECTED', 'DOCUMENT_POSITION_FOLLOWING', 'Message::DOM::IFLatest::Node::DOCUMENT_POSITION_FOLLOWING', 'DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC', 'Message::DOM::IFLatest::Node::DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC', 'DOCUMENT_POSITION_PRECEDING', 'Message::DOM::IFLatest::Node::DOCUMENT_POSITION_PRECEDING', 'DOCUMENT_TYPE_NODE', 'Message::DOM::IFLatest::Node::DOCUMENT_TYPE_NODE', 'ELEMENT_NODE', 'Message::DOM::IFLatest::Node::ELEMENT_NODE', 'ENTITY_NODE', 'Message::DOM::IFLatest::Node::ENTITY_NODE', 'ENTITY_REFERENCE_NODE', 'Message::DOM::IFLatest::Node::ENTITY_REFERENCE_NODE', 'NOTATION_NODE', 'Message::DOM::IFLatest::Node::NOTATION_NODE', 'PROCESSING_INSTRUCTION_NODE', 'Message::DOM::IFLatest::Node::PROCESSING_INSTRUCTION_NODE', 'TEXT_NODE', 'Message::DOM::IFLatest::Node::TEXT_NODE'}->{$al}};
          goto &{$AUTOLOAD};
        } else {
          require Carp;
          Carp::croak (qq<Can't locate method "$AUTOLOAD">);
        }
      
}
sub import {


        my $self = shift;
        if (@_) {
          local $Exporter::ExportLevel = $Exporter::ExportLevel + 1;
          $self->SUPER::import (@_);
          for (grep {not /\W/} @_) {
            eval qq{$_};
          }
        }
      
}
our %EXPORT_TAG = ('DocumentPosition', ['DOCUMENT_POSITION_CONTAINED_BY', 'DOCUMENT_POSITION_CONTAINS', 'DOCUMENT_POSITION_DISCONNECTED', 'DOCUMENT_POSITION_FOLLOWING', 'DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC', 'DOCUMENT_POSITION_PRECEDING'], 'NodeType', ['ATTRIBUTE_NODE', 'CDATA_SECTION_NODE', 'COMMENT_NODE', 'DOCUMENT_FRAGMENT_NODE', 'DOCUMENT_NODE', 'DOCUMENT_TYPE_NODE', 'ELEMENT_NODE', 'ENTITY_NODE', 'ENTITY_REFERENCE_NODE', 'NOTATION_NODE', 'PROCESSING_INSTRUCTION_NODE', 'TEXT_NODE']);
our @EXPORT_OK = ('DOCUMENT_POSITION_CONTAINED_BY', 'DOCUMENT_POSITION_CONTAINS', 'DOCUMENT_POSITION_DISCONNECTED', 'DOCUMENT_POSITION_FOLLOWING', 'DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC', 'DOCUMENT_POSITION_PRECEDING', 'ATTRIBUTE_NODE', 'CDATA_SECTION_NODE', 'COMMENT_NODE', 'DOCUMENT_FRAGMENT_NODE', 'DOCUMENT_NODE', 'DOCUMENT_TYPE_NODE', 'ELEMENT_NODE', 'ENTITY_NODE', 'ENTITY_REFERENCE_NODE', 'NOTATION_NODE', 'PROCESSING_INSTRUCTION_NODE', 'TEXT_NODE');
use Exporter; push our @ISA, 'Exporter';
package Message::DOM::IFLatest::Node;
our $VERSION = 20051125.0633;
sub ELEMENT_NODE () {
1}
sub ATTRIBUTE_NODE () {
2}
sub TEXT_NODE () {
3}
sub CDATA_SECTION_NODE () {
4}
sub ENTITY_REFERENCE_NODE () {
5}
sub ENTITY_NODE () {
6}
sub PROCESSING_INSTRUCTION_NODE () {
7}
sub COMMENT_NODE () {
8}
sub DOCUMENT_NODE () {
9}
sub DOCUMENT_TYPE_NODE () {
10}
sub DOCUMENT_FRAGMENT_NODE () {
11}
sub NOTATION_NODE () {
12}
sub DOCUMENT_POSITION_DISCONNECTED () {
1}
sub DOCUMENT_POSITION_PRECEDING () {
2}
sub DOCUMENT_POSITION_FOLLOWING () {
4}
sub DOCUMENT_POSITION_CONTAINS () {
8}
sub DOCUMENT_POSITION_CONTAINED_BY () {
16}
sub DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC () {
32}
package Message::DOM::Tree::ManakaiDOMNode;
our $VERSION = 20051125.0633;
push our @ISA, 'Message::Util::ManakaiNode::ManakaiNodeRef', 'Message::DOM::DOMMain::ManakaiDOMObject', 'Message::DOM::IF::Node', 'Message::DOM::IFLatest::Node', 'Message::DOM::IFLevel1::Node', 'Message::DOM::IFLevel2::Node', 'Message::DOM::IFLevel3::Node';
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_ATTR_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_value ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = 
undef
;


;}
$r;
} else {my ($self, $given) = @_;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#setting-node-value-no-effect', 'rdata' => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_value';

;


;}
}
}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;


$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub parent_node ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = $self->{'node'}->{'parent'};
if (defined $r) {$r = Message::DOM::Tree::ManakaiDOMNode->_get_node_reference ($r);
}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'parent_node';
}
}
sub child_nodes ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


$self->{'node'}->{
'rc'
}++;
${$self->{'node'}->{
'grc'
}}++;
$r = bless {
  
'node'
 => $self->{'node'},
}, 'Message::DOM::Tree::ManakaiDOMChildNodeList';


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'child_nodes';
}
}
sub first_child ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = $self->{
'node'
}->{
'child'
}->[0];
$r = $r ? 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($r) : 
undef
;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'first_child';
}
}
sub last_child ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = $self->{
'node'
}->{
'child'
}->[-1];
$r = $r ? 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($r) : 
undef
;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'last_child';
}
}
sub previous_sibling ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{

if 
(my $parent = $self->{
'node'
}->{
'parent'
}) {
  for (@{$parent->{
'child'
}}) {
    if ($_->{
'nid'
} eq
             $self->{
'node'
}->{
'nid'
}) {
      last;
    } else {
      $r = $_;
    }
  }
}
if ($r) {
  $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($r);
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'previous_sibling';
}
}
sub next_sibling ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{

if 
(my $parent = $self->{
'node'
}->{
'parent'
}) {
  my $next = 0;
  for (@{$parent->{
'child'
}}) {
    if ($next) {
      $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($_);
      last;
    } elsif ($_->{
'nid'
} eq
             $self->{
'node'
}->{
'nid'
}) {
      $next = 1;
    }
  }
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'next_sibling';
}
}
sub attributes ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;


$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'attributes';
}
}
sub owner_document ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = $self->{'node'}->{'od'};
if (defined $r) {$r = Message::DOM::Tree::ManakaiDOMNode->_get_node_reference ($r);
}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'owner_document';
}
}
sub insert_before ($$;$) {
my ($self, $newChild, $refChild) = @_;
my $r;

{

my 
$node;
my $newNode;
CHKDOC: {
  if (UNIVERSAL::isa ($newChild, 
'Message::DOM::IF::Node'
) and
      UNIVERSAL::isa ($newChild, 
'Message::Util::IF::NodeRef'
)) {
    $node = $self->{
'node'
};
    $newNode = $newChild->{
'node'
};
    if ($node->{
'od'
}) {
      if ($newNode->{
'od'
}) {
        last CHKDOC if $node->{
'od'
}
                            ->{
'nid'
} eq
                       $newNode->{
'od'
}
                            ->{
'nid'
};
      }
    } else { ## I'm "Document" or "DocumentType" node.
      if ($node->{
'nt'
} eq 
'd'
) {
        last CHKDOC;
      }
    }
  }
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_before', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild';

;
} # CHKDOC
my @newNode = ($newNode);
if ($newNode->{
'nt'
} eq
    
'f'
) {
       @newNode = @{$newNode->{
'child'
}};
}
INSERTION: {
if (@newNode) {
  my $parentNode = $newNode[0]->{
'parent'
};

  ## Read-only?
  if ($node->{
'ro'
}) {
    ## This node is read-only.
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_before', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode';

;
  } elsif ($parentNode and $parentNode->{
'ro'
}) {
    ## Parent of new node(s) is read-only
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_before', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild';

;
  }
  
  ## Check type of this node and new child node
  CHKTYPE: {
    if ({
          
'e'
 => 1,
          
'f'
 => 1,
          
'ge'
 => 1,
          
'r'
 => 1,
        }->{$node->{
'nt'
}}) {
      CHILDTYPE: {
        for (@newNode) {
          unless ({
                
'e'
 => 1,
                
'x'
 => 1,
                
'c'
 => 1,
                
'p'
 => 1,
                
'cs'
 => 1,
                
'r'
 => 1,
              }->{$_->{
'nt'
}}) {
            last CHILDTYPE;
          }
        }
        last CHKTYPE; # No problem
      }
    } elsif ($node->{
'nt'
} eq 
'd'
) {
      CHILDTYPE: {
        my %has;
        EACHNEWNODE: for my $newNode (@newNode) {
          if ({
                
'e'
 => 1,
                
't'
 => 1,
              }->{$newNode->{
'nt'
}}) {
            FOUND: {
              if ($has{$newNode->{
'nt'
}}) {
                ## DOCTYPE or document element is waiting 
                ## to be added
                last FOUND;
              }
              for (@{$node->{
'child'
}}) {
                ## Document already has a DOCTYPE or doc.element
                last FOUND if $_->{
'nt'
} eq
                              $newNode->{
'nt'
};
              }
              $has{$newNode->{
'nt'
}} = 1;
              next EACHNEWNODE;
            }
            if ($newNode->{
'nt'
} eq
                
'e'
) {
              
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_before', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_SECOND_DOC_ELEMENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild';

;
            } else { # infoset:DocumentTypeDeclaration
              
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_before', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_SECOND_DOCTYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild';

;
            }
          } elsif (not {
                     
'c'
 => 1,
                     
'p'
 => 1,
                   }->{$newNode->{
'nt'
}}) {
            last CHILDTYPE;
          }
        } # EACHNEWNODE
        last CHKTYPE; # No problem
      } # CHILDTYPE
    } elsif ($node->{
'nt'
} eq
             
'a'
) {
      CHILDTYPE: {
        for my $newNode (@newNode) {
          unless ({
                
'x'
 => 1,
                
'r'
 => 1,
              }->{$newNode->{
'nt'
}}) {
            last CHILDTYPE;
          }
        }
        last CHKTYPE; # No problem
      }
    } # $node->{< Q::DOMCore:nodeType>}
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_before', 'http://www.w3.org/2001/04/infoset#nodeType' => $newNode->{'http://www.w3.org/2001/04/infoset#nodeType'}, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild';

;
  } # CHKTYPE
  
  ## Check $newNode (not $newNode[0]) = ancestor-or-self::node()
  if (${$node->{
'tid'
}} eq
      ${$newNode->{
'tid'
}}) {
    my $n = $node;
    {
      if ($newNode->{
'nid'
} eq
          $n->{
'nid'
}) {
        
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_before', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_ANCESTOR_OR_SELF', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild';

;
      }
      if ($n->{
'parent'
}) {
        $n = $n->{
'parent'
};
        redo;
      }
    }
  }
  
  ## Seek the $refChild
  my $newIndex = @{$node->{
'child'
}};
  REFCHILD: {
    if (defined $refChild) {
      my $refID = $refChild->{
'node'
}
                           ->{
'nid'
};
      for my $i (0..$#{$node->{
'child'
}}) {
        if ($node->{
'child'
}->[$i]
                 ->{
'nid'
} eq $refID) {
          $newIndex = $i;
          last REFCHILD;
        }
      }
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_before', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'refChild';

;
    }
  } # REFCHILD
  if ($newNode[0]->{
'parent'
} and
      $newNode[0]->{
'parent'
}->{
'nid'
} eq
      $node->{
'nid'
}) {
    if (@newNode > 1) {
      
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'MDOM_DEBUG_BUG', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_before', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode';

;
    } elsif (ref $refChild and
             $newNode[0]->{
'nid'
} eq
             $refChild->{
'node'
}->{
'nid'
}) {
      ## refChild is the same node as the newChild
      
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#insert-before-itself', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_before', 'rdata' => $refChild, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode';

;
      ## And no action.
      last INSERTION;
    } else {
      ## refChild and newChild are siblings each other.
      my $currentIndex;
      for my $i (0..$#{$node->{
'child'
}}) {
        if ($node->{
'child'
}->[$i]
                 ->{
'nid'
} eq
            $newNode[0]->{
'nid'
}) {
          $currentIndex = $i;
        }
      }
      ## Changes the position of the newChild in the parent nodelist
      if ($newIndex < $currentIndex) {
        splice @{$node->{
'child'
}}, $currentIndex,
               1, ();
        splice @{$node->{
'child'
}},
               $newIndex, 1, @newNode;
      } else {
        splice @{$node->{
'child'
}},
               $newIndex, 1, @newNode;
        splice @{$node->{
'child'
}}, $currentIndex,
               1, ();
      }
    }
  } else { ## $newChild->parentNode ne $self
    for my $newNode (@newNode) {
      CORE::delete $newNode->{
'parent'
};
      $node->
_import_tree
 ($newNode);
      $newNode->{
'parent'
} = $node;
    }
    splice @{$node->{
'child'
}},
           $newIndex, 0, @newNode;
  }
  
  if ($newNode->{
'nt'
} eq
      
'f'
) {
    $newNode->{
'child'
} = [];
  } elsif ($parentNode) {
    P: for my $i (0..$#{$parentNode->{
'child'
}}) {
      if ($parentNode->{
'child'
}->[$i]
                     ->{
'nid'
} eq
          $newNode->{
'nid'
}) {
        splice @{$parentNode->{
'child'
}}, $i, 1, ();
        last P;
      }
    }
  }
} # @newNode
} # INSERTION
$r = $newChild;


;}
$r}
sub replace_child ($$$) {
my ($self, $newChild, $oldChild) = @_;
my $r;

{

my 
$node;
my $newNode;
CHKDOC: {
  if (UNIVERSAL::isa ($newChild, 
'Message::DOM::IF::Node'
) and
      UNIVERSAL::isa ($newChild, 
'Message::Util::IF::NodeRef'
)) {
    $node = $self->{
'node'
};
    $newNode = $newChild->{
'node'
};
    if ($node->{
'od'
}) {
      if ($newNode->{
'od'
}) {
        last CHKDOC if $node->{
'od'
}
                            ->{
'nid'
} eq
                       $newNode->{
'od'
}
                            ->{
'nid'
};
      }
    } else { ## I'm "Document" or "DocumentType" node.
      if ($node->{
'nt'
} eq 
'd'
) {
        last CHKDOC;
      }
    }
  }
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild';

;
} # CHKDOC

my @newNode = ($newNode);
if ($newNode->{
'nt'
} eq
    
'f'
) {
       @newNode = @{$newNode->{
'child'
}};
}
REPLACE: {
if (@newNode) {
  my $parentNode = $newNode[0]->{
'parent'
};

  ## Read-only?
  if ($node->{
'ro'
}) {
    ## This node is read-only.
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode';

;
  } elsif ($parentNode and $parentNode->{
'ro'
}) {
    ## Parent of new node(s) is read-only
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild';

;
  }
  
  ## Check type of this node and new child node
  CHKTYPE: {
    if ({
          
'e'
 => 1,
          
'f'
 => 1,
          
'ge'
 => 1,
          
'r'
 => 1,
        }->{$node->{
'nt'
}}) {
      CHILDTYPE: {
        for (@newNode) {
          unless ({
                
'e'
 => 1,
                
'x'
 => 1,
                
'c'
 => 1,
                
'p'
 => 1,
                
'cs'
 => 1,
                
'r'
 => 1,
              }->{$_->{
'nt'
}}) {
            last CHILDTYPE;
          }
        }
        last CHKTYPE; # No problem
      }
    } elsif ($node->{
'nt'
} eq 
'd'
) {
      CHILDTYPE: {
        my %has;
        EACHNEWNODE: for my $newNode (@newNode) {
          if ({
                
'e'
 => 1,
                
't'
 => 1,
              }->{$newNode->{
'nt'
}}) {
            FOUND: {
              if ($has{$newNode->{
'nt'
}}) {
                ## DOCTYPE or document element is waiting 
                ## to be added
                last FOUND;
              }
              for (@{$node->{
'child'
}}) {
                ## Document already has a DOCTYPE or doc.element
                last FOUND if $_->{
'nt'
} eq
                              $newNode->{
'nt'
};
              }
              $has{$newNode->{
'nt'
}} = 1;
              next EACHNEWNODE;
            }
            if ($newNode->{
'nt'
} eq
                
'e'
) {
              
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_SECOND_DOC_ELEMENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild';

;
            } else { # infoset:DocumentTypeDeclaration
              
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_SECOND_DOCTYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild';

;
            }
          } elsif (not {
                     
'c'
 => 1,
                     
'p'
 => 1,
                   }->{$newNode->{
'nt'
}}) {
            last CHILDTYPE;
          }
        } # EACHNEWNODE
        last CHKTYPE; # No problem
      } # CHILDTYPE
    } elsif ($node->{
'nt'
} eq
             
'a'
) {
      CHILDTYPE: {
        for my $newNode (@newNode) {
          unless ({
                
'x'
 => 1,
                
'r'
 => 1,
              }->{$newNode->{
'nt'
}}) {
            last CHILDTYPE;
          }
        }
        last CHKTYPE; # No problem
      }
    } # $node->{< Q::DOMCore:nodeType>}
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'http://www.w3.org/2001/04/infoset#nodeType' => $newNode->{'http://www.w3.org/2001/04/infoset#nodeType'}, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild';

;
  } # CHKTYPE
  
  ## Check $newNode (not $newNode[0]) = ancestor-or-self::node()
  if (${$node->{
'tid'
}} eq
      ${$newNode->{
'tid'
}}) {
    my $n = $node;
    {
      if ($newNode->{
'nid'
} eq
          $n->{
'nid'
}) {
        
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_ANCESTOR_OR_SELF', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild';

;
      }
      if ($n->{
'parent'
}) {
        $n = $n->{
'parent'
};
        redo;
      }
    }
  }
  
  ## Seek the $oldChild
  my $newIndex = @{$node->{
'child'
}};
  REFCHILD: {
    if (defined $oldChild) {
      my $refID = $oldChild->{
'node'
}
                           ->{
'nid'
};
      for my $i (0..$#{$node->{
'child'
}}) {
        if ($node->{
'child'
}->[$i]
                 ->{
'nid'
} eq $refID) {
          $newIndex = $i;
          last REFCHILD;
        }
      }
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldChild';

;
    } else { ## oldChild is n u l l
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldChild';

;
    }
  } # REFCHILD

  if ($newNode[0]->{
'parent'
} and
      $newNode[0]->{
'parent'
}->{
'nid'
} eq
      $node->{
'nid'
}) {
    if (@newNode > 1) {
      
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'MDOM_DEBUG_BUG', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode';

;
    } elsif (ref $oldChild and
             $newNode[0]->{
'nid'
} eq
             $oldChild->{
'node'
}->{
'nid'
}) {
      
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#replace-by-itself', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'rdata' => $oldChild, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode';

;
      ## And no action.
      last REPLACE;
    } else {
      my $currentIndex;
      for my $i (0..$#{$node->{
'child'
}}) {
        if ($node->{
'child'
}->[$i]
                 ->{
'nid'
} eq
            $newNode[0]->{
'nid'
}) {
          $currentIndex = $i;
        }
      }
      if ($newIndex < $currentIndex) {
        splice @{$node->{
'child'
}}, $currentIndex,
               1, ();
        splice @{$node->{
'child'
}},
               $newIndex, 1, @newNode;
      } else {
        splice @{$node->{
'child'
}},
               $newIndex, 1, @newNode;
        splice @{$node->{
'child'
}}, $currentIndex,
               1, ();
      }
    }
  } else { ## $newChild->parentNode ne $self
    for my $newNode (@newNode) {
      CORE::delete $newNode->{
'parent'
};
      $node->
_import_tree
 ($newNode);
      $newNode->{
'parent'
} = $node;
    }
    splice @{$node->{
'child'
}},
           $newIndex, 1, @newNode;
  }
  
  if ($newNode->{
'nt'
} eq
      
'f'
) {
    $newNode->{
'child'
} = [];
  } elsif ($parentNode) {
    P: for my $i (0..$#{$parentNode->{
'child'
}}) {
      if ($parentNode->{
'child'
}->[$i]
                     ->{
'nid'
} eq
          $newNode->{
'nid'
}) {
        splice @{$parentNode->{
'child'
}}, $i, 1, ();
        last P;
      }
    }
  }
  CORE::delete $oldChild->{
'node'
}
                        ->{
'parent'
};
  $oldChild->{
'node'
}->
_orphanate
;
} # @newNode
} # REPLACE
$r = $oldChild;


;}
$r}
sub remove_child ($$) {
my ($self, $oldChild) = @_;
my $r;

{

my 
$node = $self->{
'node'
};
if ($node->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'remove_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode';

;
}
my $oldChildID = ref $oldChild ?
                   $oldChild->{
'node'
}
                            ->{
'nid'
} : '';
FIND: {
  for my $i (0..$#{$node->{
'child'
}}) {
    if ($node->{
'child'
}->[$i]
             ->{
'nid'
} eq $oldChildID) {
      splice @{$node->{
'child'
}}, $i, 1, ();
      last FIND;
    }
  }
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'remove_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode';

;
}
if (ref $oldChild) {
  $r = $oldChild;
  CORE::delete $oldChild->{
'node'
}
                        ->{
'parent'
};
  $oldChild->{
'node'
}->
_orphanate
;
}


;}
$r}
sub append_child ($$) {
my ($self, $newChild) = @_;
my $r;

{

my 
$node;
my $newNode;
CHKDOC: {
  unless (
(($self->{'node'}->{'od'} or
  $self->{'node'})
   ->{'chk'})
) {
    $node = $self->{
'node'
};
    $newNode = $newChild->{
'node'
};
    last CHKDOC;
  } elsif (UNIVERSAL::isa ($newChild, 
'Message::DOM::IF::Node'
) and
      UNIVERSAL::isa ($newChild, 
'Message::Util::IF::NodeRef'
)) {
    $node = $self->{
'node'
};
    $newNode = $newChild->{
'node'
};
    if ($node->{
'od'
}) {
      if ($newNode->{
'od'
}) {
        last CHKDOC if $node->{
'od'
}
                            ->{
'nid'
} eq
                       $newNode->{
'od'
}
                            ->{
'nid'
};
      }
    } else { ## I'm "Document" or "DocumentType" node.
      if ($node->{
'nt'
} eq 
'd'
) {
        last CHKDOC;
      }
    }
  }
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild';

;
} # CHKDOC
my @newNode = ($newNode);
if ($newNode->{
'nt'
} eq
    
'f'
) {
       @newNode = @{$newNode->{
'child'
}};
}
if (@newNode) {
  my $parentNode = $newNode[0]->{
'parent'
};

  ## Read-only?
  if ($node->{
'ro'
}) {
    ## This node is read-only.
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode';

;
  } elsif ($parentNode and $parentNode->{
'ro'
}) {
    ## Parent of new node(s) is read-only
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild';

;
  }

if (
(($self->{'node'}->{'od'} or
  $self->{'node'})
   ->{'chk'})
) {  
  ## Check type of this node and new child node
  CHKTYPE: {
    if ({
          
'e'
 => 1,
          
'f'
 => 1,
          
'ge'
 => 1,
          
'r'
 => 1,
        }->{$node->{
'nt'
}}) {
      CHILDTYPE: {
        for (@newNode) {
          unless ({
                
'e'
 => 1,
                
'x'
 => 1,
                
'c'
 => 1,
                
'p'
 => 1,
                
'cs'
 => 1,
                
'r'
 => 1,
              }->{$_->{
'nt'
}}) {
            last CHILDTYPE;
          }
        }
        last CHKTYPE; # No problem
      }
    } elsif ($node->{
'nt'
} eq 
'd'
) {
      CHILDTYPE: {
        my %has;
        EACHNEWNODE: for my $newNode (@newNode) {
          if ({
                
'e'
 => 1,
                
't'
 => 1,
              }->{$newNode->{
'nt'
}}) {
            FOUND: {
              if ($has{$newNode->{
'nt'
}}) {
                ## DOCTYPE or document element is waiting 
                ## to be added
                last FOUND;
              }
              for (@{$node->{
'child'
}}) {
                ## Document already has a DOCTYPE or doc.element
                last FOUND if $_->{
'nt'
} eq
                              $newNode->{
'nt'
};
              }
              $has{$newNode->{
'nt'
}} = 1;
              next EACHNEWNODE;
            }
            if ($newNode->{
'nt'
} eq
                
'e'
) {
              
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_SECOND_DOC_ELEMENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild';

;
            } else { # infoset:DocumentTypeDeclaration
              
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_SECOND_DOCTYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild';

;
            }
          } elsif (not {
                     
'c'
 => 1,
                     
'p'
 => 1,
                   }->{$newNode->{
'nt'
}}) {
            last CHILDTYPE;
          }
        } # EACHNEWNODE
        last CHKTYPE; # No problem
      } # CHILDTYPE
    } elsif ($node->{
'nt'
} eq
             
'a'
) {
      CHILDTYPE: {
        for my $newNode (@newNode) {
          unless ({
                
'x'
 => 1,
                
'r'
 => 1,
              }->{$newNode->{
'nt'
}}) {
            last CHILDTYPE;
          }
        }
        last CHKTYPE; # No problem
      }
    } # $node->{< Q::DOMCore:nodeType>}
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_child', 'http://www.w3.org/2001/04/infoset#nodeType' => $newNode->{'http://www.w3.org/2001/04/infoset#nodeType'}, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild';

;
  } # CHKTYPE
  
  ## Check $newNode (not $newNode[0]) = ancestor-or-self::node()
  if (${$node->{
'tid'
}} eq
      ${$newNode->{
'tid'
}}) {
    my $n = $node;
    P: {
      if ($newNode->{
'nid'
} eq
          $n->{
'nid'
}) {
        
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_ANCESTOR_OR_SELF', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild';

;
      }
      if ($n->{
'parent'
}) {
        $n = $n->{
'parent'
};
        redo P;
      }
    }
  }
} # chk
  
  for my $newNode (@newNode) {
    CORE::delete $newNode->{
'parent'
};
    $node->
_import_tree
 ($newNode);
    $newNode->{
'parent'
} = $node;
  }
  push @{$node->{
'child'
}}, @newNode;

  if ($newNode->{
'nt'
} eq
      
'f'
) {
    $newNode->{
'child'
} = [];
  } elsif ($parentNode) {
    RP: for my $i (0..$#{$parentNode->{
'child'
}}) {
      if ($parentNode->{
'child'
}->[$i]
                     ->{
'nid'
} eq
          $newNode->{
'nid'
}) {
        splice @{$parentNode->{
'child'
}}, $i, 1, ();
        last RP;
      }
    }
  }
} # @newNode
$r = $newChild;


;}
$r}
sub has_child_nodes ($) {
my ($self) = @_;
my $r = 0;

{


$r = (@{$self->{
'node'
}->{
'child'
}||[]} > 0)


;}
$r}
sub clone ($;$) {
my ($self, $deep) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$od = $self->
owner_document
;
  my $strict_check;
  

{


$strict_check = $od->
strict_error_checking
;
    $od->
strict_error_checking
 (
0
);
  


;}

;
  my @udh;
  my @node = ([$self]);
  while (@node) {
    my ($node, $parent) = @{shift @node};
    my $nt = $node->
node_type
;
    my $clone;
    if ($nt == 
1
) {
      my $ln;

      

{


$ln = $node->
local_name
;
      


;}

;
      if (defined $ln) {
        $clone = $od->
create_element_ns

                          ($node->
namespace_uri
, $ln);
      } else {  ## DOM Level 1 node
        $clone = $od->
create_attribute

                          ($node->
node_name
);
      }
      if ($parent) {
        $parent->
append_child
 ($clone);
      } else {
        $r = $clone;
      }
      my $attrs = $node->
attributes
;
      my $attrsMax = $attrs->
length
 - 1;
      for my $i (0..$attrsMax) {
        push @node, [$attrs->
item
 ($i), $clone];
      }
      if ($deep) {
        push @node, map {[$_, $clone]} @{$node->
child_nodes
};
      }
    } elsif ($nt == 
3
) {
      $clone = $od->
create_text_node

                          ($node->
data
);
      if ($parent) {
        $parent->
append_child
 ($clone);
      } else {
        $r = $clone;
      }
      

{


$clone->
is_element_content_whitespace
 (
1
)
          if $node->
is_element_content_whitespace
;
      


;}

;
    } elsif ($nt == 
2
) {
      my $ln;
      

{


$ln = $node->
local_name
;
      


;}

;
      if (defined $ln) {
        $clone = $od->
create_attribute_ns

                          ($node->
namespace_uri
, $ln);
        if ($parent) {
          $parent->
set_attribute_node_ns
 ($clone);
          $clone->{
'node'
}->{
'specified'
} = 
1
            if 
$node->
specified
;
        } else {
          $r = $clone;
          $clone->{
'node'
}->{
'specified'
} = 
1
;
        }
      } else {  ## DOM Level 1 node
        $clone = $od->
create_attribute

                          ($node->
node_name
);
        if ($parent) {
          $parent->
set_attribute_node
 ($clone);
          $clone->{
'node'
}->{
'specified'
} = 
1
            if 
$node->
specified
;
        } else {
          $r = $clone;
          $clone->{
'node'
}->{
'specified'
} = 
1
;
        }
      }
      push @node, map {[$_, $clone]} @{$node->
child_nodes
};
    } elsif ($nt == 
8
) {
      $clone = $od->
create_comment

                          ($node->
data
);
      if ($parent) {
        $parent->
append_child
 ($clone);
      } else {
        $r = $clone;
      }
    } elsif ($nt == 
4
) {
      $clone = $od->
create_text_node

                          ($node->
data
);
      if ($parent) {
        $parent->
append_child
 ($clone);
      } else {
        $r = $clone;
      }
    } elsif ($nt == 
7
) {
      $clone = $od->
create_processing_instruction

                     ($node->
target
);
      $clone->
data

                     ($node->
data
);
      if ($parent) {
        $parent->
append_child
 ($clone);
      } else {
        $r = $clone;
      }
    } elsif ($nt == 
5
) {
      $clone = $od->
create_entity_reference

                           ($node->
node_name
);
      if ($parent) {
        $parent->
append_child
 ($clone);
      } else {
        $r = $clone;
      }
    } elsif ($nt == 
11
) {
      $clone = $od->
create_document_fragment
;
      $r = $clone;
      push @node, map {[$_, $clone]} @{$node->
child_nodes
};
    } elsif ($nt == 
9
) {
      

{


$od->
strict_error_checking
 ($strict_check);
      


;}

;
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'clone_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#CLONE_NODE_TYPE_NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => 'node';


;}


;}

;
    } elsif ($nt == 
10
) {
      

{


$od->
strict_error_checking
 ($strict_check);
      


;}

;
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'clone_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#CLONE_NODE_TYPE_NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => 'node';


;}


;}

;
    } elsif ($nt == 
6
) {
      

{


$od->
strict_error_checking
 ($strict_check);
      


;}

;
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'clone_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#CLONE_NODE_TYPE_NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => 'node';


;}


;}

;
    } elsif ($nt == 
12
) {
      

{


$od->
strict_error_checking
 ($strict_check);
      


;}

;
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'clone_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#CLONE_NODE_TYPE_NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => 'node';


;}


;}

;
    } else {
      ## TODO: Assertion
    }

    push @udh, [$node => $clone]
      if $node->{
'node'
}->{
'ud'
};
  } # @node
  

{


$od->
strict_error_checking
 (
1
) if $strict_check;

    ## Calling user data handlers if any
    for my $sd (@udh) {
      my $src = $sd->[0];
      my $src_ud = $src->{
'node'
}->{
'ud'
};
      for my $key (keys %{$src_ud}) {
        my $dh = $src_ud->{$key}->[1];
        if ($dh) {
          $dh->
handle

                  (
1
,
                   $key, $src_ud->{$key}->[0], $src, $sd->[1]);
        }
      }
    }
  


;}

;



;}


;}

;


;}
$r}
*clone_node = \&clone;
sub normalize ($) {
my ($self) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $self->{
'node'
}
     ->
_normalize_text

                                                    (
0
, 
0
);



;}


;}

;


;}
}
sub is_supported ($$$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


;}

{


$version = '' unless defined $version;


;}
my $r = 0;

{

my 
$plus = $feature =~ s/^\+// ? 1 : 0;
if ($
Message::DOM::Tree::ManakaiDOMNode::Class
{
    ref $self}->{$feature}->{$version}) {
## ISSUE: Not work for node type specific classes
  $r = 
1
;
} else {
  for (values %
Message::DOM::Tree::ManakaiDOMNode::Class
) {
    if ($_->{feature}->{$feature}->{$version}) {
      $r = 
1
;
      last;
    }
  }
} 
## TODO: Node type specific alternates


;}
$r}
sub namespace_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = 
undef
;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'namespace_uri';
}
}
sub prefix ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = 
undef
;


;}
$r;
} else {my ($self, $given) = @_;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#setting-prefix-no-effect-because-of-node', 'rdata' => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;


;}
}
}
sub local_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = 
undef
;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'local_name';
}
}
sub has_attributes ($) {
my ($self) = @_;
my $r = 0;

{

for 
(values %{$self->{
'node'
}
                   ->{
'attr'
}||{}}) {
  if (keys %$_) {
    $r = 
1
;
    last;
  }
}


;}
$r}
sub base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

if 
($self->{
'node'
}->{
'od'
} and
    $self->{
'node'
}->{
'od'
}
         ->{
'hf'
}->{HTML}) {
  $r = $self->{
'node'
}
         ->
_html_base_uri
;
} else {
  $r = 
undef
;
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'base_uri';
}
}
sub compare_document_position ($$) {
my ($self, $other) = @_;
my $r = 0;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'compare_document_position', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode';
$r}
sub text_content ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

my 
$__nodeobj = $self->{
'node'
};
if ({
       
'e'
 => 
1
,
       
'a'
 => 
1
,
       
'ge'
 => 
1
,
       
'r'
 => 
1
,
       
'f'
 => 
1
,
}->{$__nodeobj->{
'nt'
}}) {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    for 
my $__cno (@{$self->{
'node'
}
                          ->{
'child'
}}) {
      if ($__cno->{
'nt'
} eq 
'x'
) {
        $r .= $__cno->{
'con'
}
          unless $__cno->{
'ecws'
};
      } elsif (not {
            
'c'
 => 
1
,
            
'p'
 => 
1
,
      }->{$__cno->{
'nt'
}}) {
        my $__cn;
        

{


$__cn = bless {
  
'node'
 => $__cno,
  
'w'
 => 
1
,
}, {
            'e' => 'Message::DOM::Tree::ManakaiDOMElement',
            'cs' =>
                        'Message::DOM::DOMXML::ManakaiDOMCDATASection',
            'r' =>
                     'Message::DOM::DOMXML::ManakaiDOMEntityReference',
          }->{$__cno->{'nt'}} ||
          'Message::DOM::Tree::ManakaiDOMNode';


;}

;
        

{


$r .= $__cn->
text_content
;
        


;}

;
        

;
      }
    }
  


;}


;}

;
} elsif ({
    
'x'
 => 
1
,
    
'cs'
 => 
1
,
    
'c'
 => 
1
,
    
'p'
 => 
1
,
}->{$__nodeobj->{
'nt'
}}) {
  $r = $__nodeobj->{
'con'
};
} else {
  ## TODO: Namespace node not supported yet
  

;
  $r = 
undef
;
}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

my 
$__node = $self->{
'node'
};
if ($__node->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core%23setNodeTextContent+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}
my @__oldChild = @{$__node->{
'child'
}};
for my $__oc (@__oldChild) {
  CORE::delete $__oc->{
'parent'
};
}
$__node->{
'child'
} = [];
my $__textNode = 
Message::DOM::Tree::ManakaiDOMText->_new_object
 ($__node);


{


$__textNode->{'od'} = $__node->{'od'};
if (${$__textNode->{
'tid'
}} ne ${$__node->{'od'}->{
'tid'
}}) {
  $__node->{'od'}->{
'rc'
}++;
  ${$__node->{'od'}->{
'grc'
}}++;
}


;}

;
$__textNode->{
'con'
} = $given;
$__textNode->{
'parent'
} = $__node;
$__node->{
'child'
} = [$__textNode];
for my $__oc (@__oldChild) {
  $__oc->
_orphanate
;
}


;}

;


;}
}
}
sub is_same_node ($$) {
my ($self, $other) = @_;
my $r = 0;

{

if 
(UNIVERSAL::isa ($other, 
'Message::Util::IF::NodeRef'
) and
    $other->{
'node'
}->{
'nid'
}
      eq $self->{
'node'
}->{
'nid'
}) {
  $r = 
1
;
}


;}
$r}
sub lookup_prefix ($;$) {
my ($self, $namespaceURI) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r = '';

{

if 
(not defined $namespaceURI) {
  $r = 
undef
;
} else {
  my $n = $self->{
'node'
};
  ANCESTOR: {
    if ($n->{
'parent'
}) {
      $n = $n->{
'parent'
};
      if ($n->{
'nt'
} eq 
'e'
) {
        $r = $n->
_lookup_namespace_prefix
 ($namespaceURI, $n);
        last ANCESTOR;
      } else {
        redo ANCESTOR;
      }
    }
    $r = 
undef
;
  } # ANCESTOR
}


;}
$r}
sub is_default_namespace ($$) {
my ($self, $namespaceURI) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r = 0;

{


$r = $self->{
'node'
}
          ->
_is_default_namespace
 ($namespaceURI);


;}
$r}
sub lookup_namespace_uri ($;$) {
my ($self, $prefix) = @_;
my $r = '';

{


$r = $self->{
'node'
}
          ->
_lookup_namespace_uri
 ($prefix);


;}
$r}
sub is_equal_node ($$) {
my ($self, $arg) = @_;
my $r = 0;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  EQ: 
{
    last EQ unless $self->
node_type eq
                   
$arg->
node_type
;
    for my $v ([$self->
node_name
,
                $arg->
node_name
],
               [$self->
local_name
,
                $arg->
local_name
],
               [$self->
namespace_uri
,
                $arg->
namespace_uri
],
               [$self->
prefix
, $arg->
prefix
], 
               [$self->
node_value
, 
                $arg->
node_value
]) {
      if (not defined $v->[0] and not defined $v->[1]) {
        #
      } elsif (defined $v->[0] and defined $v->[1] and
               ''.$v->[0] eq ''.$v->[1]) {
        # 
      } else {
        last EQ;
      }
    }
    for my $v ([$self->
attributes
, 
                $arg->
attributes
],
               [$self->
child_nodes
, 
                $arg->
child_nodes
]) {
      if (not defined $v->[0] and not defined $v->[1]) {
        #
      } elsif (defined $v->[0] and defined $v->[1] and
               $v->[0] == $v->[1]) {
        #
      } else {
        last EQ;
      }
    }
    if ($self->
node_type
 == 
10
) {
      for my $v ([$self->
public_id
,
                  $arg->
public_id
],
                 [$self->
system_id
, 
                  $arg->
system_id
],
                 [$self->
internal_subset
,
                  $arg->
internal_subset
]) {
        if (not defined $v->[0] and not defined $v->[1]) {
          #
        } elsif (defined $v->[0] and defined $v->[1] and
                 ''.$v->[0] eq ''.$v->[1]) {
          # 
        } else {
          last EQ;
        }
      }
      for my $v ([$self->
entities
,
                  $arg->
entities
],
                 [$self->
notations
,
                  $arg->
notations
]) {
        if (not defined $v->[0] and not defined $v->[1]) {
          #
        } elsif (defined $v->[0] and defined $v->[1] and
                 $v->[0] == $v->[1]) {
          #
        } else {
          last EQ;
        }
      }
    }
    $r = 
1
;
  } # EQ



;}


;}

;


;}
$r}
sub get_feature ($$;$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


;}

{


$version = '' unless defined $version;


;}
my $r;
$r}
sub set_user_data ($$;$$) {
my ($self, $key, $data, $handler) = @_;

{


$handler = bless $handler, 
'Message::DOM::DOMCore::ManakaiDOMUserDataHandler'
  if 
ref $handler eq 'CODE';


;}
my $r;

{


$r = $self->{
'node'
}->{
'ud'
}->{$key}->[0];
if (defined $data) {
  $self->{
'node'
}->{
'ud'
}->{$key} = [$data, $handler];
} else {
  CORE::delete $self->{
'node'
}->{
'ud'
}->{$key};
}


;}
$r}
sub get_user_data ($$) {
my ($self, $key) = @_;
my $r;

{


$r = $self->{
'node'
}->{
'ud'
}->{$key}->[0];


;}
$r}
sub _new_object ($$;$) {
my ($self, $refClass, $refNode) = @_;
my $r;

{

if 
(defined $refNode) {
  $r = bless $refNode->
_new_node
 ($refClass),
                    
'Message::DOM::Tree::ManakaiDOMNodeObjectNode'
;
} else {
  $r = bless 
Message::Util::ManakaiNode::ManakaiNodeStem->_new
 ($refClass),
                    
'Message::DOM::Tree::ManakaiDOMNodeObjectNode'
;
}


;}
$r}
sub _get_node_reference ($$) {
my ($self, $object) = @_;
my $r;

{

my 
$nt = $object->{
'nt'
};
my $class;
UNKNOWN: {
if (defined $object->{
'cp'
}) {
  $class = ${$object->{
'cp'
}};
  last UNKNOWN;
}
FIND: {
if ($nt eq 
'e'
) {
  my $ns;
  my $ln;
  if (defined $object->{
'ln'
}) { ## Namespace-aware
    $ns = $object->{
'ns'
};
    $ns = \'' unless defined $ns;
    $ln = $object->{
'ln'
};
  } elsif ($object->{
'od'
}
                  ->{
'hf'
}->{HTML}) {
    $ns = \
'http://www.w3.org/1999/xhtml'
;
    $ln = lc $object->{
'xnm'
};
  }
  if (defined $ln) {
    for my $pack (sort {
      $Message::DOM::ClassPoint{$b} <=> $Message::DOM::ClassPoint{$a}
    } keys %{
      $Message::DOM::ManakaiDOMElement::CompatClassET{$$ns}->{$ln}
    }) {
      if ($pack->isa (
'Message::DOM::IFLatest::Element'
)) {
        $class = $pack;
        last FIND;
      }
    }
    for my $pack (sort {
      $Message::DOM::ClassPoint{$b} <=> $Message::DOM::ClassPoint{$a}
    } keys %{
      $Message::DOM::ManakaiDOMElement::CompatClassET{$$ns}->{'*'}
    }) {
      if ($pack->isa (
'Message::DOM::IFLatest::Element'
)) {
        $class = $pack;
        last FIND;
      }
    }
  }
  for my $pack (sort {
    $Message::DOM::ClassPoint{$b} <=> $Message::DOM::ClassPoint{$a}
  } keys %{$Message::DOM::ManakaiDOMElement::CompatClass}) {
    if ($pack->isa (
'Message::DOM::IFLatest::Element'
)) {
      $class = $pack;
      last FIND;
    }
  }
  $class = 
'Message::DOM::Tree::ManakaiDOMElement'
;
} elsif ($nt eq 
'a'
) {
  ## TODO: Find class by namespace URI and local name
  for my $pack (sort {
    $Message::DOM::ClassPoint{$b} <=> $Message::DOM::ClassPoint{$a}
  } keys %{$Message::DOM::ManakaiDOMAttr::CompatClass}) {
    if ($pack->isa (
'Message::DOM::IFLatest::Attr'
)) {
      $class = $pack;
      last FIND;
    }
  }
  $class = 
'Message::DOM::Tree::ManakaiDOMAttr'
;
} elsif ($nt eq 
'x'
) {
  for my $pack (sort {
    $Message::DOM::ClassPoint{$b} <=> $Message::DOM::ClassPoint{$a}
  } keys %{$Message::DOM::ManakaiDOMText::CompatClass}) {
    if ($pack->isa (
'Message::DOM::IFLatest::Text'
)) {
      $class = $pack;
      last FIND;
    }
  }
  $class = 
'Message::DOM::Tree::ManakaiDOMText'
;
} elsif ($nt eq 
'c'
) {
  for my $pack (sort {
    $Message::DOM::ClassPoint{$b} <=> $Message::DOM::ClassPoint{$a}
  } keys %{$Message::DOM::ManakaiDOMComment::CompatClass}) {
    if ($pack->isa (
'Message::DOM::IFLatest::Comment'
)) {
      $class = $pack;
      last FIND;
    }
  }
  $class = 
'Message::DOM::Tree::ManakaiDOMComment'
;
} elsif ($nt eq 
'd'
) {
  CHILD: for my $co (@{$object->{
'child'
}}) {
    ## By root element type
    if ($co->{
'nt'
} eq 
'e'
) {
      my $ns;
      my $ln;
      if (defined $co->{
'ln'
}) { ## Namespace-aware
        $ns = $co->{
'ns'
};
        $ns = \'' unless defined $ns;
        $ln = $co->{
'ln'
};
      } elsif ($co->{
'od'
}
                  ->{
'hf'
}->{HTML}) {
        $ns = \
'http://www.w3.org/1999/xhtml'
;
        $ln = lc $co->{
'xnm'
};
      }
      if (defined $ln) {
        for my $pack (sort {
          $Message::DOM::ClassPoint{$b} <=>
          $Message::DOM::ClassPoint{$a}
        } keys %{
          $Message::DOM::ManakaiDOMDocument::CompatClassET{$$ns}->{$ln}
        }) {
          if ($pack->isa (
'Message::DOM::IFLatest::Document'
)) {
            $class = $pack;
            last FIND;
          }
        }
        for my $pack (sort {
          $Message::DOM::ClassPoint{$b} <=>
          $Message::DOM::ClassPoint{$a}
        } keys %{
          $Message::DOM::ManakaiDOMDocument::CompatClassET{$$ns}->{'*'}
        }) {
          if ($pack->isa (
'Message::DOM::IFLatest::Document'
)) {
            $class = $pack;
            last FIND;
          }
        }
      }
      last CHILD; # Not found

    ## By document type or by external subset identifier
    } elsif ($co->{
'nt'
} eq
             
't'
) {

      # Not found --> checking root element
    }
  } # CHILD

  if ($object->{
'hf'
}->{HTML}) {
    for my $pack (sort {
          $Message::DOM::ClassPoint{$b} <=>
          $Message::DOM::ClassPoint{$a}
    } keys %{
      $Message::DOM::ManakaiDOMDocument::CompatClassET{
'http://www.w3.org/1999/xhtml'
}
                                                    ->{'*'}
    }) {
      if ($pack->isa (
'Message::DOM::IFLatest::Document'
)) {
        $class = $pack;
        last FIND;
      }
    }
  }

  for my $pack (sort {
    $Message::DOM::ClassPoint{$b} <=> $Message::DOM::ClassPoint{$a}
  } keys %{$Message::DOM::ManakaiDOMDocument::CompatClass}) {
    if ($pack->isa (
'Message::DOM::IFLatest::Document'
)) {
      $class = $pack;
      last FIND;
    }
  }
  $class = 
'Message::DOM::Tree::ManakaiDOMDocument'
;
} elsif ($nt eq 
'p'
) {
  ## TODO: Find class by namespace URI and local name
  for my $pack (sort {
    $Message::DOM::ClassPoint{$b} <=> $Message::DOM::ClassPoint{$a}
  } keys %{
    $Message::DOM::ManakaiDOMProcessingInstruction::CompatClass
  }) {
    if ($pack->isa (
'Message::DOM::IFLatest::ProcessingInstruction'
)) {
      $class = $pack;
      last FIND;
    }
  }
  $class = 
'Message::DOM::DOMXML::ManakaiDOMProcessingInstruction'
;
} elsif ($nt eq 
'cs'
) {
  for my $pack (sort {
    $Message::DOM::ClassPoint{$b} <=> $Message::DOM::ClassPoint{$a}
  } keys %{$Message::DOM::ManakaiDOMCDATASection::CompatClass}) {
    if ($pack->isa (
'Message::DOM::IFLatest::CDATASection'
)) {
      $class = $pack;
      last FIND;
    }
  }
  $class = 
'Message::DOM::DOMXML::ManakaiDOMCDATASection'
;
} elsif ($nt eq 
'r'
) {
  for my $pack (sort {
    $Message::DOM::ClassPoint{$b} <=> $Message::DOM::ClassPoint{$a}
  } keys %{$Message::DOM::ManakaiDOMEntityReference::CompatClass}) {
    if ($pack->isa (
'Message::DOM::IFLatest::EntityReference'
)) {
      $class = $pack;
      last FIND;
    }
  }
  $class = 
'Message::DOM::DOMXML::ManakaiDOMEntityReference'
;
} elsif ($nt eq 
'f'
) {
  for my $pack (sort {
    $Message::DOM::ClassPoint{$b} <=> $Message::DOM::ClassPoint{$a}
  } keys %{$Message::DOM::ManakaiDOMDocumentFragment::CompatClass}) {
    if ($pack->isa (
'Message::DOM::IFLatest::DocumentFragment'
)) {
      $class = $pack;
      last FIND;
    }
  }
  $class = 
'Message::DOM::Tree::ManakaiDOMDocumentFragment'
;
} elsif ($nt eq 
't'
) {
  for my $pack (sort {
    $Message::DOM::ClassPoint{$b} <=> $Message::DOM::ClassPoint{$a}
  } keys %{$Message::DOM::ManakaiDOMDocumentType::CompatClass}) {
    if ($pack->isa (
'Message::DOM::IFLatest::DocumentType'
)) {
      $class = $pack;
      last FIND;
    }
  }
  $class = 
'Message::DOM::DOMXML::ManakaiDOMDocumentType'
;
} elsif ($nt eq 
'ge'
) {
  for my $pack (sort {
    $Message::DOM::ClassPoint{$b} <=> $Message::DOM::ClassPoint{$a}
  } keys %{$Message::DOM::ManakaiDOMEntity::CompatClass}) {
    if ($pack->isa (
'Message::DOM::IFLatest::Entity'
)) {
      $class = $pack;
      last FIND;
    }
  }
  $class = 
'Message::DOM::DOMXML::ManakaiDOMEntity'
;
} elsif ($nt eq 
'n'
) {
  for my $pack (sort {
    $Message::DOM::ClassPoint{$b} <=> $Message::DOM::ClassPoint{$a}
  } keys %{$Message::DOM::ManakaiDOMNotation::CompatClass}) {
    if ($pack->isa (
'Message::DOM::IFLatest::Notation'
)) {
      $class = $pack;
      last FIND;
    }
  }
  $class = 
'Message::DOM::DOMXML::ManakaiDOMNotation'
;
## TODO: Namespace
} else {
  
report Message::Util::Error::DOMException::CoreException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#values' => {
        'nt' => $nt,
      }, '-type' => 'MDOM_DEBUG_BUG', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_get_node_reference', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode';

;
}
} # FIND


{

if 
(defined $class) {
  if (ref $class eq 'SCALAR') {
    $object->{'cp'} = $class;
  } elsif (defined $Message::Util::ManakaiStringRef::Value{$class}) {
    $object->{'cp'} = $Message::Util::ManakaiStringRef::Value{$class};
  } else {
    require Scalar::Util;
    $object->{'cp'} = $Message::Util::ManakaiStringRef::Value{$class} = \($class);
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{$class});
  }
} else {
  CORE::delete $object->{'cp'};
}


;}

;
} # UNKNOWN


{


$object->{
'rc'
}++;
${$object->{
'grc'
}}++;
$r = bless {
  
'node'
 => $object,
}, $class;


;}

;


;}
$r}
sub _get_core_node_reference ($$) {
my ($self, $object) = @_;
my $r;

{

my 
$nt = $object->{
'nt'
};
my $class;
if ($nt eq 
'e'
) {
  $class = 
'Message::DOM::Tree::ManakaiDOMElement'
;
} elsif ($nt eq 
'a'
) {
  $class = 
'Message::DOM::Tree::ManakaiDOMAttr'
;
} elsif ($nt eq 
'x'
) {
  $class = 
'Message::DOM::Tree::ManakaiDOMText'
;
} elsif ($nt eq 
'c'
) {
  $class = 
'Message::DOM::Tree::ManakaiDOMComment'
;
} elsif ($nt eq 
'd'
) {
  $class = 
'Message::DOM::Tree::ManakaiDOMDocument'
;
} elsif ($nt eq 
'f'
) {
  $class = 
'Message::DOM::Tree::ManakaiDOMDocumentFragment'
;
} elsif ($nt eq 
'r'
) {
  $class = 
'Message::DOM::DOMXML::ManakaiDOMEntityReference'
;
} elsif ($nt eq 
'p'
) {
  $class = 
'Message::DOM::DOMXML::ManakaiDOMProcessingInstruction'
;
} elsif ($nt eq 
'ge'
) {
  $class = 
'Message::DOM::DOMXML::ManakaiDOMEntity'
;
} elsif ($nt eq 
'cs'
) {
  $class = 
'Message::DOM::DOMXML::ManakaiDOMCDATASection'
;
} elsif ($nt eq 
'n'
) {
  $class = 
'Message::DOM::DOMXML::ManakaiDOMNotation'
;
} else {
  ## TODO: Use assertion
  
report Message::Util::Error::DOMException::CoreException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#values' => {
        'nt' => $nt,
      }, '-type' => 'MDOM_DEBUG_BUG', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_get_core_node_reference', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode';

;
}


{


$object->{
'rc'
}++;
${$object->{
'grc'
}}++;
$r = bless {
  
'node'
 => $object,
}, $class;


;}

;


;}
$r}
sub ___report_error ($$) {
my ($self, $err) = @_;
my $r;

{

if 
($err->isa (
'Message::DOM::IF::DOMError'
)) {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    A: 
{
      my $doc = $self->
owner_document
;
      if (not defined $doc) {
        if ($self->
node_type
 == 
9
) {
          $doc = $self;
        } else {  ## DOCUMENT_TYPE_NODE
          CORE::warn $err;
        }
      }
      my $cfg = $doc->
dom_config
;
      my $h = $cfg->
get_parameter

                       ('error-handler');
      $r = $h->
handle_error
 ($err);
    } # A
  


;}


;}

;
} else {
  $err->
throw
;
}


;}
$r}
use overload 
bool => sub () {1}, 
'eq' => 'is_same_node', 
'==' => 'is_equal_node', 
fallback => 1;
$Message::DOM::ClassFeature{q<Message::DOM::Tree::ManakaiDOMNode>} = {'', {'', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xmlversion', {'', '1', '1.0', '1', '1.1', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::Tree::ManakaiDOMNode>} = 8.1;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::Tree::ManakaiDOMNode>} = {};
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#setting-node-value-no-effect'} = {'description', 'An attempt is made to set the <A::Node.nodeValue> that is defined as <DOM::null>. The operation has no effect.', 'sev', '1', 't', 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#setting-node-value-no-effect'};
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#insert-before-itself'} = {'description', 'An attempt is made to insert a node before itself. The result is implementation dependent; it has no effect in manakai.', 'sev', '1', 't', 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#insert-before-itself'};
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#replace-by-itself'} = {'description', 'An attempt is made to replace a node by itself. The result is implementation dependent; it has no effect in manakai.', 'sev', '1', 't', 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#replace-by-itself'};
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#setting-prefix-no-effect-because-of-node'} = {'description', 'An attempt is made to set the <A::Node.prefix> that is defined as <DOM::null> since it is not an <IF::Element> or <IF::Attr> node or since it is a DOM Level 1 (i.e. namespace unaware) node. The operation has no effect.', 'sev', '1', 't', 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#setting-prefix-no-effect-because-of-node'};
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#setting-prefix-no-effect-because-of-document'} = {'description', 'An attempt is made to set the <A::Node.prefix> that is defined as <DOM::null> since its owner document does not support XML namespaces. The operation has no effect.', 'sev', '1', 't', 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#setting-prefix-no-effect-because-of-document'};
package Message::DOM::Tree::ManakaiDOMNodeObjectNode;
our $VERSION = 20051125.0633;
push our @ISA, 'Message::Util::ManakaiNode::ManakaiNodeStem';
sub _content_base_uri ($$) {
my ($self, $useInfosetProperty) = @_;
my $r = '';

{


$r = 
undef
;
if ($useInfosetProperty and defined $self->{
'buri'
}) {
  ## Note: In XML Infoset, infoset:Document, 
  ##       infoset:Element and infoset:ProcessingInstruction
  ##       allow infoset:baseURI.  In addition, 
  ##       DOMCore:Entity and DOMCore:EntityReference
  ##       may have it, if it is ManakaiDOM:isExternalEntity,
  ##       in this implementation.
  $r = $self->{
'buri'
};
} else {
  if ($self->{
'nt'
} eq 
'e'
) {
    if ($self->{
'attr'
}
             ->{
'http://www.w3.org/XML/1998/namespace'
}->{'base'}) {
      $r = $self->{
'attr'
}
                ->{
'http://www.w3.org/XML/1998/namespace'
}->{'base'}
                ->
_content_base_uri
 ($useInfosetProperty);
    } elsif ($self->{
'attr'
}
                  ->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{'xml:base'}) {
      $r = $self->{
'attr'
}
                ->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{'xml:base'}
                ->
_content_base_uri
 ($useInfosetProperty);
    }
    if (not defined $r and $self->{
'parent'
}) {
      $r = $self->{
'parent'
}
                ->
_content_base_uri
 ($useInfosetProperty);
    }
  } elsif ($self->{
'nt'
} eq 
'a'
) {
    if ((defined $self->{
'ln'
} and
         $self->{
'ln'
} eq 'base' and
         defined $self->{
'ns'
} and
         ${$self->{
'ns'
}} eq 
'http://www.w3.org/XML/1998/namespace'
) or
        (not defined $self->{
'ln'
} and
         $self->{
'xnm'
} eq 'xml:base')) {
      my $attrcls = 
'Message::DOM::Tree::ManakaiDOMAttr'
;
      $r = 
(bless {
  'node' => $self,
  'w' => 1,
}, $attrcls)

                ->
value
;
      if (defined $r and
          
($r !~ /\A[0-9A-Za-z+_.%-]+:/)
) {
        if ($self->{
'owner'
} and
            $self->{
'owner'
}
                 ->{
'parent'
}) {
          my $base = $self->{
'owner'
}
                          ->{
'parent'
}
                          ->
_content_base_uri

                                           ($useInfosetProperty);
          if (defined $base) {
            require URI;
            $r = URI->new_abs ($r, $base)->as_string;
          } else {
            $r = 
undef
;
          }
        } else {
          $r = 
undef
;
        }
      }
    } else { # not xml:base
      if ($self->{
'owner'
}) {
        $r = $self->{
'owner'
}
                  ->
_content_base_uri
 ($useInfosetProperty);
      }
    }
  } elsif ({
             
'x'
 => 1,
             
'cs'
 => 1,
             
't'
 => 1,
             
'c'
 => 1,
             
'p'
 => 1,
             
'n'
 => 1, ## but does not have content
           }->{$self->{
'nt'
}}) {
    if ($self->{
'parent'
}) {
      $r = $self->{
'parent'
}
                ->
_content_base_uri
 ($useInfosetProperty);
    }
  } elsif ($self->{
'nt'
} eq 
'd'
) {
    ## 2. The base URI of the protocol entity
      # infoset:baseURI
    ## 3. The URI to retrieve the protocol entity
    ## 4. The application defined base URI
    if (defined $self->{
'duri'
} and
        not 
($r !~ /\A[0-9A-Za-z+_.%-]+:/)
) {
      $r = $self->{
'duri'
};
    }
  } elsif ({
             
'ge'
 => 1,
             
'r'
 => 1,
           }->{$self->{
'nt'
}}) {
    if ($self->{
'xp'
}) {
      if ($self->{
'xe'
}) {
        ## 2. The base URI of the protocol entity
          # infoset:baseURI
        ## 3. The URI to retrieve the protocol entity
        ## 4. The application defined base URI
        if (defined $self->{
'duri'
} and
            not 
($r !~ /\A[0-9A-Za-z+_.%-]+:/)
) {
          $r = $self->{
'duri'
};
        }
        ## Should infoset:systemIdentifier +
        ## infoset:declarationBaseURI also be used?
      }
    } else {
      if ($self->{
'parent'
}) {
        $r = $self->{
'parent'
}
                  ->
_content_base_uri
 ($useInfosetProperty);
      }
    }
  } else {
    # DOMCore:DocumentFragment or 
    # unknown node types
  }
}


;}
$r}
sub _html_base_uri ($) {
my ($self) = @_;
my $r = '';

{


$r = 
undef
;
my $doc = $self->{
'node'
}->{
'od'
};
if ($doc and $doc->{
'hf'
}->{HTML}) {
  HTML: {
    DOC: for (@{$doc->{
'child'
}}) {
      if ($_->{
'nt'
} eq 
'e' and
          
(defined $_->{
'ln'
} and
           $_->{
'ln'
} eq 'html' and
           ((defined $_->{
'ns'
} and
             ${$_->{
'ns'
}} eq 
'http://www.w3.org/1999/xhtml'
) or
            not defined $_->{
'ns'
})) or
          (not defined $_->{
'ln'
} and
           $_->{
'xnm'
} eq 'html')) {
        for (@{$_->{
'child'
}}) {
          if ($_->{
'nt'
} eq 
'e' and
              
(defined $_->{
'ln'
} and
               $_->{
'ln'
} eq 'head' and
               ((defined $_->{
'ns'
} and
                 ${$_->{
'ns'
}} eq 
'http://www.w3.org/1999/xhtml'
) or
                not defined $_->{
'ns'
})) or
              (not defined $_->{
'ln'
} and
               $_->{
'xnm'
} eq 'head')) {
            for (@{$_->{
'child'
}}) {
              if ($_->{
'nt'
} eq 
'e' and
                  
(defined $_->{
'ln'
} and
                   $_->{
'ln'
} eq 'base' and
                   ((defined $_->{
'ns'
} and
                     ${$_->{
'ns'
}} eq 
'http://www.w3.org/1999/xhtml'
) or
                    not defined $_->{
'ns'
})) or
                  (not defined $_->{
'ln'
} and
                   $_->{
'xnm'
} eq 'base')) {
                my $a = $_->{
'attr'
}
                          ->{
'http://suika.fam.cx/~wakaba/-temp/2003/09/27/null'
}->{href} ||
                        $_->{
'attr'
}
                          ->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{href};
                if ($a) {
                  my $ac = 
'Message::DOM::Tree::ManakaiDOMAttr'
;
                  $r = 
(bless {
  'node' => $a,
  'w' => 1,
}, $ac)

                            ->
value
;
                  unless (
($r !~ /\A[0-9A-Za-z+_.%-]+:/)
) {
                    $r = 
undef
;
                  } else {
                    last HTML;
                  }
                }
                last DOC;
              }
            }
            last DOC;
          }
        }
        last DOC;
      }
    } # DOC
    if (defined $doc->{
'buri'
}) {
      $r = $doc->{
'buri'
};
      $r = 
undef if 

($r !~ /\A[0-9A-Za-z+_.%-]+:/)
;
    } elsif (defined $doc->{
'duri'
}) {
      $r = $doc->{
'duri'
};
      $r = 
undef if 

($r !~ /\A[0-9A-Za-z+_.%-]+:/)
;
    }
  } # HTML
}


;}
$r}
sub _lookup_namespace_prefix ($$;$) {
my ($self, $namespaceURI, $originalElement) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r = '';

{


$r = 
undef
;
FIND: {
if ($originalElement) {
  if (defined $self->{
'ns'
} and
      ${$self->{
'ns'
}} eq $namespaceURI and
      defined $self->{
'pfx'
} and
      $originalElement->
_lookup_namespace_uri

            ($self->{
'pfx'
}) eq $namespaceURI) {
    $r = $self->{
'pfx'
};
    last FIND;
  }
  my $ac = 
'Message::DOM::Tree::ManakaiDOMAttr'
;
  for (values %{$self->{
'attr'
}->{
'http://www.w3.org/2000/xmlns/'
}||{}}) {
    if (defined $_->{
'pfx'
} and
        $_->{
'pfx'
} eq 'xmlns' and
        
(bless {
  'node' => $_,
  'w' => 1,
}, $ac)

          ->
value eq 
$namespaceURI and
        $originalElement->
_lookup_namespace_uri

                  ($_->{
'ln'
}) eq $namespaceURI) {
      $r = $_->{
'ln'
};
      last FIND;
    }
  }
}
  ## If element has ancestor element
  my $n = $self;
  ANCESTOR: {
    if ($n->{
'parent'
}) {
      $n = $n->{
'parent'
};
      if ($n->{
'nt'
} eq 
'e'
) {
        $r = $n->
_lookup_namespace_prefix

                                   ($namespaceURI, $originalElement);
        last FIND;
      } else {
        redo ANCESTOR;
      }
    }
  }
} # FIND


;}
$r}
sub _is_default_namespace ($$) {
my ($self, $namespaceURI) = @_;
my $r = 0;

{

if 
($self->{
'nt'
} eq 
'e'
) {
  if (not defined $self->{
'pfx'
}) {
    if (defined $namespaceURI and
        defined $self->{
'ns'
} and
        $namespaceURI eq ${$self->{
'ns'
}}) {
      $r = 
1
;
    } elsif (not defined $namespaceURI and
             not defined $self->{
'ns'
}) {
      $r = 
1
;
    }
    # else 
0

  } elsif ($self->{
'attr'
}
                ->{
'http://www.w3.org/2001/04/infoset#xmlns:'
}->{xmlns}) {
    my $vo = $self->{
'attr'
}
                  ->{
'http://www.w3.org/2001/04/infoset#xmlns:'
}->{xmlns};
    my $ac = 
'Message::DOM::Tree::ManakaiDOMAttr'
;
    my $v = 
(bless {
  'node' => $vo,
  'w' => 1,
}, $ac)

                 ->
value
;
    if (defined $namespaceURI and $namespaceURI eq $v) {
      $r = 
1
;
    } elsif (not defined $namespaceURI and not length $v) {
      $r = 
1
;
    }
    # else 
0

  } else {
    ## If element has ancestor element
    my $n = $self;
    ANCESTOR: {
      if ($n->{
'parent'
}) {
        $n = $n->{
'parent'
};
        if ($n->{
'nt'
} eq 
'e'
) {
          $r = $n->
_is_default_namespace
 ($namespaceURI);
          last ANCESTOR;
        } else {
          redo ANCESTOR;
        }
      }
      # 
0

    }
  }
} elsif ($self->{
'nt'
} eq 
'd'
) {
  for (@{$self->{
'child'
}}) {
    if ($_->{
'nt'
} eq 
'e'
) {
      $r = $_->
_is_default_namespace
 ($namespaceURI);
      last;
    }
  }
} elsif ($self->{
'nt'
} eq 
'a'
) {
  if ($self->{
'owner'
}) {
    $r = $self->{
'owner'
}
              ->
_is_default_namespace
 ($namespaceURI);
    last FIND;
  }
} elsif ({
           
'ge'
 => 1,
           
'n'
 => 1,
           
't'
 => 1,
           
'f'
 => 1,
         }->{$self->{
'nt'
}}) {
  #
} else {
#} elsif ({
#           < Q::DOMCore:Text> => 1,
#           < Q::DOMCore:Comment> => 1,
#           < Q::DOMXML:EntityReference> => 1,
#           < Q::DOMXML:CDATASection> => 1,
#           < Q::infoset:ProcessingInstruction> => 1,
#         }->{$self->{< Q::DOMCore:nodeType>}}) {
  ## If node has ancestor element
  my $n = $self;
  ANCESTOR: {
    if ($n->{
'parent'
}) {
      $n = $n->{
'parent'
};
      if ($n->{
'nt'
} eq 
'e'
) {
        $r = $n->
_is_default_namespace
 ($namespaceURI);
        last ANCESTOR;
      } else {
        redo ANCESTOR;
      }
    }
    # 
0

  }
} # nodeType


;}
$r}
sub _lookup_namespace_uri ($;$) {
my ($self, $prefix) = @_;
my $r = '';

{


$r = 
undef
;
FIND: {
if ($self->{
'nt'
} eq 
'e'
) {
  if (defined $self->{
'ln'
} and
      defined $self->{
'ns'
} and
      ((defined $self->{
'pfx'
} and defined $prefix and
        $self->{
'pfx'
} eq $prefix) or
       (not defined $self->{
'pfx'
} and
        not defined $prefix))) {
    $r = ${$self->{
'ns'
}};
    last FIND;
  }
  my $ac = 
'Message::DOM::Tree::ManakaiDOMAttr'
;
  for (values %{$self->{
'attr'
}->{
'http://www.w3.org/2000/xmlns/'
}||{}}) {
    if (defined $_->{
'pfx'
} and defined $prefix and
        $_->{
'pfx'
} eq 'xmlns' and
        $_->{
'ln'
} eq $prefix) {
      ## Non default namespace
      $r = 
(bless {
  'node' => $_,
  'w' => 1,
}, $ac)

                ->
value
;
      $r = 
undef unless 
length $r;
      last FIND;
    } elsif (not defined $prefix and
             $_->{
'ln'
} eq 'xmlns') {
      ## Default namespace
      $r = 
(bless {
  'node' => $_,
  'w' => 1,
}, $ac)

                ->
value
;
      $r = 
undef unless 
length $r;
      last FIND;
    }
  }
  ## If element has ancestor element
  my $n = $self;
  ANCESTOR: {
    if ($n->{
'parent'
}) {
      $n = $n->{
'parent'
};
      if ($n->{
'nt'
} eq 
'e'
) {
        $r = $n->
_lookup_namespace_uri
 ($prefix);
        last FIND;
      } else {
        redo ANCESTOR;
      }
    }
  }
} elsif ($self->{
'nt'
} eq 
'd'
) {
  for (@{$self->{
'child'
}}) {
    if ($_->{
'nt'
} eq 
'e'
) {
      $r = $_->
_lookup_namespace_uri
 ($prefix);
      last FIND;
    }
  }
} elsif ($self->{
'nt'
} eq 
'a'
) {
  if ($self->{
'owner'
}) {
    $r = $self->{
'owner'
}
              ->
_lookup_namespace_uri
 ($prefix);
    last FIND;
  }
} elsif ({
           
'ge'
 => 1,
           
'n'
 => 1,
           
't'
 => 1,
           
'f'
 => 1,
         }->{$self->{
'nt'
}}) {
  #
} else {
#} elsif ({
#           < Q::DOMCore:Text> => 1,
#           < Q::DOMCore:Comment> => 1,
#           < Q::DOMXML:EntityReference> => 1,
#           < Q::DOMXML:CDATASection> => 1,
#           < Q::infoset:ProcessingInstruction> => 1,
#         }->{$self->{< Q::DOMCore:nodeType>}}) {
  ## If node has ancestor element
  my $n = $self;
  ANCESTOR: {
    if ($n->{
'parent'
}) {
      $n = $n->{
'parent'
};
      if ($n->{
'nt'
} eq 
'e'
) {
        $r = $n->
_lookup_namespace_uri
 ($prefix);
        last FIND;
      } else {
        redo ANCESTOR;
      }
    }
  }
} # nodeType
} # FIND


;}
$r}
sub _get_element_by ($$$) {
my ($self, $check, $index) = @_;
my $r;

{

for 
(@{$self->{
'child'
}||[]}) {
  last if $$index < 0;
  if ($_->{
'nt'
} eq 
'e'
) {
    if ($check->($_)) {
      if ($$index-- == 0) {
        $r = $_;
        last;
      }
    }
    $r = $_->
_get_element_by

                ($check, $index);
    last if $$index == -1;
  } elsif ({
             
'r'
 => 1,
           }->{$_->{
'nt'
}}) {
    $r = $_->
_get_element_by

               ($check, $index);
    last if $$index == -1;
  }
}


;}
$r}
sub _get_elements_by ($$) {
my ($self, $check) = @_;
my $r = [];

{


$r = [];
for (@{$self->{
'child'
}||[]}) {
  if ($_->{
'nt'
} eq 
'e'
) {
    if ($check->($_)) {
      push @$r, $_;
    }
    push @$r,
         @{$_->
_get_elements_by
 ($check)};
  } elsif ({
             
'r'
 => 1,
           }->{$_->{
'nt'
}}) {
    push @$r,
         @{$_->
_get_elements_by
 ($check)};
  }
}


;}
$r}
sub _is_equal_node ($$) {
my ($self, $node) = @_;
my $r = 0;

{

my 
$nodeclass = 
'Message::DOM::Tree::ManakaiDOMNode'
;
$r = 
is_equal_node

       (
(bless {
  'node' => $self,
  'w' => 1,
}, $nodeclass)
,
        
(bless {
  'node' => $node,
  'w' => 1,
}, $nodeclass)
);


;}
$r}
sub _normalize_text ($$;$) {
my ($self, $fullyNormalize, $isDescendant) = @_;

{

if 
(@{$self->{
'child'
}||[]}) {
  my @new;
  my $changed = 
0
;
  my @change;
  my @removed;
  my $pchild;
  for my $child (@{$self->{
'child'
}}) {
    if ($self->{
'nt'
} eq 
'x'
) {
      if (length $child->{
'con'
}) {
        if ($pchild) {
          if ($self->{
'ro'
}) {
            if ($isDescendant) {
              
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_normalize_text', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#nodeObject' => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOMOD_DESCENDANT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNodeObjectNode';

;
            } else {
              
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_normalize_text', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#nodeObject' => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNodeObjectNode';

;
            }
          } elsif ($pchild->{
'ro'
}) {
            if ($child->{
'ro'
}) {
              ## Creates a new node
              my $text = 
Message::DOM::Tree::ManakaiDOMText->_new_object
 ($self);
              push @change, [$text, 'append', $pchild];
              push @change, [$text, 'append', $child];
              $text->{
'con'
} = '';
              

{


$text->{'od'} = $child->{'od'};
if (${$text->{
'tid'
}} ne ${$child->{'od'}->{
'tid'
}}) {
  $child->{'od'}->{
'rc'
}++;
  ${$child->{'od'}->{
'grc'
}}++;
}


;}

;
              $text->{
'parent'
} = $self;
              push @removed, $pchild, $child;
              $pchild = $text;
              push @new, $text;
              $changed = 
1
;
            } else {
              push @change, [$child, 'prepend', $pchild];
              push @removed, $pchild;
              $pchild = $child;
              pop @new;
              push @new, $child;
              $changed = 
1
;
            }
          } else {
            push @change, [$pchild, 'append', $child];
            push @removed, $child;
            $changed = 
1
;
          }
        } else {
          $pchild = $child;
          push @new, $child;
        }
      } else { # length zero
        if ($self->{
'ro'
}) {
          if ($isDescendant) {
            
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_normalize_text', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#nodeObject' => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOMOD_DESCENDANT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNodeObjectNode';

;
          } else {
            
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_normalize_text', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#nodeObject' => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNodeObjectNode';

;
          }
        }
        push @removed, $child;
        $changed = 
1
;
      }
    } elsif ({
                
'e'
 => 1,
                
'r'
 => 1,
             }->{$self->{
'nt'
}}) {
      $pchild = 
undef
;
      push @new, $child;
      

{

local $Error::Depth = $Error::Depth + 1;

{



        $child->
_normalize_text
 ($fullyNormalize, 
1
);
      


;}


;}

;
    } else {
      $pchild = 
undef
;
      push @new, $child;
    }
  }

  if ($changed) {
    ## NOTE: Actual changes made here, to avoid breaking data 
    ##       when some of children are read-only. 
    for (@change) {
      if ($_->[1] eq 'append') {
        $_->[0]->{
'con'
}
            .= $_->[2]->{
'con'
};
      } elsif ($_->[1] eq 'preprend') {
        $_->[0]->{
'con'
}
             = $_->[1]->{
'con'
} . 
               $_->[0]->{
'con'
};
      } else {
        

;
      }
    }

    for (@removed) {
      CORE::delete $_->{
'parent'
};
      $_->
_orphanate
;
    }

    $self->{
'child'
} = \@new;

    ## infoset:specified should turn on if normalization occured.
    ## Otherwise, infoset does not change so that no change required. 
  }
}

if ($self->{
'nt'
} eq 
'a'
) {
  for (values %{$self->{
'http://www.w3.org/2001/04/infoset#attribute'
}}) {
    for (values %$_) {
      $_->
_normalize_text
 ($fullyNormalize, 
1
);
    }
  }
}

## TODO: Normalization


;}
}
sub _destroy_node_stem ($) {
my ($self) = @_;

{


{


{

local $Error::Depth = $Error::Depth + 1;

{


    for 
my $key (keys %{$self->{
'ud'
}||{}}) {
      my $dha = $self->{
'ud'
}->{$key};
      if ($dha->[1]) {
        $dha->[1]->
handle

                     (
3
,
                      $key, $dha->[0], 
undef
, 
undef
);
      }
    }
  


;}


;}

;



;}

;


;}
}
use overload 
bool => sub () {1}, 
'==' => '_is_equal_node', 
fallback => 1;
$Message::DOM::ClassFeature{q<Message::DOM::Tree::ManakaiDOMNodeObjectNode>} = {};
$Message::DOM::ClassPoint{q<Message::DOM::Tree::ManakaiDOMNodeObjectNode>} = 0;
package Message::DOM::IFLatest::NodeList;
our $VERSION = 20051125.0633;
package Message::DOM::Tree::ManakaiDOMChildNodeList;
our $VERSION = 20051125.0633;
push our @ISA, 'Message::Util::ManakaiNode::ManakaiNodeRef', 'Message::DOM::DOMMain::ManakaiDOMObject', 'Tie::Array', 'Message::DOM::IF::NodeList', 'Message::DOM::IFLatest::NodeList', 'Message::DOM::IFLevel1::NodeList', 'Message::DOM::IFLevel2::NodeList', 'Message::DOM::IFLevel3::NodeList';
sub FETCH ($$) {
my ($self, $index) = @_;
my $r;

{


$r = $self->{
'node'
}->{
'child'
}->[$index];
if (defined $r) {
  $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($r);
}


;}
$r}
*item = \&FETCH;
sub STORE ($$$) {
my ($self, $index, $value) = @_;
my $r;

{

if 
(CORE::exists $self->{
'node'
}
                      ->{
'child'
}->[$index]) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
replace_child

           ($value, $self->
item
 ($index));
  


;}


;}

;
} else {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $self->
append_child
 ($value);
  


;}


;}

;
}


;}
$r}
sub DELETE ($$) {
my ($self, $index) = @_;
my $r;

{

if 
(CORE::exists $self->{
'node'
}
                      ->{
'child'
}->[$index]) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
remove_child

                ($self->
item
 ($index));
  


;}


;}

;
}


;}
$r}
sub FETCHSIZE ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


$r = @{$self->{
'node'
}->{
'child'
}};


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMChildNodeList', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'length';
}
}
*length = \&FETCHSIZE;
sub STORESIZE ($$) {
my ($self, $count) = @_;

{

my 
$len = @{$self->{
'node'
}->{
'child'
}};
if ($len < $count) {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$node = 
Message::DOM::Tree::ManakaiDOMNode->_get_core_node_reference

                     ($self->{
'node'
});
    for (my $i = $count - 1; $i >= $len; $i--) {
      my $cnode = 
Message::DOM::Tree::ManakaiDOMNode->_get_core_node_reference

                     ($self->{
'node'
}
                           ->{
'child'
}->[$i]);
      $node->
remove_child
 ($cnode);
    }
  


;}


;}

;
}


;}
}
sub EXISTS ($$) {
my ($self, $index) = @_;
my $r = 0;

{


$r = CORE::exists $self->{
'node'
}
                       ->{
'child'
}->[$index];


;}
$r}
sub _is_equal_node_list ($$) {
my ($self, $arg) = @_;
my $r = 0;

{

EQ: 
{
  last EQ unless @{$self->{
'node'
}
                        ->{
'child'
}} ==
                 $arg->
length
;
  my $nc = 
'Message::DOM::Tree::ManakaiDOMNode'
;
  for my $i (0..@{$self->{
'node'
}
                       ->{
'child'
}}) {
    my $a = $self->{
'node'
}
                            ->{
'child'
}->[$i];
    unless (
is_equal_node

               (
(bless {
  'node' => $a,
  'w' => 1,
}, $nc)
,
                $arg->
item
 ($i))) {
      last EQ;
    }
  }
  $r = 
1
;
}


;}
$r}
sub TIEARRAY ($$) {
my ($self, $nodeList) = @_;
my $r;

{


$r = $nodeList;


;}
$r}
sub PUSH ($$) {
my ($self, $value) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $self->
insert_before

                 ($value,
                  $self->
item
 (0));



;}


;}

;


;}
}
sub POP ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $self->
remove_child

           ($self->
item

              ($self->
length
 - 1));



;}


;}

;


;}
$r}
sub CLEAR ($) {
my ($self) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$length = $self->
length
 - 1;
  for (reverse $length..0) {
    $self->
remove_child

       ($self->
item
 ($_));
  }



;}


;}

;


;}
}
sub DESTROY ($) {
my ($self) = @_;

{

if 
(my $node = $self->{
'node'
}) {
  CORE::delete $self->{
'node'
};
  unless ($self->{
'w'
}) {
    $node->{
'rc'
}--;
    ${$node->{
'grc'
}}--;
    unless (
(${$node->{'grc'}} > 0)
) {
      $node->
_destroy
;
    }
  }
} else {
  warn ref ($self) . q{->DESTROY: there is no associated }.
       q{node object - you have a global variable or }.
       qq{potential memory-leak detected\n};
}


;}
}
sub ___report_error ($$) {
my ($self, $err) = @_;
my $r;

{

if 
($err->isa (
'Message::DOM::IF::DOMError'
)) {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    A: 
{
      my $doco = $self->{
'node'
}->{
'od'
};
      if (not defined $doco) {
        if ($self->{
'node'
}->{
'nt'
}
              eq 
'http://www.w3.org/2001/04/infoset#Document'
) {
          $doco = $self->{
'node'
};
        } else {  ## DocumentType node
          warn $err;
          last A;
        }
      }
      my $doc;
      

{


$doc = bless {
  
'node'
 => $doco,
  
'w'
 => 
1
,
}, 'Message::DOM::Tree::ManakaiDOMDocument';


;}

;
      my $cfg = $doc->
dom_config
;
      my $h = $cfg->
get_parameter

                       ('error-handler');
      $r = $h->
handle_error
 ($err);
    } # A
  


;}


;}

;
} else {
  $err->
throw
;
}


;}
$r}
use overload 
bool => sub () {1}, 
'==' => '_is_equal_node_list', 
'@{}' => sub ($) {
my ($self) = @_;
my $r = [];

{

tie 
my @list, ref $self, $self;
$r = \@list;


;}
$r}
, 
fallback => 1;
$Message::DOM::ClassFeature{q<Message::DOM::Tree::ManakaiDOMChildNodeList>} = {'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::Tree::ManakaiDOMChildNodeList>} = 6;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::Tree::ManakaiDOMChildNodeList>} = {};
package Message::DOM::Tree::ManakaiDOMGetElementsNodeList;
our $VERSION = 20051125.0633;
push our @ISA, 'Message::Util::ManakaiNode::ManakaiNodeRef', 'Message::DOM::DOMMain::ManakaiDOMObject', 'Tie::Array', 'Message::DOM::IF::NodeList', 'Message::DOM::IFLatest::NodeList', 'Message::DOM::IFLevel1::NodeList', 'Message::DOM::IFLevel2::NodeList', 'Message::DOM::IFLevel3::NodeList';
sub FETCH ($$) {
my ($self, $index) = @_;
my $r;

{


$r = $self->{
'node'
}
          ->
_get_element_by
 
              ($self->{
'http://suika.fam.cx/~wakaba/archive/2004/mdom-core#nodeMatch'
}, \$index);
if (defined $r) {
 $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($r, $self);
}


;}
$r}
*item = \&FETCH;
sub STORE ($$$) {
my ($self, $index, $value) = @_;
my $r;
report Message::DOM::IFLatest::DOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'STORE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOMOD_NODELIST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMGetElementsNodeList';
$r}
sub DELETE ($$) {
my ($self, $index) = @_;
my $r;
report Message::DOM::IFLatest::DOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'DELETE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOMOD_NODELIST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMGetElementsNodeList';
$r}
sub FETCHSIZE ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{

my 
$l = $self->{
'node'
}
             ->
_get_elements_by

                 ($self->{
'http://suika.fam.cx/~wakaba/archive/2004/mdom-core#nodeMatch'
});
$r = @$l;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMGetElementsNodeList', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'length';
}
}
*length = \&FETCHSIZE;
sub STORESIZE ($$) {
my ($self, $count) = @_;
report Message::DOM::IFLatest::DOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'STORESIZE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOMOD_NODELIST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMGetElementsNodeList';
}
sub EXISTS ($$) {
my ($self, $index) = @_;
my $r = 0;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
item

                   ($index) ? 1 : 0;



;}


;}

;


;}
$r}
sub TIEARRAY ($$) {
my ($self, $nodeList) = @_;
my $r;

{


$r = $nodeList;


;}
$r}
sub PUSH ($$) {
my ($self, $value) = @_;
report Message::DOM::IFLatest::DOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'PUSH', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOMOD_NODELIST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMGetElementsNodeList';
}
sub POP ($) {
my ($self) = @_;
my $r;
report Message::DOM::IFLatest::DOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'POP', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOMOD_NODELIST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMGetElementsNodeList';
$r}
sub CLEAR ($) {
my ($self) = @_;
report Message::DOM::IFLatest::DOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'CLEAR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOMOD_NODELIST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMGetElementsNodeList';
}
sub DESTROY ($) {
my ($self) = @_;

{

if 
(my $node = $self->{
'node'
}) {
  CORE::delete $self->{
'node'
};
  unless ($self->{
'w'
}) {
    $node->{
'rc'
}--;
    ${$node->{
'grc'
}}--;
    unless (
(${$node->{'grc'}} > 0)
) {
      $node->
_destroy
;
    }
  }
} else {
  warn ref ($self) . q{->DESTROY: there is no associated }.
       q{node object - you have a global variable or }.
       qq{potential memory-leak detected\n};
}


;}
}
sub ___report_error ($$) {
my ($self, $err) = @_;
my $r;

{

if 
($err->isa (
'Message::DOM::IF::DOMError'
)) {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    A: 
{
      my $doco = $self->{
'node'
}->{
'od'
};
      if (not defined $doco) {
        if ($self->{
'node'
}->{
'nt'
}
              eq 
'http://www.w3.org/2001/04/infoset#Document'
) {
          $doco = $self->{
'node'
};
        } else {  ## DocumentType node
          warn $err;
          last A;
        }
      }
      my $doc;
      

{


$doc = bless {
  
'node'
 => $doco,
  
'w'
 => 
1
,
}, 'Message::DOM::Tree::ManakaiDOMDocument';


;}

;
      my $cfg = $doc->
dom_config
;
      my $h = $cfg->
get_parameter

                       ('error-handler');
      $r = $h->
handle_error
 ($err);
    } # A
  


;}


;}

;
} else {
  $err->
throw
;
}


;}
$r}
use overload 
bool => sub () {1}, 
'@{}' => sub ($) {
my ($self) = @_;
my $r = [];

{

tie 
my @list, ref $self, $self;
$r = \@list;


;}
$r}
, 
fallback => 1;
$Message::DOM::ClassFeature{q<Message::DOM::Tree::ManakaiDOMGetElementsNodeList>} = {'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::Tree::ManakaiDOMGetElementsNodeList>} = 6;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::Tree::ManakaiDOMGetElementsNodeList>} = {};
package Message::DOM::Tree::ManakaiDOMEmptyNodeList;
our $VERSION = 20051125.0633;
push our @ISA, 'Message::DOM::DOMMain::ManakaiDOMObject', 'Message::DOM::IF::NodeList', 'Message::DOM::IFLatest::NodeList', 'Message::DOM::IFLevel1::NodeList', 'Message::DOM::IFLevel2::NodeList', 'Message::DOM::IFLevel3::NodeList';
sub FETCH ($$) {
my ($self, $index) = @_;
my $r;


$r}
*item = \&FETCH;
sub STORE ($$$) {
my ($self, $index, $value) = @_;
my $r;
report Message::DOM::IFLatest::DOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'STORE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOMOD_NODELIST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMEmptyNodeList';
$r}
sub DELETE ($$) {
my ($self, $index) = @_;
my $r;
report Message::DOM::IFLatest::DOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'DELETE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOMOD_NODELIST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMEmptyNodeList';
$r}
sub FETCHSIZE ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;


$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMEmptyNodeList', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'length';
}
}
*length = \&FETCHSIZE;
sub STORESIZE ($$) {
my ($self, $count) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'STORESIZE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMEmptyNodeList';
}
sub EXISTS ($$) {
my ($self, $index) = @_;
my $r = 0;


$r}
sub _is_equal_node_list ($$) {
my ($self, $arg) = @_;
my $r = 0;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_is_equal_node_list', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMEmptyNodeList';
$r}
sub PUSH ($$) {
my ($self, $value) = @_;
report Message::DOM::IFLatest::DOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'PUSH', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOMOD_NODELIST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMEmptyNodeList';
}
sub POP ($) {
my ($self) = @_;
my $r;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'POP', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMEmptyNodeList';
$r}
sub CLEAR ($) {
my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'CLEAR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMEmptyNodeList';
}
sub DESTROY ($) {
my ($self) = @_;

{

if 
(my $node = $self->{
'node'
}) {
  CORE::delete $self->{
'node'
};
  unless ($self->{
'w'
}) {
    $node->{
'rc'
}--;
    ${$node->{
'grc'
}}--;
    unless (
(${$node->{'grc'}} > 0)
) {
      $node->
_destroy
;
    }
  }
} else {
  warn ref ($self) . q{->DESTROY: there is no associated }.
       q{node object - you have a global variable or }.
       qq{potential memory-leak detected\n};
}


;}
}
sub new ($) {
my ($self) = @_;
my $r;

{


$r = bless [], $self;


;}
$r}
sub ___report_error ($$) {
my ($self, $err) = @_;
my $r;

{

if 
($err->isa (
'Message::DOM::IF::DOMError'
)) {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    A: 
{
      my $doco = $self->{
'node'
}->{
'od'
};
      if (not defined $doco) {
        if ($self->{
'node'
}->{
'nt'
}
              eq 
'http://www.w3.org/2001/04/infoset#Document'
) {
          $doco = $self->{
'node'
};
        } else {  ## DocumentType node
          warn $err;
          last A;
        }
      }
      my $doc;
      

{


$doc = bless {
  
'node'
 => $doco,
  
'w'
 => 
1
,
}, 'Message::DOM::Tree::ManakaiDOMDocument';


;}

;
      my $cfg = $doc->
dom_config
;
      my $h = $cfg->
get_parameter

                       ('error-handler');
      $r = $h->
handle_error
 ($err);
    } # A
  


;}


;}

;
} else {
  $err->
throw
;
}


;}
$r}
use overload 
bool => sub () {1}, 
'==' => '_is_equal_node_list', 
'@{}' => sub ($) {
my ($self) = @_;
my $r = [];


$r}
, 
fallback => 1;
$Message::DOM::ClassFeature{q<Message::DOM::Tree::ManakaiDOMEmptyNodeList>} = {'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::Tree::ManakaiDOMEmptyNodeList>} = 6;
package Message::DOM::IFLatest::NamedNodeMap;
our $VERSION = 20051125.0633;
package Message::DOM::Tree::ManakaiDOMAttributes;
our $VERSION = 20051125.0633;
push our @ISA, 'Message::Util::ManakaiNode::ManakaiNodeRef', 'Message::DOM::DOMMain::ManakaiDOMObject', 'Message::DOM::IF::NamedNodeMap', 'Message::DOM::IFLatest::NamedNodeMap', 'Message::DOM::IFLevel1::NamedNodeMap', 'Message::DOM::IFLevel2::NamedNodeMap', 'Message::DOM::IFLevel3::NamedNodeMap';
sub get_named_item ($$) {
my ($self, $name) = @_;
my $r;

{

my 
$obj;


{

my 
$attr = $self->{
'node'
}->{
'attr'
};
if ($attr->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{$name}) {
  $obj = $attr->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{$name};
  

;
} elsif ($name eq 'xmlns') {
  for my $a (keys %{$attr->{
'http://www.w3.org/2000/xmlns/'
}||{}}) {
    if ($attr->{
'http://www.w3.org/2000/xmlns/'
}->{$a}->{
'ln'
}) {
      $obj = $attr->{
'http://www.w3.org/2000/xmlns/'
}->{$a};
      

;
      last;
   }
  }
} elsif ($name eq 'xmlns:xmlns') {
  # 
} else {
  for my $ns (keys %$attr) {
    if ($ns eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
) {
      # 
    } else {
      for my $a (keys %{$attr->{$ns}||{}}) {
        if (defined $attr->{$ns}->{$a}->{
'pfx'
} and
            $attr->{$ns}->{$a}->{
'pfx'
}.':'.
            $attr->{$ns}->{$a}->{
'ln'
} eq $name) {
          $obj = $attr->{$ns}->{$a};
          

;
          last;
        } elsif (not defined $attr->{$ns}->{$a}
                                  ->{
'pfx'
} and
             $attr->{$ns}->{$a}->{
'ln'
} eq $name) {
          $obj = $attr->{$ns}->{$a};
          

;
          last;
        }
      }
    }
  }
}


;}

;
if ($obj) {
  $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($obj);
}


;}
$r}
sub set_named_item ($$) {
my ($self, $arg) = @_;
my $r;

{


## NOTE: Method name is directly written
goto &{
Message::DOM::Tree::ManakaiDOMElement
->can ('set_attribute_node')};


;}
$r}
sub remove_named_item ($$) {
my ($self, $name) = @_;
my $r;

{

if 
($self->{
'node'
}->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'remove_named_item', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttributes';

;
}
my $obj;


{

my 
$attr = $self->{
'node'
}->{
'attr'
};
if ($attr->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{$name}) {
  $obj = $attr->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{$name};
  

{

CORE::delete 
$attr->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{$name};
  


;}

;
} elsif ($name eq 'xmlns') {
  for my $a (keys %{$attr->{
'http://www.w3.org/2000/xmlns/'
}||{}}) {
    if ($attr->{
'http://www.w3.org/2000/xmlns/'
}->{$a}->{
'ln'
}) {
      $obj = $attr->{
'http://www.w3.org/2000/xmlns/'
}->{$a};
      

{

CORE::delete 
$attr->{
'http://www.w3.org/2000/xmlns/'
}->{$a};
      


;}

;
      last;
   }
  }
} elsif ($name eq 'xmlns:xmlns') {
  # 
} else {
  for my $ns (keys %$attr) {
    if ($ns eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
) {
      # 
    } else {
      for my $a (keys %{$attr->{$ns}||{}}) {
        if (defined $attr->{$ns}->{$a}->{
'pfx'
} and
            $attr->{$ns}->{$a}->{
'pfx'
}.':'.
            $attr->{$ns}->{$a}->{
'ln'
} eq $name) {
          $obj = $attr->{$ns}->{$a};
          

{

CORE::delete 
$attr->{$ns}->{$a};
          


;}

;
          last;
        } elsif (not defined $attr->{$ns}->{$a}
                                  ->{
'pfx'
} and
             $attr->{$ns}->{$a}->{
'ln'
} eq $name) {
          $obj = $attr->{$ns}->{$a};
          

{

CORE::delete 
$attr->{$ns}->{$a};
          


;}

;
          last;
        }
      }
    }
  }
}


;}

;
if ($obj) {
  $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($obj)
    if defined wantarray;
  CORE::delete $obj->{
'owner'
};
  $obj->
_orphanate
;
} else {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'remove_named_item', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttributes';

;
}


;}
$r}
sub item ($$) {
my ($self, $index) = @_;
my $r;

{

my 
$i = 0;
FIND: for my $ns (sort keys %{$self->{
'node'
}
                                   ->{
'attr'
}}) {
  for my $ln (sort keys %{$self->{
'node'
}
                               ->{
'attr'
}->{$ns}}) {
    if ($i++ == $index) {
      $r = $self->{
'node'
}->{
'attr'
}
                ->{$ns}->{$ln};
      last FIND;
    }
  }
}
if ($r) {
  $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($r);
}


;}
$r}
sub length ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{

for 
(values %{$self->{
'node'
}
                   ->{
'attr'
}}) {
  $r += keys %$_;
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttributes', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'length';
}
}
sub get_named_item_ns ($$$) {
my ($self, $namespaceURI, $localName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r;

{

my 
$obj;


{

my 
$__attr = $self->{
'node'
}->{
'attr'
};
my $__nsuri = defined $namespaceURI ? \$namespaceURI : \
'http://suika.fam.cx/~wakaba/-temp/2003/09/27/null'
;
$obj = $__attr->{$$__nsuri}->{$localName};


;


;}

;
if ($obj) {
  $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($obj);
}


;}
$r}
sub set_named_item_ns ($$) {
my ($self, $arg) = @_;
my $r;

{

if 
($self->{
'node'
}->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_named_item_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttributes';

;
}
my $attrNode = $arg->{
'node'
};
if ($attrNode->{
'od'
}
                  ->{
'nid'
} ne
         $self->{
'node'
}->{
'od'
}
              ->{
'nid'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_named_item_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttributes';

;
} elsif ($attrNode->{
'nt'
} ne
         
'a'
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_named_item_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttributes', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'arg', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#nodeType' => $attrNode->{'nt'};

;
}

if (defined $attrNode->{
'ln'
}) {
  $r = $self->{
'node'
}->{
'attr'
}
         ->{defined $attrNode->{
'ns'
}
                  ? ${$attrNode->{
'ns'
}}
                  : 
'http://suika.fam.cx/~wakaba/-temp/2003/09/27/null'
}
         ->{$attrNode->{
'ln'
}};
} else {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_named_item_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NODE_NOSUPPORT_XMLNS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttributes', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'arg';

;
}

if ($attrNode->{
'owner'
}) {
  if ($r->{
'nid'
} eq $attrNode->{
'nid'
}) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#replace-by-itself', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_named_item_ns', 'rdata' => $arg, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttributes';

;
    $r = $arg;
  } else {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INUSE_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_named_item_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttributes', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'arg';

;
  }
} else {
  $attrNode->{
'owner'
} = $self->{
'node'
};
  if (defined $attrNode->{
'ln'
}) {
    $self->{
'node'
}->{
'attr'
}
         ->{defined $attrNode->{
'ns'
}
                  ? ${$attrNode->{
'ns'
}}
                  : 
'http://suika.fam.cx/~wakaba/-temp/2003/09/27/null'
}
         ->{$attrNode->{
'ln'
}} = $attrNode;
  } else {
    $self->{
'node'
}->{
'attr'
}
         ->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}
         ->{$attrNode->{
'xnm'
}} = $attrNode;
  }
  if ($r) {
    my $obj = $r;
    $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($obj)
      if defined wantarray;
    CORE::delete $obj->{
'parent'
};
    $obj->
_orphanate
;
  }
}


;}
$r}
sub remove_named_item_ns ($$$) {
my ($self, $namespaceURI, $localName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r;

{

if 
($self->{
'node'
}->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'remove_named_item_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttributes';

;
}


{

my 
$__attr = $self->{
'node'
}->{
'attr'
};
my $__nsuri = defined $namespaceURI ? \$namespaceURI : \
'http://suika.fam.cx/~wakaba/-temp/2003/09/27/null'
;
$r = $__attr->{$$__nsuri}->{$localName};


{

CORE::delete 
$__attr->{$$__nsuri}->{$localName} if $r;



;}

;


;}

;
if ($r) {
  my $obj = $r;
  $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($obj)
      if defined wantarray;
  CORE::delete $obj->{
'owner'
};
  $obj->
_orphanate
;
} else {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'remove_named_item_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttributes';

;
}


;}
$r}
sub _is_equal_named_node_map ($$) {
my ($self, $arg) = @_;
my $r = 0;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  EQ: 
{
    last EQ unless $self->
length

                 != $arg->
length
;
    my $attr = $self->{
'node'
}->{
'attr'
};
    my $nc = 
'Message::DOM::Tree::ManakaiDOMNode'
;
    for (keys %{$attr->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}}) {
      my $a = $attr->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{$_};
      unless (
is_equal_node

                 (
(bless {
  'node' => $a,
  'w' => 1,
}, $nc)
,
                  $arg->
get_named_item
 ($_))) {
        last EQ;
      }
    }
    for (keys %{$attr->{
'http://suika.fam.cx/~wakaba/-temp/2003/09/27/null'
}}) {
      my $a = $attr->{
'http://suika.fam.cx/~wakaba/-temp/2003/09/27/null'
}->{$_};
      unless (
is_equal_node

                 (
(bless {
  'node' => $a,
  'w' => 1,
}, $nc)
,
                  $arg->
get_named_item_ns
 (
undef
, $_))) {
        last EQ;
      }
    }
    for my $ns (grep {$_ ne 
'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#null' and 
$_ ne 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}
                keys %{$attr}) {
      for (keys %{$attr->{$ns}}) {
        my $a = $attr->{$ns}->{$_};
        unless (
is_equal_node

                   (
(bless {
  'node' => $a,
  'w' => 1,
}, $nc)
,
                    $arg->
get_named_item_ns
 ($ns, $_))) {
          last EQ;
        }
      }
    }
    $r = 
1
;
  }



;}


;}

;


;}
$r}
sub ___report_error ($$) {
my ($self, $err) = @_;
my $r;

{

if 
($err->isa (
'Message::DOM::IF::DOMError'
)) {
  

{

local $Error::Depth = $Error::Depth + 1;

{


      my 
$doc;
      

{


$doc = bless {
  
'node'
 => $self->{'node'}
                         ->{'od'},
  
'w'
 => 
1
,
}, 'Message::DOM::Tree::ManakaiDOMDocument';


;}

;
      my $cfg = $doc->
dom_config
;
      my $h = $cfg->
get_parameter

                       ('error-handler');
      $r = $h->
handle_error
 ($err);
  


;}


;}

;
} else {
  $err->
throw
;
}


;}
$r}
use overload 
bool => sub () {1}, 
'==' => '_is_equal_named_node_map', 
fallback => 1;
$Message::DOM::ClassFeature{q<Message::DOM::Tree::ManakaiDOMAttributes>} = {'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::Tree::ManakaiDOMAttributes>} = 6;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::Tree::ManakaiDOMAttributes>} = {};
package Message::DOM::Tree::ManakaiDOMEntities;
our $VERSION = 20051125.0633;
push our @ISA, 'Message::Util::ManakaiNode::ManakaiNodeRef', 'Message::DOM::DOMMain::ManakaiDOMObject', 'Message::DOM::IF::NamedNodeMap', 'Message::DOM::IFLatest::NamedNodeMap', 'Message::DOM::IFLevel1::NamedNodeMap', 'Message::DOM::IFLevel2::NamedNodeMap', 'Message::DOM::IFLevel3::NamedNodeMap';
sub get_named_item ($$) {
my ($self, $name) = @_;
my $r;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'get_named_item', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMEntities';
$r}
sub set_named_item ($$) {
my ($self, $arg) = @_;
my $r;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_named_item', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMEntities';
$r}
sub remove_named_item ($$) {
my ($self, $name) = @_;
my $r;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'remove_named_item', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMEntities';
$r}
sub item ($$) {
my ($self, $index) = @_;
my $r;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'item', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMEntities';
$r}
sub length ($;$) {
if (@_ == 1) {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_ATTR_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMEntities', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'length';
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMEntities', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'length';
}
}
sub get_named_item_ns ($$$) {
my ($self, $namespaceURI, $localName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'get_named_item_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMEntities';
$r}
sub set_named_item_ns ($$) {
my ($self, $arg) = @_;
my $r;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_named_item_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMEntities';
$r}
sub remove_named_item_ns ($$$) {
my ($self, $namespaceURI, $localName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'remove_named_item_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMEntities';
$r}
sub _is_equal_named_node_map ($$) {
my ($self, $arg) = @_;
my $r = 0;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_is_equal_named_node_map', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMEntities';
$r}
use overload 
bool => sub () {1}, 
'==' => '_is_equal_named_node_map', 
fallback => 1;
$Message::DOM::ClassFeature{q<Message::DOM::Tree::ManakaiDOMEntities>} = {'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::Tree::ManakaiDOMEntities>} = 12;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::Tree::ManakaiDOMEntities>} = {};
package Message::DOM::Tree::ManakaiDOMNotations;
our $VERSION = 20051125.0633;
push our @ISA, 'Message::Util::ManakaiNode::ManakaiNodeRef', 'Message::DOM::DOMMain::ManakaiDOMObject', 'Message::DOM::IF::NamedNodeMap', 'Message::DOM::IFLatest::NamedNodeMap', 'Message::DOM::IFLevel1::NamedNodeMap', 'Message::DOM::IFLevel2::NamedNodeMap', 'Message::DOM::IFLevel3::NamedNodeMap';
sub get_named_item ($$) {
my ($self, $name) = @_;
my $r;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'get_named_item', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNotations';
$r}
sub set_named_item ($$) {
my ($self, $arg) = @_;
my $r;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_named_item', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNotations';
$r}
sub remove_named_item ($$) {
my ($self, $name) = @_;
my $r;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'remove_named_item', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNotations';
$r}
sub item ($$) {
my ($self, $index) = @_;
my $r;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'item', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNotations';
$r}
sub length ($;$) {
if (@_ == 1) {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_ATTR_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNotations', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'length';
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNotations', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'length';
}
}
sub get_named_item_ns ($$$) {
my ($self, $namespaceURI, $localName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'get_named_item_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNotations';
$r}
sub set_named_item_ns ($$) {
my ($self, $arg) = @_;
my $r;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_named_item_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNotations';
$r}
sub remove_named_item_ns ($$$) {
my ($self, $namespaceURI, $localName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'remove_named_item_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNotations';
$r}
sub _is_equal_named_node_map ($$) {
my ($self, $arg) = @_;
my $r = 0;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_is_equal_named_node_map', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNotations';
$r}
use overload 
bool => sub () {1}, 
'==' => '_is_equal_named_node_map', 
fallback => 1;
$Message::DOM::ClassFeature{q<Message::DOM::Tree::ManakaiDOMNotations>} = {'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::Tree::ManakaiDOMNotations>} = 12;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::Tree::ManakaiDOMNotations>} = {};
package Message::DOM::IFLatest::CharacterData;
our $VERSION = 20051125.0633;
package Message::DOM::Tree::ManakaiDOMCharacterData;
our $VERSION = 20051125.0633;
push our @ISA, 'Message::DOM::Tree::ManakaiDOMNode', 'Message::DOM::IF::CharacterData', 'Message::DOM::IF::Node', 'Message::DOM::IFLatest::CharacterData', 'Message::DOM::IFLatest::Node', 'Message::DOM::IFLevel1::CharacterData', 'Message::DOM::IFLevel1::Node', 'Message::DOM::IFLevel2::CharacterData', 'Message::DOM::IFLevel2::Node', 'Message::DOM::IFLevel3::CharacterData', 'Message::DOM::IFLevel3::Node';
sub data ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'con'};
$r;
} else {my ($self, $given) = @_;
$self->{'node'}->{'con'} = $given;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'data';
}
}
}
sub length ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


$r = CORE::length $self->{
'node'
}->{
'con'
};
$r++ while $self->{
'node'
}->{
'con'
}
             =~ /[\x{10000}-\x{10FFFF}]/g;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'length';
}
}
sub substring_data ($$$) {
my ($self, $offset, $count) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$offset32 = 
Message::DOM::DOMMain::ManakaiDOMStringExtend->find_offset_32

                    ($offset);
  my $coffset32 = 
Message::DOM::DOMMain::ManakaiDOMStringExtend->find_offset_32

                    ($offset + $count);
  $r = substr ($self->{
'node'
}->{
'con'
},
               $offset32, $coffset32 - $offset32);



;}


;}

;


;}
$r}
sub append_data ($$) {
my ($self, $arg) = @_;

{

my 
$node = $self->{
'node'
};
if ($node->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_data', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMCharacterData';

;
}
$node->{
'con'
} .= $arg;


;}
}
sub insert_data ($$$) {
my ($self, $offset, $arg) = @_;

{

if 
($self->{
'node'
}->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_data', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMCharacterData';

;
}


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$offset32 = 
Message::DOM::DOMMain::ManakaiDOMStringExtend->find_offset_32

                    ($offset);
  substr ($self->{
'node'
}->{
'con'
},
          $offset32, 0) = $arg;



;}


;}

;


;}
}
sub delete_data ($$$) {
my ($self, $offset, $count) = @_;

{

if 
($self->{
'node'
}->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'delete_data', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMCharacterData';

;
}


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$offset32 = 
Message::DOM::DOMMain::ManakaiDOMStringExtend->find_offset_32

                    ($offset);
  substr ($self->{
'node'
}->{
'con'
}, $offset32, 0)
    = '';



;}


;}

;


;}
}
sub replace_data ($$$$) {
my ($self, $offset, $count, $arg) = @_;

{

if 
($self->{
'node'
}->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_data', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMCharacterData';

;
}


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$offset32 = 
Message::DOM::DOMMain::ManakaiDOMStringExtend->find_offset_32

                    ($offset);
  my $coffset32 = 
Message::DOM::DOMMain::ManakaiDOMStringExtend->find_offset_32

                    ($offset + $count);
  substr ($self->{
'node'
}->{
'con'
},
          $offset32, $coffset32 - $offset32) = $arg;



;}


;}

;


;}
}
sub node_value ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'con'};
$r;
} else {my ($self, $given) = @_;
$self->{'node'}->{'con'} = $given;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'data';
}
}
}
sub text_content ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'con'};
$r;
} else {my ($self, $given) = @_;
$self->{'node'}->{'con'} = $given;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'data';
}
}
}
sub child_nodes ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMEmptyNodeList
->new;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'child_nodes';
}
}
$Message::DOM::ClassFeature{q<Message::DOM::Tree::ManakaiDOMCharacterData>} = {'', {'', '1'}, 'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xmlversion', {'', '1', '1.0', '1', '1.1', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::Tree::ManakaiDOMCharacterData>} = 22.2;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::Tree::ManakaiDOMCharacterData>} = {};
package Message::DOM::IFLatest::Attr;
our $VERSION = 20051125.0633;
package Message::DOM::Tree::ManakaiDOMAttr;
our $VERSION = 20051125.0633;
push our @ISA, 'Message::DOM::Tree::ManakaiDOMNode', 'Message::DOM::IF::Attr', 'Message::DOM::IF::Node', 'Message::DOM::IFLatest::Attr', 'Message::DOM::IFLatest::Node', 'Message::DOM::IFLevel1::Attr', 'Message::DOM::IFLevel1::Node', 'Message::DOM::IFLevel2::Attr', 'Message::DOM::IFLevel2::Node', 'Message::DOM::IFLevel3::Attr', 'Message::DOM::IFLevel3::Node';
use Char::Class::XML 'InXMLNameChar10', 'InXMLNameChar11', 'InXMLNameStartChar11', 'InXML_NameStartChar10';
sub name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$node = $self->{
'node'
};
if (defined $node->{
'ln'
}) {
  $r = (defined $node->{
'pfx'
} ?
       $node->{
'pfx'
} . ':' : '') . 
       $node->{
'ln'
};
} else {
  $r = $node->{
'xnm'
};
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'name';
}
}
sub specified ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = $self->{'node'}->{'specified'};
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'specified';
}
}
sub value ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

my 
$__nodeobj = $self->{
'node'
};
if ({
       
'e'
 => 
1
,
       
'a'
 => 
1
,
       
'ge'
 => 
1
,
       
'r'
 => 
1
,
       
'f'
 => 
1
,
}->{$__nodeobj->{
'nt'
}}) {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    for 
my $__cno (@{$self->{
'node'
}
                          ->{
'child'
}}) {
      if ($__cno->{
'nt'
} eq 
'x'
) {
        $r .= $__cno->{
'con'
}
          unless $__cno->{
'ecws'
};
      } elsif (not {
            
'c'
 => 
1
,
            
'p'
 => 
1
,
      }->{$__cno->{
'nt'
}}) {
        my $__cn;
        

{


$__cn = bless {
  
'node'
 => $__cno,
  
'w'
 => 
1
,
}, {
            'e' => 'Message::DOM::Tree::ManakaiDOMElement',
            'cs' =>
                        'Message::DOM::DOMXML::ManakaiDOMCDATASection',
            'r' =>
                     'Message::DOM::DOMXML::ManakaiDOMEntityReference',
          }->{$__cno->{'nt'}} ||
          'Message::DOM::Tree::ManakaiDOMNode';


;}

;
        

{


$r .= $__cn->
text_content
;
        


;}

;
        

;
      }
    }
  


;}


;}

;
} elsif ({
    
'x'
 => 
1
,
    
'cs'
 => 
1
,
    
'c'
 => 
1
,
    
'p'
 => 
1
,
}->{$__nodeobj->{
'nt'
}}) {
  $r = $__nodeobj->{
'con'
};
} else {
  ## TODO: Namespace node not supported yet
  

;
  $r = 
undef
;
}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

my 
$__node = $self->{
'node'
};
if ($__node->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core%23setNodeTextContent+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}
my @__oldChild = @{$__node->{
'child'
}};
for my $__oc (@__oldChild) {
  CORE::delete $__oc->{
'parent'
};
}
$__node->{
'child'
} = [];
my $__textNode = 
Message::DOM::Tree::ManakaiDOMText->_new_object
 ($__node);


{


$__textNode->{'od'} = $__node->{'od'};
if (${$__textNode->{
'tid'
}} ne ${$__node->{'od'}->{
'tid'
}}) {
  $__node->{'od'}->{
'rc'
}++;
  ${$__node->{'od'}->{
'grc'
}}++;
}


;}

;
$__textNode->{
'con'
} = $given;
$__textNode->{
'parent'
} = $__node;
$__node->{
'child'
} = [$__textNode];
for my $__oc (@__oldChild) {
  $__oc->
_orphanate
;
}


;}

;


;}
}
}
sub owner_element ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = $self->{'node'}->{'owner'};
if (defined $r) {$r = Message::DOM::Tree::ManakaiDOMNode->_get_node_reference ($r);
}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'owner_element';
}
}
sub schema_type_info ($;$) {
if (@_ == 1) {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_ATTR_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'schema_type_info';
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'schema_type_info';
}
}
sub is_id ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


$r = $self->{
'node'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#userDeterminedId'
};


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'is_id';
}
}
sub local_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'ln'};
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'local_name';
}
}
sub lookup_prefix ($;$) {
my ($self, $namespaceURI) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r = '';

{

if 
(not defined $namespaceURI) {
  $r = 
undef
;
} else {
  my $n = $self->{
'node'
};
  if ($n->{
'owner'
}) {
    $r = $n->{
'owner'
}
           ->
_lookup_namespace_prefix

                    ($namespaceURI, $n->{
'owner'
});
  } else {
    $r = 
undef
;
  }
}


;}
$r}
sub namespace_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = defined $self->{
'node'
}->{
'ns'
}
   ? $self->{
'node'
}->{
'ns'
} : 
undef
;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'namespace_uri';
}
}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$node = $self->{
'node'
};
if (defined $node->{
'ln'
}) {
  $r = (defined $node->{
'pfx'
} ?
       $node->{
'pfx'
} . ':' : '') . 
       $node->{
'ln'
};
} else {
  $r = $node->{
'xnm'
};
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 2;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub node_value ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

my 
$__nodeobj = $self->{
'node'
};
if ({
       
'e'
 => 
1
,
       
'a'
 => 
1
,
       
'ge'
 => 
1
,
       
'r'
 => 
1
,
       
'f'
 => 
1
,
}->{$__nodeobj->{
'nt'
}}) {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    for 
my $__cno (@{$self->{
'node'
}
                          ->{
'child'
}}) {
      if ($__cno->{
'nt'
} eq 
'x'
) {
        $r .= $__cno->{
'con'
}
          unless $__cno->{
'ecws'
};
      } elsif (not {
            
'c'
 => 
1
,
            
'p'
 => 
1
,
      }->{$__cno->{
'nt'
}}) {
        my $__cn;
        

{


$__cn = bless {
  
'node'
 => $__cno,
  
'w'
 => 
1
,
}, {
            'e' => 'Message::DOM::Tree::ManakaiDOMElement',
            'cs' =>
                        'Message::DOM::DOMXML::ManakaiDOMCDATASection',
            'r' =>
                     'Message::DOM::DOMXML::ManakaiDOMEntityReference',
          }->{$__cno->{'nt'}} ||
          'Message::DOM::Tree::ManakaiDOMNode';


;}

;
        

{


$r .= $__cn->
text_content
;
        


;}

;
        

;
      }
    }
  


;}


;}

;
} elsif ({
    
'x'
 => 
1
,
    
'cs'
 => 
1
,
    
'c'
 => 
1
,
    
'p'
 => 
1
,
}->{$__nodeobj->{
'nt'
}}) {
  $r = $__nodeobj->{
'con'
};
} else {
  ## TODO: Namespace node not supported yet
  

;
  $r = 
undef
;
}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

my 
$__node = $self->{
'node'
};
if ($__node->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core%23setNodeTextContent+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}
my @__oldChild = @{$__node->{
'child'
}};
for my $__oc (@__oldChild) {
  CORE::delete $__oc->{
'parent'
};
}
$__node->{
'child'
} = [];
my $__textNode = 
Message::DOM::Tree::ManakaiDOMText->_new_object
 ($__node);


{


$__textNode->{'od'} = $__node->{'od'};
if (${$__textNode->{
'tid'
}} ne ${$__node->{'od'}->{
'tid'
}}) {
  $__node->{'od'}->{
'rc'
}++;
  ${$__node->{'od'}->{
'grc'
}}++;
}


;}

;
$__textNode->{
'con'
} = $given;
$__textNode->{
'parent'
} = $__node;
$__node->{
'child'
} = [$__textNode];
for my $__oc (@__oldChild) {
  $__oc->
_orphanate
;
}


;}

;


;}
}
}
sub prefix ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'pfx'};
$r;
} else {my ($self, $given) = @_;

{

my 
$node = $self->{
'node'
};
my $docnode = $node->{
'od'
};
my $version = 
($docnode->{'hf'}->{XML}
     ? CORE::defined $docnode->{'http://www.w3.org/2001/04/infoset#version'}
           ? $docnode->{'http://www.w3.org/2001/04/infoset#version'}
           : '1.0'
     : undef)
;
if (not defined $version) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#setting-prefix-no-effect-because-of-document', 'rdata' => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
} elsif (not defined $node->{
'ln'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#setting-prefix-no-effect-because-of-node', 'rdata' => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
} elsif ($node->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
} elsif (not defined $node->{
'pfx'
} and
         $node->{
'ln'
} and
         $node->{
'ln'
} eq 'xmlns') {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_QNAME_IS_XMLNS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
} else {
  

{


{

if 
(defined $given and $given eq '') {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-prefix', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureNamespacePrefix+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  }



;}

;
if (defined $given) {
  

{

if 
(($version eq '1.0' and
         not 
($given =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        ($version eq '1.1' and
         not 
($given =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $given, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureNamespacePrefix+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    } elsif (index ($given, ':') > -1) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#name' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_BAD_NCNAME', 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureNamespacePrefix+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
  


;}

;
  

;
}


;}

;
  my $nsURI = $node->{
'ns'
};
  if (not defined $given) {
    if (defined $nsURI) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $$nsURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_NOPREFIX_WITH_NON_NULL_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#qualifiedName' => $node->{'ln'};

;
    }
  } else {  ## Non-n u l l prefix
    if (not defined $nsURI) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://www.w3.org/2001/04/infoset#prefix' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_PREFIX_WITH_NULL_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
    } elsif ($given eq 'xml' and $$nsURI ne 
'http://www.w3.org/XML/1998/namespace'
) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $$nsURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://www.w3.org/2001/04/infoset#prefix' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XML_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
    } elsif ($given eq 'xmlns' and $$nsURI ne 
'http://www.w3.org/2000/xmlns/'
) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $$nsURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://www.w3.org/2001/04/infoset#prefix' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XMLNS_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
    } elsif ($$nsURI eq 
'http://www.w3.org/XML/1998/namespace' and 
$given ne 'xml') {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $$nsURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://www.w3.org/2001/04/infoset#prefix' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XML_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
    } elsif ($$nsURI eq 
'http://www.w3.org/2000/xmlns/' and 
$given ne 'xmlns') {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $$nsURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://www.w3.org/2001/04/infoset#prefix' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XMLNS_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
    }
  }
  $node->{
'pfx'
} = $given;
}


;}
}
}
sub _new_object ($;$) {
my ($self, $refNode) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMNode->_new_object
 ($self, $refNode);
$r->{
'child'
} = [];
$r->{
'nt'
} = 
'a'
;


;}
$r}
sub get_feature ($$;$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


;}

{


$version = '' unless defined $version;


;}
my $r;

{


$feature =~ s/^\+//;
if ($Message::DOM::ClassFeature{ref $self}->{$feature}->{$version}) {
  ## This class
  $r = $self;
} else {
  ## Attribute name dependent classes
    ## TODO:
  ## Attribute name independent classes
  CLASS: for my $class (grep {
    $Message::DOM::ManakaiDOMAttr::CompatClass{$_}
  } keys %Message::DOM::ManakaiDOMAttr::CompatClass) {
    if ($Message::DOM::ClassFeature{$class}
                ->{$feature}->{$version}) {
      

{


$self->{'node'}->{
'rc'
}++;
${$self->{'node'}->{
'grc'
}}++;
$r = bless {
  
'node'
 => $self->{'node'},
}, $class;


;}

;
      last CLASS;
    }
  }
}


;}
$r}
$Message::DOM::ClassFeature{q<Message::DOM::Tree::ManakaiDOMAttr>} = {'', {'', '1'}, 'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xmlversion', {'', '1', '1.0', '1', '1.1', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::Tree::ManakaiDOMAttr>} = 22.2;
$Message::DOM::ManakaiDOMAttr::CompatClass{q<Message::DOM::Tree::ManakaiDOMAttr>} = 1;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::Tree::ManakaiDOMAttr>} = {'o', ['owner'], 's', ['child'], 'x', ['od']};
package Message::DOM::IFLatest::Element;
our $VERSION = 20051125.0633;
package Message::DOM::Tree::ManakaiDOMElement;
our $VERSION = 20051125.0633;
push our @ISA, 'Message::DOM::Tree::ManakaiDOMNode', 'Message::DOM::IF::Element', 'Message::DOM::IF::Node', 'Message::DOM::IFLatest::Element', 'Message::DOM::IFLatest::Node', 'Message::DOM::IFLevel1::Element', 'Message::DOM::IFLevel1::Node', 'Message::DOM::IFLevel2::Element', 'Message::DOM::IFLevel2::Node', 'Message::DOM::IFLevel3::Element', 'Message::DOM::IFLevel3::Node';
use Char::Class::XML 'InXMLNCNameChar10', 'InXMLNCNameChar11', 'InXMLNCNameStartChar11', 'InXMLNameChar10', 'InXMLNameChar11', 'InXMLNameStartChar11', 'InXML_NCNameStartChar10', 'InXML_NameStartChar10';
sub tag_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$node = $self->{
'node'
};
if (defined $node->{
'ln'
}) {
  $r = (defined $node->{
'pfx'
} ?
       $node->{
'pfx'
} . ':' : '') . 
       $node->{
'ln'
};
} else {
  $r = $node->{
'xnm'
};
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'tag_name';
}
}
sub get_attribute ($$) {
my ($self, $name) = @_;
my $r = '';

{


{

my 
$attr = $self->{
'node'
}->{
'attr'
};
if ($attr->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{$name}) {
  $r = $attr->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{$name};
  

;
} elsif ($name eq 'xmlns') {
  for my $a (keys %{$attr->{
'http://www.w3.org/2000/xmlns/'
}||{}}) {
    if ($attr->{
'http://www.w3.org/2000/xmlns/'
}->{$a}->{
'ln'
}) {
      $r = $attr->{
'http://www.w3.org/2000/xmlns/'
}->{$a};
      

;
      last;
   }
  }
} elsif ($name eq 'xmlns:xmlns') {
  # 
} else {
  for my $ns (keys %$attr) {
    if ($ns eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
) {
      # 
    } else {
      for my $a (keys %{$attr->{$ns}||{}}) {
        if (defined $attr->{$ns}->{$a}->{
'pfx'
} and
            $attr->{$ns}->{$a}->{
'pfx'
}.':'.
            $attr->{$ns}->{$a}->{
'ln'
} eq $name) {
          $r = $attr->{$ns}->{$a};
          

;
          last;
        } elsif (not defined $attr->{$ns}->{$a}
                                  ->{
'pfx'
} and
             $attr->{$ns}->{$a}->{
'ln'
} eq $name) {
          $r = $attr->{$ns}->{$a};
          

;
          last;
        }
      }
    }
  }
}


;}

;
if ($r) {
  

{


$r = bless {
  
'node'
 => $r,
  
'w'
 => 
1
,
}, 'Message::DOM::Tree::ManakaiDOMAttr';


;}

;
  $r = $r->
text_content
;
} else {
  $r = '';
}


;}
$r}
sub set_attribute ($$;$) {
my ($self, $name, $value) = @_;

{

if 
($self->{
'node'
}->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
}
my $r;


{

my 
$attr = $self->{
'node'
}->{
'attr'
};
if ($attr->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{$name}) {
  $r = $attr->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{$name};
  

;
} elsif ($name eq 'xmlns') {
  for my $a (keys %{$attr->{
'http://www.w3.org/2000/xmlns/'
}||{}}) {
    if ($attr->{
'http://www.w3.org/2000/xmlns/'
}->{$a}->{
'ln'
}) {
      $r = $attr->{
'http://www.w3.org/2000/xmlns/'
}->{$a};
      

;
      last;
   }
  }
} elsif ($name eq 'xmlns:xmlns') {
  # 
} else {
  for my $ns (keys %$attr) {
    if ($ns eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
) {
      # 
    } else {
      for my $a (keys %{$attr->{$ns}||{}}) {
        if (defined $attr->{$ns}->{$a}->{
'pfx'
} and
            $attr->{$ns}->{$a}->{
'pfx'
}.':'.
            $attr->{$ns}->{$a}->{
'ln'
} eq $name) {
          $r = $attr->{$ns}->{$a};
          

;
          last;
        } elsif (not defined $attr->{$ns}->{$a}
                                  ->{
'pfx'
} and
             $attr->{$ns}->{$a}->{
'ln'
} eq $name) {
          $r = $attr->{$ns}->{$a};
          

;
          last;
        }
      }
    }
  }
}


;}

;
my $node = $self->{
'node'
};
if ($r) {
  if ($r->{
'ro'
}) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_ATTR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
  }
  my @children = @{$r->{
'child'
}};
  $r->{
'child'
} = [];
  for (@children) {
    CORE::delete $_->{
'parent'
};
    $_->
_orphanate
;
  }
} else {
  my $docNode = $self->{
'od'
};
  if (
(($self->{'node'}->{'od'} or
  $self->{'node'})
   ->{'chk'})
) {
    my $version = 
($docNode->{'hf'}->{XML}
     ? CORE::defined $docNode->{'http://www.w3.org/2001/04/infoset#version'}
           ? $docNode->{'http://www.w3.org/2001/04/infoset#version'}
           : '1.0'
     : undef)
;
    

{

if 
(defined $name) {
  

{

if 
(((not defined $version or $version eq '1.0') and
         not 
($name =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        ($version eq '1.1' and
         not 
($name =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $name, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
  


;}

;
  

;
}


;}

;
  }
  $r = 
Message::DOM::Tree::ManakaiDOMAttr->_new_object
 ($node);
  $r->{
'xnm'
} = $name;
  $r->{
'owner'
} = $node;
  

{


$r->{'od'} = $node->{'od'};
if (${$r->{
'tid'
}} ne ${$node->{'od'}->{
'tid'
}}) {
  $node->{'od'}->{
'rc'
}++;
  ${$node->{'od'}->{
'grc'
}}++;
}


;}

;
  $node->{
'attr'
}
       ->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{$name} = $r;
}
my $text = 
Message::DOM::Tree::ManakaiDOMText->_new_object
 ($node);
$text->{
'con'
} = defined $value ? $value : '';


{


$text->{'od'} = $self->{'node'}->{'od'};
if (${$text->{
'tid'
}} ne ${$self->{'node'}->{'od'}->{
'tid'
}}) {
  $self->{'node'}->{'od'}->{
'rc'
}++;
  ${$self->{'node'}->{'od'}->{
'grc'
}}++;
}


;}

;
$text->{
'parent'
} = $r;
$r->{
'child'
} = [$text];
$r->{
'specified'
} = 
1
;


;}
}
sub remove_attribute ($$) {
my ($self, $name) = @_;

{

if 
($self->{
'node'
}->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'remove_attribute', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
}
my $r;


{

my 
$attr = $self->{
'node'
}->{
'attr'
};
if ($attr->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{$name}) {
  $r = $attr->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{$name};
  

{

CORE::delete 
$attr->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{$name};
  


;}

;
} elsif ($name eq 'xmlns') {
  for my $a (keys %{$attr->{
'http://www.w3.org/2000/xmlns/'
}||{}}) {
    if ($attr->{
'http://www.w3.org/2000/xmlns/'
}->{$a}->{
'ln'
}) {
      $r = $attr->{
'http://www.w3.org/2000/xmlns/'
}->{$a};
      

{

CORE::delete 
$attr->{
'http://www.w3.org/2000/xmlns/'
}->{$a};
      


;}

;
      last;
   }
  }
} elsif ($name eq 'xmlns:xmlns') {
  # 
} else {
  for my $ns (keys %$attr) {
    if ($ns eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
) {
      # 
    } else {
      for my $a (keys %{$attr->{$ns}||{}}) {
        if (defined $attr->{$ns}->{$a}->{
'pfx'
} and
            $attr->{$ns}->{$a}->{
'pfx'
}.':'.
            $attr->{$ns}->{$a}->{
'ln'
} eq $name) {
          $r = $attr->{$ns}->{$a};
          

{

CORE::delete 
$attr->{$ns}->{$a};
          


;}

;
          last;
        } elsif (not defined $attr->{$ns}->{$a}
                                  ->{
'pfx'
} and
             $attr->{$ns}->{$a}->{
'ln'
} eq $name) {
          $r = $attr->{$ns}->{$a};
          

{

CORE::delete 
$attr->{$ns}->{$a};
          


;}

;
          last;
        }
      }
    }
  }
}


;}

;
if ($r) {
  CORE::delete $r->{
'owner'
};
  $r->
_orphanate
;
}


;}
}
sub get_attribute_node ($$) {
my ($self, $name) = @_;
my $r;

{

my 
$obj;


{

my 
$attr = $self->{
'node'
}->{
'attr'
};
if ($attr->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{$name}) {
  $obj = $attr->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{$name};
  

;
} elsif ($name eq 'xmlns') {
  for my $a (keys %{$attr->{
'http://www.w3.org/2000/xmlns/'
}||{}}) {
    if ($attr->{
'http://www.w3.org/2000/xmlns/'
}->{$a}->{
'ln'
}) {
      $obj = $attr->{
'http://www.w3.org/2000/xmlns/'
}->{$a};
      

;
      last;
   }
  }
} elsif ($name eq 'xmlns:xmlns') {
  # 
} else {
  for my $ns (keys %$attr) {
    if ($ns eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
) {
      # 
    } else {
      for my $a (keys %{$attr->{$ns}||{}}) {
        if (defined $attr->{$ns}->{$a}->{
'pfx'
} and
            $attr->{$ns}->{$a}->{
'pfx'
}.':'.
            $attr->{$ns}->{$a}->{
'ln'
} eq $name) {
          $obj = $attr->{$ns}->{$a};
          

;
          last;
        } elsif (not defined $attr->{$ns}->{$a}
                                  ->{
'pfx'
} and
             $attr->{$ns}->{$a}->{
'ln'
} eq $name) {
          $obj = $attr->{$ns}->{$a};
          

;
          last;
        }
      }
    }
  }
}


;}

;
if ($obj) {
  $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($obj);
}


;}
$r}
sub set_attribute_node ($$) {
my ($self, $newAttr) = @_;
my $r;

{

if 
($self->{
'node'
}->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
}
my $attrNode = $newAttr->{
'node'
};
if ($attrNode->{
'od'
}
                  ->{
'nid'
} ne
         $self->{
'node'
}->{
'od'
}
              ->{
'nid'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
}

if (defined $attrNode->{
'ln'
}) {
  $r = $self->{
'node'
}->{
'attr'
}
         ->{defined $attrNode->{
'ns'
}
                  ? ${$attrNode->{
'ns'
}}
                  : 
'http://suika.fam.cx/~wakaba/-temp/2003/09/27/null'
}
         ->{$attrNode->{
'ln'
}};
} else {
  $r = $self->{
'node'
}->{
'attr'
}
         ->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}
         ->{$attrNode->{
'xnm'
}};
}

if ($attrNode->{
'owner'
}) {
  if (defined $r and
      $r->{
'nid'
} eq $attrNode->{
'nid'
}) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#replace-by-itself', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute_node', 'rdata' => $newAttr, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
    $r = $newAttr;
  } else {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INUSE_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newAttr';

;
  }
} else {
  $self->{
'node'
}->
_import_tree
 ($attrNode);
  $attrNode->{
'owner'
} = $self->{
'node'
};
  if (defined $attrNode->{
'ln'
}) {
    $self->{
'node'
}->{
'attr'
}
         ->{defined $attrNode->{
'ns'
}
                  ? ${$attrNode->{
'ns'
}}
                  : 
'http://suika.fam.cx/~wakaba/-temp/2003/09/27/null'
}
         ->{$attrNode->{
'ln'
}} = $attrNode;
  } else {
    $self->{
'node'
}->{
'attr'
}
         ->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}
         ->{$attrNode->{
'xnm'
}} = $attrNode;
  }
  if ($r) {
    my $obj = $r;
    $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($obj)
      if defined wantarray;
    CORE::delete $obj->{
'owner'
};
    $obj->
_orphanate
;
  }
}


;}
$r}
sub remove_attribute_node ($$) {
my ($self, $oldAttr) = @_;
my $r;

{

my 
$node = $self->{
'node'
};
if ($node->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'remove_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
}
$r = $oldAttr;
my $attrNode = $r->{
'node'
};
FIND: {
  my $attrID = $attrNode->{
'nid'
};
  for my $ns (keys %{$node->{
'attr'
}}) {
    for my $ln (keys %{$node->{
'attr'
}->{$ns}}) {
      if ($attrID eq $node->{
'attr'
}->{$ns}->{$ln}
                          ->{
'nid'
}) {
        CORE::delete $node->{
'attr'
}->{$ns}->{$ln};
        last FIND;
      }
    }
  }
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'remove_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldAttr';

;
}
CORE::delete $attrNode->{
'owner'
};
$attrNode->
_orphanate
;


;}
$r}
sub get_elements_by_tag_name ($$) {
my ($self, $name) = @_;
my $r;

{

my 
$node = $self->{
'node'
};
my $chk;
if (defined $name and $name eq '*') {
  $chk = sub { 1 };
} else {
  $name = "$name";
  $chk = sub {
    my ($self) = @_;
    if (defined $self->{
'ln'
}) {
      if (defined $self->{
'pfx'
}) {
        return ($self->{
'pfx'
} . ':' .
                $self->{
'ln'
} eq $name)
                   ? 
1 : 

0
;
      } else {
        return ($self->{
'ln'
} eq $name)
                   ? 
1 : 

0
;
      }
    } else {
      return ($self->{
'xnm'
} eq $name)
                   ? 
1 : 

0
;
    }
  };
}


{


$node->{
'rc'
}++;
${$node->{
'grc'
}}++;
$r = bless {
  
'node'
 => $node,
}, 
    'Message::DOM::Tree::ManakaiDOMGetElementsNodeList'
  ;


;}

;
$r->{
'http://suika.fam.cx/~wakaba/archive/2004/mdom-core#nodeMatch'
} = $chk;


;}
$r}
sub get_attribute_ns ($$$) {
my ($self, $namespaceURI, $localName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r = '';

{


{

my 
$__attr = $self->{
'node'
}->{
'attr'
};
my $__nsuri = defined $namespaceURI ? \$namespaceURI : \
'http://suika.fam.cx/~wakaba/-temp/2003/09/27/null'
;
$r = $__attr->{$$__nsuri}->{$localName};


;


;}

;
if ($r) {
  

{


$r = bless {
  
'node'
 => $r,
  
'w'
 => 
1
,
}, 'Message::DOM::Tree::ManakaiDOMAttr';


;}

;
  $r = $r->
text_content
;
}


;}
$r}
sub set_attribute_ns ($$$$) {
my ($self, $namespaceURI, $qualifiedName, $value) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}

{

my 
$docNode = $self->{
'node'
}
                   ->{
'od'
};
my ($prefix, $localName) = split /:/, $qualifiedName, 2;
($prefix, $localName) = (
undef
, $prefix) unless defined $localName;

if (
(($self->{'node'}->{'od'} or
  $self->{'node'})
   ->{'chk'})
) {
  if ($self->{
'node'
}->{
'ro'
}) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
  }
  my $version = 
($docNode->{'hf'}->{XML}
     ? CORE::defined $docNode->{'http://www.w3.org/2001/04/infoset#version'}
           ? $docNode->{'http://www.w3.org/2001/04/infoset#version'}
           : '1.0'
     : undef)
;
  unless (defined $version) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_DOC_NOSUPPORT_XMLNS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
  }
  

{

if 
($version eq '1.1') {
  unless (
($qualifiedName =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => '1.1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
  }
  unless (
($qualifiedName =~ /\A\p{InXMLNCNameStartChar11}\p{InXMLNCNameChar11}*(?::\p{InXMLNCNameStartChar11}\p{InXMLNCNameChar11}*)?\z/)
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_MALFORMED_QNAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => '1.1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
  }
} else {
  unless (
($qualifiedName =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => '1.0', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
  }
  unless (
($qualifiedName =~ /\A\p{InXML_NCNameStartChar10}\p{InXMLNCNameChar10}*(?::\p{InXML_NCNameStartChar10}\p{InXMLNCNameChar10}*)?\z/)
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_MALFORMED_QNAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => '1.0', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
  }
}


;}

;
  

{

if 
(defined $prefix) {
  if (not defined $namespaceURI) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_PREFIX_WITH_NULL_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($prefix eq 'xml' and $namespaceURI ne 
'http://www.w3.org/XML/1998/namespace'
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $namespaceURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XML_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($prefix eq 'xmlns' and $namespaceURI ne 
'http://www.w3.org/2000/xmlns/'
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $namespaceURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XMLNS_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/XML/1998/namespace' and 
$prefix ne 'xml') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XML_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/2000/xmlns/' and 
$prefix ne 'xmlns') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XMLNS_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/2000/xmlns/' and 
$prefix eq 'xmlns' and
           $localName eq 'xmlns') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XMLNS_XMLNS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  }
} else { ## No prefix
  if ($namespaceURI eq 
'http://www.w3.org/XML/1998/namespace'
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => undef, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XML_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/2000/xmlns/' and 
$localName ne 'xmlns') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => undef, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XMLNS_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  }
}


;}

;
  ## TODO: Check prefix if nsuri
}


{

my 
$__r;


{

my 
$__attr = $self->{
'node'
}->{
'attr'
};
my $__nsuri = defined $namespaceURI ? \$namespaceURI : \
'http://suika.fam.cx/~wakaba/-temp/2003/09/27/null'
;
$__r = $__attr->{$$__nsuri}->{$localName};


;


;}

;
my $__node = $self->{
'node'
};
if ($__r) {
  if ($__r->{
'ro'
}) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_ATTR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/tree%23setAttrValueNS+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  }
  my @__children = @{$__r->{
'child'
}};
  $__r->{
'child'
} = [];
  for (@__children) {
    CORE::delete $_->{
'parent'
};
    $_->
_orphanate
;
  }
} else {
  $__r = 
Message::DOM::Tree::ManakaiDOMAttr->_new_object
 ($__node);
  

{


$__r->{'od'} = $__node->{'od'};
if (${$__r->{
'tid'
}} ne ${$__node->{'od'}->{
'tid'
}}) {
  $__node->{'od'}->{
'rc'
}++;
  ${$__node->{'od'}->{
'grc'
}}++;
}


;}

;
  $__r->{
'pfx'
} = $prefix if defined $prefix;
  

{

if 
(defined $namespaceURI) {
  if (ref $namespaceURI eq 'SCALAR') {
    $__r->{'ns'} = $namespaceURI;
  } elsif (defined $Message::Util::ManakaiStringRef::Value{$namespaceURI}) {
    $__r->{'ns'} = $Message::Util::ManakaiStringRef::Value{$namespaceURI};
  } else {
    require Scalar::Util;
    $__r->{'ns'} = $Message::Util::ManakaiStringRef::Value{$namespaceURI} = \($namespaceURI);
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{$namespaceURI});
  }
} else {
  CORE::delete $__r->{'ns'};
}


;}

;
  $__r->{
'ln'
} = $localName;
  $__r->{
'owner'
} = $__node;
  $__node->{
'attr'
}
         ->{defined $namespaceURI ? $namespaceURI : 
'http://suika.fam.cx/~wakaba/-temp/2003/09/27/null'
}
         ->{$localName} = $__r;
}
my $__text = 
Message::DOM::Tree::ManakaiDOMText->_new_object
 ($__node);


{


$__text->{'od'} = $self->{'node'}->{'od'};
if (${$__text->{
'tid'
}} ne ${$self->{'node'}->{'od'}->{
'tid'
}}) {
  $self->{'node'}->{'od'}->{
'rc'
}++;
  ${$self->{'node'}->{'od'}->{
'grc'
}}++;
}


;}

;
$__text->{
'con'
} = defined $value ? $value : '';
$__text->{
'parent'
} = $__r;
$__r->{
'child'
} = [$__text];
$__r->{
'specified'
} = 
1
;


;}

;


;}
}
sub remove_attribute_ns ($$$) {
my ($self, $namespaceURI, $localName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}

{

if 
($self->{
'node'
}->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'remove_attribute_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
}
my $r;


{

my 
$__attr = $self->{
'node'
}->{
'attr'
};
my $__nsuri = defined $namespaceURI ? \$namespaceURI : \
'http://suika.fam.cx/~wakaba/-temp/2003/09/27/null'
;
$r = $__attr->{$$__nsuri}->{$localName};


{

CORE::delete 
$__attr->{$$__nsuri}->{$localName} if $r;



;}

;


;}

;
if ($r) {
  CORE::delete $r->{
'owner'
};
  $r->
_orphanate
;
}


;}
}
sub get_attribute_node_ns ($$$) {
my ($self, $namespaceURI, $localName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r;

{

my 
$obj;


{

my 
$__attr = $self->{
'node'
}->{
'attr'
};
my $__nsuri = defined $namespaceURI ? \$namespaceURI : \
'http://suika.fam.cx/~wakaba/-temp/2003/09/27/null'
;
$obj = $__attr->{$$__nsuri}->{$localName};


;


;}

;
if ($obj) {
  $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($obj);
}


;}
$r}
sub set_attribute_node_ns ($$) {
my ($self, $newAttr) = @_;
my $r;

{

if 
($self->{
'node'
}->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
}
my $attrNode = $newAttr->{
'node'
};
if ($attrNode->{
'od'
}
                  ->{
'nid'
} ne
         $self->{
'node'
}->{
'od'
}
              ->{
'nid'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
}

if (defined $attrNode->{
'ln'
}) {
  $r = $self->{
'node'
}->{
'attr'
}
         ->{defined $attrNode->{
'ns'
}
                  ? ${$attrNode->{
'ns'
}}
                  : 
'http://suika.fam.cx/~wakaba/-temp/2003/09/27/null'
}
         ->{$attrNode->{
'ln'
}};
} else {
  $r = $self->{
'node'
}->{
'attr'
}
         ->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}
         ->{$attrNode->{
'xnm'
}};
}

if ($attrNode->{
'owner'
}) {
  if (defined $r and
      $r->{
'nid'
} eq $attrNode->{
'nid'
}) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#replace-by-itself', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute_node', 'rdata' => $newAttr, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
    $r = $newAttr;
  } else {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INUSE_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newAttr';

;
  }
} else {
  $self->{
'node'
}->
_import_tree
 ($attrNode);
  $attrNode->{
'owner'
} = $self->{
'node'
};
  if (defined $attrNode->{
'ln'
}) {
    $self->{
'node'
}->{
'attr'
}
         ->{defined $attrNode->{
'ns'
}
                  ? ${$attrNode->{
'ns'
}}
                  : 
'http://suika.fam.cx/~wakaba/-temp/2003/09/27/null'
}
         ->{$attrNode->{
'ln'
}} = $attrNode;
  } else {
    $self->{
'node'
}->{
'attr'
}
         ->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}
         ->{$attrNode->{
'xnm'
}} = $attrNode;
  }
  if ($r) {
    my $obj = $r;
    $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($obj)
      if defined wantarray;
    CORE::delete $obj->{
'owner'
};
    $obj->
_orphanate
;
  }
}


;}
$r}
sub get_elements_by_tag_name_ns ($$$) {
my ($self, $namespaceURI, $localName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r;

{

my 
$node = $self->{
'node'
};
my $chk;
if (defined $namespaceURI) {
  if ($namespaceURI eq '*') {
    if (defined $localName and $localName eq '*') {
      $chk = sub {
        my ($self) = @_;
        return defined $self->{
'ln'
}
                 ? 
1 : 

0
;
          ## Any element node with local name
      };
    } else {
      $localName = "$localName";
      $chk = sub {
        my ($self) = @_;
        return
            (defined $self->{
'ln'
} and
             $self->{
'ln'
} eq $localName)
               ? 
1 : 

0
;
      };
    }
  } else { ## Non-n u l l namespace URI
    $namespaceURI = "$namespaceURI";
    if (defined $localName and $localName eq '*') {
      $chk = sub {
        my ($self) = @_;
        return (defined $self->{
'ns'
} and
                ${$self->{
'ns'
}} eq $namespaceURI)
                  ? 
1 : 

0
;
      };
    } else {
      $localName = "$localName";
      $chk = sub {
        my ($self) = @_;
        return
            (defined $self->{
'ln'
} and
             defined $self->{
'ns'
} and
             ${$self->{
'ns'
}} eq $namespaceURI and
             $self->{
'ln'
} eq $localName)
               ? 
1 : 

0
;
      };
    }
  }
} else { ## Null namespace
  if (defined $localName and $localName eq '*') {
    $chk = sub {
      my ($self) = @_;
      return (defined $self->{
'ln'
} and
              not defined $self->{
'ns'
})
                ? 
1 : 

0
;
        ## Any element node with local name but not namespace URI
    };
  } else {
    $localName = "$localName";
    $chk = sub {
      my ($self) = @_;
      return
          (defined $self->{
'ln'
} and
           not defined $self->{
'ns'
} and
           $self->{
'ln'
} eq $localName)
             ? 
1 : 

0
;
    };
  }
}


{


$node->{
'rc'
}++;
${$node->{
'grc'
}}++;
$r = bless {
  
'node'
 => $node,
}, 
    'Message::DOM::Tree::ManakaiDOMGetElementsNodeList'
  ;


;}

;
$r->{
'http://suika.fam.cx/~wakaba/archive/2004/mdom-core#nodeMatch'
} = $chk;


;}
$r}
sub has_attribute ($$) {
my ($self, $name) = @_;
my $r = 0;

{


{

my 
$attr = $self->{
'node'
}->{
'attr'
};
if ($attr->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{$name}) {
  $r = $attr->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{$name};
  

;
} elsif ($name eq 'xmlns') {
  for my $a (keys %{$attr->{
'http://www.w3.org/2000/xmlns/'
}||{}}) {
    if ($attr->{
'http://www.w3.org/2000/xmlns/'
}->{$a}->{
'ln'
}) {
      $r = $attr->{
'http://www.w3.org/2000/xmlns/'
}->{$a};
      

;
      last;
   }
  }
} elsif ($name eq 'xmlns:xmlns') {
  # 
} else {
  for my $ns (keys %$attr) {
    if ($ns eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
) {
      # 
    } else {
      for my $a (keys %{$attr->{$ns}||{}}) {
        if (defined $attr->{$ns}->{$a}->{
'pfx'
} and
            $attr->{$ns}->{$a}->{
'pfx'
}.':'.
            $attr->{$ns}->{$a}->{
'ln'
} eq $name) {
          $r = $attr->{$ns}->{$a};
          

;
          last;
        } elsif (not defined $attr->{$ns}->{$a}
                                  ->{
'pfx'
} and
             $attr->{$ns}->{$a}->{
'ln'
} eq $name) {
          $r = $attr->{$ns}->{$a};
          

;
          last;
        }
      }
    }
  }
}


;}

;
$r = 
1 if 
$r;


;}
$r}
sub has_attribute_ns ($$$) {
my ($self, $namespaceURI, $localName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r = 0;

{


{

my 
$__attr = $self->{
'node'
}->{
'attr'
};
my $__nsuri = defined $namespaceURI ? \$namespaceURI : \
'http://suika.fam.cx/~wakaba/-temp/2003/09/27/null'
;
$r = $__attr->{$$__nsuri}->{$localName};


;


;}

;
$r = $r ? 
1 : 

0
;


;}
$r}
sub schema_type_info ($;$) {
if (@_ == 1) {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_ATTR_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'schema_type_info';
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'schema_type_info';
}
}
sub set_id_attribute ($$;$) {
my ($self, $name, $isId) = @_;

{

if 
($self->{
'node'
}->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_id_attribute', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
}
my $r;


{

my 
$attr = $self->{
'node'
}->{
'attr'
};
if ($attr->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{$name}) {
  $r = $attr->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
}->{$name};
  

;
} elsif ($name eq 'xmlns') {
  for my $a (keys %{$attr->{
'http://www.w3.org/2000/xmlns/'
}||{}}) {
    if ($attr->{
'http://www.w3.org/2000/xmlns/'
}->{$a}->{
'ln'
}) {
      $r = $attr->{
'http://www.w3.org/2000/xmlns/'
}->{$a};
      

;
      last;
   }
  }
} elsif ($name eq 'xmlns:xmlns') {
  # 
} else {
  for my $ns (keys %$attr) {
    if ($ns eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noNS'
) {
      # 
    } else {
      for my $a (keys %{$attr->{$ns}||{}}) {
        if (defined $attr->{$ns}->{$a}->{
'pfx'
} and
            $attr->{$ns}->{$a}->{
'pfx'
}.':'.
            $attr->{$ns}->{$a}->{
'ln'
} eq $name) {
          $r = $attr->{$ns}->{$a};
          

;
          last;
        } elsif (not defined $attr->{$ns}->{$a}
                                  ->{
'pfx'
} and
             $attr->{$ns}->{$a}->{
'ln'
} eq $name) {
          $r = $attr->{$ns}->{$a};
          

;
          last;
        }
      }
    }
  }
}


;}

;
unless ($r) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_id_attribute', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
}
if ($r->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_id_attribute', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_ATTR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
}
$r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#userDeterminedId'
} = $isId;


;}
}
sub set_id_attribute_ns ($$$;$) {
my ($self, $namespaceURI, $localName, $isId) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}

{

if 
($self->{
'node'
}->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_id_attribute_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
}
my $r;


{

my 
$__attr = $self->{
'node'
}->{
'attr'
};
my $__nsuri = defined $namespaceURI ? \$namespaceURI : \
'http://suika.fam.cx/~wakaba/-temp/2003/09/27/null'
;
$r = $__attr->{$$__nsuri}->{$localName};


;


;}

;
unless ($r) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_id_attribute_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
}
if ($r->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_id_attribute_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_ATTR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
}
$r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#userDeterminedId'
} = $isId;


;}
}
sub set_id_attribute_node ($$;$) {
my ($self, $idAttr, $isId) = @_;

{

if 
($self->{
'node'
}->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_id_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
}
unless ($idAttr->{
'node'
}->{
'owner'
} and
        $idAttr->{
'node'
}->{
'owner'
}
               ->{
'nid'
} eq
        $self->{
'node'
}->{
'nid'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_id_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
}
if ($idAttr->{
'node'
}->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_id_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_ATTR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement';

;
}
$idAttr->{
'node'
}
       ->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#userDeterminedId'
} = $isId;


;}
}
sub attributes ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


$self->{'node'}->{
'rc'
}++;
${$self->{'node'}->{
'grc'
}}++;
$r = bless {
  
'node'
 => $self->{'node'},
}, 
    'Message::DOM::Tree::ManakaiDOMAttributes'
  ;


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'attributes';
}
}
sub base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

if 
($self->{
'node'
}->{
'hf'
}->{HTML}) {
  $r = $self->{
'node'
}
            ->
_html_base_uri
;
} else {
  $r = $self->{
'node'
}
            ->
_content_base_uri
 (
0
);
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'base_uri';
}
}
sub local_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'ln'};
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'local_name';
}
}
sub lookup_prefix ($;$) {
my ($self, $namespaceURI) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r = '';

{

if 
(not defined $namespaceURI) {
  $r = 
undef
;
} else {
  my $n = $self->{
'node'
};
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $n->
_lookup_namespace_prefix

                                     ($namespaceURI, $n);
  


;}


;}

;
}


;}
$r}
sub namespace_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = defined $self->{
'node'
}->{
'ns'
}
   ? ${$self->{
'node'
}->{
'ns'
}} : 
undef
;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'namespace_uri';
}
}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$node = $self->{
'node'
};
if (defined $node->{
'ln'
}) {
  $r = (defined $node->{
'pfx'
} ?
       $node->{
'pfx'
} . ':' : '') . 
       $node->{
'ln'
};
} else {
  $r = $node->{
'xnm'
};
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 1;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub prefix ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'pfx'};
$r;
} else {my ($self, $given) = @_;

{

my 
$node = $self->{
'node'
};
my $docNode = $node->{
'od'
};
my $version = 
($docNode->{'hf'}->{XML}
     ? CORE::defined $docNode->{'http://www.w3.org/2001/04/infoset#version'}
           ? $docNode->{'http://www.w3.org/2001/04/infoset#version'}
           : '1.0'
     : undef)
;
if (not defined $version) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#setting-prefix-no-effect-because-of-document', 'rdata' => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
} elsif (not defined $node->{
'ln'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#setting-prefix-no-effect-because-of-node', 'rdata' => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
} elsif ($node->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
} else {
  

{


{

if 
(defined $given and $given eq '') {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-prefix', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureNamespacePrefix+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  }



;}

;
if (defined $given) {
  

{

if 
(($version eq '1.0' and
         not 
($given =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        ($version eq '1.1' and
         not 
($given =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $given, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureNamespacePrefix+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    } elsif (index ($given, ':') > -1) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#name' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_BAD_NCNAME', 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureNamespacePrefix+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
  


;}

;
  

;
}


;}

;
  my $nsURI = $node->{
'ns'
};
  if (not defined $given) {
    if (not defined $nsURI) {
      #
    } elsif ($$nsURI eq 
'http://www.w3.org/XML/1998/namespace'
) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $$nsURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://www.w3.org/2001/04/infoset#prefix' => undef, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XML_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
    } elsif ($$nsURI eq 
'http://www.w3.org/2000/xmlns/'
) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $$nsURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://www.w3.org/2001/04/infoset#prefix' => undef, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XMLNS_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
    }
  } else {
    if (not defined $nsURI) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://www.w3.org/2001/04/infoset#prefix' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_PREFIX_WITH_NULL_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
    } elsif ($given eq 'xml' and $$nsURI ne 
'http://www.w3.org/XML/1998/namespace'
) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $$nsURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://www.w3.org/2001/04/infoset#prefix' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XML_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
    } elsif ($given eq 'xmlns' and $$nsURI ne 
'http://www.w3.org/2000/xmlns/'
) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $$nsURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://www.w3.org/2001/04/infoset#prefix' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XMLNS_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
    } elsif ($$nsURI eq 
'http://www.w3.org/XML/1998/namespace' and 
$given ne 'xml') {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $$nsURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://www.w3.org/2001/04/infoset#prefix' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XML_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
    } elsif ($$nsURI eq 
'http://www.w3.org/2000/xmlns/' and 
$given ne 'xmlns') {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $$nsURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://www.w3.org/2001/04/infoset#prefix' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XMLNS_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
    }
  }
  $node->{
'pfx'
} = $given;
}


;}
}
}
sub _new_object ($;$) {
my ($self, $refNode) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMNode->_new_object
 ($self, $refNode);
$r->{
'attr'
} = {};
$r->{
'child'
} = [];
$r->{
'nt'
} = 
'e'
;


;}
$r}
sub get_feature ($$;$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


;}

{


$version = '' unless defined $version;


;}
my $r;

{


$feature =~ s/^\+//;
if ($Message::DOM::ClassFeature{ref $self}->{$feature}->{$version}) {
  ## This class
  $r = $self;
} else {
  ## Element type dependent classes
  my $object = $self->{
'node'
};
  my $ns;
  my $ln;
  if (defined $object->{
'ln'
}) { ## Namespace-aware
    $ns = $object->{
'ns'
};
    $ns = \'' unless defined $ns;
    $ln = $object->{
'ln'
};
  } elsif ($object->{
'od'
}
                  ->{
'hf'
}->{HTML}) {
    $ns = \
'http://www.w3.org/1999/xhtml'
;
    $ln = lc $object->{
'xnm'
};
  }
  if (defined $ln) {
    for my $pack ((sort {
      $Message::DOM::ClassPoint{$b} <=> $Message::DOM::ClassPoint{$a}
    } grep {
      $Message::DOM::ManakaiDOMElement::CompatClassET{$$ns}
              ->{$ln}->{$_}
    } keys %{$Message::DOM::ManakaiDOMElement::CompatClassET{$$ns}
                     ->{$ln}}),
    (sort {
      $Message::DOM::ClassPoint{$b} <=> $Message::DOM::ClassPoint{$a}
    } grep {
      $Message::DOM::ManakaiDOMElement::CompatClassET{$$ns}
              ->{'*'}->{$_}
    } keys %{$Message::DOM::ManakaiDOMElement::CompatClassET{$$ns}
                     ->{'*'}})) {
      if ($Message::DOM::ClassFeature{$pack}
                ->{$feature}->{$version}) {
        

{


$self->{'node'}->{
'rc'
}++;
${$self->{'node'}->{
'grc'
}}++;
$r = bless {
  
'node'
 => $self->{'node'},
}, $pack;


;}

;
        last CLASS;
      }
    }
  }

  ## Element type independent classes
  CLASS: for my $class (grep {
    $Message::DOM::ManakaiDOMElement::CompatClass{$_}
  } keys %Message::DOM::ManakaiDOMElement::CompatClass) {
    if ($Message::DOM::ClassFeature{$class}
                ->{$feature}->{$version}) {
      

{


$self->{'node'}->{
'rc'
}++;
${$self->{'node'}->{
'grc'
}}++;
$r = bless {
  
'node'
 => $self->{'node'},
}, $class;


;}

;
      last CLASS;
    }
  }
}


;}
$r}
$Message::DOM::ClassFeature{q<Message::DOM::Tree::ManakaiDOMElement>} = {'', {'', '1'}, 'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xmlversion', {'', '1', '1.0', '1', '1.1', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::Tree::ManakaiDOMElement>} = 22.2;
$Message::DOM::ManakaiDOMElement::CompatClass{q<Message::DOM::Tree::ManakaiDOMElement>} = 1;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::Tree::ManakaiDOMElement>} = {'o', ['parent'], 's', ['child'], 's2', ['attr'], 'x', ['od']};
package Message::DOM::IFLatest::Text;
our $VERSION = 20051125.0633;
package Message::DOM::Tree::ManakaiDOMText;
our $VERSION = 20051125.0633;
push our @ISA, 'Message::DOM::Tree::ManakaiDOMCharacterData', 'Message::DOM::IF::CharacterData', 'Message::DOM::IF::Node', 'Message::DOM::IF::Text', 'Message::DOM::IFLatest::CharacterData', 'Message::DOM::IFLatest::Node', 'Message::DOM::IFLatest::Text', 'Message::DOM::IFLevel1::CharacterData', 'Message::DOM::IFLevel1::Node', 'Message::DOM::IFLevel1::Text', 'Message::DOM::IFLevel2::CharacterData', 'Message::DOM::IFLevel2::Node', 'Message::DOM::IFLevel2::Text', 'Message::DOM::IFLevel3::CharacterData', 'Message::DOM::IFLevel3::Node', 'Message::DOM::IFLevel3::Text';
use Message::Util::Error;
sub split_text ($$) {
my ($self, $offset) = @_;
my $r;

{

my 
$node = $self->{
'node'
};
my $parentNode = $node->{
'parent'
};
if ($node->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'split_text', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMText';

;
} elsif ($parentNode and $parentNode->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'split_text', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMText';

;
}
my $ds = \$node->{
'con'
};
my $after;


try {local $Error::Depth = $Error::Depth + 3;

  my 
$offset32 = 
Message::DOM::DOMMain::ManakaiDOMStringExtend->find_offset_32
 ($offset);
  $after = substr ($$ds, $offset32);
  substr ($$ds, $offset32) = '';
## TODO: Catch StringIndexOutOfBoundsException
};
my $newNode;
if ($node->{
'nt'
} eq 
'x'
) {
  $newNode = 
Message::DOM::Tree::ManakaiDOMText->_new_object
 ($node);
} elsif ($node->{
'nt'
} eq
         
'cs'
) {
  $newNode = 
Message::DOM::DOMXML::ManakaiDOMCDATASection->_new_object
 ($node);
} else {
  
report Message::Util::Error::DOMException::CoreException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#values' => +{
        'nt' => $node->{'nt'},
      }, '-type' => 'MDOM_DEBUG_BUG', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'split_text', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMText';

;
}
$newNode->{
'con'
} = $after;


{


$newNode->{'od'} = $parentNode->{'od'};
if (${$newNode->{
'tid'
}} ne ${$parentNode->{'od'}->{
'tid'
}}) {
  $parentNode->{'od'}->{
'rc'
}++;
  ${$parentNode->{'od'}->{
'grc'
}}++;
}


;}

;
if ($parentNode) {
  $parentNode->
_import_tree
 ($newNode);
  A: for my $i (0..$#{$parentNode->{
'child'
}}) {
    if ($parentNode->{
'child'
}->[$i]->{
'nid'
} eq
        $node->{
'nid'
}) {
      splice @{$parentNode->{
'child'
}},
             $i + 1, 0, $newNode;
      last A;
    }
  }
  $newNode->{
'parent'
} = $parentNode;
}


{


$newNode->{'od'} = $node->{'od'};
if (${$newNode->{
'tid'
}} ne ${$node->{'od'}->{
'tid'
}}) {
  $node->{'od'}->{
'rc'
}++;
  ${$node->{'od'}->{
'grc'
}}++;
}


;}

;


;}
$r}
sub is_element_content_whitespace ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = $self->{'node'}->{'ecws'};
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMText', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'is_element_content_whitespace';
}
}
sub whole_text ($;$) {
if (@_ == 1) {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_ATTR_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMText', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'whole_text';
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMText', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'whole_text';
}
}
sub replace_whole_text ($$) {
my ($self, $content) = @_;
my $r;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_whole_text', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMText';
$r}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '#text';
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMText', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 3;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMText', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub _new_object ($;$) {
my ($self, $refNode) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMNode->_new_object
 ($self, $refNode);
$r->{
'nt'
} = 
'x'
;
$r->{
'con'
} = '';


;}
$r}
sub get_feature ($$;$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


;}

{


$version = '' unless defined $version;


;}
my $r;

{


$feature =~ s/^\+//;
if ($Message::DOM::ClassFeature{ref $self}->{$feature}->{$version}) {
  ## This class
  $r = $self;
} else {
  CLASS: for my $class (grep {
    $Message::DOM::ManakaiDOMText::CompatClass{$_}
  } keys %Message::DOM::ManakaiDOMText::CompatClass) {
    if ($Message::DOM::ClassFeature{$class}
                ->{$feature}->{$version}) {
      

{


$self->{'node'}->{
'rc'
}++;
${$self->{'node'}->{
'grc'
}}++;
$r = bless {
  
'node'
 => $self->{'node'},
}, $class;


;}

;
      last CLASS;
    }
  }
}


;}
$r}
$Message::DOM::ClassFeature{q<Message::DOM::Tree::ManakaiDOMText>} = {'', {'', '1'}, 'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xmlversion', {'', '1', '1.0', '1', '1.1', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::Tree::ManakaiDOMText>} = 30.3;
$Message::DOM::ManakaiDOMText::CompatClass{q<Message::DOM::Tree::ManakaiDOMText>} = 1;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::Tree::ManakaiDOMText>} = {'o', ['parent'], 'x', ['od']};
package Message::DOM::IFLatest::Comment;
our $VERSION = 20051125.0633;
package Message::DOM::Tree::ManakaiDOMComment;
our $VERSION = 20051125.0633;
push our @ISA, 'Message::DOM::Tree::ManakaiDOMCharacterData', 'Message::DOM::IF::CharacterData', 'Message::DOM::IF::Comment', 'Message::DOM::IF::Node', 'Message::DOM::IFLatest::CharacterData', 'Message::DOM::IFLatest::Comment', 'Message::DOM::IFLatest::Node', 'Message::DOM::IFLevel1::CharacterData', 'Message::DOM::IFLevel1::Comment', 'Message::DOM::IFLevel1::Node', 'Message::DOM::IFLevel2::CharacterData', 'Message::DOM::IFLevel2::Comment', 'Message::DOM::IFLevel2::Node', 'Message::DOM::IFLevel3::CharacterData', 'Message::DOM::IFLevel3::Comment', 'Message::DOM::IFLevel3::Node';
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = '#comment';
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMComment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 8;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMComment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub _new_object ($;$) {
my ($self, $refNode) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMNode->_new_object
 ($self, $refNode);
$r->{
'nt'
} = 
'c'
;    
$r->{
'con'
} = '';


;}
$r}
sub get_feature ($$;$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


;}

{


$version = '' unless defined $version;


;}
my $r;

{


$feature =~ s/^\+//;
if ($Message::DOM::ClassFeature{ref $self}->{$feature}->{$version}) {
  ## This class
  $r = $self;
} else {
  CLASS: for my $class (grep {
    $Message::DOM::ManakaiDOMComment::CompatClass{$_}
  } keys %Message::DOM::ManakaiDOMComment::CompatClass) {
    if ($Message::DOM::ClassFeature{$class}
                ->{$feature}->{$version}) {
      

{


$self->{'node'}->{
'rc'
}++;
${$self->{'node'}->{
'grc'
}}++;
$r = bless {
  
'node'
 => $self->{'node'},
}, $class;


;}

;
      last CLASS;
    }
  }
}


;}
$r}
$Message::DOM::ClassFeature{q<Message::DOM::Tree::ManakaiDOMComment>} = {'', {'', '1'}, 'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xmlversion', {'', '1', '1.0', '1', '1.1', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::Tree::ManakaiDOMComment>} = 30.3;
$Message::DOM::ManakaiDOMComment::CompatClass{q<Message::DOM::Tree::ManakaiDOMComment>} = 1;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::Tree::ManakaiDOMComment>} = {'o', ['parent'], 'x', ['od']};
package Message::DOM::IFLatest::DocumentFragment;
our $VERSION = 20051125.0633;
package Message::DOM::Tree::ManakaiDOMDocumentFragment;
our $VERSION = 20051125.0633;
push our @ISA, 'Message::DOM::Tree::ManakaiDOMNode', 'Message::DOM::IF::DocumentFragment', 'Message::DOM::IF::Node', 'Message::DOM::IFLatest::DocumentFragment', 'Message::DOM::IFLatest::Node', 'Message::DOM::IFLevel1::DocumentFragment', 'Message::DOM::IFLevel1::Node', 'Message::DOM::IFLevel2::DocumentFragment', 'Message::DOM::IFLevel2::Node', 'Message::DOM::IFLevel3::DocumentFragment', 'Message::DOM::IFLevel3::Node';
sub _new_object ($;$) {
my ($self, $refNode) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMNode->_new_object
 ($self, $refNode);
$r->{
'child'
} = [];
$r->{
'nt'
} = 
'f'
;


;}
$r}
sub lookup_prefix ($;$) {
my ($self, $namespaceURI) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r = '';

{


$r = 
undef
;


;}
$r}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = '#document-fragment';
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocumentFragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 11;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocumentFragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub get_feature ($$;$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


;}

{


$version = '' unless defined $version;


;}
my $r;

{


$feature =~ s/^\+//;
if ($Message::DOM::ClassFeature{ref $self}->{$feature}->{$version}) {
  ## This class
  $r = $self;
} else {
  CLASS: for my $class (grep {
    $Message::DOM::ManakaiDOMDocumentFragment::CompatClass{$_}
  } keys %Message::DOM::ManakaiDOMDocumentFragment::CompatClass) {
    if ($Message::DOM::ClassFeature{$class}
                ->{$feature}->{$version}) {
      

{


$self->{'node'}->{
'rc'
}++;
${$self->{'node'}->{
'grc'
}}++;
$r = bless {
  
'node'
 => $self->{'node'},
}, $class;


;}

;
      last CLASS;
    }
  }
}


;}
$r}
$Message::DOM::ClassFeature{q<Message::DOM::Tree::ManakaiDOMDocumentFragment>} = {'', {'', '1'}, 'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xmlversion', {'', '1', '1.0', '1', '1.1', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::Tree::ManakaiDOMDocumentFragment>} = 22.2;
$Message::DOM::ManakaiDOMDocumentFragment::CompatClass{q<Message::DOM::Tree::ManakaiDOMDocumentFragment>} = 1;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::Tree::ManakaiDOMDocumentFragment>} = {'o', ['parent'], 's', ['child'], 'x', ['od']};
package Message::DOM::IFLatest::Document;
our $VERSION = 20051125.0633;
package Message::DOM::Tree::ManakaiDOMDocument;
our $VERSION = 20051125.0633;
push our @ISA, 'Message::DOM::Tree::ManakaiDOMNode', 'Message::DOM::IF::Document', 'Message::DOM::IF::Node', 'Message::DOM::IFLatest::Document', 'Message::DOM::IFLatest::Node', 'Message::DOM::IFLevel1::Document', 'Message::DOM::IFLevel1::Node', 'Message::DOM::IFLevel2::Document', 'Message::DOM::IFLevel2::Node', 'Message::DOM::IFLevel3::Document', 'Message::DOM::IFLevel3::Node';
use Char::Class::XML 'InXMLNCNameChar10', 'InXMLNCNameChar11', 'InXMLNCNameStartChar11', 'InXMLNameChar10', 'InXMLNameChar11', 'InXMLNameStartChar11', 'InXML_NCNameStartChar10', 'InXML_NameStartChar10';
sub doctype ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{

for 
(@{$self->{
'node'
}->{
'child'
}}) {
  if ($_->{
'nt'
} eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DocumentType'
) {
    $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($_);
    last;
  } elsif ($_->{
'nt'
} eq 
'e'
) {
    last;
  }
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'doctype';
}
}
sub implementation ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = $self->{'node'}->{'impl'};
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'implementation';
}
}
sub document_element ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{

for 
(@{$self->{
'node'
}->{
'child'
}}) {
  if ($_->{
'nt'
} eq 
'e'
) {
    $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($_);
    last;
  }
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'document_element';
}
}
sub create_element ($$) {
my ($self, $tagName) = @_;
my $r;

{

my 
$docNode = $self->{
'node'
};
my $version = 
($docNode->{'hf'}->{XML}
     ? CORE::defined $docNode->{'http://www.w3.org/2001/04/infoset#version'}
           ? $docNode->{'http://www.w3.org/2001/04/infoset#version'}
           : '1.0'
     : undef)
;


{

if 
(defined $tagName) {
  

{

if 
(((not defined $version or $version eq '1.0') and
         not 
($tagName =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        ($version eq '1.1' and
         not 
($tagName =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $tagName, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
  


;}

;
  

;
}


;}

;
my $node = 
Message::DOM::Tree::ManakaiDOMElement->_new_object
;


{


$node->{'od'} = $docNode;
if (${$node->{
'tid'
}} ne ${$docNode->{
'tid'
}}) {
  $docNode->{
'rc'
}++;
  ${$docNode->{
'grc'
}}++;
}


;}

;
$node->{
'xnm'
} = $tagName;
$r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($node);


;}
$r}
sub create_document_fragment ($) {
my ($self) = @_;
my $r;

{

my 
$docNode = $self->{
'node'
};
my $node = 
Message::DOM::Tree::ManakaiDOMDocumentFragment->_new_object
;


{


$node->{'od'} = $docNode;
if (${$node->{
'tid'
}} ne ${$docNode->{
'tid'
}}) {
  $docNode->{
'rc'
}++;
  ${$docNode->{
'grc'
}}++;
}


;}

;
$r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($node);


;}
$r}
sub create_text_node ($$) {
my ($self, $data) = @_;
my $r;

{

my 
$docNode = $self->{
'node'
};
my $node = 
Message::DOM::Tree::ManakaiDOMText->_new_object
;


{


$node->{'od'} = $docNode;
if (${$node->{
'tid'
}} ne ${$docNode->{
'tid'
}}) {
  $docNode->{
'rc'
}++;
  ${$docNode->{
'grc'
}}++;
}


;}

;
$node->{
'con'
} = defined $data ? $data : '';
$r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($node);


;}
$r}
sub create_comment ($$) {
my ($self, $data) = @_;
my $r;

{

my 
$docNode = $self->{
'node'
};
my $node = 
Message::DOM::Tree::ManakaiDOMComment->_new_object
;


{


$node->{'od'} = $docNode;
if (${$node->{
'tid'
}} ne ${$docNode->{
'tid'
}}) {
  $docNode->{
'rc'
}++;
  ${$docNode->{
'grc'
}}++;
}


;}

;
$node->{
'con'
} = defined $data ? $data : '';
$r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($node);


;}
$r}
sub create_cdata_section ($$) {
my ($self, $data) = @_;
my $r;

{

my 
$docNode = $self->{
'node'
};
unless (
($docNode->{'hf'}->{XML})
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'create_cdata_section', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_DOC_NOSUPPORT_XML', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument';

;
}
my $node = 
Message::DOM::DOMXML::ManakaiDOMCDATASection->_new_object
;


{


$node->{'od'} = $docNode;
if (${$node->{
'tid'
}} ne ${$docNode->{
'tid'
}}) {
  $docNode->{
'rc'
}++;
  ${$docNode->{
'grc'
}}++;
}


;}

;
$node->{
'con'
} = defined $data ? $data : '';
$r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($node);


;}
$r}
sub create_processing_instruction ($$$) {
my ($self, $target, $data) = @_;
my $r;

{

my 
$docNode = $self->{
'node'
};
my $version = 
($docNode->{'hf'}->{XML}
     ? CORE::defined $docNode->{'http://www.w3.org/2001/04/infoset#version'}
           ? $docNode->{'http://www.w3.org/2001/04/infoset#version'}
           : '1.0'
     : undef)
;
unless (defined $version) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'create_processing_instruction', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_DOC_NOSUPPORT_XML', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument';

;
}


{

if 
(defined $target) {
  

{

if 
(((not defined $version or $version eq '1.0') and
         not 
($target =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        ($version eq '1.1' and
         not 
($target =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $target, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
  


;}

;
  

;
}


;}

;
my $node = 
Message::DOM::DOMXML::ManakaiDOMProcessingInstruction->_new_object
;


{


$node->{'od'} = $docNode;
if (${$node->{
'tid'
}} ne ${$docNode->{
'tid'
}}) {
  $docNode->{
'rc'
}++;
  ${$docNode->{
'grc'
}}++;
}


;}

;
$node->{
'target'
} = $target;
$node->{
'con'
} = defined $data ? $data : '';
$r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($node);


;}
$r}
sub create_attribute ($$) {
my ($self, $name) = @_;
my $r;

{

my 
$docNode = $self->{
'node'
};
my $version = 
($docNode->{'hf'}->{XML}
     ? CORE::defined $docNode->{'http://www.w3.org/2001/04/infoset#version'}
           ? $docNode->{'http://www.w3.org/2001/04/infoset#version'}
           : '1.0'
     : undef)
;


{

if 
(defined $name) {
  

{

if 
(((not defined $version or $version eq '1.0') and
         not 
($name =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        ($version eq '1.1' and
         not 
($name =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $name, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
  


;}

;
  

;
}


;}

;
my $node = 
Message::DOM::Tree::ManakaiDOMAttr->_new_object
;


{


$node->{'od'} = $docNode;
if (${$node->{
'tid'
}} ne ${$docNode->{
'tid'
}}) {
  $docNode->{
'rc'
}++;
  ${$docNode->{
'grc'
}}++;
}


;}

;
$node->{
'xnm'
} = $name;
$r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($node);


;}
$r}
sub create_entity_reference ($$) {
my ($self, $name) = @_;
my $r;

{

my 
$docNode = $self->{
'node'
};
my $version = 
($docNode->{'hf'}->{XML}
     ? CORE::defined $docNode->{'http://www.w3.org/2001/04/infoset#version'}
           ? $docNode->{'http://www.w3.org/2001/04/infoset#version'}
           : '1.0'
     : undef)
;
unless (defined $version) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'create_entity_reference', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_DOC_NOSUPPORT_XML', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument';

;
}


{

if 
(defined $name) {
  

{

if 
(((not defined $version or $version eq '1.0') and
         not 
($name =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        ($version eq '1.1' and
         not 
($name =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $name, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
  


;}

;
  

;
}


;}

;
my $node = 
Message::DOM::DOMXML::ManakaiDOMEntityReference->_new_object
;


{


$node->{'od'} = $docNode;
if (${$node->{
'tid'
}} ne ${$docNode->{
'tid'
}}) {
  $docNode->{
'rc'
}++;
  ${$docNode->{
'grc'
}}++;
}


;}

;
$node->{
'xnm'
} = $name;
#$node->{< Q::??:expanded>} = 
0
;
$r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($node);


;}
$r}
sub get_elements_by_tag_name ($$) {
my ($self, $tagname) = @_;
my $r;

{

my 
$node = $self->{
'node'
};
my $chk;
if (defined $tagname and $tagname eq '*') {
  $chk = sub { 1 };
} else {
  my $name = "$tagname";
  $chk = sub {
    my ($self) = @_;
    if (defined $self->{
'ln'
}) {
      if (defined $self->{
'pfx'
}) {
        return ($self->{
'pfx'
} . ':' .
                $self->{
'ln'
} eq $name)
                   ? 
1 : 

0
;
      } else {
        return ($self->{
'ln'
} eq $name)
                   ? 
1 : 

0
;
      }
    } else {
      return ($self->{
'xnm'
} eq $name)
                   ? 
1 : 

0
;
    }
  };
}


{


$node->{
'rc'
}++;
${$node->{
'grc'
}}++;
$r = bless {
  
'node'
 => $node,
}, 
    'Message::DOM::Tree::ManakaiDOMGetElementsNodeList'
  ;


;}

;
$r->{
'http://suika.fam.cx/~wakaba/archive/2004/mdom-core#nodeMatch'
} = $chk;


;}
$r}
sub import_node ($$;$) {
my ($self, $importedNode, $deep) = @_;
my $r;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'import_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument';
$r}
sub create_element_ns ($$$) {
my ($self, $namespaceURI, $qualifiedName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r;

{

my 
$docNode = $self->{
'node'
};
my ($prefix, $lname) = split /:/, $qualifiedName, 2;
($prefix, $lname) = (
undef
, $prefix) unless defined $lname;
if (
(($self->{'node'}->{'od'} or
  $self->{'node'})
   ->{'chk'})
) {
  my $version = 
($docNode->{'hf'}->{XML}
     ? CORE::defined $docNode->{'http://www.w3.org/2001/04/infoset#version'}
           ? $docNode->{'http://www.w3.org/2001/04/infoset#version'}
           : '1.0'
     : undef)
;
  unless (defined $version) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'create_element_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_DOC_NOSUPPORT_XMLNS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument';

;
  }
  

{

if 
($version eq '1.1') {
  unless (
($qualifiedName =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => '1.1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
  }
  unless (
($qualifiedName =~ /\A\p{InXMLNCNameStartChar11}\p{InXMLNCNameChar11}*(?::\p{InXMLNCNameStartChar11}\p{InXMLNCNameChar11}*)?\z/)
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_MALFORMED_QNAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => '1.1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
  }
} else {
  unless (
($qualifiedName =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => '1.0', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
  }
  unless (
($qualifiedName =~ /\A\p{InXML_NCNameStartChar10}\p{InXMLNCNameChar10}*(?::\p{InXML_NCNameStartChar10}\p{InXMLNCNameChar10}*)?\z/)
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_MALFORMED_QNAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => '1.0', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
  }
}


;}

;
  

{

if 
(defined $prefix) {
  if (not defined $namespaceURI) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_PREFIX_WITH_NULL_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($prefix eq 'xml' and $namespaceURI ne 
'http://www.w3.org/XML/1998/namespace'
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $namespaceURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XML_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($prefix eq 'xmlns' and $namespaceURI ne 
'http://www.w3.org/2000/xmlns/'
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $namespaceURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XMLNS_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/XML/1998/namespace' and 
$prefix ne 'xml') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XML_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/2000/xmlns/' and 
$prefix ne 'xmlns') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XMLNS_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/2000/xmlns/' and 
$prefix eq 'xmlns' and
           $lname eq 'xmlns') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XMLNS_XMLNS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  }
} else { ## No prefix
  if ($namespaceURI eq 
'http://www.w3.org/XML/1998/namespace'
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => undef, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XML_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/2000/xmlns/' and 
$lname ne 'xmlns') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => undef, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XMLNS_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  }
}


;}

;
} # error checking

my $node = 
Message::DOM::Tree::ManakaiDOMElement->_new_object
;


{


$node->{'od'} = $docNode;
if (${$node->{
'tid'
}} ne ${$docNode->{
'tid'
}}) {
  $docNode->{
'rc'
}++;
  ${$docNode->{
'grc'
}}++;
}


;}

;


{

if 
(defined $namespaceURI) {
  if (ref $namespaceURI eq 'SCALAR') {
    $node->{'ns'} = $namespaceURI;
  } elsif (defined $Message::Util::ManakaiStringRef::Value{$namespaceURI}) {
    $node->{'ns'} = $Message::Util::ManakaiStringRef::Value{$namespaceURI};
  } else {
    require Scalar::Util;
    $node->{'ns'} = $Message::Util::ManakaiStringRef::Value{$namespaceURI} = \($namespaceURI);
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{$namespaceURI});
  }
} else {
  CORE::delete $node->{'ns'};
}


;}

;
$node->{
'pfx'
} = $prefix;
$node->{
'ln'
} = $lname;
$r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($node);


;}
$r}
sub create_attribute_ns ($$$) {
my ($self, $namespaceURI, $qualifiedName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r;

{

my 
$docNode = $self->{
'node'
};
my ($prefix, $lname) = split /:/, $qualifiedName, 2;
($prefix, $lname) = (
undef
, $prefix) unless defined $lname;

if (
(($self->{'node'}->{'od'} or
  $self->{'node'})
   ->{'chk'})
) {
  my $version = 
($docNode->{'hf'}->{XML}
     ? CORE::defined $docNode->{'http://www.w3.org/2001/04/infoset#version'}
           ? $docNode->{'http://www.w3.org/2001/04/infoset#version'}
           : '1.0'
     : undef)
;
  unless (defined $version) {
   
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'create_attribute_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_DOC_NOSUPPORT_XMLNS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument';

;
  }
  

{

if 
($version eq '1.1') {
  unless (
($qualifiedName =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => '1.1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
  }
  unless (
($qualifiedName =~ /\A\p{InXMLNCNameStartChar11}\p{InXMLNCNameChar11}*(?::\p{InXMLNCNameStartChar11}\p{InXMLNCNameChar11}*)?\z/)
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_MALFORMED_QNAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => '1.1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
  }
} else {
  unless (
($qualifiedName =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => '1.0', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
  }
  unless (
($qualifiedName =~ /\A\p{InXML_NCNameStartChar10}\p{InXMLNCNameChar10}*(?::\p{InXML_NCNameStartChar10}\p{InXMLNCNameChar10}*)?\z/)
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_MALFORMED_QNAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => '1.0', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
  }
}


;}

;
  

{

if 
(defined $prefix) {
  if (not defined $namespaceURI) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_PREFIX_WITH_NULL_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($prefix eq 'xml' and $namespaceURI ne 
'http://www.w3.org/XML/1998/namespace'
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $namespaceURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XML_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($prefix eq 'xmlns' and $namespaceURI ne 
'http://www.w3.org/2000/xmlns/'
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $namespaceURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XMLNS_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/XML/1998/namespace' and 
$prefix ne 'xml') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XML_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/2000/xmlns/' and 
$prefix ne 'xmlns') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XMLNS_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/2000/xmlns/' and 
$prefix eq 'xmlns' and
           $lname eq 'xmlns') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XMLNS_XMLNS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  }
} else { ## No prefix
  if ($namespaceURI eq 
'http://www.w3.org/XML/1998/namespace'
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => undef, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XML_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/2000/xmlns/' and 
$lname ne 'xmlns') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => undef, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XMLNS_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  }
}


;}

;
} # error checking

my $node = 
Message::DOM::Tree::ManakaiDOMAttr->_new_object
;


{


$node->{'od'} = $docNode;
if (${$node->{
'tid'
}} ne ${$docNode->{
'tid'
}}) {
  $docNode->{
'rc'
}++;
  ${$docNode->{
'grc'
}}++;
}


;}

;
$node->{
'ln'
} = $lname;


{

if 
(defined $namespaceURI) {
  if (ref $namespaceURI eq 'SCALAR') {
    $node->{'ns'} = $namespaceURI;
  } elsif (defined $Message::Util::ManakaiStringRef::Value{$namespaceURI}) {
    $node->{'ns'} = $Message::Util::ManakaiStringRef::Value{$namespaceURI};
  } else {
    require Scalar::Util;
    $node->{'ns'} = $Message::Util::ManakaiStringRef::Value{$namespaceURI} = \($namespaceURI);
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{$namespaceURI});
  }
} else {
  CORE::delete $node->{'ns'};
}


;}

;
$node->{
'pfx'
} = $prefix;
$node->{
'specified'
} = 
1
;
$r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($node);


;}
$r}
sub get_elements_by_tag_name_ns ($$$) {
my ($self, $namespaceURI, $localName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r;

{

my 
$node = $self->{
'node'
};
my $chk;
if (defined $namespaceURI) {
  if ($namespaceURI eq '*') {
    if (defined $localName and $localName eq '*') {
      $chk = sub {
        my ($self) = @_;
        return defined $self->{
'ln'
}
                 ? 
1 : 

0
;
          ## Any element node with local name
      };
    } else {
      $localName = "$localName";
      $chk = sub {
        my ($self) = @_;
        return
            (defined $self->{
'ln'
} and
             $self->{
'ln'
} eq $localName)
               ? 
1 : 

0
;
      };
    }
  } else { ## Non-n u l l namespace URI
    $namespaceURI = "$namespaceURI";
    if (defined $localName and $localName eq '*') {
      $chk = sub {
        my ($self) = @_;
        return (defined $self->{
'ns'
} and
                ${$self->{
'ns'
}} eq $namespaceURI)
                  ? 
1 : 

0
;
      };
    } else {
      $localName = "$localName";
      $chk = sub {
        my ($self) = @_;
        return
            (defined $self->{
'ln'
} and
             defined $self->{
'ns'
} and
             ${$self->{
'ns'
}} eq $namespaceURI and
             $self->{
'ln'
} eq $localName)
               ? 
1 : 

0
;
      };
    }
  }
} else { ## Null namespace
  if (defined $localName and $localName eq '*') {
    $chk = sub {
      my ($self) = @_;
      return (defined $self->{
'ln'
} and
              not defined $self->{
'ns'
})
                ? 
1 : 

0
;
        ## Any element node with local name but not namespace URI
    };
  } else {
    $localName = "$localName";
    $chk = sub {
      my ($self) = @_;
      return
          (defined $self->{
'ln'
} and
           not defined $self->{
'ns'
} and
           $self->{
'ln'
} eq $localName)
             ? 
1 : 

0
;
    };
  }
}


{


$node->{
'rc'
}++;
${$node->{
'grc'
}}++;
$r = bless {
  
'node'
 => $node,
}, 
    'Message::DOM::Tree::ManakaiDOMGetElementsNodeList'
  ;


;}

;
$r->{
'http://suika.fam.cx/~wakaba/archive/2004/mdom-core#nodeMatch'
} = $chk;


;}
$r}
sub get_element_by_id ($$) {
my ($self, $elementId) = @_;
my $r;

{

my 
@nodeo = (@{$self->{
'node'
}->{
'child'
}});
NODES: while (my $nodeo = shift @nodeo) {
  next unless $nodeo->{
'nt'
} eq 
'e'
;
  for my $attro (map {values %$_}
                 values %{$nodeo->{
'attr'
}}) {
    my $attr;
    

{


$attr = bless {
  
'node'
 => $attro,
  
'w'
 => 
1
,
}, 'Message::DOM::Tree::ManakaiDOMAttr';


;}

;
    if ($attr->
is_id and
        
$attr->
value eq 
$elementId) {
      $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($nodeo);
      last NODES;
    }
  }
  push @nodeo, @{$nodeo->{
'child'
}};
}


;}
$r}
sub input_encoding ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'ces'};
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'input_encoding';
}
}
sub xml_encoding ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'xcs'};
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'xml_encoding';
}
}
sub xml_standalone ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = $self->{'node'}->{'http://www.w3.org/2001/04/infoset#standalone'};
$r;
} else {my ($self, $given) = @_;
$self->{'node'}->{'http://www.w3.org/2001/04/infoset#standalone'} = $given;
}
}
sub xml_version ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'http://www.w3.org/2001/04/infoset#version'};
$r;
} else {my ($self, $given) = @_;

{

my 
$node = $self->{
'node'
};
if (defined $node->{
'hf'
}->{XML}) {
  if ($given and
      ($given eq '1.0' or $given eq '1.1')) {
    $node->{
'http://www.w3.org/2001/04/infoset#version'
} = $given;
  } else {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_NOSUPPORT_XMLVER', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'xml_version', 'http://www.w3.org/2001/04/infoset#version' => $given;

;
  }
} else {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_DOC_NOSUPPORT_XML', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'xml_version';

;
}


;}
}
}
sub strict_error_checking ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = $self->{'node'}->{'chk'};
$r;
} else {my ($self, $given) = @_;
$self->{'node'}->{'chk'} = $given;
}
}
sub document_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'duri'};
$r;
} else {my ($self, $given) = @_;
$self->{'node'}->{'duri'} = $given;
}
}
sub adopt_node ($$) {
my ($self, $source) = @_;
my $r;

{

if 
($source->isa (
'Message::DOM::Tree::ManakaiDOMNode'
)) {
  if ($self->{
'node'
}->{
'ro'
}) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'adopt_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'source', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => 'source';

;
  }
  my $parent = $source->
parent_node
;
  if ($parent and $parent->{
'node'
}->{
'ro'
}) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'adopt_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'source', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => 'parent';

;
  }
  my $nt = $source->
node_type
;
  my $oe;
  if ($nt == 
2
) {
    $oe = $source->
owner_element
;
    if ($oe and $oe->{
'node'
}->{
'ro'
}) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'adopt_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'source', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => 'oe';

;
    }
  } elsif ($nt == 
9 or 
           
$nt == 
10 or
           
$nt == 
6 or
           
$nt == 
12
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'adopt_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#ADOPT_NODE_TYPE_NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'source', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => 'source';

;
  }

  my @change_od;
  my @nodes = ($source);
  while (@nodes) {
    my $node = shift @nodes;
    my $nt = $node->
node_type
;
    if ($node->{
'node'
}->{
'ro'
}) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'adopt_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOMOD_DESCENDANT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'source', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $node;

;
    }
    if ($nt == 
1
) {
      push @change_od, $node;
      push @nodes, @{$node->
child_nodes
};
      my $attrs = $node->
attributes
;
      my $attrsLength = $attrs->
length
;
      for my $i (0..($attrsLength - 1)) {
        push @nodes, $attrs->
item
 ($i);
      }
    } elsif ($nt == 
2 or
             
$nt == 
5 or
             
$nt == 
11
) {
      push @change_od, $node;
      push @nodes, @{$node->
child_nodes
};
    } elsif ($nt == 
3 or
             
$nt == 
8 or
             
$nt == 
7 or
             
$nt == 
4
) {
      push @change_od, $node;
    } else {
      ## TODO: assertion
    }
  } # nodes
  
  if ($parent) {
    

{

local $Error::Depth = $Error::Depth + 1;

{



      $parent->
remove_child
 ($source);
    


;}


;}

;
  } elsif ($oe) {
    

{

local $Error::Depth = $Error::Depth + 1;

{



      $oe->
remove_attribute_node
 ($source);
    


;}


;}

;
  }

  if (${$self->{
'node'
}->{
'tid'
}} ne
      ${$source->{
'node'
}->{
'tid'
}}) {
    for my $n (map {$_->{
'node'
}} @change_od) {
      

{

if 
(defined $n->{'od'}) {
  my $__referent = $n->{'od'};
  if (${$n->{
'tid'
}} ne ${$__referent->{
'tid'
}}) {
    $__referent->{
'rc'
}--;
    ${$__referent->{
'grc'
}}--;
    unless (
(${$__referent->{'grc'}} > 0)
) {
      $__referent->
_destroy
;
    }
  }
  CORE::delete $n->{'od'};
}


;}

;
      

{


$n->{'od'} = $self->{'node'};
if (${$n->{
'tid'
}} ne ${$self->{'node'}->{
'tid'
}}) {
  $self->{'node'}->{
'rc'
}++;
  ${$self->{'node'}->{
'grc'
}}++;
}


;}

;
    }

    for my $src (@change_od) {
      my $src_ud = $src->{
'node'
}->{
'ud'
} || {};
      for my $key (keys %{$src_ud}) {
        my $dh = $src_ud->{$key}->[1];
        if ($dh) {
          $dh->
handle

                   (
5
,
                    $key, $src_ud->{$key}->[0], $src, 
undef
);
        }
      }
    }
  }
  $r = $source;
} # compatible class


;}
$r}
sub dom_config ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


$r = bless [$self, $self->{'node'}, 'Message::DOM::IFLatest::Document'],
                
'Message::DOM::DOMCore::ManakaiDOMConfiguration'
;


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'dom_config';
}
}
sub normalize_document ($) {
my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'normalize_document', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument';
}
sub rename_node ($$$$) {
my ($self, $n, $namespaceURI, $qualifiedName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'rename_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument';
$r}
sub base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

if 
($self->{
'node'
}->{
'hf'
}->{HTML}) {
  $r = $self->{
'node'
}
            ->
_html_base_uri
;
} else {
  $r = $self->{
'node'
}
            ->
_content_base_uri
 (
0
);
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'base_uri';
}
}
sub lookup_prefix ($;$) {
my ($self, $namespaceURI) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r = '';

{

if 
(not defined $namespaceURI) {
  $r = 
undef
;
} else {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    for 
(@{$self->{
'node'
}->{
'child'
}}) {
      if ($_->{
'nt'
} eq 
'e'
) {
        $r = $_->
_lookup_namespace_prefix

                                       ($namespaceURI, $_);
        last;
      }
    }
  


;}


;}

;
}


;}
$r}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = '#document';
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 9;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub text_content ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = 
undef
;


;}
$r;
} else {my ($self, $given) = @_;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#setting-node-value-no-effect', 'rdata' => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_value';

;


;}
}
}
sub _new_object ($;$) {
my ($self, $refNode) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMNode->_new_object
 ($self, $refNode);
$r->{
'nt'
} = 
'd'
;
$r->{
'http://www.w3.org/2001/04/infoset#version'
} = '1.0';
$r->{
'chk'
} = 
1
;
$r->{
'child'
} = [];


;}
$r}
sub get_feature ($$;$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


;}

{


$version = '' unless defined $version;


;}
my $r;

{


$feature =~ s/^\+//;
if ($Message::DOM::ClassFeature{ref $self}->{$feature}->{$version}) {
  ## This class
  $r = $self;
} else {
  ## Root element type dependent classes
    ## TODO:
  ## Document type dependent classes
    ## TODO:
  ## Document type independent classes
  CLASS: for my $class (grep {
    $Message::DOM::ManakaiDOMDocument::CompatClass{$_}
  } keys %Message::DOM::ManakaiDOMDocument::CompatClass) {
    if ($Message::DOM::ClassFeature{$class}
                ->{$feature}->{$version}) {
      

{


$self->{'node'}->{
'rc'
}++;
${$self->{'node'}->{
'grc'
}}++;
$r = bless {
  
'node'
 => $self->{'node'},
}, $class;


;}

;
      last CLASS;
    }
  }
}


;}
$r}
$Message::DOM::ClassFeature{q<Message::DOM::Tree::ManakaiDOMDocument>} = {'', {'', '1'}, 'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xmlversion', {'', '1', '1.0', '1', '1.1', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::Tree::ManakaiDOMDocument>} = 22.2;
$Message::DOM::ManakaiDOMDocument::CompatClass{q<Message::DOM::Tree::ManakaiDOMDocument>} = 1;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::Tree::ManakaiDOMDocument>} = {'o', ['parent'], 's', ['http://suika.fam.cx/~wakaba/archive/2004/dom/views#view', 'child'], 'x', ['od']};
package Message::DOM::Tree::ManakaiDOMImplementationDocument;
our $VERSION = 20051125.0633;
use Char::Class::XML 'InXMLNCNameChar10', 'InXMLNCNameChar11', 'InXMLNCNameStartChar11', 'InXMLNameChar10', 'InXMLNameChar11', 'InXMLNameStartChar11', 'InXML_NCNameStartChar10', 'InXML_NameStartChar10';
sub create_document_type ($$$$) {
my ($self, $qualifiedName, $publicId, $systemId) = @_;

{

if 
(
(($self->{'node'}->{'od'} or
  $self->{'node'})
   ->{'chk'})
) {
  unless (
($qualifiedName =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => '1.1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17544+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
  }
  unless (
($qualifiedName =~ /\A\p{InXMLNCNameStartChar11}\p{InXMLNCNameChar11}*(?::\p{InXMLNCNameStartChar11}\p{InXMLNCNameChar11}*)?\z/)
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_MALFORMED_QNAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => '1.1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17544+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
  }
}


;}
my $r;

{

my 
($prefix, $lname) = split /:/, $qualifiedName, 2;
if (not defined $lname) {
  ($prefix, $lname) = (
undef
, $prefix);
}
my $node = 
Message::DOM::DOMXML::ManakaiDOMDocumentType->_new_object
;
$node->{
'pfx'
} = $prefix if defined $prefix;
$node->{
'ln'
} = $lname;


{

unless 
(
($qualifiedName =~ /\A\p{InXML_NCNameStartChar10}\p{InXMLNCNameChar10}*(?::\p{InXML_NCNameStartChar10}\p{InXMLNCNameChar10}*)?\z/)
) {
    $node->{
'http://www.w3.org/2001/04/infoset#version'
} = '1.1';
  }



;}

;
$node->{
'pubid'
} = $publicId
  if defined $publicId;
$node->{
'sysid'
} = $systemId
  if defined $systemId; 
## Note: No DOM Level 3 method/attribute provides access 
##       to the DOM implementation object when the "DocumentType" 
##       does not have the parent node (= owner "Document").
$node->{
'impl'
} = $self;
$node->{
'implid'
}
            = $self->{
'node'
}->{
'implid'
};
$r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($node);


;}
$r}
sub create_document ($;$$$) {
my ($self, $namespaceURI, $qualifiedName, $doctype) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1132899533:9104:6DVks17226+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r;

{

my 
($prefix, $lname);
if (defined $qualifiedName) {
  

;
  ($prefix, $lname) = split /:/, $qualifiedName, 2;
  unless (defined $lname) {
    ($prefix, $lname) = (
undef
, $prefix);
  }
  

{

if 
(defined $prefix) {
  if (not defined $namespaceURI) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_PREFIX_WITH_NULL_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($prefix eq 'xml' and $namespaceURI ne 
'http://www.w3.org/XML/1998/namespace'
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $namespaceURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XML_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($prefix eq 'xmlns' and $namespaceURI ne 
'http://www.w3.org/2000/xmlns/'
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $namespaceURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XMLNS_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/XML/1998/namespace' and 
$prefix ne 'xml') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XML_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/2000/xmlns/' and 
$prefix ne 'xmlns') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XMLNS_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/2000/xmlns/' and 
$prefix eq 'xmlns' and
           $lname eq 'xmlns') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XMLNS_XMLNS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  }
} else { ## No prefix
  if ($namespaceURI eq 
'http://www.w3.org/XML/1998/namespace'
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => undef, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XML_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/2000/xmlns/' and 
$lname ne 'xmlns') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => undef, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XMLNS_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23checkXMLNamesQName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  }
}


;}

;
  if ($lname eq 'xmlns') {
    if (not defined $prefix) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'create_document', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_QNAME_IS_XMLNS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMImplementationDocument';

;
    } elsif ($prefix eq 'xmlns') {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'create_document', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XMLNS_XMLNS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMImplementationDocument';

;
    }
  }
} elsif (defined $namespaceURI) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'create_document', 'http://www.w3.org/2001/04/infoset#namespaceName' => $namespaceURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_NULL_QNAME_WITH_NON_NULL_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMImplementationDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'qualifiedName';

;
}

my $node = 
Message::DOM::Tree::ManakaiDOMDocument->_new_object
;
$node->{
'impl'
} = $self;
$node->{
'implid'
}
    = $self->{
'node'
}->{
'implid'
};
$node->{
'hf'
}->{XML} = 
1
;
$node->{
'hf'
}->{HTML} = 
1
  if 
(defined $namespaceURI and $namespaceURI eq 
'http://www.w3.org/1999/xhtml'
) or
     (defined $qualifiedName and $qualifiedName eq 'html');

if ($doctype) {
  if (not UNIVERSAL::isa
            ($doctype, 
'Message::DOM::DOMXML::ManakaiDOMDocumentType'
)) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'create_document', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#MDOMX_EXTERNAL_NODE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMImplementationDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'doctype';

;
  }
  my $doctypeNode = $doctype->{
'node'
};
  if (${$node->{
'tid'
}} ne
      ${$doctypeNode->{
'tid'
}} or
      $doctypeNode->{
'od'
} or
      $doctypeNode->{
'implid'
} ne 
        $node->{
'implid'
}) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'create_document', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#MDOMX_DOCTYPE_ALREADY_USED', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMImplementationDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'doctype';

;
  }
  $doctypeNode->
_import_tree
 ($node);
  

{


$doctypeNode->{'od'} = $node;
if (${$doctypeNode->{
'tid'
}} ne ${$node->{
'tid'
}}) {
  $node->{
'rc'
}++;
  ${$node->{
'grc'
}}++;
}


;}

;
  $doctypeNode->{
'parent'
} = $node;
  push @{$node->{
'child'
}}, $doctypeNode;
  

{


$node->{
'http://www.w3.org/2001/04/infoset#version'
}
        = $doctypeNode->{
'http://www.w3.org/2001/04/infoset#version'
};
  


;}

;
}

if ($lname) {
  

{

if 
(not defined $node->{
'http://www.w3.org/2001/04/infoset#version'
} and
        not 
($lname =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) {
      $node->{
'http://www.w3.org/2001/04/infoset#version'
} = '1.1';
    }
  


;}

;
  my $docElObj = 
Message::DOM::Tree::ManakaiDOMElement->_new_object
 ($node);
  $docElObj->{
'pfx'
} = $prefix if defined $prefix;
  

{

if 
(defined $namespaceURI) {
  if (ref $namespaceURI eq 'SCALAR') {
    $docElObj->{'ns'} = $namespaceURI;
  } elsif (defined $Message::Util::ManakaiStringRef::Value{$namespaceURI}) {
    $docElObj->{'ns'} = $Message::Util::ManakaiStringRef::Value{$namespaceURI};
  } else {
    require Scalar::Util;
    $docElObj->{'ns'} = $Message::Util::ManakaiStringRef::Value{$namespaceURI} = \($namespaceURI);
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{$namespaceURI});
  }
} else {
  CORE::delete $docElObj->{'ns'};
}


;}

;
  $docElObj->{
'ln'
} = $lname;
  $docElObj->{
'parent'
} = $node;
  

{


$docElObj->{'od'} = $node;
if (${$docElObj->{
'tid'
}} ne ${$node->{
'tid'
}}) {
  $node->{
'rc'
}++;
  ${$node->{
'grc'
}}++;
}


;}

;
  push @{$node->{
'child'
}}, $docElObj;
}

$r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($node);


;}
$r}
$Message::DOM::ClassFeature{q<Message::DOM::Tree::ManakaiDOMImplementationDocument>} = {};
$Message::DOM::ClassPoint{q<Message::DOM::Tree::ManakaiDOMImplementationDocument>} = 0;
for ($Message::DOM::IF::Attr::, $Message::DOM::IF::CharacterData::, $Message::DOM::IF::Comment::, $Message::DOM::IF::Document::, $Message::DOM::IF::DocumentFragment::, $Message::DOM::IF::Element::, $Message::DOM::IF::NamedNodeMap::, $Message::DOM::IF::Node::, $Message::DOM::IF::NodeList::, $Message::DOM::IF::Text::, $Message::DOM::IFLevel1::Attr::, $Message::DOM::IFLevel1::CharacterData::, $Message::DOM::IFLevel1::Comment::, $Message::DOM::IFLevel1::Document::, $Message::DOM::IFLevel1::DocumentFragment::, $Message::DOM::IFLevel1::Element::, $Message::DOM::IFLevel1::NamedNodeMap::, $Message::DOM::IFLevel1::Node::, $Message::DOM::IFLevel1::NodeList::, $Message::DOM::IFLevel1::Text::, $Message::DOM::IFLevel2::Attr::, $Message::DOM::IFLevel2::CharacterData::, $Message::DOM::IFLevel2::Comment::, $Message::DOM::IFLevel2::Document::, $Message::DOM::IFLevel2::DocumentFragment::, $Message::DOM::IFLevel2::Element::, $Message::DOM::IFLevel2::NamedNodeMap::, $Message::DOM::IFLevel2::Node::, $Message::DOM::IFLevel2::NodeList::, $Message::DOM::IFLevel2::Text::, $Message::DOM::IFLevel3::Attr::, $Message::DOM::IFLevel3::CharacterData::, $Message::DOM::IFLevel3::Comment::, $Message::DOM::IFLevel3::Document::, $Message::DOM::IFLevel3::DocumentFragment::, $Message::DOM::IFLevel3::Element::, $Message::DOM::IFLevel3::NamedNodeMap::, $Message::DOM::IFLevel3::Node::, $Message::DOM::IFLevel3::NodeList::, $Message::DOM::IFLevel3::Text::){}
## License: <http://suika.fam.cx/~wakaba/archive/2004/8/18/license#Perl+MPL>
1;
