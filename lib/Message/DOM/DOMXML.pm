#!/usr/bin/perl 
## This file is automatically generated
## 	at 2006-03-06T09:06:48+00:00,
## 	from file "DOMXML.dis",
## 	module <http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.DOMXML>,
## 	for <http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOMLatest>.
## Don't edit by hand!
use strict;
require Message::DOM::DOMCore;
require Message::DOM::Tree;
require Message::Util::Error::DOMException;
package Message::DOM::DOMXML;
our $VERSION = 20060306.0906;
package Message::DOM::IFLatest::CDATASection;
our $VERSION = 20060306.0906;
package Message::DOM::DOMXML::ManakaiDOMCDATASection;
our $VERSION = 20060306.0906;
push our @ISA, 'Message::DOM::Tree::ManakaiDOMText', 'Message::DOM::IF::CDATASection', 'Message::DOM::IF::CharacterData', 'Message::DOM::IF::Node', 'Message::DOM::IF::Text', 'Message::DOM::IFLatest::CDATASection', 'Message::DOM::IFLatest::CharacterData', 'Message::DOM::IFLatest::Node', 'Message::DOM::IFLatest::Text', 'Message::DOM::IFLevel1::CDATASection', 'Message::DOM::IFLevel1::CharacterData', 'Message::DOM::IFLevel1::Node', 'Message::DOM::IFLevel1::Text', 'Message::DOM::IFLevel2::CDATASection', 'Message::DOM::IFLevel2::CharacterData', 'Message::DOM::IFLevel2::Node', 'Message::DOM::IFLevel2::Text', 'Message::DOM::IFLevel3::CDATASection', 'Message::DOM::IFLevel3::CharacterData', 'Message::DOM::IFLevel3::Node', 'Message::DOM::IFLevel3::Text';
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = '#cdata-section';
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMCDATASection', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 4;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMCDATASection', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub _new_object ($;$) {
my ($self, $refNode) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMNode->_new_object
 ($self, $refNode);
$r->{
'nt'
} = 
'cs'
;
$r->{
'con'
} = '';


;}
$r}
sub get_feature ($$;$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


;}

{


$version = '' unless defined $version;


;}
my $r;

{


$feature =~ s/^\+//;
if ($Message::DOM::ClassFeature{ref $self}->{$feature}->{$version}) {
  ## This class
  $r = $self;
} else {
  CLASS: for my $class (grep {
    $Message::DOM::ManakaiDOMCDATASection::CompatClass{$_}
  } keys %Message::DOM::ManakaiDOMCDATASection::CompatClass) {
    if ($Message::DOM::ClassFeature{$class}
                ->{$feature}->{$version}) {
      

{


$self->{'node'}->{
'rc'
}++;
${$self->{'node'}->{
'grc'
}}++;
$r = bless {
  
'node'
 => $self->{'node'},
}, $class;


;}

;
      last CLASS;
    }
  }
}


;}
$r}
$Message::DOM::ClassFeature{q<Message::DOM::DOMXML::ManakaiDOMCDATASection>} = {'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xmlversion', {'', '1', '1.0', '1', '1.1', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::DOMXML::ManakaiDOMCDATASection>} = 14.1;
$Message::DOM::ManakaiDOMCDATASection::CompatClass{q<Message::DOM::DOMXML::ManakaiDOMCDATASection>} = 1;
package Message::DOM::IFLatest::DocumentType;
our $VERSION = 20060306.0906;
package Message::DOM::IFLatest::Notation;
our $VERSION = 20060306.0906;
package Message::DOM::DOMXML::ManakaiDOMNotation;
our $VERSION = 20060306.0906;
push our @ISA, 'Message::DOM::Tree::ManakaiDOMNode', 'Message::DOM::IF::Node', 'Message::DOM::IF::Notation', 'Message::DOM::IFLatest::Node', 'Message::DOM::IFLatest::Notation', 'Message::DOM::IFLevel1::Node', 'Message::DOM::IFLevel1::Notation', 'Message::DOM::IFLevel2::Node', 'Message::DOM::IFLevel2::Notation', 'Message::DOM::IFLevel3::Node', 'Message::DOM::IFLevel3::Notation';
sub public_id ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = $self->{'node'}->{'pubid'};
$r;
} else {my ($self, $given) = @_;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMNotation', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'public_id';
}
$self->{'node'}->{'pubid'} = $given;
}
}
sub system_id ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = $self->{'node'}->{'sysid'};
$r;
} else {my ($self, $given) = @_;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMNotation', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'system_id';
}
$self->{'node'}->{'sysid'} = $given;
}
}
sub base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
base_uri
;



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMNotation', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'base_uri';
}
}
sub manakai_declaration_base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

if 
(defined $self->{
'node'
}->{
'dbaseuri'
}) {
  $r = $self->{
'node'
}->{
'dbaseuri'
};
} else {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
base_uri
;
  


;}


;}

;
}


;}
$r;
} else {my ($self, $given) = @_;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMNotation', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'manakai_declaration_base_uri';
}
$self->{'node'}->{'dbaseuri'} = $given;
}
}
sub lookup_prefix ($$) {
my ($self, $namespaceURI) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1141556589:32264:iPogN56474+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r = '';

{


$r = 
undef
;


;}
$r}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = $self->{'node'}->{'xnm'};
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMNotation', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = 12;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMNotation', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub text_content ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = 
undef
;


;}
$r;
} else {my ($self, $given) = @_;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#setting-node-value-no-effect', 'rdata' => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_value';

;


;}
}
}
sub owner_document_type_definition ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference

       ($self->{
'node'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
})
  if $self->{
'node'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
};


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMNotation', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'owner_document_type_definition';
}
}
sub append_child ($$) {
my ($self, $newChild) = @_;
my $r;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;


;}
$r}
sub _new_object ($;$) {
my ($self, $refNode) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMNode->_new_object
 ($self, $refNode);
$r->{
'nt'
} = 
'n'
;


;}
$r}
sub get_feature ($$;$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


;}

{


$version = '' unless defined $version;


;}
my $r;

{


$feature =~ s/^\+//;
if ($Message::DOM::ClassFeature{ref $self}->{$feature}->{$version}) {
  ## This class
  $r = $self;
} else {
  ## Notation dependent classes
    ## TODO:
  ## Notation independent classes
  CLASS: for my $class (grep {
    $Message::DOM::ManakaiDOMNotation::CompatClass{$_}
  } keys %Message::DOM::ManakaiDOMNotation::CompatClass) {
    if ($Message::DOM::ClassFeature{$class}
                ->{$feature}->{$version}) {
      

{


$self->{'node'}->{
'rc'
}++;
${$self->{'node'}->{
'grc'
}}++;
$r = bless {
  
'node'
 => $self->{'node'},
}, $class;


;}

;
      last CLASS;
    }
  }
}


;}
$r}
sub child_nodes ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMEmptyNodeList
->new;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMNotation', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'child_nodes';
}
}
$Message::DOM::ClassFeature{q<Message::DOM::DOMXML::ManakaiDOMNotation>} = {'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xmlversion', {'', '1', '1.0', '1', '1.1', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::DOMXML::ManakaiDOMNotation>} = 14.1;
$Message::DOM::ManakaiDOMNotation::CompatClass{q<Message::DOM::DOMXML::ManakaiDOMNotation>} = 1;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::DOMXML::ManakaiDOMNotation>} = {'o', ['http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'], 'x', ['od']};
package Message::DOM::IFLatest::Entity;
our $VERSION = 20060306.0906;
package Message::DOM::DOMXML::ManakaiDOMEntity;
our $VERSION = 20060306.0906;
push our @ISA, 'Message::DOM::Tree::ManakaiDOMNode', 'Message::DOM::IF::Entity', 'Message::DOM::IF::Node', 'Message::DOM::IFLatest::Entity', 'Message::DOM::IFLatest::Node', 'Message::DOM::IFLevel1::Entity', 'Message::DOM::IFLevel1::Node', 'Message::DOM::IFLevel2::Entity', 'Message::DOM::IFLevel2::Node', 'Message::DOM::IFLevel3::Entity', 'Message::DOM::IFLevel3::Node';
sub public_id ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = $self->{'node'}->{'pubid'};
$r;
} else {my ($self, $given) = @_;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntity', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'public_id';
}
$self->{'node'}->{'pubid'} = $given;
}
}
sub system_id ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = $self->{'node'}->{'sysid'};
$r;
} else {my ($self, $given) = @_;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntity', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'system_id';
}
$self->{'node'}->{'sysid'} = $given;
}
}
sub notation_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = $self->{'node'}->{'http://www.w3.org/2001/04/infoset#notationName'};
$r;
} else {my ($self, $given) = @_;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntity', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'notation_name';
}
$self->{'node'}->{'http://www.w3.org/2001/04/infoset#notationName'} = $given;
}
}
sub input_encoding ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = $self->{'node'}->{'ces'};
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntity', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'input_encoding';
}
}
sub xml_encoding ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = $self->{'node'}->{'xcs'};
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntity', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'xml_encoding';
}
}
sub xml_version ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = $self->{'node'}->{'http://www.w3.org/2001/04/infoset#version'};
$r;
} else {my ($self, $given) = @_;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntity', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'xml_version';
}
$self->{'node'}->{'http://www.w3.org/2001/04/infoset#version'} = $given;
}
}
sub base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
base_uri
;



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntity', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'base_uri';
}
}
sub manakai_declaration_base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

if 
(defined $self->{
'node'
}->{
'dbaseuri'
}) {
  $r = $self->{
'node'
}->{
'dbaseuri'
};
} else {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
base_uri
;
  


;}


;}

;
}


;}
$r;
} else {my ($self, $given) = @_;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntity', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'manakai_declaration_base_uri';
}
$self->{'node'}->{'dbaseuri'} = $given;
}
}
sub manakai_entity_base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

if 
(defined $self->{
'node'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xml#entityBaseURI'
}) {
  $r = $self->{
'node'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xml#entityBaseURI'
};
} else {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
manakai_entity_uri
;
    $r = $self->
base_uri unless 
defined $r;
  


;}


;}

;
}


;}
$r;
} else {my ($self, $given) = @_;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntity', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'manakai_entity_base_uri';
}
$self->{'node'}->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xml#entityBaseURI'} = $given;
}
}
sub manakai_entity_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

if 
(defined $self->{
'node'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xml#entityURI'
}) {
  $r = $self->{
'node'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xml#entityURI'
};
} else {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
system_id
;
    if (defined $r) {
      if (
($r !~ m!\A[^:/?#]+:!)
) {
        my $base = $self->
manakai_declaration_base_uri
;
        $r = $self->
owner_document

                  ->
implementation

                  ->
create_uri_reference

                      ($r)
                  ->
get_absolute_reference

                      ($base)
                  ->
uri_reference
          if 
defined $base;
      }
    } else {
      $r = 
undef
;
    }
  


;}


;}

;
}


;}
$r;
} else {my ($self, $given) = @_;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntity', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'manakai_entity_uri';
}
$self->{'node'}->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xml#entityURI'} = $given;
}
}
sub lookup_prefix ($$) {
my ($self, $namespaceURI) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:tag:suika.fam.cx,2005-09:1141556589:32264:iPogN56474+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;

  

{


$namespaceURI = undef;
  


;}

;
}


;}
my $r = '';

{


$r = 
undef
;


;}
$r}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = $self->{'node'}->{'xnm'};
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntity', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = 6;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntity', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub has_replacement_tree ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = $self->{'node'}->{'rep'};
$r;
} else {my ($self, $given) = @_;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntity', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'has_replacement_tree';
}
$self->{'node'}->{'rep'} = $given;
}
}
sub owner_document_type_definition ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference

       ($self->{
'node'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
})
  if $self->{
'node'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
};


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntity', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'owner_document_type_definition';
}
}
sub is_externally_declared ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = $self->{'node'}->{'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#isExternallyDeclared'};
$r;
} else {my ($self, $given) = @_;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntity', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'is_externally_declared';
}
$self->{'node'}->{'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#isExternallyDeclared'} = $given;
}
}
sub _new_object ($;$) {
my ($self, $refNode) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMNode->_new_object
 ($self, $refNode);
$r->{
'child'
} = [];
$r->{
'nt'
} = 
'ge'
;


;}
$r}
sub get_feature ($$;$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


;}

{


$version = '' unless defined $version;


;}
my $r;

{


$feature =~ s/^\+//;
if ($Message::DOM::ClassFeature{ref $self}->{$feature}->{$version}) {
  ## This class
  $r = $self;
} else {
  ## Entity dependent classes
    ## TODO:
  ## Entity independent classes
  CLASS: for my $class (grep {
    $Message::DOM::ManakaiDOMEntity::CompatClass{$_}
  } keys %Message::DOM::ManakaiDOMEntity::CompatClass) {
    if ($Message::DOM::ClassFeature{$class}
                ->{$feature}->{$version}) {
      

{


$self->{'node'}->{
'rc'
}++;
${$self->{'node'}->{
'grc'
}}++;
$r = bless {
  
'node'
 => $self->{'node'},
}, $class;


;}

;
      last CLASS;
    }
  }
}


;}
$r}
$Message::DOM::ClassFeature{q<Message::DOM::DOMXML::ManakaiDOMEntity>} = {'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xmlversion', {'', '1', '1.0', '1', '1.1', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::DOMXML::ManakaiDOMEntity>} = 14.1;
$Message::DOM::ManakaiDOMEntity::CompatClass{q<Message::DOM::DOMXML::ManakaiDOMEntity>} = 1;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::DOMXML::ManakaiDOMEntity>} = {'o', ['http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'], 's', ['child'], 'x', ['od']};
package Message::DOM::IFLatest::EntityReference;
our $VERSION = 20060306.0906;
package Message::DOM::DOMXML::ManakaiDOMEntityReference;
our $VERSION = 20060306.0906;
push our @ISA, 'Message::DOM::Tree::ManakaiDOMNode', 'Message::DOM::IF::EntityReference', 'Message::DOM::IF::Node', 'Message::DOM::IFLatest::EntityReference', 'Message::DOM::IFLatest::Node', 'Message::DOM::IFLevel1::EntityReference', 'Message::DOM::IFLevel1::Node', 'Message::DOM::IFLevel2::EntityReference', 'Message::DOM::IFLevel2::Node', 'Message::DOM::IFLevel3::EntityReference', 'Message::DOM::IFLevel3::Node';
sub is_expanded ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = $self->{'node'}->{'xp'};
$r;
} else {my ($self, $given) = @_;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntityReference', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'is_expanded';
}
$self->{'node'}->{'xp'} = $given;
}
}
sub base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$pe = $self->
parent_node
;
  W: {
    while (defined $pe) {
      my $nt = $pe->
node_type
;
      if ($nt == 
1 or
          
$nt == 
2 or
          
$nt == 
9 or
          
$nt == 
11 or
          
$nt == 
6
) {
        $r = $pe->
base_uri
;
        last W;
      } elsif ($nt == 
5
) {
        if ($pe->
manakai_external
) {
          $r = $pe->
manakai_entity_base_uri
;
          last W;
        }
      }
      $pe = $pe->
parent_node
;
    }
    if ($pe) {
      $r = $pe->
base_uri
;
    } else {
      $r = $self->
owner_document
->
base_uri
;
    }
  } # W



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntityReference', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'base_uri';
}
}
sub manakai_entity_base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

if 
(defined $self->{
'node'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xml#entityBaseURI'
}) {
  $r = $self->{
'node'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xml#entityBaseURI'
};
} else {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
base_uri
;
  


;}


;}

;
}


;}
$r;
} else {my ($self, $given) = @_;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntityReference', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'manakai_entity_base_uri';
}
$self->{'node'}->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xml#entityBaseURI'} = $given;
}
}
sub manakai_external ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = $self->{'node'}->{'xe'};
$r;
} else {my ($self, $given) = @_;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntityReference', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'manakai_external';
}
$self->{'node'}->{'xe'} = $given;
}
}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'xnm'};
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntityReference', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = 5;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMEntityReference', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub _new_object ($;$) {
my ($self, $refNode) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMNode->_new_object
 ($self, $refNode);
$r->{
'child'
} = [];
$r->{
'nt'
} = 
'r'
;


;}
$r}
$Message::DOM::ClassFeature{q<Message::DOM::DOMXML::ManakaiDOMEntityReference>} = {'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xmlversion', {'', '1', '1.0', '1', '1.1', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::DOMXML::ManakaiDOMEntityReference>} = 14.1;
$Message::DOM::ManakaiDOMEntityReference::CompatClass{q<Message::DOM::DOMXML::ManakaiDOMEntityReference>} = 1;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::DOMXML::ManakaiDOMEntityReference>} = {'o', ['parent'], 's', ['child'], 'x', ['od']};
package Message::DOM::IFLatest::ProcessingInstruction;
our $VERSION = 20060306.0906;
package Message::DOM::DOMXML::ManakaiDOMProcessingInstruction;
our $VERSION = 20060306.0906;
push our @ISA, 'Message::DOM::Tree::ManakaiDOMNode', 'Message::DOM::IF::Node', 'Message::DOM::IF::ProcessingInstruction', 'Message::DOM::IFLatest::Node', 'Message::DOM::IFLatest::ProcessingInstruction', 'Message::DOM::IFLevel1::Node', 'Message::DOM::IFLevel1::ProcessingInstruction', 'Message::DOM::IFLevel2::Node', 'Message::DOM::IFLevel2::ProcessingInstruction', 'Message::DOM::IFLevel3::Node', 'Message::DOM::IFLevel3::ProcessingInstruction';
sub target ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'target'};
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMProcessingInstruction', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'target';
}
}
sub data ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'con'};
$r;
} else {my ($self, $given) = @_;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMProcessingInstruction', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'data';
}
$self->{'node'}->{'con'} = $given;
}
}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'target'};
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMProcessingInstruction', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = 7;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMProcessingInstruction', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub node_value ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'con'};
$r;
} else {my ($self, $given) = @_;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMProcessingInstruction', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'data';
}
$self->{'node'}->{'con'} = $given;
}
}
sub text_content ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'con'};
$r;
} else {my ($self, $given) = @_;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMProcessingInstruction', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'data';
}
$self->{'node'}->{'con'} = $given;
}
}
sub base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

if 
(defined $self->{
'node'
}->{
'buri'
}) {
  $r = $self->{
'node'
}->{
'buri'
};
} else {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$node = $self->
parent_node
;
    W: {
      while (defined $node) {
        my $nt = $node->
node_type
;
        if ($nt == 
1 or
            
$nt == 
9 or
            
$nt == 
11 or
            
$nt == 
10 or
            
$nt == 
6
) {
          $r = $node->
base_uri
;
          last W;
        } elsif ($nt == 
5
) {
          if ($node->
manakai_external
) {
            $r = $node->
manakai_entity_base_uri
;
            last W;
          }
        }
        $node = $node->
parent_node
;
      }
      if ($node) {
        $r = $node->
base_uri
;
      } else {
        $r = $self->
owner_document
->
base_uri
;
      }
    } # W
  


;}


;}

;
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMProcessingInstruction', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'base_uri';
}
}
sub manakai_base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
base_uri
;



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMProcessingInstruction', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'manakai_base_uri';
}
$self->{'node'}->{'buri'} = $given;
}
}
sub append_child ($$) {
my ($self, $newChild) = @_;
my $r;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Tree::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;


;}
$r}
sub _new_object ($;$) {
my ($self, $refNode) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMNode->_new_object
 ($self, $refNode);
$r->{
'nt'
} = 
'p'
;
$r->{
'con'
} = '';


;}
$r}
sub get_feature ($$;$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


;}

{


$version = '' unless defined $version;


;}
my $r;

{


$feature =~ s/^\+//;
if ($Message::DOM::ClassFeature{ref $self}->{$feature}->{$version}) {
  ## This class
  $r = $self;
} else {
  ## Target dependent classes
    ## TODO:
  ## Target independent classes
  CLASS: for my $class (grep {
    $Message::DOM::ManakaiDOMProcessingInstruction::CompatClass{$_}
  } keys %Message::DOM::ManakaiDOMProcessingInstruction::CompatClass
  ) {
    if ($Message::DOM::ClassFeature{$class}
                ->{$feature}->{$version}) {
      

{


$self->{'node'}->{
'rc'
}++;
${$self->{'node'}->{
'grc'
}}++;
$r = bless {
  
'node'
 => $self->{'node'},
}, $class;


;}

;
      last CLASS;
    }
  }
}


;}
$r}
sub child_nodes ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMEmptyNodeList
->new;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMProcessingInstruction', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'child_nodes';
}
}
$Message::DOM::ClassFeature{q<Message::DOM::DOMXML::ManakaiDOMProcessingInstruction>} = {'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xmlversion', {'', '1', '1.0', '1', '1.1', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::DOMXML::ManakaiDOMProcessingInstruction>} = 14.1;
$Message::DOM::ManakaiDOMProcessingInstruction::CompatClass{q<Message::DOM::DOMXML::ManakaiDOMProcessingInstruction>} = 1;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::DOMXML::ManakaiDOMProcessingInstruction>} = {'o', ['parent'], 'x', ['od']};
package Message::DOM::DOMXML::ManakaiDOMXMLBaseAttr;
our $VERSION = 20060306.0906;
push our @ISA, 'Message::DOM::Tree::ManakaiDOMAttr';
sub base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$oe = $self->
owner_element
;
  if ($oe) {
    my $oep = $oe->
parent_node
;
    if ($oep) {
      $r = $oep->
base_uri
;
    } else {
      $r = $self->
owner_document
->
base_uri
;
    }
  } else {
    $r = $self->
owner_document
->
base_uri
;
  }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::DOMXML::ManakaiDOMXMLBaseAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'base_uri';
}
}
$Message::DOM::ClassFeature{q<Message::DOM::DOMXML::ManakaiDOMXMLBaseAttr>} = {'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xmlversion', {'', '1', '1.0', '1', '1.1', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::DOMXML::ManakaiDOMXMLBaseAttr>} = 14.1;
$Message::DOM::ManakaiDOMElement::CompatClassAttr{q<*>}->{q<*>}->{q<http://www.w3.org/XML/1998/namespace>}->{q<base>}->{q<Message::DOM::DOMXML::ManakaiDOMXMLBaseAttr>} = 1;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::DOMXML::ManakaiDOMXMLBaseAttr>} = {'o', ['owner'], 's', ['child'], 'x', ['od']};
package Message::DOM::DOMXML::ManakaiDOMXMLIdAttr;
our $VERSION = 20060306.0906;
push our @ISA, 'Message::DOM::Tree::ManakaiDOMAttr';
sub value ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->SUPER::value;
  if (defined $self->{
'node'
}->{
'at'
} and	
      $self->{
'node'
}->{
'at'
}
          == 
2 and
      
$self->
owner_document
->
dom_config

           ->
get_parameter
 (
'http://suika.fam.cx/www/2006/dom-config/xml-id'
)) {
    $r =~ s/[\x09\x0A\x0D\x20]+/ /g;
    $r =~ s/\A //;
    $r =~ s/ \z//;
  }



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $self->SUPER::value ($given);



;}


;}

;


;}
}
}
sub node_value ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->SUPER::value;
  if (defined $self->{
'node'
}->{
'at'
} and	
      $self->{
'node'
}->{
'at'
}
          == 
2 and
      
$self->
owner_document
->
dom_config

           ->
get_parameter
 (
'http://suika.fam.cx/www/2006/dom-config/xml-id'
)) {
    $r =~ s/[\x09\x0A\x0D\x20]+/ /g;
    $r =~ s/\A //;
    $r =~ s/ \z//;
  }



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $self->SUPER::value ($given);



;}


;}

;


;}
}
}
$Message::DOM::ClassFeature{q<Message::DOM::DOMXML::ManakaiDOMXMLIdAttr>} = {'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xmlversion', {'', '1', '1.0', '1', '1.1', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::DOMXML::ManakaiDOMXMLIdAttr>} = 14.1;
$Message::DOM::ManakaiDOMElement::CompatClassAttr{q<*>}->{q<*>}->{q<http://www.w3.org/XML/1998/namespace>}->{q<id>}->{q<Message::DOM::DOMXML::ManakaiDOMXMLIdAttr>} = 1;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::DOMXML::ManakaiDOMXMLIdAttr>} = {'o', ['owner'], 's', ['child'], 'x', ['od']};
for ($Message::DOM::IF::CDATASection::, $Message::DOM::IF::CharacterData::, $Message::DOM::IF::Entity::, $Message::DOM::IF::EntityReference::, $Message::DOM::IF::Node::, $Message::DOM::IF::Notation::, $Message::DOM::IF::ProcessingInstruction::, $Message::DOM::IF::Text::, $Message::DOM::IFLatest::CharacterData::, $Message::DOM::IFLatest::Node::, $Message::DOM::IFLatest::Text::, $Message::DOM::IFLevel1::CDATASection::, $Message::DOM::IFLevel1::CharacterData::, $Message::DOM::IFLevel1::Entity::, $Message::DOM::IFLevel1::EntityReference::, $Message::DOM::IFLevel1::Node::, $Message::DOM::IFLevel1::Notation::, $Message::DOM::IFLevel1::ProcessingInstruction::, $Message::DOM::IFLevel1::Text::, $Message::DOM::IFLevel2::CDATASection::, $Message::DOM::IFLevel2::CharacterData::, $Message::DOM::IFLevel2::Entity::, $Message::DOM::IFLevel2::EntityReference::, $Message::DOM::IFLevel2::Node::, $Message::DOM::IFLevel2::Notation::, $Message::DOM::IFLevel2::ProcessingInstruction::, $Message::DOM::IFLevel2::Text::, $Message::DOM::IFLevel3::CDATASection::, $Message::DOM::IFLevel3::CharacterData::, $Message::DOM::IFLevel3::Entity::, $Message::DOM::IFLevel3::EntityReference::, $Message::DOM::IFLevel3::Node::, $Message::DOM::IFLevel3::Notation::, $Message::DOM::IFLevel3::ProcessingInstruction::, $Message::DOM::IFLevel3::Text::){}
## License: <http://suika.fam.cx/~wakaba/archive/2004/8/18/license#Perl+MPL>
1;
