Module:
  @QName: 
    MDOM:DOMLS
  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2004/dom/ls#

  @AppName:
     @@@:  ls
     @@ContentType:
        lang:IDL-DOM
     @@prefix:  dom.w3c.org
    @@ForCheck: ManakaiDOM|IDL

  @FullName:
    @@@: DOM Load and Save Module
    @@@@lang:en

  @Description:
    @@lang:en
    @@@:
      A set of interfaces for loading and saving document objects. 
      The functionality defined in this module (the <DFN::Load and Save>
      functionality) is sufficient to allow DOM applications to 
      load and save XML content.  The API also allows filtering 
      of XML content using only DOM API calls.

  @DISCore:author: DISCore|Wakaba
  @License:
     license:Perl+MPL
  @Date:
    @@@:
      $Date: 2005/12/28 03:50:17 $
    @@ContentType:
      dis:Date.RCS

  @DefaultFor:
    ManakaiDOM:ManakaiDOMLatest

  @Require:
    @@Module:
      @@@QName: MDOM|DOMCore
      @@@WithFor: ManakaiDOM|ManakaiDOMLatest
#     @@Module:
#        @@@Name:  DOMEvents
## TODO: Implement these modules
#     @@Module:
#        @@@Name:  DOMTraversal
    @@Module:
      @@@Name: DOMLS
      @@@WithFor:
        ManakaiDOM:ManakaiDOM
    @@Module:
      @@@Name: DOMLS
      @@@WithFor:
        ManakaiDOM:ManakaiDOM3
    @@Module:
      @@@Name: DOMLS
      @@@WithFor:
        ManakaiDOM:ManakaiDOMLatest

Namespace:
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @DOMCore:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
  @DOMMain:
    http://suika.fam.cx/~wakaba/archive/2004/dom/main#
  @dx:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#
  @ecore:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/
  @f:
    http://suika.fam.cx/~wakaba/archive/2004/dom/feature#
  @idl:
    http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#
  @infoset:
     http://www.w3.org/2001/04/infoset#
  @lang:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @LSEV:
    http://www.w3.org/2002/DOMLS
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @ManakaiDOMLS:
    http://suika.fam.cx/~wakaba/archive/2004/mdom-ls#
  @MDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.
  @MDOMX:
    http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#
  @xml:
    http://www.w3.org/XML/1998/namespace
  @xmlns:
    http://www.w3.org/2000/xmlns/

## -- Features

ElementTypeBinding:
  @Name: FeatureDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: f|Feature
    @@For: =ManakaiDOM|all

ElementTypeBinding:
  @Name: FeatureVerDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: f|Feature

ElementTypeBinding:
  @Name: featureName
  @ElementType:
    f:name
  @ShadowContent:
    @@ContentType: DISCore|String

ElementTypeBinding:
  @Name: featureQName
  @ElementType:
    f:name
  @ShadowContent:
    @@ContentType: DISCore|QName

FeatureDef:
  @featureName: LS
  @QName: LSFeature
  @FeatureVerDef:
    @@Version:3.0
    @@QName: LSFeature30
    @@f:instanceOf: LSFeature
    @@DOMMain:requireFeature: 
      DOMCore:CoreFeature20
    @@FullName:
      @@@lang:en
      @@@@:
        DOM Load and Save Module Fundamental Interfaces, Level 3

FeatureDef:
  @featureName: LS-Async
  @QName: LSAsyncFeature
  @FeatureVerDef:
    @@Version:3.0
    @@QName: LSAsyncFeature30
    @@f:instanceOf: LSAsyncFeature
    @@DOMMain:requireFeature: LSFeature30
    @@FullName:
      @@@lang:en
      @@@@:
        DOM Load and Save Module Fundamental Interfaces, Level 3 
        (asynchronous mode)

## -- Basic Types

ImplNote:
  @lang:en
  @@:
    Basic types are specified to ensure interoperability.  Bindings 
    may use different types.

ElementTypeBinding:
  @Name: DataTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|DataType

DataTypeDef:
  @For: ManakaiDOM|DOM3
  @Name:  LSInputStream
  @Description:
    @@lang:en
    @@@:
      A reference to a byte stream source of an XML input.

  @Def:
    @@For:
      ManakaiDOM:IDL
    @@ContentType:
      lang:dis
    @@DISLang:dataTypeAliasFor:
      @@@@:
        DOMMain:Object
      @@@ContentType:
        dis:TypeQName
  @Def:
    @@For:
      ManakaiDOM:Java
    @@DISLang:dataTypeAliasFor:
      @@@@: java.io.InputStream
      @@@ContentType:
        lang:Java
    @@ContentType: lang|dis
  @Def:
    @@For:
      ManakaiDOM:ECMAScript
    @@DISLang:dataTypeAliasFor:
      @@@@: Object
      @@@ContentType:
        lang:ECMAScript
    @@ContentType: lang|dis

DataTypeDef:
  @For: ManakaiDOM|DOM3
  @Name:  LSOutputStream
  @Description:
    @@lang:en
    @@@:
      A byte stream destination for the XML output.

  @Def:
    @@For:
      ManakaiDOM:IDL
    @@DISLang:dataTypeAliasFor:
      @@@@:
        DOMMain:Object
      @@@ContentType:
        dis:TypeQName
    @@ContentType: lang|dis
  @Def:
    @@For:
      ManakaiDOM:Java
    @@DISLang:dataTypeAliasFor:
      @@@@: java.io.OutputStream
      @@@ContentType:
        lang:Java
    @@ContentType: lang|dis
  @Def:
    @@For:
      ManakaiDOM:ECMAScript
    @@DISLang:dataTypeAliasFor:
      @@@@: Object
      @@@ContentType:
        lang:ECMAScript
    @@ContentType: lang|dis

DataTypeDef:
  @For: ManakaiDOM|DOM3
  @Name:  LSReader
  @Description:
    @@lang:en
    @@@:
      A character stream, i.e. a sequence of input characters 
      in 16-bit units, for the XML input.

  @Def:
    @@For:
      ManakaiDOM:IDL
    @@DISLang:dataTypeAliasFor:
      @@@@:
        DOMMain:Object
      @@@ContentType:
        dis:TypeQName
    @@ContentType: lang|dis
  @Def:
    @@For:
      ManakaiDOM:Java
    @@DISLang:dataTypeAliasFor:
      @@@@: java.io.Reader
      @@@ContentType:
        lang:Java
    @@ContentType: lang|dis
  @Description:
    @@lang:en
    @@@:
      The <TYPE::LSReader> has no recommended meaning in ECMAScript binding.
    @@For:
      ManakaiDOM:ECMAScript

DataTypeDef:
  @For: ManakaiDOM|DOM3
  @Name:  LSWriter
  @Description:
    @@lang:en
    @@@:
      A character stream, i.e. a sequence of characters in 16-bit units, 
      for the XML output.

  @Def:
    @@For:
      ManakaiDOM:IDL
    @@DISLang:dataTypeAliasFor:
      @@@@:
        DOMMain:Object
      @@@ContentType:
        dis:TypeQName
    @@ContentType: lang|dis
  @Def:
    @@For:
      ManakaiDOM:Java
    @@DISLang:dataTypeAliasFor:
      @@@@: java.io.Writer
      @@@ContentType:
        lang:Java
    @@ContentType: lang|dis
  @Description:
    @@For:
      ManakaiDOM:ECMAScript
    @@lang:en
    @@@:
      The <TYPE::LSWriter> has no recommended meaning in ECMAScript binding.

DataTypeDef:
  @Name: DOMString
  @AliasFor:
    @@@:
      DOMMain:DOMString
    @@For:
      !ManakaiDOM:IDL
  @Def:
    @@For:
      ManakaiDOM:IDL
    @@DISLang:dataTypeAliasFor:
      @@@@:
        DOMMain:DOMString
      @@@ContentType:
        dis:TypeQName
    @@ContentType: lang|dis
  @For:
    ManakaiDOM:DOM3
DataTypeDef:
  @Name:  DOMConfiguration
  @AliasFor:
    @@@:
      DOMCore:DOMConfiguration
    @@For:
      !ManakaiDOM:IDL
  @Def:
    @@DISLang:dataTypeAliasFor:
      @@@@:
        DOMCore:DOMConfiguration
      @@@ContentType:
        dis:TypeQName
    @@For:
      ManakaiDOM:IDL
    @@ContentType: lang|dis
  @For:
    ManakaiDOM:DOM3
DataTypeDef:
  @Name:  Node
  @AliasFor:
    @@@:
      DOMCore:Node
    @@For:
      !ManakaiDOM:IDL
  @Def:
    @@For:
      ManakaiDOM:IDL
    @@DISLang:dataTypeAliasFor:
      @@@@:
        DOMCore:Node
      @@@ContentType:
        dis:TypeQName
    @@ContentType: lang|dis
  @For:
    ManakaiDOM:DOM3
DataTypeDef:
  @Name:  Document
  @AliasFor:
    @@@:
      DOMCore:Document
    @@For:
      !ManakaiDOM:IDL
  @Def:
    @@For:
      ManakaiDOM:IDL
    @@DISLang:dataTypeAliasFor:
      @@@@:
        DOMCore:Document
      @@@ContentType:
        dis:TypeQName
    @@ContentType: lang|dis
  @For:
    ManakaiDOM:DOM3
DataTypeDef:
  @Name:  Element
  @AliasFor:
    @@@:
      DOMCore:Element
    @@For:
      !ManakaiDOM:IDL
  @Def:
    @@For:
      ManakaiDOM:IDL
    @@DISLang:dataTypeAliasFor:
      @@@@:
        DOMCore:Element
      @@@ContentType:
        dis:TypeQName
    @@ContentType: lang|dis
  @For:
    ManakaiDOM:DOM3

## Fundamental Interfaces

ImplNote:
  @lang:en
  @@:
    The fundamental interfaces must be fully implemented by all 
    conforming implementations.

ElementTypeBinding:
  @Name: L3
  @ElementType:
    DOMMain:implementFeature
  @ShadowContent:
    @@@: LSFeature30
    @@For:
      ManakaiDOM:DOM3

ElementTypeBinding:
  @Name: PerlDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:Perl
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: PerlCDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:Perl

ResourceDef:
  @rdf:type:
    @@@: dis|MultipleResource
    @@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass
  @resourceFor: ManakaiDOM|ForIF
  @resourceFor:
    @@@: ManakaiDOM|ForClass
    @@ForCheck: ManakaiDOM|ManakaiDOM !=ManakaiDOM|ManakaiDOM
  @For: ManakaiDOM|DOM3
  @For: =ManakaiDOM|ManakaiDOM

  @rdf:type:
    @@@: dx|Interface
    @@ForCheck: ManakaiDOM|ForIF

  @rdf:type:
    @@@: dx|Class
    @@ForCheck: ManakaiDOM|ForClass

  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOM||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM
  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOM3||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM3
  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOMLatest||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOMLatest
  @dx:implementedBy:
    @@@: ||ManakaiDOM|ManakaiDOM3||ManakaiDOM|ForClass
    @@ForCheck:
      ManakaiDOM|ForIF ManakaiDOM|ManakaiDOM3 !ManakaiDOM|ManakaiDOMLatest
  @dx:implementedBy:
    @@@: ||ManakaiDOM|ManakaiDOMLatest||ManakaiDOM|ForClass
    @@ForCheck: ManakaiDOM|ForIF ManakaiDOM|ManakaiDOMLatest

  @f:implements:
    @@@: LSFeature30
    @@For: ManakaiDOM|DOM3
  @f:implements:
    @@@: LSAsyncFeature30
    @@For: ManakaiDOM|DOM3

  @DISPerl:ISA:
    @@@: dx|Exception||ManakaiDOM|Perl
    @@ForCheck: ManakaiDOM|ForClass
  @DISPerl:ISA:
    @@@: ManakaiDOM|ManakaiDOMObject
    @@ForCheck: ManakaiDOM|ForClass

  @IFQName: LSException
  @ClsQName: ManakaiDOMLSException

  @enDesc:
    Parser or serializer may throw a <IF::LSException> if the processing
    is stopped.  The processing can be stopped due to a <IF::DOMCore|DOMError>
    with a <A::DOMCore|DOMError.severity> of 
    <C::DOMCore|DOMError.SEVERITY_FATAL_ERROR> or a non-recovered
    <C::DOMCore|DOMError.SEVERITY_ERROR>, or if 
    <M::DOMCore|DOMErrorHandler.handleError> method returned <DOM::false>.

    {NOTE:: A DOM implementation may choose to continue processing
            after a fatal error, but the result is then 
            implementation dependent.
    }

  @Attr:
     @@Name:  code
     @@Get:
        @@@Type: idl|unsignedShort||ManakaiDOM|all
        @@@actualType: LSExceptionCode
     @@ForCheck: ManakaiDOM|ForIF

  @ResourceDef:
    @@rdf:type: DISLang|ConstGroup
    @@ForCheck: ManakaiDOM|ForIF !=ManakaiDOM|ManakaiDOM

    @@QName: LSExceptionCode

    @@rdfs:subClassOf: idl|unsignedShort||ManakaiDOM|all
    @@Type: idl|unsignedShort||ManakaiDOM|all

    @@enDesc:
      An integer indicating the type of error generated.

     @@Const:
       @@@QName: PARSE_ERR
        @@@intValue: 81
        @@@Description:
          @@@@lang:en
          @@@@@:
            An attempt was made to load a document or an XML fragment 
            using <IF::LSParser> and the processing has been stopped.
     @@Const:
      @@@QName: SERIALIZE_ERR
        @@@intValue:  82
        @@@Description:
          @@@@lang:en
          @@@@@:
            An attempt was made to serialize a <IF::DOMCore:Node> using 
            <IF::LSSerializer> and the processing has been stop.
##LSException

ElementTypeBinding:
  @Name: IFQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: IFISA
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsISA
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass


ElementTypeBinding:
  @Name: IFCls3Def
  @ElementType: 
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@: dis|MultipleResource
      @@@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass
    @@resourceFor: ManakaiDOM|ForIF
    @@resourceFor:
      @@@@: ManakaiDOM|ForClass
      @@@ForCheck: ManakaiDOM|ManakaiDOM !=ManakaiDOM|ManakaiDOM
    @@For: ManakaiDOM|DOM3
    @@For: =ManakaiDOM|ManakaiDOM

    @@rdf:type:
      @@@@: ManakaiDOM|IF
      @@@ForCheck: ManakaiDOM|ForIF

    @@rdf:type:
      @@@@: ManakaiDOM|Class
      @@@ForCheck: ManakaiDOM|ForClass
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOM||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOM3||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM3
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOMLatest||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOMLatest

    @@DOMMain:implementFeature:
      @@@@: LSFeature30
      @@@For: ManakaiDOM|DOM3
    @@DOMMain:implementFeature:
      @@@@: LSAsyncFeature30
      @@@For: ManakaiDOM|DOM3 ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: IFDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:IF
    @@For:
      ManakaiDOM:DOM3
    @@For:
      =ManakaiDOM:ManakaiDOM

ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Method
    @@ForCheck: !=ManakaiDOM|ManakaiDOM

ElementTypeBinding:
  @Name: IntMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Method
    @@ForCheck: !=ManakaiDOM|ManakaiDOM ManakaiDOM|ForClass
    @@ManakaiDOM:isForInternal: 1

ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|MethodParameter

ElementTypeBinding:
  @Name: RaiseException
  @ElementType:
    ManakaiDOM:raises

ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|MethodReturn

ElementTypeBinding:
  @Name: Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Attribute
    @@ForCheck: !=ManakaiDOM|ManakaiDOM

ElementTypeBinding:
  @Name: Get
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|AttributeGet

ElementTypeBinding:
  @Name: Set
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|AttributeSet

ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase

ElementTypeBinding:
  @Name: ConstGroup
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|ConstGroup
    @@ForCheck: !=ManakaiDOM|ManakaiDOM

ElementTypeBinding:
  @Name: Const
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: dx|ErrorCode

ElementTypeBinding:
  @Name: XParam
  @ElementType:
    ecore:hasParameter

ElementTypeBinding:
  @Name: SubTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: dx|ErrorSubCode
    @@For: ManakaiDOM|ManakaiDOM

IFCls3Def:
  @IFQName: DOMImplementationLS
  @ClsQName: ManakaiDOMImplementationLS

  @ClsISA: DOMCore|ManakaiDOMImplementation

  @f:provides: LSFeature30

  @DOMMain:implementFeature:
    @@@@: LSAsyncFeature30
    @@@For: ManakaiDOM|DOM3

  @enDesc:
    The <IF::DOMImplementationLS> interface contains factory methods
    for creating objects for load and save.

  @enDesc:
    @@ForCheck: ManakaiDOM|ForIF
    @@@:
      It is expected that an instance of the <IF::DOMImplementationLS> 
      interface can be obtained by using binding-specific casting 
      methods on an instance of the <IF::DOMCore|DOMImplementation>
      interface or by using the <M::DOMCore|DOMImplementation.getFeature>
      method with parameter values <Feature::LS> or <Feature::LS-Async>
      and <FeatureVer::3.0> respectively.
   
  @ConstGroup:
    @@ForCheck: ManakaiDOM|ForIF
    @@QName: DOMImplementationLSMode

    @@rdfs:subClassOf: idl|unsignedShort||ManakaiDOM|all
    @@Type: idl|unsignedShort||ManakaiDOM|all

     @@Description:
       @@@lang:en
       @@@@:The mode of the parser.
     @@Const:
        @@@Name:  MODE_SYNCHRONOUS
        @@@intValue:  1
        @@@Description:
          @@@@lang:en
          @@@@@: 
            Create an synchronous <IF::LSParser>.
     @@Const:
        @@@Name:  MODE_ASYNCHRONOUS
        @@@intValue:  2
        @@@Description:
          @@@@lang:en
          @@@@@: 
            Create an asynchronous <IF::LSParser>.
  @Method:
     @@Name:  createLSParser
     @@Description:
       @@@lang:en
       @@@@:
         Create a new parser object.
     @@Param:
        @@@Name:  mode
        @@@Type: 
          DOMMain:unsigned-short||ManakaiDOM|all
        @@@actualType: DOMImplementationLSMode
        @@@InCase:
          @@@@Label:
            <XC::MODE_SYNCHRONOUS>
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The <IF::LSParser> created will operate in synchronous mode.
        @@@InCase:
          @@@@Label:
            <XC::MODE_ASYNCHRONOUS>
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The <IF::LSParser> created will operate in asynchronous mode.
     @@Param:
        @@@Name:  schemaType
        @@@Type: 
          DOMMain:DOMString
        @@@actualType:
          DOMMain:ManakaiDOMSchemaType
        @@@Description:
          @@@@lang:en
          @@@@@:
            An absolute URI representing the type of the schema language 
            used during the load of a <IF::DOMCore:Document> using the newly 
            created <IF::LSParser>.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The <IF::LSParser> will be free to use any schema found.
     @@Return:
        @@@Type:  LSParser
        @@@Description:
          @@@@lang:en
          @@@@@:
            The newly created parser object.
        @@@ImplNote:
          @@@@lang:en
          @@@@@:
            By default, the parameter <DOM::error-handler> of the 
            <A::LSParser.domConfig> is <DOM::null>.  However, 
            the DOM implementation may provide a default error handler instead.
        @@@ManakaiDOM:raises:
          @@@@@: ManakaiDOMLS|MDOMLS_IMPL_NOSUPPORT_MODE
          @@@@enDesc: The requested mode is not supported.
        @@@ManakaiDOM:raises:
          @@@@@: MDOMX|MDOM_IMPL_NOSUPPORT_SCHEMA
          @@@@enDesc: The requested schema language is not supported.

  @Method:
     @@Name:  createLSSerializer
     @@Description:
       @@@lang:en
       @@@@:
         Create a new serializer object.
     @@Return:
        @@@Type:  LSSerializer
        @@@Description:
          @@@@lang:en
          @@@@@:
            The newly created serializer object.
  @Method:
     @@Name:  createLSInput
     @@Description:
       @@@lang:en
       @@@@:
         Create a new empty input source object.
     @@Return:
        @@@Type:  LSInput
        @@@actualType: ManakaiDOMLSInput
        @@@Description:
          @@@@lang:en
          @@@@@: The newly created input object.
        @@@PerlDef:
          $r = <ClassM::ManakaiDOMLSInput.new>;
  @Method:
     @@Name:  createLSOutput
     @@Description:
       @@@lang:en
       @@@@: Create a new empty output destination object.
     @@Return:
        @@@Type:  LSOutput
        @@@actualType: ManakaiDOMLSOutput
        @@@Description:
          @@@@lang:en
          @@@@@: The newly created output object.
       @@@PerlDef:
         $r = <ClassM::ManakaiDOMLSOutput.new>;
##DOMImplementationLS

ElementTypeBinding:
  @Name: enDesc
  @ElementType:
    dis:Description
  @ShadowContent:
    @@lang:en

IFDef:
  @Name:
    @@@: LSParser

  @For:
    ManakaiDOM:DOM3

  @DISLang:role: ParserRole

  @Description:
    @@lang:en
    @@@:
      An interface to an object that is able to build or augment 
      a DOM tree from various input sources.
  @ImplNote:
    @@lang:en
    @@@:
      {P:: When a document is first made available via the <IF::LSParser>, 
      \
      - there will never be two adjacent <IF::Text> nodes.
      \
      - there will never be empty text nodes.
      \
      {LI:: it is expected that <A::DOMCore:Attr.value> initially return XML 1.0 
            normalized value.
      \
        - If the parameter <CP::validate-if-schema> and 
          <CP::datatype-normalization> are set to <DOM::true>, 
          depending on the attribute normalization used, the 
          attribute values may differ from the ones by XML 1.0.
      \
        - If the parameter <CP::datatype-normalization> is set to <DOM::false>, 
          the XML 1.0 attribute normalization is guaranteed to occur.
      \
      }
      \
      }
  @ImplNote:
    @@lang:en
    @@@:
      Asynchronous <IF::LSParser> are expected to also implement 
      <IF::EventTarget> so that event listeners can be registered.
      \
      {FIG:: Events supported by asyncronous <IF::LSParser> objects
      \
        - <EV::LSEV:load>:: The <IF::LSParser> finishes to load the document.
                      (<IF::LSLoadEvent>)
      \
        - <EV::LSEV:progress>:: The <IF::LSParser> signals progress as 
                          data is parsed.  When <EV::LSEV:progress> should be 
                          dispatched is implementation dependent. 
                          The DOM implementation can choose not to 
                          dispatch at all. (<IF::LSProgressEvent>)
      }
  @Attr:
     @@Name:  domConfig
     @@Description:
       @@@lang:en
       @@@@:
         The configuration object used when parsing an input source. 
       \
         Note that this configuration is specific to the parse 
         operation.  No parameter values from this 
         configuration object are passed automatically to the 
         configuration object on the <IF::DOMCore:Document> that is created, or 
         used, by the parse operation.
     @@Get:
        @@@Type:  DOMConfiguration
  @Attr:
     @@Name:  filter
     @@Get:
        @@@Type:  LSParserFilter
     @@Set:
        @@@Type:  LSParserFilter
  @Attr:
     @@Name:  async
     @@Get:
        @@@Type:
           DOMMain:boolean||ManakaiDOM|all
        @@@InCase:
           @@@@Value:  true
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               This <IF::LSParser> is in asynchronous mode.
        @@@InCase:
           @@@@Value:  false
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               This <IF::LSParser> is in synchronous mode.
  @Attr:
     @@Name:  busy
     @@Get:
        @@@Type:
           DOMMain:boolean||ManakaiDOM|all
        @@@InCase:
           @@@@Value:  true
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               This <IF::LSParser> is currently busy loading a document.
        @@@InCase:
           @@@@Value:  false
           @@@@Description:
             @@@@@lang:en
             @@@@@@: Otherwise.
  @Method:
     @@Name:  parse
     @@Description:
       @@@lang:en
       @@@@:
         Parse an XML document from a resource identified by a 
         <IF::LSInput>.
     @@Param:
        @@@Name:  input
        @@@Type:  LSInput
        @@@Description:
          @@@@lang:en
          @@@@@:
            The <IF::LSInput> object from which the source of 
            the document is to be read.
     @@Return:
        @@@Type:  Document
        @@@Description:
          @@@@lang:en
          @@@@@:
            The newly created and populated <IF::DOMCore:Document>.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The <IF::LSParser> is asynchronous.
        @@@ManakaiDOM:raises:
          @@@@@: ManakaiDOMLS|MDOMLS_BUSY
          @@@@enDesc:
            <A::LSParser.busy> is <DOM::true>.
        @@@ManakaiDOM:raises:
          @@@@@: LSException.PARSE_ERR
          @@@@enDesc:
            The <IF::LSParser> was unable to load the XML document. 
           @@@@ImplNote:
             @@@@@lang:en
             @@@@@@:
               DOM applications should use an error handler to get 
               details on the error.
      @@@ParseTimeErrors:
  @Method:
     @@Name:  parseURI
     @@Description:
       @@@lang:en
       @@@@:
         Parse an XML document from a location identified by a 
         URI reference <SRC::<CITE::RFC 2396>>.
     @@Param:
        @@@Name:  uri
        @@@Type:  DOMString
        @@@actualType:
          DOMMain:RFC2396URIReference
        @@@Description:
          @@@@lang:en
          @@@@@:
            The location of the XML document to be read, 
            as a URI reference <SRC::<CITE::RFC 2396>>.
        @@@InCase:
          @@@@Label:
            @@@@@lang:en
            @@@@@@: URI reference with a fragemnt identifier
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The behavior is undefined; it may be defined in future 
              version of the DOM specification.
     @@Return:
        @@@Type:  Document
        @@@Description:
          @@@@lang:en
          @@@@@:
            The newly created and populated <IF::DOMCore:Document>.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The <IF::LSParser> is asynchronous.
        @@@ManakaiDOM:raises:
          @@@@@:
            ManakaiDOMLS:MDOMLS_BUSY
          @@@@enDesc:
            <A::LSParser.busy> is <DOM::true>.
        @@@ManakaiDOM:raises:
          @@@@@: LSException.PARSE_ERR
          @@@@enDesc:
            The <IF::LSParser> was unable to load the XML document. 
           @@@@ImplNote:
             @@@@@lang:en
             @@@@@@:
               DOM applications should use an error handler to get 
               details on the error.
      @@@ParseTimeErrors:
  @ConstGroup:
    @@QName: ACTION_TYPES

    @@rdfs:subClassOf: idl|unsignedShort||ManakaiDOM|all
    @@Type: idl|unsignedShort||ManakaiDOM|all

     @@Description:
       @@@lang:en
       @@@@:
         A set of possible actions for the <M::LSParser.parseWithContext>.

     @@Const:
        @@@Name:  ACTION_APPEND_AS_CHILDREN
        @@@intValue:  1
     @@Const:
        @@@Name:  ACTION_REPLACE_CHILDREN
        @@@intValue:  2
     @@Const:
        @@@Name:  ACTION_INSERT_BEFORE
        @@@intValue:  3
     @@Const:
        @@@Name:  ACTION_INSERT_AFTER
        @@@intValue:  4
     @@Const:
        @@@Name:  ACTION_REPLACE
        @@@intValue:  5

  @Method:
     @@Name:  parseWithContext
     @@Param:
        @@@Name:  input
        @@@Type:  LSInput
     @@Param:
        @@@Name:  contextArg
        @@@Type:  Node
     @@Param:
        @@@Name:  action
        @@@Type:
           DOMMain:unsigned-short||ManakaiDOM|all
     @@Return:
        @@@Type:  Node
        @@@ImplNote:
           DOMCore:DOMException.***_ERR
        @@@ImplNote:
           LSException.***_ERR
      @@@ParseTimeErrors:
  @Method:
     @@Name:  abort
     @@Description:
       @@@lang:en
       @@@@:
         Abort the loading of the document that is currently being 
         loaded by this <IF::LSParser>.
       \
         If the <IF::LSParser> is currently not busy, this method does nothing.
     @@Return: 
##LSParser

IFCls3Def:
  @IFQName: LSInput
  @ClsQName: ManakaiDOMLSInput

  @ClsISA: ManakaiDOM|ManakaiDOMObject

  @DOMMain:implementFeature: LSAsyncFeature30

  @Description:
    @@lang:en
    @@@:
      An input source for data.
      \
    \  <IF::LSInput> objects belong to DOM applications and the 
      DOM implementation will never modify them.
    \
      With this interface, a DOM application is able to encapsulate 
      information about an input source in a single document, which 
      may include a public identifier, a system identifier, 
      a byte stream, a base URI and/or a character stream.
    \
      The DOM application can either provide its own objects that 
      implement this interface or it can use the generic factor 
      method <M::DOMImplementationLS.createLSInput> to create 
      objects that implement this interface.
    \
      {P:: The <IF::LSParser> will use the <IF::LSInput> object to 
      determine how to read data.  The first one, in the following 
      order, that is not <DOM::null> and not an empty string will be used:
      \
      = <A::LSInput.characterStream>
      \
      = <A::LSInput.byteStream>
      \
      = <A::LSInput.stringData>
      \
      = <A::LSInput.systemId>
      \
      = <A::LSInput.publicId>
      \
      }
      \
      If all inputs are <DOM::null>, the <IF::LSParser> will report a 
      <IF::DOMError> (<ERR::no-input-specified>).
  @ImplNote:
    @@lang:en
    @@@: The DOM implementation may make copies and modify it if necessary.
  @ImplNote:
    @@lang:en
    @@@:
      The exact definitions of a byte stream and a character stream
      are binding dependent.
  @ImplNote:
    @@lang:en
    @@@:
      Properties available:
      <Q::infoset:publicIdentifier>, <Q::infoset:systemIdentifier>, 
      <Q::infoset:baseURI>, <Q::infoset:characterEncodingScheme>, 
      <Q::DOMLS:certifiedText>, <Q::DOMLS:stringData>.
      
  @Attr:
     @@Name:  characterStream
     @@Description:
       @@@lang:en
       @@@@:
         A sream of 16-bit units.
       \
         The document in the stream need not have an XML declaration. 
         If an XML declaration is present, the <XA::encoding> 
         declaration will be ignored.
       \
         Depending on the binding in use, this attribute may not be
         available.
     @@Get:
        @@@Type:  LSReader
        @@@PerlDef:
          $r = $self->{character_stream};
     @@Set:
        @@@Type:  LSReader
        @@@PerlDef:
          $self->{character_stream} = $given;
  @Attr:
     @@Name:  byteStream
     @@Description:
       @@@lang:en
       @@@@:
         A stream of bytes.
     @@Get:
        @@@Type:  LSInputStream
        @@@PerlDef:
          $r = $self->{byte_stream};
     @@Set:
        @@@Type:  LSInputStream
        @@@PerlDef:
          $self->{byte_stream} = $given;
  @Attr:
     @@Name:  stringData
     @@Description:
       @@@lang:en
       @@@@:
         String data to parse.
       \
         The document in the data need not have an XML declaration. 
         If an XML declaration is present, the <XA::encoding> 
         declaration will be ignored.
     @@Type:  
       DOMMain:DOMString
     @@actualType:
       DOMMain:ManakaiDOMString
     @@Get:
       @@@PerlDef:
         $r = ref $self->{string_data} eq 'SCALAR'
                ? ${$self->{string_data}} : $self->{string_data};
     @@Set:
       @@@InCase:
         @@@@Type:
           DISPerl:SCALAR::ManakaiDOM:all
         @@@@Description:
           @@@@@lang:en
           @@@@@@:
             The value referred from the given value is set to the new 
             attribute value.
         @@@@For:
           ManakaiDOM:ManakaiDOM
       @@@PerlDef:
         $self->{string_data} = ref $given eq 'SCALAR' ? $given : \$given;
  @Attr:
     @@Name:  systemId
     @@Description:
       @@@lang:en
       @@@@:
         The system identifier or a URI reference <SRC::<CITE::RFC 2396>> 
         for this input source.
       \
         Even if other input source is specified, this is still 
         useful to resolve any relative URIs or to include it 
         in error messages and warnings.
       \
         If the specified system identifier is a relative URI reference, 
         the DOM implementation will attempt to resolve the relative URI 
         with the <A::.baseURI>.  If that fails, the behavior is 
         implementation dependent.
     @@Type:
       DOMMain:DOMString
     @@actualType:
       DOMMain:SystemID||ManakaiDOM|all
     @@Get:
        @@@PerlDef:
          $r = $self->{system_id};
     @@Set:
        @@@PerlDef:
          $self->{system_id} = $given;
  @Attr:
     @@Name:  publicId
     @@Description:
        @@@lang:en
        @@@@:
          The public identifier for this input source.
         \
          This may be mapped to an input source using a DOM implementation 
          dependent mechanism.
     @@Type:
       DOMMain:DOMString
     @@actualType:
       DOMMain:PublicID::ManakaiDOM:all
     @@Get:
        @@@PerlDef:
          $r = $self->{public_id};
     @@Set:
        @@@PerlDef:
          $self->{public_id} = $self;
  @Attr:
     @@Name:  baseURI
     @@Description:
       @@@lang:en
       @@@@:
         The base URI to be used for resolving a relative 
         <P::systemId> to an absolute URI.
        \
         If, when used, the base URI is a relative URI, including 
         empty string, or <DOM::null>, the behavior is implementation 
         dependent.
     @@Type:
       DOMMain:DOMString
     @@actualType:
       ManakaiDOM:ManakaiDOMURI
     @@Get:
       @@@PerlDef:
         $r = $self->{base_uri};
     @@Set:
       @@@DOMCore:reports:
         @@@@@: DOMLS|null-base-uri
         @@@@enDesc:
           If the new value is <DOM::null>.
         @@@@For: ManakaiDOM|ManakaiDOM
       @@@DOMCore:reports:
         @@@@@: DOMLS|relative-base-uri
         @@@@enDesc:
           If the new value is a relative reference.
         @@@@For: ManakaiDOM|ManakaiDOM
       @@@PerlDef:
         if (not defined $given) {
           __DOMCore:ERROR{DOMLS|null-base-uri::
           }__;
         } elsif (<Code::DOMMain:isRelativeDOMURI:: $INPUT = $given>) {
           __DOMCore:ERROR{DOMLS|relative-base-uri::
             DOMCore:relatedData => {$given},
           }__;
         }
         $self->{base_uri} = $given;
  @Attr:
     @@Name:  encoding
     @@Description:
       @@@lang:en
       @@@@:
         The character encoding, if known.
        \
         This attribute has no effect when the DOM application provides 
         a character stream or string data.  For other sources, 
         the <A::.encoding> will override any encoding specified in the 
         XML or text declaration or higher level protocol.
     @@Type:
       DOMMain:DOMString
     @@Get:
        @@@PerlDef:
          $r = $self->{encoding};
     @@Set:
        @@@Description:
          @@@@lang:en
          @@@@@:
            The encoding name acceptable for an XML 1.0 <XA::encoding> 
            declaration <SRC::<CITE::XML 1.0> 4.3.3 Character Encoding in 
            Entities>.
        @@@PerlDef:
          $self->{encoding} = $given;
  @Attr:
     @@Name:  certifiedText
     @@Get:
        @@@Type:
           DOMMain:boolean||ManakaiDOM|all
        @@@InCase:
           @@@@Value:  true
        @@@InCase:
           @@@@Value:  false
        @@@PerlDef:
          $r = $self->{certified_text};
     @@Set:
        @@@Type:
           DOMMain:boolean||ManakaiDOM|all
        @@@InCase:
           @@@@Value:  true
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               Assume that the input is certified 
               <SRC::<CITE::XML 1.1> 2.13 Normalization Checking> when 
               parsing an XML 1.1 document.
        @@@InCase:
           @@@@Value:  false
        @@@PerlDef:
          $self->{certified_text} = $given;

  @IntMethod:
    @@Name:new
    @@ManakaiDOM:isStatic:1
    @@Description:
      @@@lang:en
      @@@@:
        Construct a new instance of the <IF::LSInput>.
    @@Return:
      @@@Type:ManakaiDOMLSInput
      @@@Description:
        @@@@lang:en
        @@@@@:
          The newly created <IF::LSInput> object.
      @@@PerlDef:
        $r = bless {}, $self;

  @Description:
    @@lang:en
    @@@:
      In the manakai DOM implementation, an unblessed hash reference 
      is also able to be passed as a <IF::LSInput> method parameter. 
      The reference can have eight keys: <A::characterStream>, 
      <A::byteStream>, <A::stringData>, <A::encoding>, <A::certifiedText>, 
      <A::baseURI>, <A::publicId>, <A::systemId>. They can have the 
      same type of data as the methods in the <IF::LSInput> interface, 
      with an exception of <A::stringData>, whose value should be 
      a reference to a scalar string value (it is not just a string
      value for efficient). 
    @@ForCheck:
      ManakaiDOM:ManakaiDOM

  @ResourceDef:
    @@rdf:type: DISLang|InputProcessor
    @@rdf:type: DISLang|OutputProcessor
    @@PerlCDef:
      if (ref $INPUT eq 'HASH') {
        $INPUT = bless $INPUT, <ClassName::DOMLS:ManakaiDOMLSInput>;
      }
##LSInput

ErrDef:
  @QName: DOMLS|relative-uri
  @enDesc:
    A relative reference is specified where its interpretation
    is implementation dependent.
  @DOMCore:severity: DOMCore|SEVERITY_WARNING
  @DOMCore:relatedData:
    @@enDesc: The specified URI.

ErrDef:
  @QName: DOMLS|relative-base-uri
  @enDesc:
    A relative reference is specified as the base URI where its interpretation
    is implementation dependent.
  @DOMCore:severity: DOMCore|SEVERITY_WARNING
  @DOMCore:relatedData:
    @@enDesc: The specified URI.

ErrDef:
  @QName: DOMLS|null-base-uri
  @enDesc:
    <DOM::null> is specified as the base URI.
  @DOMCore:severity: DOMCore|SEVERITY_WARNING

ElementTypeBinding:
  @Name: ErrDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DOMCore|DOMErrorType
    @@For: ManakaiDOM|DOM3

IFCls3Def:
  @IFQName: LSResourceResolver
  @ClsQName: ManakaiDOMLSResourceResolver

  @enDesc:
    The <IF::LSResourceResolver> interface provides a way for
    applications to redirect references to external resources.

    An application needing to implement custom handling for external
    resources can implement and register the implementation 
    by setting the <err::resource-resolver> parameter
    of <IF::DOMCore:DOMConfiguration> objects attached to
    <IF::LSParser>, <IF::LSSerializer>, or <IF::DOMCore:Document>
    that supports the <Feature::LS> feature.

    The <IF::LSParser> will then allow the application to intercept 
    any external entities.  Note that the top-level document entity 
    is never passed to the resource resolver.

    {NOTE:: The <IF::LSResourceResolver> interface is based
            on the SAX2 <CODE::EntityResolver> interface.
    }

  @enDesc:
    @@ddid:perl
    @@For: ManakaiDOM|ManakaiDOM
    @@@:
      In manakai, a <IF::LSResourceResolver> <kwd:MUST> be dereferencable
      as if it is a code reference (reference to a subroutine).
      Invoking such a code is equivalent to invoking the 
      <M::LSResourceResolver.resolveResource> method of the object.
      The code <kwd:MAY> return a reference to hash that can be
      interpreted as if a <IF::LSInput> (see description of 
      <IF::LSInput>) instead of <IF::LSInput> object itself.

      On the other hand, the <err::resource-resolver> parameter
      also allows a code reference as if it is a <IF::LSResourceResolver>
      object.

  @Method:
    @@Name: resolveResource
    @@enDesc:
      Resolves external resources.

      The <IF::LSParser> will call this method before opening any
      external resource, including the external DTD subset,  or
      external entities referenced from the document.  Note that
      the top-level document entity is not passed to the method.
      Then the application may request that the <IF::LSParser> resolve
      the external resource itself, that it use an alternative URI reference,
      or that it use an entirely different input source.
 
      An application can use this method to redirect external system
      identifiers to secure and / or local URI, to look up public
      identifiers in a catalog, or to read an entity from a database
      or other input source.
    @@Param:
      @@@Name: type
      @@@Type: DOMMain|DOMString
      @@@dis:actualType: DOMMain|ManakaiDOMURI
      @@@enDesc:
        The type of the resource being resolved.
      @@@InCase:
        @@@@Value:
          @@@@@@:
            http://www.w3.org/TR/REC-xml
          @@@@@ContentType: DISCore|URI
        @@@@enDesc:
          An XML 1.0 resoruce.
      @@@InCase:
        @@@@Value:
          @@@@@@:
            http://www.w3.org/2001/XMLSchema
          @@@@@ContentType: DISCore|URI
        @@@@enDesc:
          An XML Schema 1.0 resource.
      @@@enImplNote:
        Other types of resources are outside of the scope of
        DOM Level 3 LS spec and should recommend an absolute URI in
        order to use this method. <SRC::DOM Level 3 LS>
    @@Param:
      @@@Name: namespaceURI
      @@@Type: DOMMain|DOMString
      @@@dis:actualType: DOMMain|ManakaiDOMNamespaceURI
      @@@enDesc:
        The namespace of the resource being resolved.
        The target namespace of the schema when resolving 
        an XML Schema resource.
    @@Param:
      @@@Name: publicId
      @@@Type: DOMMain|DOMString
      @@@dis:actualType: DOMMain|PublicID||ManakaiDOM|all
      @@@enDesc:
        The public identifier of the external entity being referenced.
      @@@nullCase:
        @@@@enDesc:
          No public identifier was supplied or the resource is not
          an entity.
    @@Param:
      @@@Name: systemId
      @@@Type: DOMMain|DOMString
      @@@dis:actualType: DOMMain|SystemID||ManakaiDOM|all
      @@@enDesc:
        The system identifier or RFC 2396 URI reference of the
        external resource being referenced.
      @@@nullCase:
        @@@@enDesc:
          No system identifier was supplied.
    @@Param:
      @@@Name: baseURI
      @@@Type: DOMMain|DOMString
      @@@dis:actualType: DOMMain|ManakaiDOMURI
      @@@enDesc:
        The absolute base URI of the resource being parsed.
      @@@nullCase:
        @@@@enDesc:
          There is no base URI.
    @@Return:
      @@@Type: LSInput
      @@@enDesc:
        An <IF::LSInput> object describing the new input source.
      @@@nullCase:
        @@@@enDesc:
          Requests that the parser open a regular URI connection
          to the resource.
      @@@PerlDef:
        goto &$self;

  @ResourceDef:
    @@rdf:type: DISLang|InputProcessor
    @@rdf:type: DISLang|OutputProcessor
    @@PerlCDef:
      if (ref $INPUT eq 'HASH') {
        $INPUT = bless $INPUT, <ClassName::DOMLS:ManakaiDOMLSResourceResolver>;
      }
##LSResourceResolver

IFDef:
  @Name:  LSParserFilter
  @Description:
    @@lang:en
    @@@:
      Examine and remove nodes as they are being processed while parsing.
  @ConstGroup:
    @@QName: FilterReturnValue

     @@FullName:
        @@@@:
        Constants returned by startElement and acceptNode
        @@@lang:  en

    @@rdfs:subClassOf: idl|short||ManakaiDOM|all
    @@Type: idl|short||ManakaiDOM|all

     @@Const:
        @@@Name:  FILTER_ACCEPT
        @@@Type:
           DOMMain:short
        @@@intValue:  1
     @@Const:
        @@@Name:  FILTER_REJECT
        @@@Type:
           DOMMain:short
        @@@intValue:  2
     @@Const:
        @@@Name:  FILTER_SKIP
        @@@Type:
           DOMMain:short
        @@@intValue:  3
     @@Const:
        @@@Name:  FILTER_INTERRUPT
        @@@Type:
           DOMMain:short
        @@@intValue:  4
  @Method:
     @@Name:  startElement
     @@Param:
        @@@Name:  elementArg
        @@@Type:  Element
     @@Return:
        @@@Type:
           DOMMain:unsigned-short||ManakaiDOM|all
        @@@actualType: FilterReturnValue
  @Method:
     @@Name:  acceptNode
     @@Param:
        @@@Name:  nodeArg
        @@@Type:  Node
     @@Return:
        @@@Type:
           DOMMain:unsigned-short||ManakaiDOM|all
        @@@actualType: FilterReturnValue
  @Attr:
     @@Name:  whatToShow
     @@Get:
        @@@Type:
           DOMMain:unsigned-long||ManakaiDOM|all

IFDef:
  @Name:  LSSerializer
  @Description:
    @@lang:en
    @@@:
      Serializing (writing) a DOM document or <IF::Node> out into XML. 
      \
      <IF::LSSerializer> accepts any type of node for serialization. 
      If the node is a <IF::DOMCore:Document> or <IF::DOMXML:Entity>,
      a well-formed XML document or external (respectively) entity will
      be created when possible.  For all other types, the serialized form 
      is implementation dependent.

  @DISLang:role: SerializerRole

  @ImplNote:
    @@lang:en
    @@@:
      The result XML data is written to a string or an output stream.
      Any changes and/or fixup's made during the serialization
      affect only the serialized data, not affecting the original data.
    \
      If a <A::DOMCore:Node.namespaceURI> is empty string, then 
      it will be treated as <DOM::null> and <A::DOMCore:Node.prefix>
      value is ignored.
    \
      The XML well-formedness of the result data is guaranted
      if the document or entity comes from a parse operation
      and has remained unchanged.

  @ImplNote:
    @@lang:en
    @@@:
      {P:: Within a <IF::DOMCore:Document>, <IF::DOMCore:DocumentFragment> or 
      <IF::DOMXML:Entity>:
      \
      - <IF::DOMCore:Document>:: The entire document is written, including the
        XML declaration (unless <CP::xml-declaration> is set to <DOM::false>) 
        and the document type declaration internal subset, if exists. 
      \
      - <IF::DOMXML:Entity>:: When written directly by <M::LSSerializer.write>, 
        the entity expansion is outputed without namespace fixup.
      \
      - <IF::DOMXML:EntityReference>:: If <CP::entities> is set to <DOM::true>
        or the node is not expanded, the node is serialized as an entity 
        reference.  Child nodes (the expansion) are ignored.  Otherwise, 
        child nodes are serialized.
      \
      - <IF::DOMXML:CDATASection>:: If the node contains characters 
        that cannot be represented in the specified output encoding 
        or contains <CODE::MDE> and <CP::split-cdata-sections> 
        is set to <DOM::true>, <IF::DOMXML:CDATASection> is split and 
        the unrepresentable characters are serialized as numeric 
        character references in ordinary <CODE::content>.  The exact 
        position and number of splits is not specified.  If 
        <DOM::false> and <CP::well-formed> is set to <DOM::true>, 
        unrepresented characters are reported as <ERR::wf-invalid-character> 
        (This error is unrecoverable).
        (What is happen if <CP::well-formed> is set to <DOM::false>?)
      \
      - <IF::DOMCore:DocumentFragment>:: Child nodes are serialized.
      \
      - Other types:: The node is serialized to their corresponding XML 
        form.
      \
      }
      \
      Within character data, any character that cannot be represented 
      directly are replaced with a reference.  Characters 
      <CHAR::LESS-THAN SIGN> and <CHAR::AMPASAND> are replaced by 
      the predefined entities <XML::&lt;> and <XML::&amp;> reprectively. 
      The other predefind entities might not be used except where 
      needed (e.g. <CODE::MSE>).  Any character that cannot be represented 
      directly in the output character encoding are serialized as 
      a numeric character reference (hexadecimal representation is 
      encouraged).
      \
      Within an attribute value, characters <CHAR::APOSTROPHE> and 
      <CHAR::QUOTATION MARK> may be represented by predefined entities 
      <XML::&apos;> and <XML::&quot> respectively.  New line characters 
      and other characters that cannot be represented directly in 
      the output character encoding are serialized as a numeric 
      character reference.
      \
      Within a markup but outside of attributes, any occurence of 
      a character that cannot be represented in the output character 
      encoding is reported as a fatal error (e.g. 
      <ERR::wf-invalid-character-in-node-name>).
      \
      When <CP::normalize-characters> on <IF::LSSerializer> is set to 
      <DOM::true>, character normalization is performed accopding 
      the XML 1.1 on all data to be serialized, both markups and 
      character data.
      \
      {P:: DOM implementations are required to support::
      \
      - <CODE::UTF-8>:: Whether <CHAR::BOM> is generated or not is 
                       implementation dependent.
      \
      - <CODE::UTF-16>:: Whether the output is big endian or little endian 
                        is implementation dependent.  <CHAR::BOM> is required.
      \
      - <CODE::UTF-16BE>:: <CHAR::BOM> is not generated.
      \
      - <CODE::UTF-16LE>:: <CHAR::BOM> is not generated.
      }
      \
      If <CHAR::BOM> is not generated, <ERR::byte-order-mark-needed> warning 
      is reported.
      \
      If the <XA::encoding> declaration is generated, it will be the 
      encoding name used during the serialization.
  
      
  @Attr:
     @@Name:  domConfig
     @@Description:
       @@@lang:en
       @@@@:
         The configuration object used when serializing a DOM node. 
     @@Get:
        @@@Type:  DOMConfiguration
  @Attr:
     @@Name:  newLine
     @@Description:
       @@@lang:en
       @@@@:
         The end-of-line character sequence to be used in the XML entity 
         being written out.  Although any string can be set, 
         other sequences than the ones specified by the XML specifications 
         can result in a document that is either not serializable 
         or not well-formed.
       \
         The default value of this attribute is implementation specific.
     @@ImplNote:
       @@@lang:en
       @@@@:
         The DOM implementation should choose the default to match 
         the usual convention for text files in the environment being used. 
         The DOM implementation must choose a default sequence 
         that is admited for XML 1.0 or XML 1.1, depending on the 
          serialized content.
     @@Get:
        @@@Type:  DOMString
     @@Set:
        @@@Type:  DOMString
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Reset to the default value.
  @Attr:
     @@Name:  filter
     @@Description:
       @@@lang:en
       @@@@:
         A filter that will be called out before serializing 
         each <IF::Node>.  The filter can choose to remove 
         the node from the stream or to terminate the serialization early.
      \
         Note that the filter is invoked after the operations 
         requested by configuration parameters have been applied.
     @@Get:
        @@@Type:  LSSerializerFilter
     @@Set:
        @@@Type:  LSSerializerFilter
  @Method:
     @@Name:  write
     @@Description:
       @@@lang:en
       @@@@:
         Serialize the specified node and write it out.
     @@ImplNote:
       @@@lang:en
       @@@@:
         {P:: The encoding is:
         \
           = <A::LSOutput.encoding>
         \
           = <A::DOMCore:Document.inputEncoding>
         \
           = <A::DOMCore:Document.xmlEncoding>
         \
           = <CODE::UTF-8>
         \
         }
         \
         If the specified encoding is not supported, the fatal error 
         <ERR::unsupported-encoding> is raised.
     @@ImplNote:
       @@@lang:en
       @@@@:
         The DOM implementation is responsible of associating the 
         appropriate media type with the serialized data.
       \
         When writing to an HTTP URI, the <CODE::PUT> method is performed. 
         For other URI schemes, the mechanism for writing the data is 
         implementation dependent.
     @@Param:
        @@@Name:  nodeArg
        @@@Type:  Node
        @@@Description:
          @@@@lang:en
          @@@@@:
            The node to serialize.
     @@Param:
        @@@Name:  destination
        @@@Type:  LSOutput
        @@@Description:
          @@@@lang:en
          @@@@@:
            The destination.
     @@Return:
        @@@Type:
           DOMMain:boolean||ManakaiDOM|all
        @@@InCase:
           @@@@Value:  true
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The <P::nodeArg> was successfully serialized.
        @@@InCase:
           @@@@Value:  false
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The normal processing was stopped but the DOM 
               implementation kept serializing the document; 
               the result of the serialization being 
               implementation dependent then.
        @@@ManakaiDOM:raises:
          @@@@@: LSException.SERIALIZE_ERR
          @@@@enDesc:
            The serializer was unable to serialize the node. 
           @@@@ImplNote:
             @@@@@lang:en
             @@@@@@:
               DOM applications should use error handler to get 
               details on the error.
        @@@SerializationErrors:
  @Method:
     @@Name:  writeToURI
     @@Description:
       @@@lang:en
       @@@@:
         Serialize the specified node and write it as the resource 
         specified by the URI.
     @@ImplNote:
       @@@lang:en
       @@@@:
         This is a convinience method; it acts as if <M::LSSerializer.write> 
         was called with a <IF::LSOutput> with no encoding specified 
         and <A::LSOutput.systemId> set to <P::uri>.
     @@Param:
        @@@Name:  nodeArg
        @@@Type:  Node
        @@@Description:
          @@@@lang:en
          @@@@@:The node to serialize.
     @@Param:
        @@@Name:  uri
        @@@Type:  
          DOMMain:DOMString
        @@@actualType:
          ManakaiDOM:ManakaiDOMURI
        @@@Description:
          @@@@lang:en
          @@@@@:The URI to write to.
     @@Return:
        @@@Type:
           DOMMain:boolean||ManakaiDOM|all
        @@@InCase:
           @@@@Value:  true
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The <P::nodeArg> was successfully serialized.
        @@@InCase:
           @@@@Value:  false
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The normal processing was stopped but the implementation 
               kept serializing the document; the result of the serialization 
               is implementation dependent then.
        @@@ManakaiDOM:raises:
          @@@@@: LSException.SERIALIZE_ERR
          @@@@enDesc:
            The serializer was unable to serialize the node.
        @@@SerializationErrors:
  @Method:
     @@Name:  writeToString
     @@Description:
        @@@lang:en
        @@@@:
          Serialize the specified node and write it to a 
          <TYPE::DOMMain:DOMString>.
     @@ImplNote:
       @@@lang:en
       @@@@:
         The encoding used is the encoding of the <TYPE::DOMMain:DOMString>, 
         i.e. <CODE::UTF-16>.  No <CHAR::BOM> is generated.
     @@Param:
        @@@Name:  nodeArg
        @@@Type:  Node
        @@@Description:
          @@@@lang:en
          @@@@@:
            The node to serialize.
     @@Return:
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The serialized data.
        @@@ManakaiDOM:raises:
          @@@@@: DOMCore|DOMException.DOMSTRING_SIZE_ERR
          @@@@enDesc:
            The resulting string is too long to fit in a
            <TYPE::DOMMain:DOMString>.
        @@@ManakaiDOM:raises:
          @@@@@: LSException.SERIALIZE_ERR
          @@@@enDesc:
            The serializer was unable to serialize the node.
        @@@SerializationErrors:
##LSSerializer

IFCls3Def:
  @IFQName: LSOutput
  @ClsQName: ManakaiDOMLSOutput
  
  @ClsISA: ManakaiDOM|ManakaiDOMObject

  @Description:
    @@lang:en
    @@@:
      An output destination for data.
     \
      With this interface, DOM applications are able to 
      encapsulate information about an output destination 
      in a single object.
     \
      The DOM application is expected to provide objects 
      that implement this interface whenever such object 
      are needed.  The DOM application can either provide 
      its own objects that implements this interface, 
      or it can use the generic factory method 
      <M::DOMImplementationLS.createLSOutput> to create 
      objects that implement this interface.
      \
      <IF::LSOutput> objects belong to the DOM application and 
      the DOM implementation will never modify them.
  @ImplNote:
    @@lang:en
    @@@:
      {P:: The <IF::LSSerializer> will use the <IF::LSOutput> object 
      in the following order:
      \
      = <A::LSOutput.characterStream>
      \
      = <A::LSOutput.byteStream>
      \
      = <A::LSOutput.systemId>
      \
      The first one that is not <DOM::null> and not an empty string 
      will be used.
      \
      }
  @ImplNote:
    @@lang:en
    @@@:
      The DOM implementation may make copies of the <IF::LSOutput> 
      objects and modify them, if necessary.
  @Attr:
     @@Name:  characterStream
     @@Description:
       @@@lang:en
       @@@@:
         A writable stream to which 16-bit units can be output.
     @@ImplNote:
       @@@lang:en
       @@@@:
         The exact definition of a character stream is language 
         and binding dependent.  Depending on the binding in use, 
         this attribute may not be available.
     @@Get:
        @@@Type:  LSWriter
        @@@PerlDef:
          $r = $self->{characterStream};
     @@Set:
        @@@Type:  LSWriter
        @@@PerlDef:
          $self->{characterStream} = $given;
  @Attr:
     @@Name:  byteStream
     @@Description:
       @@@lang:en
       @@@@:
         A writable stream of bytes.
     @@ImplNote:
       @@@lang:en
       @@@@:
         The exact definition of a byte stream is language and 
         binding dependent.
     @@Get:
        @@@Type:  LSOutputStream
        @@@PerlDef:
          $r = $self->{byteStream};
     @@Set:
        @@@Type:  LSOutputStream
        @@@PerlDef:
          $self->{byteStream} = $given;
  @Attr:
     @@Name:  systemId
     @@Description:
       @@@lang:en
       @@@@:
         The system identifier or an RFC 2396 URI reference 
         for this output destination.
     @@Type:
       DOMMain:DOMString
     @@actualType:
       DOMMain:SystemID||ManakaiDOM|all
     @@Get:
        @@@PerlDef:
          $r = $self->{systemId};
     @@Set:
        @@@InCase:
          @@@@Label:
            @@@@@lang:en
            @@@@@@:
              RFC 2396 Relative URI reference
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The behavior is implementation dependent.
        @@@DOMCore:reports:
          @@@@@: DOMLS|relative-uri
          @@@@enDesc:
            If the new value is a relative reference.
          @@@@For: ManakaiDOM|ManakaiDOM
        @@@PerlDef:
          if (<Code::DOMMain:isRelativeDOMURI:: $INPUT = $given>) {
            __DOMCore:ERROR{DOMLS|relative-uri::
              DOMCore:relatedData => {$given},
            }__;
          }
          $self->{systemId} = $given;
  @Attr:
     @@Name:  encoding
     @@Description:
       @@@lang:en
       @@@@:
         The character encoding to use for the output. 
         The encoding name must be a string acceptable for 
         an XML 1.0 <XA::encoding> declaration and it is 
         recommended that character encodings registered 
         in IANAREG be referred to using their registered names.
     @@Type:
       DOMMain:DOMString
     @@Get:
       @@@PerlDef:
         $r = $self->{encoding};
     @@Set:
       @@@PerlDef:
         $self->{encoding} = $given;

  @IntMethod:
    @@Name:new
    @@ManakaiDOM:isStatic:1
    @@Description:
      @@@lang:en
      @@@@:
        Construct a new instance of the <IF::OutInput>.
    @@Return:
      @@@Type: ManakaiDOMLSOutput
      @@@Description:
        @@@@lang:en
        @@@@@:
          The newly created <IF::LSOutput> object.
      @@@PerlDef:
        $r = bless {}, $self;
##LSOutput

IFDef:
  @Name:  LSProgressEvent
#  @ISA:
#     DOMEvents:Event
  @Attr:
     @@Name:  input
     @@Get:
        @@@Type:  LSInput
  @Attr:
     @@Name:  position
     @@Get:
        @@@Type:
           DOMMain:unsigned-long||ManakaiDOM|all
  @Attr:
     @@Name:  totalSize
     @@Get:
        @@@Type:
           DOMMain:unsigned-long||ManakaiDOM|all
IFDef:
  @Name:  LSLoadEvent
#  @ISA:
#     DOMEvents:Event
  @Attr:
     @@Name:  newDocument
     @@Get:
        @@@Type:  Document
  @Attr:
     @@Name:  input
     @@Get:
        @@@Type:  LSInput

IFDef:
  @Name:  LSSerializerFilter
  @Description:
    @@lang:en
    @@@:
      Examine and filter DOM nodes as they are being processed for 
      the serialization.
#  @ISA:
#     DOMTraversal:NodeFilter
  @Attr:
     @@Name:  whatToShow
     @@Get:
        @@@Type:
           DOMMain:unsigned-long||ManakaiDOM|all

ElementTypeBinding:
  @Name: ErrDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DOMCore|DOMErrorType
    @@For: ManakaiDOM|DOM3

ElementTypeBinding:
  @Name: errname
  @ElementType:
    DOMCore:errorType
  @ShadowContent:
    @@ContentType: DISCore|String

enImplNote:
  <err::DOMCore:check-character-normalization-failure>
  in DOM Level 3 LS is defined in <Module::MDOM:DOMCore>.

ErrDef:
  @QName: doctype-not-allowed
  @errname: doctype-not-allowed
  @enDesc:
    If the configuration parameter <err::disallow-doctype> is set
    to <DOM::true> and a document type declaration is encountered.
  @DOMCore:severity: DOMCore|SEVERITY_FATAL_ERROR
  
ErrDef:
  @QName: no-input-specified
  @errname: no-input-specified
  @enDesc:
    When loading a document, no input is specified in the 
    <IF::LSInput> object.
  @DOMCore:severity: DOMCore|SEVERITY_FATAL_ERROR

ErrDef:
  @QName: pi-base-uri-not-preserved
  @errname: pi-base-uri-not-preserved
  @enDesc:
    If a processing instruction is encountered in context 
    where the base URI of the processing instruction cannot be preserved.
  @DOMCore:severity: DOMCore|SEVERITY_WARNING

ErrDef:
  @QName: unbound-prefix-in-entity
  @errname: unbound-prefix-in-entity
  @enDesc:
    The configuration parameter <cfg::DOMCore:namespaces> is 
    set to <DOM::true> and an unbound namespace prefix is
    encountered in the replacement text of an entity.

    This warning is implementation dependent and not enforced
    since some existing parsers may not recognize unbound namespace
    prefixes in the replacement text of entities.  <SRC::DOM Level 3 LS>
  @DOMCore:severity: DOMCore|SEVERITY_WARNING

ErrDef:
  @QName: unknown-character-denormalization
  @errname: unknown-character-denormalization
  @enDesc:
    If the configuration parameter 
    <cfg::ignore-unknown-character-denormalizations> is set to <DOM::false>
    and a character is encountered for which the processor cannot
    determine the normalization properties.
  @DOMCore:severity: DOMCore|SEVERITY_FATAL_ERROR

ErrDef:
  @QName: unknown-character-denormalization.warning
  @errname: unknown-character-denormalization
  @enDesc:
    If the configuration parameter 
    <cfg::ignore-unknown-character-denormalizations> is set to <DOM::true>
    and verifying full normalization of XML 1.1 is supported 
    and a character is encountered for which the processor cannot
    determine the normalization properties.
  @DOMCore:severity: DOMCore|SEVERITY_WARNING

ErrDef:
  @QName: unsupported-encoding
  @errname: unsupported-encoding
  @enDesc:
    If an unsupported encoding is encountered.
  @DOMCore:severity: DOMCore|SEVERITY_FATAL_ERROR

ErrDef:
  @QName: unsupported-media-type
  @errname: unsupported-media-type
  @enDesc:
    If the configuration parameter <cfg::supported-media-types-only>
    is set to <DOM::true> and an unsupported media type is encountered.
  @DOMCore:severity: DOMCore|SEVERITY_FATAL_ERROR

ElementTypeBinding:
  @Name: ParseTimeErrors
  @ElementType:
    DOMCore:reports
  @ShadowContent:
    @@@: DOMCore|check-character-normalization-failure
    @@Description:
      @@@lang:en
      @@@@:
        If the configuration parameter
        <cfg::DOMCore:check-character-normalization> is set to
        <DOM::true> and a string is encountered that fails normalization
        checking.
  @ShadowSibling:
    @@DOMCore:reports:
      @@@@: doctype-not-allowed
      @@@Description:
        @@@@lang:en
        @@@@@:
          If the configuration parameter <err::disallow-doctype> is set
          to <DOM::true> and a document type declaration is encountered.
    @@DOMCore:reports:
      @@@@: no-input-specified
      @@@Description:
        @@@@lang:en
        @@@@@:
          When loading a document, no input is specified in the 
          <IF::LSInput> object.
    @@DOMCore:reports:
      @@@@: pi-base-uri-not-preserved
      @@@Description:
        @@@@lang:en
        @@@@@:
          If a processing instruction is encountered in context 
          where the base URI of the processing instruction cannot be preserved.
    @@DOMCore:reports:
      @@@@: unbound-prefix-in-entity
      @@@Description:
        @@@@lang:en
        @@@@@:
          The configuration parameter <cfg::DOMCore:namespaces> is 
          set to <DOM::true> and an unbound namespace prefix is
          encountered in the replacement text of an entity.
    @@DOMCore:reports:
      @@@@: unknown-character-denormalization
      @@@Description:
        @@@@lang:en
        @@@@@:
          If the configuration parameter 
          <cfg::ignore-unknown-character-denormalizations> is set to <DOM::false>
          and a character is encountered for which the processor cannot
          determine the normalization properties.
    @@DOMCore:reports:
      @@@@: unknown-character-denormalization.warning
      @@@Description:
        @@@@lang:en
        @@@@@:
          If the configuration parameter 
          <cfg::ignore-unknown-character-denormalizations> is set to <DOM::true>
          and a character is encountered for which the processor cannot
          determine the normalization properties.
    @@DOMCore:reports:
      @@@@: unsupported-encoding
      @@@Description:
        @@@@lang:en
        @@@@@:
          If an unsupported encoding is encountered.
    @@DOMCore:reports:
      @@@@: unsupported-media-type
      @@@Description:
        @@@@lang:en
        @@@@@:
          If the configuration parameter <cfg::supported-media-types-only>
          is set to <DOM::true> and an unsupported media type is encountered.
    @@ImplNote:
      @@@lang:en
      @@@@:
        In addition, implementations are expected to raise implementation
        specific errors and warnings for any other error and warning
        cases such as I/O error and so on.

ElementTypeBinding:
  @Name: SerializationErrors
  @ElementType:
    DOMCore:reports
  @ShadowContent:
    @@@: DOMCore|wf-invalid-character
    @@Description:
      @@@lang:en
      @@@@:
        If the <cfg::DOMCore|split-cdata-sections>
        parameter is set to <DOM::false> and a <IF::DOMXML:CDATASection>
        node contains characters that cannot be represented in the
        specified output encoding.  This error is not recoverable.
  @ShadowSibling:
    @@DOMCore:reports:
      @@@@: DOMCore|wf-invalid-character-in-node-name
      @@@Description:
        @@@@lang:en
        @@@@@:
          Within markup a character is encountered that cannot be
          represented in the output encoding.
    @@DOMCore:reports:
      @@@@: no-output-specified
      @@@Description:
        @@@@lang:en
        @@@@@:
          If no output is specified in <IF::LSOutput> when writing to it.
    @@DOMCore:reports:
      @@@@: unbound-prefix-in-entity-reference
      @@@Description:
        @@@@lang:en
        @@@@@:
          If the configuration parameter <cfg::DOMCore:namespaces> is
          set to <DOM::true> and an entity whose replacement text contains
          unbound namespace prefixes is referenced in context where
          there are no bindings for the namespace prefixes.
    @@DOMCore:reports:
      @@@@: unsupported-encoding
      @@@Description:
        @@@@lang:en
        @@@@@:
          If an unsupported encoding is encountered.
    @@DOMCore:reports:
      @@@@: DOMLS|byte-order-mark-needed
      @@@Description:
        @@@@lang:en
        @@@@@:
          If the <CHAR::BYTE ORDER MARK> is not generated.
    @@ImplNote:
      @@@lang:en
      @@@@:
        In addition, implementations are expected to raise implementation
        specific errors and warnings for any other error and warning
        cases such as I/O error and so on.
    @@DOMCore:reports:
      @@@@: DOMLS|canonical-form-not-xml10
      @@@Description:
        @@@@lang:en
        @@@@@:
          If the configuration parameter <cfg::canonical-form> is
          set to <DOM::true> and an attempt is made to serialize
          a non-XML 1.0 document.

ErrDef:
  @QName: no-output-specified
  @errname: no-output-specified
  @enDesc:
    If no output is specified in <IF::LSOutput> when writing to it.
  @DOMCore:severity: DOMCore|SEVERITY_FATAL_ERROR

ErrDef:
  @QName: unbound-prefix-in-entity-reference
  @errname: unbound-prefix-in-entity-reference
  @enDesc:
    If the configuration parameter <cfg::DOMCore:namespaces> is
    set to <DOM::true> and an entity whose replacement text contains
    unbound namespace prefixes is referenced in context where
    there are no bindings for the namespace prefixes.
  @DOMCore:severity: DOMCore|SEVERITY_FATAL_ERROR

ErrDef:
  @QName: DOMLS|canonical-form-not-xml10
  @enDesc:
    If the configuration parameter <cfg::canonical-form> is 
    set to <DOM::true> and an attempt is made to serialize
    a non-XML 1.0 document.
  @enImplNote:
    This error is not given any name in DOM Level 3 LS.
  @DOMCore:severity: DOMCore|SEVERITY_FATAL_ERROR

ErrDef:
  @QName: byte-order-mark-needed
  @errname: byte-order-mark-needed
  @enDesc:
    If the <CHAR::BYTE ORDER MARK> is not generated.
  @DOMCore:severity: DOMCore|SEVERITY_WARNING

ElementTypeBinding:
  @Name: intValue
  @ElementType:
    dis:Value
  @ShadowContent:
    @@ContentType: DISCore|Integer

ElementTypeBinding:
  @Name: CParam
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@: DOMCore|DOMConfigurationParameter
      @@@For: ManakaiDOM|DOM
    @@rdf:type:
      @@@@: DISCore|Property
      @@@For: =ManakaiDOM|all
    @@For: ManakaiDOM|DOM3
    @@For: =ManakaiDOM|all

ElementTypeBinding:
  @Name: boolCParam
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@: DOMCore|DOMConfigurationParameter
      @@@For: ManakaiDOM|DOM
    @@rdf:type:
      @@@@: DISCore|Property
      @@@For: =ManakaiDOM|all
    @@For: ManakaiDOM|DOM3
    @@For: =ManakaiDOM|all
    @@Type: idl|boolean||ManakaiDOM|all

ElementTypeBinding:
  @Name: TrueCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase
    @@Value:
      @@@@: 1
      @@@ContentType: DISCore|Boolean
    @@Type:
      DOMMain:boolean::ManakaiDOM:all

ElementTypeBinding:
  @Name: FalseCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase
    @@Value:
      @@@@: 0
      @@@ContentType: DISCore|Boolean
    @@Type:
      DOMMain:boolean::ManakaiDOM:all

ElementTypeBinding:
  @Name: boolValue
  @ElementType:
    dis:Value
  @ShadowContent:
    @@ContentType: DISCore|Boolean

ElementTypeBinding:
  @Name: cfgname
  @ElementType:
    DOMCore:domConfigurationParameterName
  @ShadowContent:
    @@ContentType: DISCore|String

ElementTypeBinding:
  @Name: enImplNote
  @ElementType:
    dis:ImplNote
  @ShadowContent:
    @@lang:en

boolCParam:
  @QName: charset-overrides-xml-encoding
  @cfgname: charset-overrides-xml-encoding
  @IsSupportRequired:1
  @DOMCore:targetType: DOMLS|LSParser
  @TrueCase:
    @@IsDefault:1
    @@enImplNote:
      [optional] (default) !
    @@enDesc:
      If a higher level protocol such as HTTP provides the character
      encoding information on the input stream being processed, 
      it will override any encoding specified in the XML declaration
      of the XML document entity or the text declaration of an XML
      parsed entity.

      {NOTE:: Explicitly setting an encoding in the <IF::LSInput>
              overrides any encoding information from the protocol.
      }
  @FalseCase:
    @@IsSupportRequired:1
    @@enDesc:
      The parser ignores any character encoding information from
      higher level protocols.

boolCParam:
  @QName: disallow-doctype
  @cfgname: disallow-doctype
  @IsSupportRequired:1
  @DOMCore:targetType: DOMLS|LSParser
  @TrueCase:
    @@enDesc:
      Throws a fatal <err::doctype-not-allowed> error if a document
      type node is found while parsing the document.
  @FalseCase:
    @@IsSupportRequired:1
    @@IsDefault:1
    @@enDesc:
      Allows document type node in the document.

boolCParam:
  @QName: ignore-unknown-character-denormalizations
  @cfgname: ignore-unknown-character-denormalizations
  @IsSupportRequired:1
  @DOMCore:targetType: DOMLS|LSParser
  @DOMCore:targetType: DOMLS|LSSerializer
  @TrueCase:
    @@IsSupportRequired:1
    @@IsDefault:1
    @@enDesc:
      If, while verifying full normalization when XML 1.1 is supported,
      the implementation encounters characters for which it cannot
      determine the normalization properties, then the implementation
      will ignore any possible denormalizations caused by these characters.
      An <err::unknown-character-denormalization> warning is also
      raised for <IF::LSSerializer>.

      This parameter is ignored for XML 1.0 documents in
      <IF::LSParser>.
  @FalseCase:
    @@enDesc:
      Throws a fatal <err::unknown-character-denormalization> error
      if a character is encountered for which the implementation
      cannot determine the normalization properties.

CParam:
  @QName: resource-resolver
  @cfgname: resource-resolver
  @DOMCore:nodeProp:
    @@@: rresolver
    @@For: =ManakaiDOM|all
  @IsSupportRequired:1
  @DOMCore:targetType: DOMCore|Document
  @DOMCore:targetType: DOMLS|LSParser
  @Type: DOMLS|LSResourceResolver
  @enDesc:
    A reference to a <IF::LSResourceResolver> object.
    When an external resource such as XML external entity or
    an XML Schema schema definition document is encountered,
    the implementation will request that the <IF::LSResourceResolver>
    referenced in this parameter resolvers the resource.

    The resolution of the system identifiers associated with entities
    is done using <A::DOMCore:Document.documentURI>.  However,
    when the <Feature::LS> feature is supported, the
    <M::DOMCore:Document.normalizeDocument> will invoke the resource resolver
    if the parameter is set.  <SRC::DOM Level 3 Core>
  @nullCase:
    @@enDesc:
      No resource resolver.
  @Method:
    @@rdf:type: DOMCore|DOMConfigurationParameterSetter
    @@Param:
      @@@Name: name
      @@@Type: DOMMain|DOMString
      @@@dis:actualType: DOMConfigurationParameterName
      @@@enDesc: The parameter name.
    @@Param:
      @@@Name: value
      @@@Type: DOMMain|DOMUserData
      @@@dis:actualType: DOMMain|DOMString
      @@@enDesc: The new value.
    @@Return:
      @@@Type: idl|void||ManakaiDOM|all
      @@@PerlCDef:
        $self->[1]->{<H::DOMLS:resource-resolver>} = $value;

ElementTypeBinding:
  @Name: nullCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase
    @@Value:
      @@@is-null:1

boolCParam:
  @QName: supported-media-types-only
  @cfgname: supported-media-types-only
  @IsSupportRequired:1
  @DOMCore:targetType: DOMLS|LSParser
  @TrueCase:
    @@enDesc:
      Checkes that the media type of the parsed resource is a supported
      media type.  If an unsupported media type is encountered, a fatal
      <err::unsupported-media-type> error will be raised.  The media 
      types defined in RFC 3023 must always be accepted.
  @FalseCase:
    @@IsSupportRequired:1
    @@IsDefault:1
    @@enDesc:
      Accepts any media type.

boolCParam:
  @QName: discard-default-content
  @cfgname: discard-default-content
  @IsSupportRequired:1
  @DOMCore:targetType: DOMLS|LSSerializer
  @TrueCase:
    @@IsSupportRequired:1
    @@IsDefault:1
    @@enDesc:
      Discards default contents.
      If the <A::Attr.specified> is <DOM::false>, the attribute should
      be discarded.  Note that some implementation might use whatever
      information available to the implementation, such as schema
      definitions, to determine what attributes and content to discard.
    @@SetParam:
      @@@@: canonical-form
      @@@boolValue:0
  @FalseCase:
    @@IsSupportRequired:1
    @@enDesc:
      Keeps all attributes and all contents.

boolCParam:
  @QName: format-pretty-print
  @cfgname: format-pretty-print
  @IsSupportRequired:1
  @DOMCore:targetType: DOMLS|LSSerializer
  @TrueCase:
    @@enDesc:
      Formats the output by adding white spaces to produce a 
      pretty-printed, indented, human-readable form.  The 
      exact form of the transformations is not specified.  Since
      pretty-printing changes the content of the document and 
      might affect the validity of the document, validating 
      implementations should preserve validity.
    @@SetParam:
      @@@@: canonical-form
      @@@boolValue:0
  @FalseCase:
    @@IsSupportRequired:1
    @@IsDefault:1
    @@enDesc:
      Does not pretty-print the result.

boolCParam:
  @QName: xml-declaration
  @cfgname: xml-declaration
  @IsSupportRequired:1
  @DOMCore:targetType: DOMLS|LSSerializer
  @TrueCase:
    @@IsSupportRequired:1
    @@IsDefault:1
    @@enDesc:
      If a <IF::DOMCore:Document>, <IF::DOMCore:Element>, or 
      <IF::DOMXML:Entity> node is serialized, the XML declaration
      or text declaration should be included.

      The <XA::version> is set to <A::DOMCore:Document.xmlVersion> if 
      the document is a Level 3 document and its value is non-<DOM::null>,
      otherwise to <XML::1.0>.
    
      The output <XA::encoding> is set to the output encoding
      used to serialize (see <M::LSSerializer.write>).
    @@SetParam:
      @@@@: canonical-form
      @@@boolValue:0
  @FalseCase:
    @@IsSupportRequired:1
    @@enDesc:
      Does not serialize the XML declaration or text declarations.
      The implementation reports an <err::xml-declaration-needed>
      warning if this will cause problems.

enImplNote:
  See also <Module::MDOM:DOMCore> for configuration parameters.
