#!/usr/bin/perl 
## This file is automatically generated
## 	at 2006-12-30T14:35:27+00:00,
## 	from file "../DOM/Element.dis",
## 	module <http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.Element>,
## 	for <http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#all>.
## Don't edit by hand!
use strict;
require Message::DOM::DOMCore;
require Message::DOM::Document;
require Message::DOM::TreeCore;
require Message::Util::Error::DOMException;
package Message::DOM::Element;
our $VERSION = 20061230.1435;
sub DERIVATION_EXTENSION ();
sub DERIVATION_LIST ();
sub DERIVATION_RESTRICTION ();
sub DERIVATION_UNION ();
sub AUTOLOAD {


        my $al = our $AUTOLOAD;
        $al =~ s/.+:://;
        if ({'DERIVATION_EXTENSION',
'Message::DOM::IF::TypeInfo::DERIVATION_EXTENSION',
'DERIVATION_LIST',
'Message::DOM::IF::TypeInfo::DERIVATION_LIST',
'DERIVATION_RESTRICTION',
'Message::DOM::IF::TypeInfo::DERIVATION_RESTRICTION',
'DERIVATION_UNION',
'Message::DOM::IF::TypeInfo::DERIVATION_UNION'}->{$al}) {
          no strict 'refs';
          *{$AUTOLOAD} = \&{{'DERIVATION_EXTENSION',
'Message::DOM::IF::TypeInfo::DERIVATION_EXTENSION',
'DERIVATION_LIST',
'Message::DOM::IF::TypeInfo::DERIVATION_LIST',
'DERIVATION_RESTRICTION',
'Message::DOM::IF::TypeInfo::DERIVATION_RESTRICTION',
'DERIVATION_UNION',
'Message::DOM::IF::TypeInfo::DERIVATION_UNION'}->{$al}};
          goto &{$AUTOLOAD};
        } else {
          require Carp;
          Carp::croak (qq<Can't locate method "$AUTOLOAD">);
        }
      
}
sub import {


        my $self = shift;
        if (@_) {
          local $Exporter::ExportLevel = $Exporter::ExportLevel + 1;
          $self->SUPER::import (@_);
          for (grep {not /\W/} @_) {
            eval qq{$_};
          }
        }
      
}
our %EXPORT_TAG = ('DerivationMethods',
['DERIVATION_EXTENSION',
'DERIVATION_LIST',
'DERIVATION_RESTRICTION',
'DERIVATION_UNION']);
our @EXPORT_OK = ('DERIVATION_EXTENSION',
'DERIVATION_LIST',
'DERIVATION_RESTRICTION',
'DERIVATION_UNION');
use Exporter; push our @ISA, 'Exporter';
package Message::DOM::Element::ManakaiDOMDocumentElement;
our $VERSION = 20061230.1435;
push @Message::DOM::Document::ManakaiDOMDocument::ISA, q<Message::DOM::Element::ManakaiDOMDocumentElement> unless Message::DOM::Document::ManakaiDOMDocument->isa (q<Message::DOM::Element::ManakaiDOMDocumentElement>);
use Char::Class::XML 'InXMLNCNameChar10',
'InXMLNCNameChar11',
'InXMLNCNameStartChar11',
'InXMLNameChar10',
'InXMLNameChar11',
'InXMLNameStartChar11',
'InXML_NCNameStartChar10',
'InXML_NameStartChar10';
sub create_element ($$) {
my ($self, $tagName) = @_;
my $r;

{

my 
$strict = $self->
strict_error_checking
;
if ($strict) {
  my $version = $self->
xml_version
;
  

{

if 
(defined $tagName) {
    if (((not defined $version or $version eq '1.0') and
         not 
($tagName =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        (defined $version and $version eq '1.1' and
         not 
($tagName =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $tagName, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureXMLName', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
}


}

;
}


{

local $Error::Depth = $Error::Depth + 1;

{



  $self->
strict_error_checking
 (
0
);
  $r = $self->
create_element_ns
 (
undef
, [
undef
, $tagName]);
  $self->
strict_error_checking
 ($strict);



}


;}

;


}
$r}
sub create_element_ns ($$$) {
my ($self, $namespaceURI, $qualifiedName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  require Message::DOM::DOMMain;
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:1167487489:32060:02l5m38360';

;

  $namespaceURI = undef;
}


}
my $r;

{

my 
($prefix, $lname) = ref $qualifiedName eq 'ARRAY'
                         ? @$qualifiedName
                         : split /:/, $qualifiedName, 2;
($prefix, $lname) = (
undef
, $prefix) unless defined $lname;
$qualifiedName = defined $prefix ? $prefix.':'.$lname : $lname;

if ($self->
strict_error_checking
) {
  my $version = $self->
xml_version
;
  

{

if 
(defined $version and $version eq '1.1') {
    unless (
($qualifiedName =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => '1.1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureXMLQName', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
    }
    unless (
($qualifiedName =~ /\A\p{InXMLNCNameStartChar11}\p{InXMLNCNameChar11}*(?::\p{InXMLNCNameStartChar11}\p{InXMLNCNameChar11}*)?\z/)
) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_MALFORMED_QNAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => '1.1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureXMLQName', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
    }
  } else {
    unless (
($qualifiedName =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureXMLQName', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
    }
    unless (
($qualifiedName =~ /\A\p{InXML_NCNameStartChar10}\p{InXMLNCNameChar10}*(?::\p{InXML_NCNameStartChar10}\p{InXMLNCNameChar10}*)?\z/)
) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_MALFORMED_QNAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureXMLQName', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
    }
  }


}

;
  

{

if 
(defined $prefix) {
  if (not defined $namespaceURI) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_PREFIX_WITH_NULL_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#checkXMLNamesQName';

;
  } elsif ($prefix eq 'xml' and $namespaceURI ne 
'http://www.w3.org/XML/1998/namespace'
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $namespaceURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XML_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#checkXMLNamesQName';

;
  } elsif ($prefix eq 'xmlns' and $namespaceURI ne 
'http://www.w3.org/2000/xmlns/'
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $namespaceURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XMLNS_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#checkXMLNamesQName';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/XML/1998/namespace' and 
$prefix ne 'xml') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XML_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#checkXMLNamesQName';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/2000/xmlns/' and 
$prefix ne 'xmlns') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XMLNS_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#checkXMLNamesQName';

;
  }
} else { ## No prefix
  if (not defined $namespaceURI) {
    #
  } elsif ($namespaceURI eq 
'http://www.w3.org/2000/xmlns/' and 
$lname ne 'xmlns') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => undef, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XMLNS_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#checkXMLNamesQName';

;
  }
}


}

;
  if (defined $namespaceURI and $namespaceURI eq 
'http://www.w3.org/2000/xmlns/' and
      
($qualifiedName eq 'xmlns' or
       (defined $prefix and $prefix eq 'xmlns'))) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'create_element_ns', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMDocumentElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'qualifiedName', 'http://www.w3.org/2001/04/infoset#localName' => $lname, 'http://www.w3.org/2001/04/infoset#namespaceName' => $namespaceURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XMLNS_URI';

;
  }
}

## -- Choose the most apppropriate class for the element
my $class = 
'Message::DOM::Element::ManakaiDOMElement'
;
CLS: {
  my $nsuri = defined $namespaceURI ? $namespaceURI : '';

  ## Use cases:
  ##   - |html5:a| element type
  ##   - |html5:*| element types
  A: for my $nm (
    [$nsuri, $lname],
    [$nsuri, '*'],
  ) {
    unless ($Message::DOM::Element::ElementClass
        ->{$nm->[0]}->{$nm->[1]}) {
      if ($Message::Util::AutoLoad::Registry::ElementType
          ->{$nm->[0]}->{$nm->[1]}) {
        eval qq{require
            $Message::Util::AutoLoad::Registry::ElementType->{
            $nm->[0]}->{$nm->[1]}->{module}};
        die $@ if $@;
      }
    }

    if ($Message::DOM::Element::ElementClass
        ->{$nm->[0]}->{$nm->[1]}) {
      $class = $Message::DOM::Element::ElementClass
          ->{$nm->[0]}->{$nm->[1]};
      last A;
    }
  } # A
} # CLS

$r = bless \{
  
'od'
 => $self,
  
'child'
 => [],
  
'attr'
 => {},
}, $class;
Scalar::Util::weaken ($$r->{
'od'
});


{

if 
(defined $namespaceURI) {
  if (ref $namespaceURI eq 'SCALAR') {
    $$r->{'ns'} = $namespaceURI;
  } elsif (defined $Message::Util::ManakaiStringRef::Value{$namespaceURI}) {
    $$r->{'ns'} = $Message::Util::ManakaiStringRef::Value{$namespaceURI};
  } else {
    require Scalar::Util;
    $$r->{'ns'} = $Message::Util::ManakaiStringRef::Value{$namespaceURI} = \($namespaceURI);
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{$namespaceURI});
  }
} else {
  CORE::delete $$r->{'ns'};
}


}

;


{

if 
(defined $prefix) {
  if (ref $prefix eq 'SCALAR') {
    $$r->{'pfx'} = $prefix;
  } elsif (defined $Message::Util::ManakaiStringRef::Value{$prefix}) {
    $$r->{'pfx'} = $Message::Util::ManakaiStringRef::Value{$prefix};
  } else {
    require Scalar::Util;
    $$r->{'pfx'} = $Message::Util::ManakaiStringRef::Value{$prefix} = \($prefix);
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{$prefix});
  }
} else {
  CORE::delete $$r->{'pfx'};
}


}

;


{

if 
(defined $lname) {
  if (ref $lname eq 'SCALAR') {
    $$r->{'ln'} = $lname;
  } elsif (defined $Message::Util::ManakaiStringRef::Value{$lname}) {
    $$r->{'ln'} = $Message::Util::ManakaiStringRef::Value{$lname};
  } else {
    require Scalar::Util;
    $$r->{'ln'} = $Message::Util::ManakaiStringRef::Value{$lname} = \($lname);
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{$lname});
  }
} else {
  CORE::delete $$r->{'ln'};
}


}

;

## Default attributes


{


{

local $Error::Depth = $Error::Depth + 1;

{


  XDA: 
{
    my $__cfg = $self->
dom_config
;
    last XDA unless $__cfg->
get_parameter

                              (
'http://suika.fam.cx/www/2006/dom-config/dtd-default-attribute'
);
    my $__doctype = $self->
doctype
;
    last XDA unless defined $__doctype;
    $__doctype = $__doctype->
get_feature

                             (
'http://suika.fam.cx/www/2006/feature/XDoctype'
 => '3.0');
    last XDA unless defined $__doctype;
    my $__et = $__doctype->
get_element_type_definition_node

                             ($qualifiedName);
    if ($__et) {
      my $__orig_strict = $self->
strict_error_checking
;
      $self->
strict_error_checking
 (
0
);
      my %__gattr;
      my %__has_attr;
      my %__pfx_to_uri;
      my $__copy_asis = $__cfg->
get_parameter

                               (
'http://suika.fam.cx/www/2006/dom-config/clone-entity-reference-subtree'
);
      $__cfg->
set_parameter

                    (
'http://suika.fam.cx/www/2006/dom-config/clone-entity-reference-subtree'
 => 
1
);
      for my $__at (@{$__et->
attribute_definitions
}) {
        my $__at_default = $__at->
default_type
;
        if ($__at_default == 
4 or
            
$__at_default == 
1
) {
          my ($__nn1, $__nn2) = split /:/, $__at->
node_name
;
          if (defined $__nn2) { # prefixed
            if ($__nn1 eq 'xmlns') {
              ## TODO: NCName check, prefix check and NSURI check
              my $__attr = $self->
create_attribute_ns

                                        (
'http://www.w3.org/2000/xmlns/'
, [$__nn1, $__nn2]);
              for my $__at_child (@{$__at->
child_nodes
}) {
                $__attr->
append_child

                           ($__at_child->
clone_node
 (
1
));
              }
              $__attr->
manakai_attribute_type

                         ($__at->
declared_type
);
              my $__nsuri = $__attr->
value
;
              ## TODO: Namespace well-formedness check (NSURI), v1.1 chk
              $__pfx_to_uri{$__nn2} = $__nsuri;
              $r->
set_attribute_node_ns
 ($__attr);
                       ## This method changes |specified| flag
              $__attr->
specified
 (
0
);
              $__has_attr{
'http://www.w3.org/2000/xmlns/'
}->{$__nn2} = 
1
;
            } else {
              ## TODO: NCName check
              $__gattr{$__nn1}->{$__nn2} = $__at;
            }
          } else {            # no prefixed
            my $__attr;
            if ($__nn1 eq 'xmlns') {
              $__attr = $self->
create_attribute_ns

                                        (
'http://www.w3.org/2000/xmlns/'
, 'xmlns');
              $__has_attr{
'http://www.w3.org/2000/xmlns/'
}->{xmlns} = 
1
;
            } else {
              $__attr = $self->
create_attribute_ns

                                        (
undef
, $__nn1);
              ## TODO: NCName check
            }
            for my $__at_child (@{$__at->
child_nodes
}) {
              $__attr->
append_child

                         ($__at_child->
clone_node
 (
1
));
            }
            $__attr->
manakai_attribute_type

                       ($__at->
declared_type
);
            ## TODO: Namespace well-formedness check (NSURI)
            $r->
set_attribute_node_ns
 ($__attr);
                       ## This method changes |specified| flag
            $__attr->
specified
 (
0
);
          }
        }
      } # attrdefs
      for my $__pfx (keys %__gattr) {
        my $__nsuri = $__pfx_to_uri{$__pfx};
        unless (defined $__nsuri) {
          ## TODO: Namespace well-formedness error
        }
        LN: for my $__ln (keys %{$__gattr{$__pfx}}) {
          if ($__has_attr{defined $__nsuri ? $__nsuri : ''}->{$__ln}) {
            ## TODO: Namespace well-formedness error
            next LN;
          }
          ## TODO: NCName check, prefix check and NSURI check
          my $__at = $__gattr{$__pfx}->{$__ln};
          my $__attr = $self->
create_attribute_ns

                                    ($__nsuri, [$__pfx, $__ln]);
          for my $__at_child (@{$__at->
child_nodes
}) {
            $__attr->
append_child

                       ($__at_child->
clone_node
 (
1
));
          }
          $__attr->
manakai_attribute_type

                     ($__at->
declared_type
);
          $r->
set_attribute_node_ns
 ($__attr);
                       ## This method changes |specified| flag
          $__attr->
specified
 (
0
);
          $__has_attr{defined $__nsuri ? $__nsuri : ''}->{$__ln} = 
1
;
        } # LN
      } # pfx
      $__cfg->
set_parameter

              (
'http://suika.fam.cx/www/2006/dom-config/clone-entity-reference-subtree'
 => $__copy_asis);
      $self->
strict_error_checking
 ($__orig_strict);
    }
  } # XDA



}


;}

;


}

;


}
$r}
sub create_attribute ($$) {
my ($self, $name) = @_;
my $r;

{

my 
$strict = $self->
strict_error_checking
;
if ($strict) {
  my $version = $self->
xml_version
;
  

{

if 
(defined $name) {
    if (((not defined $version or $version eq '1.0') and
         not 
($name =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        (defined $version and $version eq '1.1' and
         not 
($name =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $name, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureXMLName', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
}


}

;
}


{

local $Error::Depth = $Error::Depth + 1;

{



  $self->
strict_error_checking
 (
0
);
  $r = $self->
create_attribute_ns
 (
undef
, [
undef
, $name]);
  $self->
strict_error_checking
 ($strict);



}


;}

;


}
$r}
sub create_attribute_ns ($$$) {
my ($self, $namespaceURI, $qualifiedName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  require Message::DOM::DOMMain;
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:1167487489:32060:02l5m38360';

;

  $namespaceURI = undef;
}


}
my $r;

{

my 
($prefix, $lname) = ref $qualifiedName eq 'ARRAY'
                         ? @$qualifiedName
                         : split /:/, $qualifiedName, 2;
($prefix, $lname) = (
undef
, $prefix) unless defined $lname;

## TODO: autoload
if ((defined $namespaceURI and $namespaceURI eq 
'http://www.w3.org/XML/1998/namespace'
) or
    ($lname =~ /^xml:/)) {
  require Message::DOM::XML;
}

if ($self->
strict_error_checking
) {
  my $version = $self->
xml_version
;
  $qualifiedName = defined $prefix ? $prefix.':'.$lname
                                   : $lname;
  

{

if 
(defined $version and $version eq '1.1') {
    unless (
($qualifiedName =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => '1.1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureXMLQName', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
    }
    unless (
($qualifiedName =~ /\A\p{InXMLNCNameStartChar11}\p{InXMLNCNameChar11}*(?::\p{InXMLNCNameStartChar11}\p{InXMLNCNameChar11}*)?\z/)
) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_MALFORMED_QNAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => '1.1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureXMLQName', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
    }
  } else {
    unless (
($qualifiedName =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureXMLQName', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
    }
    unless (
($qualifiedName =~ /\A\p{InXML_NCNameStartChar10}\p{InXMLNCNameChar10}*(?::\p{InXML_NCNameStartChar10}\p{InXMLNCNameChar10}*)?\z/)
) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_MALFORMED_QNAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureXMLQName', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
    }
  }


}

;
  

{

if 
(defined $prefix) {
  if (not defined $namespaceURI) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_PREFIX_WITH_NULL_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#checkXMLNamesQName';

;
  } elsif ($prefix eq 'xml' and $namespaceURI ne 
'http://www.w3.org/XML/1998/namespace'
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $namespaceURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XML_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#checkXMLNamesQName';

;
  } elsif ($prefix eq 'xmlns' and $namespaceURI ne 
'http://www.w3.org/2000/xmlns/'
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $namespaceURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XMLNS_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#checkXMLNamesQName';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/XML/1998/namespace' and 
$prefix ne 'xml') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XML_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#checkXMLNamesQName';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/2000/xmlns/' and 
$prefix ne 'xmlns') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XMLNS_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#checkXMLNamesQName';

;
  }
} else { ## No prefix
  if (not defined $namespaceURI) {
    #
  } elsif ($namespaceURI eq 
'http://www.w3.org/2000/xmlns/' and 
$lname ne 'xmlns') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => undef, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XMLNS_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#checkXMLNamesQName';

;
  }
}


}

;
}

$r = bless \{
  
'od'
 => $self,
  
'child'
 => [],
  
'specified'
 => 1,
}, 
'Message::DOM::Element::ManakaiDOMAttr'
;
Scalar::Util::weaken ($$r->{
'od'
});


{

if 
(defined $namespaceURI) {
  if (ref $namespaceURI eq 'SCALAR') {
    $$r->{'ns'} = $namespaceURI;
  } elsif (defined $Message::Util::ManakaiStringRef::Value{$namespaceURI}) {
    $$r->{'ns'} = $Message::Util::ManakaiStringRef::Value{$namespaceURI};
  } else {
    require Scalar::Util;
    $$r->{'ns'} = $Message::Util::ManakaiStringRef::Value{$namespaceURI} = \($namespaceURI);
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{$namespaceURI});
  }
} else {
  CORE::delete $$r->{'ns'};
}


}

;


{

if 
(defined $prefix) {
  if (ref $prefix eq 'SCALAR') {
    $$r->{'pfx'} = $prefix;
  } elsif (defined $Message::Util::ManakaiStringRef::Value{$prefix}) {
    $$r->{'pfx'} = $Message::Util::ManakaiStringRef::Value{$prefix};
  } else {
    require Scalar::Util;
    $$r->{'pfx'} = $Message::Util::ManakaiStringRef::Value{$prefix} = \($prefix);
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{$prefix});
  }
} else {
  CORE::delete $$r->{'pfx'};
}


}

;


{

if 
(defined $lname) {
  if (ref $lname eq 'SCALAR') {
    $$r->{'ln'} = $lname;
  } elsif (defined $Message::Util::ManakaiStringRef::Value{$lname}) {
    $$r->{'ln'} = $Message::Util::ManakaiStringRef::Value{$lname};
  } else {
    require Scalar::Util;
    $$r->{'ln'} = $Message::Util::ManakaiStringRef::Value{$lname} = \($lname);
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{$lname});
  }
} else {
  CORE::delete $$r->{'ln'};
}


}

;


## Attribute type information
if ((defined $namespaceURI and $namespaceURI eq 
'http://www.w3.org/XML/1998/namespace' and
     
$lname eq 'id') or
    (not defined $namespaceURI and $lname eq 'xml:id')) {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    if 
($self->
dom_config

             ->
get_parameter

                 (
'http://suika.fam.cx/www/2006/dom-config/xml-id'
)) {
      $r->
manakai_attribute_type
 (
2
);
    }
  


}


;}

;
}


}
$r}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::Element::ManakaiDOMDocumentElement>}->{has_feature} = {};
$Message::DOM::ClassPoint{q<Message::DOM::Element::ManakaiDOMDocumentElement>} = 0;
package Message::DOM::IF::Element;
our $VERSION = 20061230.1435;
package Message::DOM::Element::ManakaiDOMElement;
our $VERSION = 20061230.1435;
push our @ISA, 'Message::DOM::TreeCore::ManakaiDOMNode',
'Message::DOM::IF::Element',
'Message::DOM::IF::Node';
use Char::Class::XML 'InXMLNCNameChar10',
'InXMLNCNameChar11',
'InXMLNCNameStartChar11',
'InXMLNameChar10',
'InXMLNameChar11',
'InXMLNameStartChar11',
'InXML_NCNameStartChar10',
'InXML_NameStartChar10';
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = 1;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub prefix ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$v = $$self->{
'pfx'
};
$r = defined $v ? $$v : undef;


}
$r;
} else {my ($self, $given) = @_;

{

my 
$od = $self->
owner_document
;
if ($od->
strict_error_checking
) {
  

{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;
  my $nsuri = $$self->{
'ns'
};
  if (not defined $nsuri) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => undef, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://www.w3.org/2001/04/infoset#prefix' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_PREFIX_WITH_NULL_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
  } elsif ($$nsuri ne 
'http://www.w3.org/XML/1998/namespace' and
           
defined $given and $given eq 'xml') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $self->namespace_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://www.w3.org/2001/04/infoset#prefix' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XML_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
  }
  my $version = $od->
xml_version
;
  

{

if 
(defined $given and $given eq '') {
  require Message::DOM::DOMMain;
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-prefix', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureNamespacePrefix';

;
  undef $given;
}
if (defined $given) {
  if (($version eq '1.0' and
       not 
($given =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
      ($version eq '1.1' and
       not 
($given =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://www.w3.org/2001/04/infoset#name' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureNamespacePrefix', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
  } elsif (index ($given, ':') > -1) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#name' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_BAD_NCNAME', 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureNamespacePrefix', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
  }
} # has prefix


}

;
} # strict
if (defined $given) {
  $$self->{
'pfx'
} = \$given;
} else {
  CORE::delete $$self->{
'pfx'
};
}


}
}
}
sub append_child ($$) {
my ($self, $newChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
if ($self_od->
strict_error_checking
) {
  my $anode = $self;
  while (defined $anode) {
    if ($anode eq $newChild) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_ANCESTOR_OR_SELF', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;
    }
    $anode = $anode->
parent_node
;
  }
}
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    3 => 1,
    5 => 1,
    1 => 1,
    4 => 1,
    7 => 1,
    8 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    3 => 1,
    5 => 1,
    1 => 1,
    4 => 1,
    7 => 1,
    8 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      $$newChild->{
'child'
} = [];
    } else {
      my $v = $$nc_parent->{
'child'
};
      RP: for my $i (0..$#$v) {
        if ($v->[$i] eq $new_child[0]) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    $$nc->{
'parent'
} = $self;
    Scalar::Util::weaken ($$nc->{
'parent'
});
  }

  my $children = $$self->{
'child'
};

  

{


## -- Adds to children list
    push @$children, @new_child;
    $r = $newChild;
  


}

;

  

;

  

;



}


;}

;


}

;


}
$r}
sub insert_before ($$;$) {
my ($self, $newChild, $refChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
if ($self_od->
strict_error_checking
) {
  my $anode = $self;
  while (defined $anode) {
    if ($anode eq $newChild) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_before', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_ANCESTOR_OR_SELF', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;
    }
    $anode = $anode->
parent_node
;
  }
}
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    3 => 1,
    5 => 1,
    1 => 1,
    4 => 1,
    7 => 1,
    8 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    3 => 1,
    5 => 1,
    1 => 1,
    4 => 1,
    7 => 1,
    8 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

{


# tc:ForAppendChild & tc:ForReplaceChild
    if (defined $refChild) {
      if ($refChild eq $newChild) {
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#insert-before-itself', 'rdata' => $refChild, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1';


}


;}

;
        


}

;
        

;
      }

      my $cns = $self->
child_nodes
;
      my $cnsl = @$cns;
      C: {
        $index = 0;
        for my $i (0..($cnsl-1)) {
          my $cn = $cns->[$i];
          if ($cn eq $refChild) {
            $index += $i;
            last C;
          } elsif ($cn eq $newChild) {
            $index = -1; # offset
          }
        }
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'refChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $refChild;


}


;}

;
        


}

;
        

;
      } # C
    } else { # |oldChild| is not defined
      

;
    }
  


}

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      $$newChild->{
'child'
} = [];
    } else {
      my $v = $$nc_parent->{
'child'
};
      RP: for my $i (0..$#$v) {
        if ($v->[$i] eq $new_child[0]) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    $$nc->{
'parent'
} = $self;
    Scalar::Util::weaken ($$nc->{
'parent'
});
  }

  my $children = $$self->{
'child'
};

  

;

  

{


## -- Adds to children list
    if ($index == -1) {
      push @$children, @new_child;
    } else {
      splice @$children, $index, 0, @new_child;
    }
    $r = $newChild;
  


}

;

  

;



}


;}

;


}

;


}
$r}
sub replace_child ($$$) {
my ($self, $newChild, $oldChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
if ($self_od->
strict_error_checking
) {
  my $anode = $self;
  while (defined $anode) {
    if ($anode eq $newChild) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_ANCESTOR_OR_SELF', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;
    }
    $anode = $anode->
parent_node
;
  }
}
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    3 => 1,
    5 => 1,
    1 => 1,
    4 => 1,
    7 => 1,
    8 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    3 => 1,
    5 => 1,
    1 => 1,
    4 => 1,
    7 => 1,
    8 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

{


# tc:ForAppendChild & tc:ForReplaceChild
    if (defined $oldChild) {
      if ($oldChild eq $newChild) {
        

;
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#replace-by-itself', 'rdata' => $oldChild, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1';


}


;}

;
        


}

;
      }

      my $cns = $self->
child_nodes
;
      my $cnsl = @$cns;
      C: {
        $index = 0;
        for my $i (0..($cnsl-1)) {
          my $cn = $cns->[$i];
          if ($cn eq $oldChild) {
            $index += $i;
            last C;
          } elsif ($cn eq $newChild) {
            $index = -1; # offset
          }
        }
        

;
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $oldChild;


}


;}

;
        


}

;
      } # C
    } else { # |oldChild| is not defined
      

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $oldChild;


}


;}

;
      


}

;
    }
  


}

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      $$newChild->{
'child'
} = [];
    } else {
      my $v = $$nc_parent->{
'child'
};
      RP: for my $i (0..$#$v) {
        if ($v->[$i] eq $new_child[0]) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    $$nc->{
'parent'
} = $self;
    Scalar::Util::weaken ($$nc->{
'parent'
});
  }

  my $children = $$self->{
'child'
};

  

;

  

;

  

{


## -- Replaces the node
    splice @$children, $index, 1, @new_child;
    CORE::delete $$oldChild->{
'parent'
};
    $r = $oldChild;
  


}

;



}


;}

;


}

;


}
$r}
sub attributes ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


$r = bless \\($self), 
'Message::DOM::TreeCore::ManakaiDOMAttrMap'
;
$$self->{
'hpos'
} ||= 0;


}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'attributes';
}
}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$prefix = $$self->{
'pfx'
};
my $lname = $$self->{
'ln'
};
$r = defined $prefix ? $$prefix.':'.$$lname : $$lname;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub tag_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$prefix = $$self->{
'pfx'
};
my $lname = $$self->{
'ln'
};
$r = defined $prefix ? $$prefix.':'.$$lname : $$lname;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'tag_name';
}
}
sub manakai_append_text ($$) {
my ($self, $string) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$lc = $self->
last_child
;
  if (defined $lc and
      $lc->
node_type
 == 
3
) {
    $lc->
manakai_append_text

           (ref $string eq 'SCALAR' ? $string : \$string);
  } else {
    my $text = $self->
owner_document

                    ->
create_text_node
 
                        (ref $string eq 'SCALAR' ? $$string : $string);
    $self->
append_child
 ($text);
  }
  $r = $self;



}


;}

;


}
$r}
sub get_feature ($$$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


}

{


$version = '' unless defined $version;


}
my $r;

{


$feature =~ s/^\+//;


{

if 
($Message::Util::AutoLoad::Registry::Feature->{$feature}->{$version}) {
  $r = $self;
}


}

;
unless (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->SUPER::get_feature ($feature, $version);
  


}


;}

;
}


}
$r}
sub base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = $$self->{
'buri'
};
unless (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$xb = $self->
get_attribute_node_ns

                      (
'http://www.w3.org/XML/1998/namespace'
, 'base');
    unless (defined $xb) {
      $xb = $self->
get_attribute_node_ns

                     (
undef
, 'xml:base');
    }
    if ($xb) {
      $r = $xb->
value
;
      if (
($r !~ m!\A[^:/?#]+:!)
) {
        my $xbbase = $xb->
base_uri
;
        $r = $self->
owner_document

                  ->
implementation

                  ->
create_uri_reference

                      ($r)
                  ->
get_absolute_reference

                      ($xbbase)
                  ->
uri_reference
          if 
defined $xbbase;
      }
    } else {
      my $pe = $self->
parent_node
;
      W: {
        while (defined $pe) {
          my $nt = $pe->
node_type
;
          if ($nt == 
1 or
              
$nt == 
9 or
              
$nt == 
11 or
              
$nt == 
6
) {
            $r = $pe->
base_uri
;
            last W;
          } elsif ($nt == 
5
) {
            if ($pe->
manakai_external
) {
              $r = $pe->
manakai_entity_base_uri
;
              last W;
            }
          }
          $pe = $pe->
parent_node
;
        }
        if ($pe) {
          $r = $pe->
base_uri
;
        } else {
          $r = $self->
owner_document
->
base_uri
;
        }
      } # W
    }
  


}


;}

;
}


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'base_uri';
}
}
sub get_attribute ($$) {
my ($self, $name) = @_;
my $r = '';

{

my 
$node;


{

my 
$__attr = ${$self}->{
'attr'
};

## Note that we no longer support DOM Level 1 nodes.

## If an attribute's qualified name is equal to
## the requested name, then the node is the answer.

## Note that if there is a namespace ill-formed attribute,
## the result is not the expected one.  For example,
## if an |xmlns| attribute in the |http://www.w3.org/2000/xmlns/|
## namespace has non-NULL |prefix|, a request to get |xmlns|
## attribute will not return that node.

## |sort|ing is required so that every |getAttribute|, |setAttribute|,
## |hasAttribute|, |removeAttribute|, or any other namespace unaware
## methods operates on the same node even if there is 
## multiple nodes with the same qualified name.

NS: for my $__ns (sort {$a cmp $b} keys %$__attr) {
  for my $__ln (sort {$a cmp $b} keys %{$__attr->{$__ns}}) {
    my $__node = $__attr->{$__ns}->{$__ln};
    if ($__node->
node_name eq 
$name) {
      

{


$node = $__node;
      


}

;
      

;
      last NS;
    }
  } # ln
} # NS


}

;
if (defined $node) {
  $r = $node->
value
;
} else {
  $r = 
undef
;
}


}
$r}
sub get_attribute_ns ($$$) {
my ($self, $namespaceURI, $localName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  require Message::DOM::DOMMain;
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:1167487489:32060:02l5m38360';

;

  $namespaceURI = undef;
}


}
my $r = '';

{

my 
$node;


{

my 
$__attrs = ${$self}->{
'attr'
};
if (defined $__attrs->{defined $namespaceURI ? $namespaceURI : ''}
                    ->{$localName}) {
  $node = $__attrs->{defined $namespaceURI ? $namespaceURI : ''}
                        ->{$localName};
}


}

;
if (defined $node) {
  $r = $node->
value
;
} else {
  $r = 
undef
;
}


}
$r}
sub get_attribute_node ($$) {
my ($self, $name) = @_;
my $r;

{


{

my 
$__attr = ${$self}->{
'attr'
};

## Note that we no longer support DOM Level 1 nodes.

## If an attribute's qualified name is equal to
## the requested name, then the node is the answer.

## Note that if there is a namespace ill-formed attribute,
## the result is not the expected one.  For example,
## if an |xmlns| attribute in the |http://www.w3.org/2000/xmlns/|
## namespace has non-NULL |prefix|, a request to get |xmlns|
## attribute will not return that node.

## |sort|ing is required so that every |getAttribute|, |setAttribute|,
## |hasAttribute|, |removeAttribute|, or any other namespace unaware
## methods operates on the same node even if there is 
## multiple nodes with the same qualified name.

NS: for my $__ns (sort {$a cmp $b} keys %$__attr) {
  for my $__ln (sort {$a cmp $b} keys %{$__attr->{$__ns}}) {
    my $__node = $__attr->{$__ns}->{$__ln};
    if ($__node->
node_name eq 
$name) {
      

{


$r = $__node;
      


}

;
      

;
      last NS;
    }
  } # ln
} # NS


}

;


}
$r}
sub get_attribute_node_ns ($$$) {
my ($self, $namespaceURI, $localName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  require Message::DOM::DOMMain;
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:1167487489:32060:02l5m38360';

;

  $namespaceURI = undef;
}


}
my $r;

{


{

my 
$__attrs = ${$self}->{
'attr'
};
if (defined $__attrs->{defined $namespaceURI ? $namespaceURI : ''}
                    ->{$localName}) {
  $r = $__attrs->{defined $namespaceURI ? $namespaceURI : ''}
                        ->{$localName};
}


}

;


}
$r}
sub has_attribute ($$) {
my ($self, $name) = @_;
my $r = 0;

{

my 
$node;


{

my 
$__attr = ${$self}->{
'attr'
};

## Note that we no longer support DOM Level 1 nodes.

## If an attribute's qualified name is equal to
## the requested name, then the node is the answer.

## Note that if there is a namespace ill-formed attribute,
## the result is not the expected one.  For example,
## if an |xmlns| attribute in the |http://www.w3.org/2000/xmlns/|
## namespace has non-NULL |prefix|, a request to get |xmlns|
## attribute will not return that node.

## |sort|ing is required so that every |getAttribute|, |setAttribute|,
## |hasAttribute|, |removeAttribute|, or any other namespace unaware
## methods operates on the same node even if there is 
## multiple nodes with the same qualified name.

NS: for my $__ns (sort {$a cmp $b} keys %$__attr) {
  for my $__ln (sort {$a cmp $b} keys %{$__attr->{$__ns}}) {
    my $__node = $__attr->{$__ns}->{$__ln};
    if ($__node->
node_name eq 
$name) {
      

{


$node = $__node;
      


}

;
      

;
      last NS;
    }
  } # ln
} # NS


}

;
$r = defined $node;


}
$r}
sub has_attribute_ns ($$$) {
my ($self, $namespaceURI, $localName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  require Message::DOM::DOMMain;
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:1167487489:32060:02l5m38360';

;

  $namespaceURI = undef;
}


}
my $r = 0;

{

my 
$node;


{

my 
$__attrs = ${$self}->{
'attr'
};
if (defined $__attrs->{defined $namespaceURI ? $namespaceURI : ''}
                    ->{$localName}) {
  $node = $__attrs->{defined $namespaceURI ? $namespaceURI : ''}
                        ->{$localName};
}


}

;
$r = defined $node;


}
$r}
sub set_attribute ($$$) {
my ($self, $name, $value) = @_;

{

my 
$od = $self->
owner_document
;
if ($od->
strict_error_checking
) {
  if ($self->
manakai_read_only
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement';

;
  }
  my $version = $od->
xml_version
;
  

{

if 
(defined $name) {
    if (((not defined $version or $version eq '1.0') and
         not 
($name =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        (defined $version and $version eq '1.1' and
         not 
($name =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $name, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureXMLName', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
}


}

;
}

my $__anode;


{

my 
$__attr = ${$self}->{
'attr'
};

## Note that we no longer support DOM Level 1 nodes.

## If an attribute's qualified name is equal to
## the requested name, then the node is the answer.

## Note that if there is a namespace ill-formed attribute,
## the result is not the expected one.  For example,
## if an |xmlns| attribute in the |http://www.w3.org/2000/xmlns/|
## namespace has non-NULL |prefix|, a request to get |xmlns|
## attribute will not return that node.

## |sort|ing is required so that every |getAttribute|, |setAttribute|,
## |hasAttribute|, |removeAttribute|, or any other namespace unaware
## methods operates on the same node even if there is 
## multiple nodes with the same qualified name.

NS: for my $__ns (sort {$a cmp $b} keys %$__attr) {
  for my $__ln (sort {$a cmp $b} keys %{$__attr->{$__ns}}) {
    my $__node = $__attr->{$__ns}->{$__ln};
    if ($__node->
node_name eq 
$name) {
      

{


$__anode = $__node;
      


}

;
      

;
      last NS;
    }
  } # ln
} # NS


}

;
if (defined $__anode) { ## There is already a node with such a |name|
  if ($__anode->
manakai_read_only
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_ATTR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'name', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $__anode;

;
  }
} else { ## There is no such attribute
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $__anode = $od->
create_attribute
 ($name);
    my $__attrs = $$self->{
'attr'
};
    $__attrs->{''}->{$name} = $__anode;
    $$__anode->{
'owner'
} = $self;
    Scalar::Util::weaken ($$__anode->{
'owner'
});
  


}


;}

;
  

{


## NOTE: The |cfg:xml-id| configuration parameter does not matter
##       since it can be typed in the |createAttribute| method.



{

local $Error::Depth = $Error::Depth + 1;

{


  if 
($od->
dom_config

                    ->
get_parameter

                        (
'http://suika.fam.cx/www/2006/dom-config/dtd-attribute-type'
)) {
    my $__st_doctype = $od->
doctype
;
    $__st_doctype = $__st_doctype->
get_feature

                                     (
'http://suika.fam.cx/www/2006/feature/XDoctype'
 => '3.0')
      if defined $__st_doctype;
    if (defined $__st_doctype) {
      my $__st_et = $__st_doctype->
get_element_type_definition_node

                                     ($self->
node_name
);
      if (defined $__st_et) {
        my $__st_at = $__st_et->
get_attribute_definition_node

                                  ($name);
        if (defined $__st_at) {
          $__anode->
manakai_attribute_type

                        ($__st_at->
declared_type
);
        }
      }
    }
  }



}


;}

;


}

;
}


{

local $Error::Depth = $Error::Depth + 1;

{



  $__anode->
value
 ($value);
  $__anode->
specified
 (
1
);



}


;}

;


}
}
sub set_attribute_ns ($$$$) {
my ($self, $namespaceURI, $qualifiedName, $value) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  require Message::DOM::DOMMain;
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:1167487489:32060:02l5m38360';

;

  $namespaceURI = undef;
}


}

{

my 
($prefix, $localName) = ref $qualifiedName eq 'ARRAY'
                             ? @$qualifiedName
                             : split /:/, $qualifiedName, 2;
($prefix, $localName) = (
undef
, $prefix) unless defined $localName;

my $od = $self->
owner_document
;
if ($od->
strict_error_checking
) {
  if ($self->
manakai_read_only
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement';

;
  }
  my $version = $od->
xml_version
;
  $qualifiedName = defined $prefix ? $prefix.':'.$localName
                                   : $localName;
  

{

if 
(defined $version and $version eq '1.1') {
    unless (
($qualifiedName =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => '1.1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureXMLQName', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
    }
    unless (
($qualifiedName =~ /\A\p{InXMLNCNameStartChar11}\p{InXMLNCNameChar11}*(?::\p{InXMLNCNameStartChar11}\p{InXMLNCNameChar11}*)?\z/)
) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_MALFORMED_QNAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => '1.1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureXMLQName', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
    }
  } else {
    unless (
($qualifiedName =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureXMLQName', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
    }
    unless (
($qualifiedName =~ /\A\p{InXML_NCNameStartChar10}\p{InXMLNCNameChar10}*(?::\p{InXML_NCNameStartChar10}\p{InXMLNCNameChar10}*)?\z/)
) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_MALFORMED_QNAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $qualifiedName, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureXMLQName', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_NAME';

;
    }
  }


}

;
  

{

if 
(defined $prefix) {
  if (not defined $namespaceURI) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_PREFIX_WITH_NULL_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#checkXMLNamesQName';

;
  } elsif ($prefix eq 'xml' and $namespaceURI ne 
'http://www.w3.org/XML/1998/namespace'
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $namespaceURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XML_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#checkXMLNamesQName';

;
  } elsif ($prefix eq 'xmlns' and $namespaceURI ne 
'http://www.w3.org/2000/xmlns/'
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $namespaceURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XMLNS_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#checkXMLNamesQName';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/XML/1998/namespace' and 
$prefix ne 'xml') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XML_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#checkXMLNamesQName';

;
  } elsif ($namespaceURI eq 
'http://www.w3.org/2000/xmlns/' and 
$prefix ne 'xmlns') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XMLNS_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#checkXMLNamesQName';

;
  }
} else { ## No prefix
  if (not defined $namespaceURI) {
    #
  } elsif ($namespaceURI eq 
'http://www.w3.org/2000/xmlns/' and 
$localName ne 'xmlns') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#prefix' => undef, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_OTHER_WITH_XMLNS_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#checkXMLNamesQName';

;
  }
}


}

;
}


{

my 
$__anode;


{

my 
$__attrs = ${$self}->{
'attr'
};
if (defined $__attrs->{defined $namespaceURI ? $namespaceURI : ''}
                    ->{$localName}) {
  $__anode = $__attrs->{defined $namespaceURI ? $namespaceURI : ''}
                        ->{$localName};
}


}

;
if (defined $__anode) { ## There is already a node with such a |name|
  if ($__anode->
manakai_read_only
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_ATTR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/setAttrValueNS', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $__anode;

;
  }
  $__anode->
prefix
 ($prefix) if defined $prefix;
    ## ISSUE: Should NULL be allowed here with |strictErrorChecking| off?
} else { ## There is no such attribute
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $__anode = $od->
create_attribute_ns

                                ($namespaceURI, [$prefix, $localName]);
    my $__attrs = ${$self}->{
'attr'
};
    $__attrs->{defined $namespaceURI ? $namespaceURI : ''}->{$localName}
        = $__anode;
    $$__anode->{
'owner'
} = $self;
    Scalar::Util::weaken ($$__anode->{
'owner'
});
  


}


;}

;
  

{


## NOTE: The |cfg:xml-id| configuration parameter does not matter
##       since it can be typed in the |createAttribute| method.



{

local $Error::Depth = $Error::Depth + 1;

{


  if 
($od->
dom_config

                    ->
get_parameter

                        (
'http://suika.fam.cx/www/2006/dom-config/dtd-attribute-type'
)) {
    my $__st_doctype = $od->
doctype
;
    $__st_doctype = $__st_doctype->
get_feature

                                     (
'http://suika.fam.cx/www/2006/feature/XDoctype'
 => '3.0')
      if defined $__st_doctype;
    if (defined $__st_doctype) {
      my $__st_et = $__st_doctype->
get_element_type_definition_node

                                     ($self->
node_name
);
      if (defined $__st_et) {
        my $__st_at = $__st_et->
get_attribute_definition_node

                                  (defined $prefix ? $prefix.':'.$localName
                                        : $localName);
        if (defined $__st_at) {
          $__anode->
manakai_attribute_type

                        ($__st_at->
declared_type
);
        }
      }
    }
  }



}


;}

;


}

;
}


{

local $Error::Depth = $Error::Depth + 1;

{



  $__anode->
value
 (defined $value ? $value : '');
  $__anode->
specified
 (
1
);



}


;}

;


}

;


}
}
sub set_attribute_node ($$) {
my ($self, $newAttr) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
my $strict = $self_od->
strict_error_checking
;
if ($strict and
    not $self_od eq $newAttr->
owner_document
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newAttr;

;
}

my $nsuri = $newAttr->
namespace_uri
;
$nsuri = '' unless defined $nsuri;
my $ln = $newAttr->
local_name
;
my $attrs = $$self->{
'attr'
};
my $current = $attrs->{$nsuri}->{$ln};

if (defined $newAttr->
owner_element
) {
  if (defined $current and $current eq $newAttr) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#replace-by-itself', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute_node', 'rdata' => $newAttr, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement';

;
    ## No return value
  } else {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INUSE_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newAttr;

;
  }
} else { # not in use
  if ($strict and $self->
manakai_read_only
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement';

;
  }

  $attrs->{$nsuri}->{$ln} = $newAttr;
  $$newAttr->{
'owner'
} = $self;
  Scalar::Util::weaken ($$newAttr->{
'owner'
});
  $newAttr->
specified
 (
1
);

  if (defined $current) {
    CORE::delete $$current->{
'owner'
};
    $r = $current;
  }
}


}
$r}
sub set_attribute_node_ns ($$) {
my ($self, $newAttr) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
my $strict = $self_od->
strict_error_checking
;
if ($strict and
    not $self_od eq $newAttr->
owner_document
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newAttr;

;
}

my $nsuri = $newAttr->
namespace_uri
;
$nsuri = '' unless defined $nsuri;
my $ln = $newAttr->
local_name
;
my $attrs = $$self->{
'attr'
};
my $current = $attrs->{$nsuri}->{$ln};

if (defined $newAttr->
owner_element
) {
  if (defined $current and $current eq $newAttr) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#replace-by-itself', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute_node', 'rdata' => $newAttr, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement';

;
    ## No return value
  } else {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INUSE_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newAttr;

;
  }
} else { # not in use
  if ($strict and $self->
manakai_read_only
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement';

;
  }

  $attrs->{$nsuri}->{$ln} = $newAttr;
  $$newAttr->{
'owner'
} = $self;
  Scalar::Util::weaken ($$newAttr->{
'owner'
});
  $newAttr->
specified
 (
1
);

  if (defined $current) {
    CORE::delete $$current->{
'owner'
};
    $r = $current;
  }
}


}
$r}
sub remove_attribute ($$) {
my ($self, $name) = @_;

{

my 
$list;
my $key;
my $attr;


{

my 
$__attr = ${$self}->{
'attr'
};

## Note that we no longer support DOM Level 1 nodes.

## If an attribute's qualified name is equal to
## the requested name, then the node is the answer.

## Note that if there is a namespace ill-formed attribute,
## the result is not the expected one.  For example,
## if an |xmlns| attribute in the |http://www.w3.org/2000/xmlns/|
## namespace has non-NULL |prefix|, a request to get |xmlns|
## attribute will not return that node.

## |sort|ing is required so that every |getAttribute|, |setAttribute|,
## |hasAttribute|, |removeAttribute|, or any other namespace unaware
## methods operates on the same node even if there is 
## multiple nodes with the same qualified name.

NS: for my $__ns (sort {$a cmp $b} keys %$__attr) {
  for my $__ln (sort {$a cmp $b} keys %{$__attr->{$__ns}}) {
    my $__node = $__attr->{$__ns}->{$__ln};
    if ($__node->
node_name eq 
$name) {
      

;
      

{


$attr = $__node;
        $list = $__attr->{$__ns};
        $key = $__ln;
      


}

;
      last NS;
    }
  } # ln
} # NS


}

;
if (defined $attr) {
  if ($self->
manakai_read_only
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'remove_attribute', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement';

;
  }

  ## Remove the attribute node
  CORE::delete $list->{$key};
  CORE::delete $$attr->{
'owner'
};

  ## Default attribute
  my $doc = $self->
owner_document
;
  my $doc_cfg = $doc->
dom_config
;
  if ($doc_cfg->
get_parameter

                  (
'http://suika.fam.cx/www/2006/dom-config/dtd-default-attribute'
)) {
    my $prefix;
    

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$__doctype = $doc->
doctype
;
  $__doctype = $__doctype->
get_feature
 (
'http://suika.fam.cx/www/2006/feature/XDoctype'
)
    if $__doctype;
  if (defined $__doctype) {
    my $__et = $__doctype->
get_element_type_definition_node

                             ($self->node_name);
    if (defined $__et) {
      my $__orig_strict = $doc->
strict_error_checking
;
      $doc->
strict_error_checking
 (
0
);

      my $__at = $__et->
get_attribute_definition_node
 ($name);
      if (defined $__at) {
        my $__copy_asis = $doc_cfg->
get_parameter

                               (
'http://suika.fam.cx/www/2006/dom-config/clone-entity-reference-subtree'
);
        $doc_cfg->
set_parameter

                  (
'http://suika.fam.cx/www/2006/dom-config/clone-entity-reference-subtree'
 => 
1
);
        ADD: {
          my $__attr;
          my $__attrs = ${$self}->{
'attr'
};
          if (defined $prefix) {   ## prefixed attr
            my $__nsuri = $self->
lookup_namespace_uri

                                      ($prefix);
            unless (defined $__nsuri) {
              ## TODO: Namespace well-formedness error
            }
            if (defined $__attrs->{defined $__nsuri ? $__nsuri : ''}
                                ->{$name}) {
              ## TODO: Namespace well-formedness warning?
              last ADD;
            }
            $__attr = $doc->
create_attribute_ns

                                   ($__nsuri, [$prefix, $name]);
          } else {                ## local attr
            if ($name eq 'xmlns') {
              if (defined $__attrs->{
'http://www.w3.org/2000/xmlns/'
}->{xmlns}) {
                ## TODO: Namespace well-formedness warning?
                last ADD;
              }
              $__attr = $doc->
create_attribute_ns

                                     (
'http://www.w3.org/2000/xmlns/'
, 'xmlns');
            } else {
              if (defined $__attrs->{''}->{$name}) {
                ## TODO: Namespace well-formedness warning?
                last ADD;
              }
              $__attr = $doc->
create_attribute
 ($name);
            }
          }
          for my $__at_child (@{$__at->
child_nodes
}) {
            $__attr->
append_child

                       ($__at_child->
clone_node
 (
1
));
          }
          $__attr->
manakai_attribute_type

                     ($__at->
declared_type
);
          $self->
set_attribute_node_ns
 ($__attr);
                        ## This method change the |specified| flag
          $__attr->
specified
 (
0
);
        } # ADD
        $doc_cfg->
set_parameter

               (
'http://suika.fam.cx/www/2006/dom-config/clone-entity-reference-subtree'
 => $__copy_asis);
      }
      $doc->
strict_error_checking
 ($__orig_strict);
    } # et
  } # doctype



}


;}

;


}

;
  }
} # exists


}
}
sub remove_attribute_ns ($$$) {
my ($self, $namespaceURI, $localName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  require Message::DOM::DOMMain;
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:1167487489:32060:02l5m38360';

;

  $namespaceURI = undef;
}


}

{

my 
$list;
my $attr;


{

my 
$__attrs = ${$self}->{
'attr'
};
$list = $__attrs->{defined $namespaceURI ? $namespaceURI : ''};
if (defined $list and defined $list->{$localName}) {
  $attr = $__attrs->{defined $namespaceURI ? $namespaceURI : ''}
                        ->{$localName};
}


}

;
if (defined $attr) {
  if ($self->
manakai_read_only
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'remove_attribute_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement';

;
  }
 
  ## Removes the attribute node
  CORE::delete $list->{$localName};
  CORE::delete $$attr->{
'owner'
};

  ## Default attribute
  my $doc = $self->
owner_document
;
  my $doc_cfg = $doc->
dom_config
;
  if ($doc_cfg->
get_parameter

                  (
'http://suika.fam.cx/www/2006/dom-config/dtd-default-attribute'
)) {
    my $pfx = $attr->
prefix
;
    my $name = defined $pfx ? $pfx.':'.$localName : $localName;
    

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$__doctype = $doc->
doctype
;
  $__doctype = $__doctype->
get_feature
 (
'http://suika.fam.cx/www/2006/feature/XDoctype'
)
    if $__doctype;
  if (defined $__doctype) {
    my $__et = $__doctype->
get_element_type_definition_node

                             ($self->node_name);
    if (defined $__et) {
      my $__orig_strict = $doc->
strict_error_checking
;
      $doc->
strict_error_checking
 (
0
);

      my $__at = $__et->
get_attribute_definition_node
 ($name);
      if (defined $__at) {
        my $__copy_asis = $doc_cfg->
get_parameter

                               (
'http://suika.fam.cx/www/2006/dom-config/clone-entity-reference-subtree'
);
        $doc_cfg->
set_parameter

                  (
'http://suika.fam.cx/www/2006/dom-config/clone-entity-reference-subtree'
 => 
1
);
        ADD: {
          my $__attr;
          my $__attrs = ${$self}->{
'attr'
};
          if (defined $pfx) {   ## prefixed attr
            my $__nsuri = $self->
lookup_namespace_uri

                                      ($pfx);
            unless (defined $__nsuri) {
              ## TODO: Namespace well-formedness error
            }
            if (defined $__attrs->{defined $__nsuri ? $__nsuri : ''}
                                ->{$localName}) {
              ## TODO: Namespace well-formedness warning?
              last ADD;
            }
            $__attr = $doc->
create_attribute_ns

                                   ($__nsuri, [$pfx, $localName]);
          } else {                ## local attr
            if ($name eq 'xmlns') {
              if (defined $__attrs->{
'http://www.w3.org/2000/xmlns/'
}->{xmlns}) {
                ## TODO: Namespace well-formedness warning?
                last ADD;
              }
              $__attr = $doc->
create_attribute_ns

                                     (
'http://www.w3.org/2000/xmlns/'
, 'xmlns');
            } else {
              if (defined $__attrs->{''}->{$name}) {
                ## TODO: Namespace well-formedness warning?
                last ADD;
              }
              $__attr = $doc->
create_attribute
 ($name);
            }
          }
          for my $__at_child (@{$__at->
child_nodes
}) {
            $__attr->
append_child

                       ($__at_child->
clone_node
 (
1
));
          }
          $__attr->
manakai_attribute_type

                     ($__at->
declared_type
);
          $self->
set_attribute_node_ns
 ($__attr);
                        ## This method change the |specified| flag
          $__attr->
specified
 (
0
);
        } # ADD
        $doc_cfg->
set_parameter

               (
'http://suika.fam.cx/www/2006/dom-config/clone-entity-reference-subtree'
 => $__copy_asis);
      }
      $doc->
strict_error_checking
 ($__orig_strict);
    } # et
  } # doctype



}


;}

;


}

;
  }
} # exists


}
}
sub remove_attribute_node ($$) {
my ($self, $oldAttr) = @_;
my $r;

{

my 
$od = $self->
owner_document
;
if ($od->
strict_error_checking and
    
$self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'remove_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement';

;
}

my $ln = $oldAttr->
local_name
;
FIND: {
  my $attrs = $$self->{
'attr'
};
  my $nsuri = $oldAttr->
namespace_uri
;
  my $list = $attrs->{defined $nsuri ? $nsuri : ''};
  my $list_node = $list->{$ln};
  if (defined $list_node and $list_node eq $oldAttr) {
    CORE::delete $list->{$ln};
    last FIND;
  }
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'remove_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_ATTR_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $oldAttr;

;
} # FIND

CORE::delete $$oldAttr->{
'owner'
};
$r = $oldAttr;

## Default attribute
my $doc_cfg = $od->
dom_config
;
if ($doc_cfg->
get_parameter

                (
'http://suika.fam.cx/www/2006/dom-config/dtd-default-attribute'
)) {
  my $name = $oldAttr->
node_name
;
  my $pfx = $oldAttr->
prefix
;
  

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$__doctype = $od->
doctype
;
  $__doctype = $__doctype->
get_feature
 (
'http://suika.fam.cx/www/2006/feature/XDoctype'
)
    if $__doctype;
  if (defined $__doctype) {
    my $__et = $__doctype->
get_element_type_definition_node

                             ($self->node_name);
    if (defined $__et) {
      my $__orig_strict = $od->
strict_error_checking
;
      $od->
strict_error_checking
 (
0
);

      my $__at = $__et->
get_attribute_definition_node
 ($name);
      if (defined $__at) {
        my $__copy_asis = $doc_cfg->
get_parameter

                               (
'http://suika.fam.cx/www/2006/dom-config/clone-entity-reference-subtree'
);
        $doc_cfg->
set_parameter

                  (
'http://suika.fam.cx/www/2006/dom-config/clone-entity-reference-subtree'
 => 
1
);
        ADD: {
          my $__attr;
          my $__attrs = ${$self}->{
'attr'
};
          if (defined $pfx) {   ## prefixed attr
            my $__nsuri = $self->
lookup_namespace_uri

                                      ($pfx);
            unless (defined $__nsuri) {
              ## TODO: Namespace well-formedness error
            }
            if (defined $__attrs->{defined $__nsuri ? $__nsuri : ''}
                                ->{$ln}) {
              ## TODO: Namespace well-formedness warning?
              last ADD;
            }
            $__attr = $od->
create_attribute_ns

                                   ($__nsuri, [$pfx, $ln]);
          } else {                ## local attr
            if ($name eq 'xmlns') {
              if (defined $__attrs->{
'http://www.w3.org/2000/xmlns/'
}->{xmlns}) {
                ## TODO: Namespace well-formedness warning?
                last ADD;
              }
              $__attr = $od->
create_attribute_ns

                                     (
'http://www.w3.org/2000/xmlns/'
, 'xmlns');
            } else {
              if (defined $__attrs->{''}->{$name}) {
                ## TODO: Namespace well-formedness warning?
                last ADD;
              }
              $__attr = $od->
create_attribute
 ($name);
            }
          }
          for my $__at_child (@{$__at->
child_nodes
}) {
            $__attr->
append_child

                       ($__at_child->
clone_node
 (
1
));
          }
          $__attr->
manakai_attribute_type

                     ($__at->
declared_type
);
          $self->
set_attribute_node_ns
 ($__attr);
                        ## This method change the |specified| flag
          $__attr->
specified
 (
0
);
        } # ADD
        $doc_cfg->
set_parameter

               (
'http://suika.fam.cx/www/2006/dom-config/clone-entity-reference-subtree'
 => $__copy_asis);
      }
      $od->
strict_error_checking
 ($__orig_strict);
    } # et
  } # doctype



}


;}

;


}

;
}


}
$r}
sub schema_type_info ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

my 
$v = 0 || 0;
$r = bless \$v, 
'Message::DOM::Element::ManakaiDOMDTDTypeInfo'
;


}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'schema_type_info';
}
}
sub get_elements_by_tag_name ($$) {
my ($self, $name) = @_;
my $r;

{


$name = "$name";
my $chk;
if ($name eq '*') {
  $chk = sub { 
1
 };
} else {
  $chk = sub {
    my $node = shift;
    my $nodeName = $node->
node_name
;
    ($nodeName eq $name);
  };
}


{


$r = bless \[$self, $chk], 
'Message::DOM::TreeCore::ManakaiDOMGetElementsNodeList'
;


}

;


}
$r}
sub get_elements_by_tag_name_ns ($$$) {
my ($self, $namespaceURI, $localName) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  require Message::DOM::DOMMain;
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:1167487489:32060:02l5m38360';

;

  $namespaceURI = undef;
}


}
my $r;

{


$namespaceURI = "$namespaceURI" if defined $namespaceURI;
$localName = "$localName";
my $chk;
if (not defined $namespaceURI) {
  if ($localName eq '*') {
    $chk = sub {
      my $node = shift;
      (not defined $node->
namespace_uri
);
    };
  } else {
    $chk = sub {
      my $node = shift;
      (not defined $node->
namespace_uri and
       
$node->
local_name eq 
$localName);
    };
  }
} elsif ($namespaceURI eq '*') {
  if ($localName eq '*') {
    $chk = sub { 
1
 };
  } else {
    $chk = sub {
      my $node = shift;
      ($node->
local_name eq 
$localName);
    };
  }
} else {
  if ($localName eq '*') {
    $chk = sub {
      my $node = shift;
      my $nsuri = $node->
namespace_uri
;
      (defined $nsuri and $nsuri eq $namespaceURI);
    };
  } else {
    $chk = sub {
      my $node = shift;
      my $nsuri = $node->
namespace_uri
;
      (defined $nsuri and $nsuri eq $namespaceURI and
       $node->
local_name eq 
$localName);
    };
  }
}


{


$r = bless \[$self, $chk], 
'Message::DOM::TreeCore::ManakaiDOMGetElementsNodeList'
;


}

;


}
$r}
sub manakai_base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = $$self->{
'buri'
};


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;
$$self->{
'buri'
} = $given;


}
}
}
sub set_id_attribute ($$;$) {
my ($self, $name, $isId) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;
my $attr = $self->
get_attribute_node
 ($name);
if (not defined $attr) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_id_attribute', 'http://www.w3.org/2001/04/infoset#namespaceName' => undef, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NO_NAMED_NODE_NS_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'name', 'http://www.w3.org/2001/04/infoset#localName' => $name;

;
} elsif ($attr->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_id_attribute', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_ATTR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'name', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $attr;

;
} else {
  $attr->
is_id
 ($isId);
}


}
}
sub set_id_attribute_ns ($$$;$) {
my ($self, $namespaceURI, $localName, $isId) = @_;

{

if 
(CORE::defined $namespaceURI and CORE::length $namespaceURI == 0) {
  require Message::DOM::DOMMain;
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-uri', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:1167487489:32060:02l5m38360';

;

  $namespaceURI = undef;
}


}

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;
my $attr = $self->
get_attribute_node_ns

                    ($namespaceURI, $localName);
if (not defined $attr) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_id_attribute_ns', 'http://www.w3.org/2001/04/infoset#namespaceName' => $namespaceURI, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NO_NAMED_NODE_NS_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'name', 'http://www.w3.org/2001/04/infoset#localName' => $localName;

;
} elsif ($attr->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_id_attribute_ns', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_ATTR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'name', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $attr;

;
} else {
  $attr->
is_id
 ($isId);
}


}
}
sub set_id_attribute_node ($$;$) {
my ($self, $idAttr, $isId) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;

my $owner = $idAttr->
owner_element
;
if (not defined $owner or not $owner eq $self) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_id_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_ATTR_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'idAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $idAttr;

;
} elsif ($idAttr->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_id_attribute_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_ATTR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'name', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $idAttr;

;
} else {
  $idAttr->
is_id
 ($isId);
}


}
}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::Element::ManakaiDOMElement>}->{has_feature} = {'core',
{'',
'1'},
'xml',
{'',
'1'},
'xmlversion',
{'',
'1'}};
$Message::DOM::ClassPoint{q<Message::DOM::Element::ManakaiDOMElement>} = 0;
package Message::DOM::IF::Attr;
our $VERSION = 20061230.1435;
package Message::DOM::Element::ManakaiDOMAttr;
our $VERSION = 20061230.1435;
push our @ISA, 'Message::DOM::TreeCore::ManakaiDOMNode',
'Message::DOM::IF::Attr',
'Message::DOM::IF::Node';
use Char::Class::XML 'InXMLNameChar10',
'InXMLNameChar11',
'InXMLNameStartChar11',
'InXML_NameStartChar10';
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = 2;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub prefix ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$v = $$self->{
'pfx'
};
$r = defined $v ? $$v : 
undef
;


}
$r;
} else {my ($self, $given) = @_;

{

my 
$od = $self->
owner_document
;
if ($od->
strict_error_checking
) {
  

{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;
  my $nsuri = $$self->{
'ns'
};
  if (not defined $nsuri) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => undef, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://www.w3.org/2001/04/infoset#prefix' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_PREFIX_WITH_NULL_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
  } elsif ($$nsuri ne 
'http://www.w3.org/XML/1998/namespace' and
           
defined $given and $given eq 'xml') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $self->namespace_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://www.w3.org/2001/04/infoset#prefix' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XML_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
  } elsif ($$nsuri ne 
'http://www.w3.org/2000/xmlns/' and
           
defined $given and $given eq 'xmlns') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $self->namespace_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://www.w3.org/2001/04/infoset#prefix' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_XMLNS_WITH_OTHER_URI', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
  } elsif ($self->
node_name eq 
'xmlns') {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#namespaceName' => $self->namespace_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://www.w3.org/2001/04/infoset#prefix' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_QNAME_IS_XMLNS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'prefix';

;
  }
  my $version = $od->
xml_version
;
  

{

if 
(defined $given and $given eq '') {
  require Message::DOM::DOMMain;
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-prefix', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureNamespacePrefix';

;
  undef $given;
}
if (defined $given) {
  if (($version eq '1.0' and
       not 
($given =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
      ($version eq '1.1' and
       not 
($given =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://www.w3.org/2001/04/infoset#name' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureNamespacePrefix', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
  } elsif (index ($given, ':') > -1) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#name' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_BAD_NCNAME', 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureNamespacePrefix', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
  }
} # has prefix


}

;
} # strict
if (defined $given) {
  $$self->{
'pfx'
} = \$given;
} else {
  CORE::delete $$self->{
'pfx'
};
}


}
}
}
sub append_child ($$) {
my ($self, $newChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    3 => 1,
    5 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    3 => 1,
    5 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      $$newChild->{
'child'
} = [];
    } else {
      my $v = $$nc_parent->{
'child'
};
      RP: for my $i (0..$#$v) {
        if ($v->[$i] eq $new_child[0]) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    $$nc->{
'parent'
} = $self;
    Scalar::Util::weaken ($$nc->{
'parent'
});
  }

  my $children = $$self->{
'child'
};

  

{


## -- Adds to children list
    push @$children, @new_child;
    $r = $newChild;
  


}

;

  

;

  

;



}


;}

;


}

;


}
$r}
sub insert_before ($$;$) {
my ($self, $newChild, $refChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    3 => 1,
    5 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    3 => 1,
    5 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

{


# tc:ForAppendChild & tc:ForReplaceChild
    if (defined $refChild) {
      if ($refChild eq $newChild) {
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#insert-before-itself', 'rdata' => $refChild, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1';


}


;}

;
        


}

;
        

;
      }

      my $cns = $self->
child_nodes
;
      my $cnsl = @$cns;
      C: {
        $index = 0;
        for my $i (0..($cnsl-1)) {
          my $cn = $cns->[$i];
          if ($cn eq $refChild) {
            $index += $i;
            last C;
          } elsif ($cn eq $newChild) {
            $index = -1; # offset
          }
        }
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'refChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $refChild;


}


;}

;
        


}

;
        

;
      } # C
    } else { # |oldChild| is not defined
      

;
    }
  


}

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      $$newChild->{
'child'
} = [];
    } else {
      my $v = $$nc_parent->{
'child'
};
      RP: for my $i (0..$#$v) {
        if ($v->[$i] eq $new_child[0]) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    $$nc->{
'parent'
} = $self;
    Scalar::Util::weaken ($$nc->{
'parent'
});
  }

  my $children = $$self->{
'child'
};

  

;

  

{


## -- Adds to children list
    if ($index == -1) {
      push @$children, @new_child;
    } else {
      splice @$children, $index, 0, @new_child;
    }
    $r = $newChild;
  


}

;

  

;



}


;}

;


}

;


}
$r}
sub replace_child ($$$) {
my ($self, $newChild, $oldChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    3 => 1,
    5 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    3 => 1,
    5 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

{


# tc:ForAppendChild & tc:ForReplaceChild
    if (defined $oldChild) {
      if ($oldChild eq $newChild) {
        

;
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#replace-by-itself', 'rdata' => $oldChild, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1';


}


;}

;
        


}

;
      }

      my $cns = $self->
child_nodes
;
      my $cnsl = @$cns;
      C: {
        $index = 0;
        for my $i (0..($cnsl-1)) {
          my $cn = $cns->[$i];
          if ($cn eq $oldChild) {
            $index += $i;
            last C;
          } elsif ($cn eq $newChild) {
            $index = -1; # offset
          }
        }
        

;
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $oldChild;


}


;}

;
        


}

;
      } # C
    } else { # |oldChild| is not defined
      

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $oldChild;


}


;}

;
      


}

;
    }
  


}

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      $$newChild->{
'child'
} = [];
    } else {
      my $v = $$nc_parent->{
'child'
};
      RP: for my $i (0..$#$v) {
        if ($v->[$i] eq $new_child[0]) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    $$nc->{
'parent'
} = $self;
    Scalar::Util::weaken ($$nc->{
'parent'
});
  }

  my $children = $$self->{
'child'
};

  

;

  

;

  

{


## -- Replaces the node
    splice @$children, $index, 1, @new_child;
    CORE::delete $$oldChild->{
'parent'
};
    $r = $oldChild;
  


}

;



}


;}

;


}

;


}
$r}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$prefix = $$self->{
'pfx'
};
my $lname = $$self->{
'ln'
};
$r = defined $prefix ? $$prefix.':'.$$lname : $$lname;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$prefix = $$self->{
'pfx'
};
my $lname = $$self->{
'ln'
};
$r = defined $prefix ? $$prefix.':'.$$lname : $$lname;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'name';
}
}
sub node_value ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = '';
   for my $child (@{$self->
child_nodes
}) {
     if ($child->
node_type
 ==
         
5
) {
       my $v = $child->
text_content
;
       $v =~ s/[\x09\x0A\x0D]/ /;
       $r .= $v;
     } else {
       $r .= $child->
text_content
;
     }
   } # childNodes
   my $vt = $$self->{
'at'
};
   unless (not defined $vt or
           $vt == 
0 or
           
$vt == 
11 or
           
$vt == 
1
) {
     $r =~ s/\A\x20+//;
     $r =~ s/\x20+\z//;
     $r =~ s/\x20+/ /g;
   }

 if (defined $vt and $vt == 
2 and
     
$self->
owner_document
->
dom_config

          ->
get_parameter
 (
'http://suika.fam.cx/www/2006/dom-config/xml-id'
)) {
   $r =~ s/[\x09\x0A\x0D\x20]+/ /g;
   $r =~ s/\A //;
   $r =~ s/ \z//;
 }



}


;}

;


}
$r;
} else {my ($self, $given) = @_;

{


{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;

for my $__old_child (@{${$self}->{
'child'
}}) {
  CORE::delete $$__old_child->{
'parent'
};
}

my @__new_children;
if (defined $given and length $given) {
  my $__text = $self->owner_document->
create_text_node
 ($given);
  push @__new_children, $__text;
  $$__text->{
'parent'
} = $self;
  Scalar::Util::weaken ($$__text->{
'parent'
});
}

${$self}->{
'child'
} = \@__new_children;


}

;


}
}
}
sub manakai_append_text ($$) {
my ($self, $string) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$lc = $self->
last_child
;
  if (defined $lc and
      $lc->
node_type
 == 
3
) {
    $lc->
manakai_append_text

           (ref $string eq 'SCALAR' ? $string : \$string);
  } else {
    my $text = $self->
owner_document

                    ->
create_text_node
 
                        (ref $string eq 'SCALAR' ? $$string : $string);
    $self->
append_child
 ($text);
  }
  $r = $self;



}


;}

;


}
$r}
sub get_feature ($$$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


}

{


$version = '' unless defined $version;


}
my $r;

{


$feature =~ s/^\+//;


{

if 
($Message::Util::AutoLoad::Registry::Feature->{$feature}->{$version}) {
  $r = $self;
}


}

;
unless (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->SUPER::get_feature ($feature, $version);
  


}


;}

;
}


}
$r}
sub base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$oe = $self->
owner_element
;
  if ($oe) {
    my $ln = $self->local_name;
    my $nsuri = $self->namespace_uri;
    if (($ln eq 'base' and defined $nsuri and $nsuri eq 
'http://www.w3.org/XML/1998/namespace'
) or
        ($ln eq 'xml:base' and not defined $nsuri)) {
      my $oep = $oe->
parent_node
;
      if ($oep) {
        $r = $oep->
base_uri
;
      } else {
        $r = $self->
owner_document
->
base_uri
;
      }
    } else {
      $r = $oe->
base_uri
;
    }
  } else {
    $r = $self->
owner_document
->
base_uri
;
  }



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'base_uri';
}
}
sub owner_element ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = $$self->{
'owner'
};


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'owner_element';
}
}
sub specified ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


$r = $$self->{
'specified'
};
unless ($r) {
  unless (defined $$self->{
'owner'
}) {
    $r = 
1
;
  }
}


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;
unless ($given) {
  $given = 1 unless defined $$self->{
'owner'
};
}
$$self->{
'specified'
} = $given;


}
}
}
sub value ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = '';
   for my $child (@{$self->
child_nodes
}) {
     if ($child->
node_type
 ==
         
5
) {
       my $v = $child->
text_content
;
       $v =~ s/[\x09\x0A\x0D]/ /;
       $r .= $v;
     } else {
       $r .= $child->
text_content
;
     }
   } # childNodes
   my $vt = $$self->{
'at'
};
   unless (not defined $vt or
           $vt == 
0 or
           
$vt == 
11 or
           
$vt == 
1
) {
     $r =~ s/\A\x20+//;
     $r =~ s/\x20+\z//;
     $r =~ s/\x20+/ /g;
   }

 if (defined $vt and $vt == 
2 and
     
$self->
owner_document
->
dom_config

          ->
get_parameter
 (
'http://suika.fam.cx/www/2006/dom-config/xml-id'
)) {
   $r =~ s/[\x09\x0A\x0D\x20]+/ /g;
   $r =~ s/\A //;
   $r =~ s/ \z//;
 }



}


;}

;


}
$r;
} else {my ($self, $given) = @_;

{


{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;

for my $__old_child (@{${$self}->{
'child'
}}) {
  CORE::delete $$__old_child->{
'parent'
};
}

my @__new_children;
if (defined $given and length $given) {
  my $__text = $self->owner_document->
create_text_node
 ($given);
  push @__new_children, $__text;
  $$__text->{
'parent'
} = $self;
  Scalar::Util::weaken ($$__text->{
'parent'
});
}

${$self}->{
'child'
} = \@__new_children;


}

;


}
}
}
sub schema_type_info ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{

my 
$type = $$self->{
'at'
};


{

my 
$v = $type || 0;
$r = bless \$v, 
'Message::DOM::Element::ManakaiDOMDTDTypeInfo'
;


}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'schema_type_info';
}
}
sub is_id ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{

T: 
{
  ## DTD Attribute Type
  my $type = $$self->{
'at'
};
  if (defined $type and $type == 
2
) {
    $r = 
1
;
    last T;
  }

  ## User-determined ID
  my $udid = $$self->{
'isudid'
};
  if ($udid) {
    $r = 
1
;
    last T;
  }

  ## Application-determined ID
  my $nsuri = $self->
namespace_uri
;
  my $ln = $self->
local_name
;
  if (defined $nsuri and $nsuri eq 
'http://www.w3.org/XML/1998/namespace' and
      
$ln eq 'id') {
    $r = 
1
;
    last T;
  } elsif (not defined $nsuri and $ln eq 'xml:id') {
    $r = 
1
;
    last T;
  }
} # T


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;
$$self->{
'isudid'
} = $given;


}
}
}
sub manakai_attribute_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


$r = $$self->{
'at'
};
$r = 
0 unless 
defined $r;


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;
$$self->{
'at'
} = $given;


}
}
}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::Element::ManakaiDOMAttr>}->{has_feature} = {'core',
{'',
'1'},
'xml',
{'',
'1'},
'xmlversion',
{'',
'1'}};
$Message::DOM::ClassPoint{q<Message::DOM::Element::ManakaiDOMAttr>} = 0;
package Message::DOM::IF::TypeInfo;
our $VERSION = 20061230.1435;
sub DERIVATION_RESTRICTION () {
1}
sub DERIVATION_EXTENSION () {
2}
sub DERIVATION_UNION () {
4}
sub DERIVATION_LIST () {
8}
package Message::DOM::Element::ManakaiDOMDTDTypeInfo;
our $VERSION = 20061230.1435;
push our @ISA, 'Message::DOM::IF::TypeInfo';
sub type_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = {
  
1
 => 'CDATA',
  
2
 => 'ID',
  
3
 => 'IDREF',
  
4
 => 'IDREFS',
  
5
 => 'ENTITY',
  
6
 => 'ENTITIES',
  
7
 => 'NMTOKEN',
  
8
 => 'NMTOKENS',
  
9
 => 'NOTATION',
  
10
 => 'ENUMERATION',
}->{$$self};


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMDTDTypeInfo', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'type_name';
}
}
sub type_namespace ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = {
  
1
 => 
1
,
  
2
 => 
1
,
  
3
 => 
1
,
  
4
 => 
1
,
  
5
 => 
1
,
  
6
 => 
1
,
  
7
 => 
1
,
  
8
 => 
1
,
  
9
 => 
1
,
  
10
 => 
1
,
}->{$$self} ? 
'http://www.w3.org/TR/REC-xml' : 
undef;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMDTDTypeInfo', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'type_namespace';
}
}
sub is_derived_from ($$$$) {
my ($self, $typeNamespaceArg, $typeNameArg, $derivationMethod) = @_;
my $r = 0;


$r}
use overload 
bool => sub () {1}, 
'eq' => sub ($$) {
my ($self, $t) = @_;
my $r = 0;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(UNIVERSAL::isa ($t, 
'Message::DOM::IF::TypeInfo'
)) {
    my $ln1 = $self->
type_name
;
    my $ln2 = $t->
type_name
;
    if ((defined $ln1 and defined $ln2 and $ln1 eq $ln2) or
        (not defined $ln1 or not defined $ln2)) {
      my $ns1 = $self->
type_namespace
;
      my $ns2 = $t->
type_namespace
;
      if ((defined $ns1 and defined $ns2 and $ns1 eq $ns2) or
          (not defined $ns1 and not defined $ns2)) {
        $r = 
1
;
      }
    }
  }



}


;}

;


}
$r}
, 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::Element::ManakaiDOMDTDTypeInfo>}->{has_feature} = {'core',
{'',
'1'},
'xml',
{'',
'1'},
'xmlversion',
{'',
'1'}};
$Message::DOM::ClassPoint{q<Message::DOM::Element::ManakaiDOMDTDTypeInfo>} = 0;
for ($Message::DOM::IF::Node::){}
## License: <http://suika.fam.cx/~wakaba/archive/2004/8/18/license#Perl+MPL>
1;
