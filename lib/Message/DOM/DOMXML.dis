Module:
  @QName: 
    MDOM:DOMXML
  @AppName:
    @@@: dom
    @@prefix:  w3c.org
    @@ContentType:
      lang:IDL-DOM
    @@For:
      ManakaiDOM:IDL
  @AppName:
    @@@: org.w3c.dom
    @@ContentType:
      lang:Java
    @@ForCheck:
      ManakaiDOM:ForIF
    @@For:
      ManakaiDOM:Java
  @FullName:
    @@lang:en
    @@@: DOM XML Module
  @Spec:
    @@DOM3:
      http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-BBACDC08
  @Namespace:     
    http://suika.fam.cx/~wakaba/archive/2004/dom/xml#

  @enDesc:
    The DOM <DFN::XML Module>, also known as <DFN::Extended Interface>
    in DOM Core specification, is a set of interfaces specific 
    to XML document object model.  Objects that expose these interfaces
    will never encountered in a DOM implementation that deals
    only with HTML.

    {NOTE:: Objects in XHTML document might implement these interfaces.
            In addition, more SGML-like HTML implementation might
            implement some or all of these interfaces in fact.
    }

  @DISCore:author: DISCore|Wakaba
  @License:
     license:Perl+MPL
  @Date:
    $Date: 2006/02/15 13:36:20 $
  
  @Require:
    @@Module:
      @@@QName: MDOM|Tree
    @@Module:
      @@@QName: MDOM|XDoctype
      @@@WithFor: ManakaiDOM|ManakaiDOMLatest
  @DefaultFor: ManakaiDOM|ManakaiDOMLatest

Namespace:
  @c:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
  @d:
    http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @doc:
    http://suika.fam.cx/~wakaba/archive/2005/7/tutorial#
  @DOMMain:
    http://suika.fam.cx/~wakaba/archive/2004/dom/main#
  @dx:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#
  @dxm:
    http://suika.fam.cx/~wakaba/archive/2004/dis/XML#
  @f:
    http://suika.fam.cx/~wakaba/archive/2004/dom/feature#
  @fe:
    http://suika.fam.cx/www/2006/feature/
  @idl:
    http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#
  @infoset:
     http://www.w3.org/2001/04/infoset#
  @kwd:
    http://suika.fam.cx/~wakaba/archive/2005/rfc2119/
  @lang:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @ManakaiDOMCore:
    http://suika.fam.cx/~wakaba/archive/2004/mdom-core#
  @ManakaiDOMXML:
    http://suika.fam.cx/~wakaba/archive/2004/mdom-xml#
  @MDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.
  @mn:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#
  @t:
    http://suika.fam.cx/~wakaba/archive/2004/dom/tree#
  @test:
    http://suika.fam.cx/~wakaba/archive/2004/dis/Test#
  @x:
    http://suika.fam.cx/~wakaba/archive/2004/dom/xml#

ElementTypeBinding:
  @Name: NodeTypeDef
  @ElementType: 
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@: dis|MultipleResource
      @@@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass
    @@resourceFor: ManakaiDOM|ForIF
    @@resourceFor:
      @@@@: ManakaiDOM|ForClass
      @@@ForCheck: ManakaiDOM|ManakaiDOM !=ManakaiDOM|ManakaiDOM
    @@For: ManakaiDOM|DOM1
    @@For: =ManakaiDOM|ManakaiDOM

    @@rdf:type:
      @@@@: DISLang|Interface
      @@@ForCheck: ManakaiDOM|ForIF

    @@rdf:type:
      @@@@: DISLang|Class
      @@@ForCheck: ManakaiDOM|ForClass

    @@ISA:
      @@@@: c|Node
      @@@ForCheck: ManakaiDOM|ForIF
    @@ISA:
      @@@@: c|ManakaiDOMNode
      @@@ForCheck: ManakaiDOM|ForClass

    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOM||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOM1||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM1
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOM2||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM2
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOM3||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM3
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOMLatest||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOMLatest

    @@f:implements:
      @@@@: DOMXML|XMLFeature10
      @@@For: ManakaiDOM|DOM1 ManakaiDOM|DOMXMLFeature
    @@f:implements:
      @@@@: DOMXML|XMLFeature20
      @@@For: ManakaiDOM|DOM2 ManakaiDOM|DOMXMLFeature
    @@f:implements:
      @@@@: DOMXML|XMLFeature30
      @@@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeature
    @@f:implements:
      @@@@: DOMXML|XMLVersionFeature10
      @@@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeature
    @@f:implements:
      @@@@: DOMXML|XMLVersionFeature11
      @@@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeatureXML11

ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Method
    @@ForCheck: !=ManakaiDOM|ManakaiDOM

ElementTypeBinding:
  @Name: IntMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Method
    @@ForCheck: !=ManakaiDOM|ManakaiDOM ManakaiDOM|ForClass
    @@ManakaiDOM:isForInternal: 1

ElementTypeBinding:
  @Name: L3Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Method
    @@ForCheck: !=ManakaiDOM|ManakaiDOM ManakaiDOM|DOM3

ElementTypeBinding:
  @Name: ReMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Method
    @@ForCheck: !=ManakaiDOM|ManakaiDOM ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|MethodParameter

ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|MethodReturn

ElementTypeBinding:
  @Name: Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Attribute
    @@ForCheck: !=ManakaiDOM|ManakaiDOM

ElementTypeBinding:
  @Name: L2Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Attribute
    @@ForCheck: !=ManakaiDOM|ManakaiDOM ManakaiDOM|DOM2

ElementTypeBinding:
  @Name: L3Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Attribute
    @@ForCheck: !=ManakaiDOM|ManakaiDOM ManakaiDOM|DOM3

ElementTypeBinding:
  @Name: LXAttr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Attribute
    @@ForCheck: !=ManakaiDOM|ManakaiDOM ManakaiDOM|ManakaiDOMLatest

ElementTypeBinding:
  @Name: IntAttr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Attribute
    @@ForCheck: !=ManakaiDOM|ManakaiDOM ManakaiDOM|ForClass
    @@ManakaiDOM:isForInternal: 1

ElementTypeBinding:
  @Name: ReAttr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Attribute
    @@ForCheck: !=ManakaiDOM|ManakaiDOM ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: Get
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|AttributeGet

ElementTypeBinding:
  @Name: Set
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|AttributeSet

ElementTypeBinding:
  @Name: LXSet
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|AttributeSet
    @@ForCheck: ManakaiDOM|ManakaiDOMLatest

ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase

ElementTypeBinding:
  @Name: nullCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase
    @@Value:
      @@@is-null:1

ElementTypeBinding:
  @Name: PerlDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:Perl
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: disDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:dis
    @@ForCheck: ManakaiDOM|ForClass

## -- Feature

ElementTypeBinding:
  @Name: FeatureDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: f|Feature
    @@For: =ManakaiDOM|all

ElementTypeBinding:
  @Name: FeatureVerDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: f|Feature

ElementTypeBinding:
  @Name: featureName
  @ElementType:
    f:name
  @ShadowContent:
    @@ContentType: DISCore|String

ElementTypeBinding:
  @Name: featureQName
  @ElementType:
    f:name
  @ShadowContent:
    @@ContentType: DISCore|QName

FeatureDef:
  @featureName: XML
  @QName: XMLFeature
  @FeatureVerDef:
    @@Version: 1.0
    @@QName: XMLFeature10
    @@f:instanceOf: XMLFeature
    @@DOMMain:requireFeature:
      DOMCore:CoreFeature10
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-E067D597 
    @@Description:
      @@@lang:en
      @@@@:
        The DOM XML Module, Level 1.
  @FeatureVerDef:
    @@Version: 2.0
    @@QName: XMLFeature20
    @@f:extends: XMLFeature10
    @@DOMMain:requireFeature:
      DOMCore:CoreFeature20
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-E067D597
    @@Description:
      @@@lang:en
      @@@@:
        The DOM XML Module, Level 2.
  @FeatureVerDef:
    @@Version: 3.0
    @@QName: XMLFeature30
    @@f:extends: XMLFeature20
    @@DOMMain:requireFeature:
      DOMCore:CoreFeature30
    @@DOMMain:requireFeature: XMLVersionFeature10
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-E067D597
    @@Description:
      @@@lang:en
      @@@@:
        The DOM XML Module, Level 3.

FeatureDef:
  @featureName: XMLVersion
  @QName: XMLVersionFeature
  @FeatureVerDef:
    @@Version: 1.0
    @@QName: XMLVersionFeature10
    @@f:instanceOf: XMLVersionFeature
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#Document3-version
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-E067D597
    @@Description:
      @@@lang:en
      @@@@: The Extensible Markup Language (XML) 1.0. 
  @FeatureVerDef:
    @@Version: 1.1
    @@QName: XMLVersionFeature11
    @@f:instanceOf: XMLVersionFeature
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#Document3-version
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-E067D597
    @@Description:
      @@@lang:en
      @@@@: The Extensible Markup Language (XML) 1.1.

ElementTypeBinding:
  @Name: L1
  @ElementType:
    DOMMain:implementFeature
  @ShadowContent:
    @@@: XMLFeature10
    @@For:
      ManakaiDOM:DOM1
  @ShadowSibling:
    @@DOMMain:implementFeature:
      @@@@: XMLFeature20
      @@@For:
        ManakaiDOM:DOM2
    @@DOMMain:implementFeature:
      @@@@: XMLFeature30
      @@@For:
        ManakaiDOM:DOM3
    @@DOMMain:implementFeature:
      @@@@: XMLVersionFeature10
      @@@For:
        ManakaiDOM:DOM3
    @@DOMMain:implementFeature:
      @@@@: XMLVersionFeature11
      @@@For:
        ManakaiDOM:DOM3

ElementTypeBinding:
  @Name: L2
  @ElementType:
    DOMMain:implementFeature
  @ShadowContent:
    @@@: XMLFeature20
    @@For:
      ManakaiDOM:DOM2
  @ShadowSibling:
    @@DOMMain:implementFeature:
      @@@@: XMLFeature30
      @@@For:
        ManakaiDOM:DOM3
    @@DOMMain:implementFeature:
      @@@@: XMLVersionFeature10
      @@@For:
        ManakaiDOM:DOM3
    @@DOMMain:implementFeature:
      @@@@: XMLVersionFeature11
      @@@For:
        ManakaiDOM:DOM3

ElementTypeBinding:
  @Name: L3
  @ElementType:
    DOMMain:implementFeature
  @ShadowContent:
    @@@: XMLFeature30
    @@For:
      ManakaiDOM:DOM3
  @ShadowSibling:
    @@DOMMain:implementFeature:
      @@@@: XMLVersionFeature10
      @@@For:
        ManakaiDOM:DOM3
    @@DOMMain:implementFeature:
      @@@@: XMLVersionFeature11
      @@@For:
        ManakaiDOM:DOM3


ElementTypeBinding:
  @Name: IFISA
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsISA
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: IFQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: enDesc
  @ElementType:
    dis:Description
  @ShadowContent:
    @@lang:en

ElementTypeBinding:
  @Name: enImplNote
  @ElementType:
    dis:ImplNote
  @ShadowContent:
    @@lang:en

ResourceDef:
  @rdf:type:
    @@@: dis|MultipleResource
    @@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass
  @resourceFor: ManakaiDOM|ForIF
  @resourceFor:
    @@@: ManakaiDOM|ForClass
    @@ForCheck: ManakaiDOM|ManakaiDOM !=ManakaiDOM|ManakaiDOM
  @For: ManakaiDOM|DOM1
  @For: =ManakaiDOM|ManakaiDOM

  @IFQName: CDATASection
  @ClsQName: ManakaiDOMCDATASection

  @rdf:type:
    @@@: ManakaiDOM|IF
    @@ForCheck: ManakaiDOM|ForIF
  @rdf:type:
    @@@: ManakaiDOM|Class
    @@ForCheck: ManakaiDOM|ForClass

  @IFISA: DOMCore|Text
  @ClsISA: Tree|ManakaiDOMText

  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOM||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM
  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOM1||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM1
  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOM2||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM2
  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOM3||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM3
  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOMLatest||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOMLatest

  @DOMMain:implementFeature:
    @@@: DOMXML|XMLFeature10
    @@For: ManakaiDOM|DOM1 ManakaiDOM|DOMXMLFeature
  @DOMMain:implementFeature:
    @@@: DOMXML|XMLFeature20
    @@For: ManakaiDOM|DOM2 ManakaiDOM|DOMXMLFeature
  @DOMMain:implementFeature:
    @@@: DOMXML|XMLFeature30
    @@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeature
  @DOMMain:implementFeature:
    @@@: DOMXML|XMLVersionFeature10
    @@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeature
  @DOMMain:implementFeature:
    @@@: DOMXML|XMLVersionFeature11
    @@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeatureXML11

  @DISLang:role: 
    @@@:
      DOMCore:CDATASectionRole
    @@DISCore:stopISARecursive:1

  @enDesc:
    The <IF::CDATASection> interface represents <XML::CDATA>
    sections in XML documents.  A <IF::CDATASection> object
    corresponds to a <XML::CDATA> section.  Since <XML::CDATA>
    sections are physical structure rather than logical structure,
    they are not found in XML information set -- each character
    in <XML::CDATA> section are modeled as a <InfoItem::character
    information item>.

    A <SGML::CDATA> section is a marked section whose effective status
    is <SGML::CDATA>.  It is the only legal effective status 
    in XML document instances.  In <SGML::CDATA> sections, 
    no markup delimiter other than <SGML::MSE>, i.e. <XML::]]<gt>>
    in XML, is recognized.  In other word, they are used
    to escape markups in contents of elements.

    {NOTE:: The <IF::CDATASection> interface extends the
            <IF::DOMCore|Text> interface.
    }

  @ReAttr:
    @@Name: nodeName
    @@Description:
       @@@lang:en
       @@@@: The node name.
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-F68D095
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-1841493061
    @@DOMMain:isNamespaceUnaware:1
    @@Get:
      @@@Type: 
        DOMMain:DOMString
      @@@actualType:
        DOMMain:ManakaiDOMString
      @@@InCase:
        @@@@Value:\#cdata-section
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            Always this value for the <IF::CDATASection> node.
      @@@disDef:
        @@@@DISLang:value:
          @@@@@@: \#cdata-section
          @@@@@ContentType:
            DISCore:String
  @ReAttr:
    @@Name: nodeType
    @@Description:
      @@@lang:en
      @@@@: The type of this node.
    @@Get:
      @@@Type: 
        DOMMain:unsigned-short||ManakaiDOM|all
      @@@InCase:
        @@@@Label:
          @@@@@lang:en
          @@@@@@:
            <C::DOMCore|Node.CDATA_SECTION_NODE>
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The node is a <IF::CDATASection>.
      @@@disDef:
        @@@@DISLang:constValue:
          DOMCore:Node.CDATA_SECTION_NODE

  @IntMethod:
    @@Name: newObject
    @@Description:
      @@@lang:en
      @@@@:
        Construct an object for a new instance of the <IF::CDATASection> node.
    @@NewObjectRefNodeParam:
    @@Return:
      @@@Type: DOMCore|NodeStem
      @@@Description:
        @@@@lang:en
        @@@@@:
          The new object for the <IF::CDATASection> node.
      @@@PerlDef:
        $r = <ClassM::DOMCore:ManakaiDOMNode.newObject> ($self, $refNode);
        $r->{<H::DOMCore:nodeType>} = <H::DOMXML:CDATASectionNode>;
        $r->{<H::infoset:content>} = '';
     @@ImplNote:
       @@@lang:en
       @@@@:
         Other properties required to be a legal <IF::CDATASection> object:
         <Q::DOMCore::ownerDocument>.
         \
         Other available properties: <Q::infoset:parent>, 
         <Q::infoset:content>.

  @mn:xrefnode0: DOMCore|ownerDocument
  @mn:origin0: infoset|parent

  @Method:
     @@Name:  getFeature
     @@enDesc:
       Returns a specialized object that implements the
       specialized interfaces of the specified feature and version.
     @@ManakaiDOM:isRedefining:1
     @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|DOM3
     @@Param:
        @@@Name:  feature
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOM|ManakaiDOMFeatureName
        @@@enDesc:
          The feature name to request.
        @@@InCase:
          @@@@Label:
            @@@@@lang:en
            @@@@@@: 
              Feature name preceded by a <CHAR::PLUS SIGN>
          @@@@enDesc:
            The <CHAR::PLUS SIGN> is ignored.
     @@Param:
        @@@Name:  version
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOM|ManakaiDOMFeatureVersion
        @@@enDesc:
          The feature version to request.
        @@@nullCase:
          @@@@enDesc:
            No specific version is requested.
     @@Return:
        @@@Type:  
          DOMMain:DOMObject
        @@@enDesc:
          An object implementing the specialized interfaces.
          Note that the specialized object may or may not
          implement the <IF::DOMCore|Node> interface.
        @@@nullCase:
          @@@@enDesc:
            There is no object available that implements
            the specialized interfaces.
        @@@PerlDef:
            $feature =~ s/^\+//;
            if ($Message::DOM::ClassFeature{ref $self}->{$feature}->{$version}) {
              ## This class
              $r = $self;
            } else {
              CLASS: for my $class (grep {
                $Message::DOM::ManakaiDOMCDATASection::CompatClass{$_}
              } keys %Message::DOM::ManakaiDOMCDATASection::CompatClass) {
                if ($Message::DOM::ClassFeature{$class}
                            ->{$feature}->{$version}) {
                  __CODE{DOMCore|getNodeRef::
                    $object => {$self->{<H::mn:node>}},
                    $ref => $r,
                    $class => $class,
                  }__;
                  last CLASS;
                }
              }
            }
##CDATASection

ElementTypeBinding:
  @Name: NewObjectRefNodeParam
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@Name: refNode
    @@Type: NodeStem
    @@Description:
      @@@lang:en
      @@@@:
        A node from the tree to which the new node will belong.
    @@rdf:type: DISLang|MethodParameter
    @@ResourceDef:
      @@@rdf:type: ManakaiDOM|InCase
      @@@Value:
        @@@@is-null:1
      @@@Description:
        @@@@lang:en
        @@@@@:
          The node belongs to a new tree.

PropDef:
  @QName: ManakaiDOM|isExpanded
  @enDesc:
    Whether an entity reference is expanded or not.
  @c:nodeProp: xp

PropDef:
  @QName: ManakaiDOM|isExternalEntity
  @enDesc:
    Whether an entity is external entity or not.
  @c:nodeProp: xe

ElementTypeBinding:
  @Name: PropDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      rdf:Property
    @@For: =ManakaiDOM|all

ResourceDef:
  @For: =ManakaiDOM|all
  @rdf:type: rdfs|Resource
  @QName: DOMXML|EntityNode
  @dxm:nodeTypeName: ge

ResourceDef:
  @For: =ManakaiDOM|all
  @rdf:type: rdfs|Resource
  @QName: DOMXML|EntityReferenceNode
  @dxm:nodeTypeName: r

ResourceDef:
  @For: =ManakaiDOM|all
  @rdf:type: rdfs|Resource
  @QName: DOMXML|CDATASectionNode
  @dxm:nodeTypeName: cs

ResourceDef:
  @For: ManakaiDOM|ManakaiDOMLatest
  @QName: DTDef
  @AliasFor: d|DocumentTypeDefinition
ResourceDef:
  @For: !ManakaiDOM|ManakaiDOMLatest
  @QName: DTDef
  @AliasFor: d|DocumentTypeDefinition||ManakaiDOM|ManakaiDOMLatest

ResourceDef:
  @For: ManakaiDOM|ManakaiDOMLatest
  @QName: MDTDef
  @AliasFor: d|ManakaiDOMDocumentTypeDefinition
ResourceDef:
  @For: !ManakaiDOM|ManakaiDOMLatest
  @QName: MDTDef
  @AliasFor: d|ManakaiDOMDocumentTypeDefinition||ManakaiDOM|ManakaiDOMLatest

ResourceDef:
  @For: ManakaiDOM|ManakaiDOMLatest
  @QName: DTDecl
  @AliasFor: d|DocumentTypeDeclaration
ResourceDef:
  @For: !ManakaiDOM|ManakaiDOMLatest
  @QName: DTDecl
  @AliasFor: d|DocumentTypeDeclaration||ManakaiDOM|ManakaiDOMLatest

ResourceDef:
  @For: ManakaiDOM|ManakaiDOMLatest
  @QName: MDTDecl
  @AliasFor: d|ManakaiDOMDocumentTypeDeclaration
ResourceDef:
  @For: !ManakaiDOM|ManakaiDOMLatest
  @QName: MDTDecl
  @AliasFor: d|ManakaiDOMDocumentTypeDeclaration||ManakaiDOM|ManakaiDOMLatest


ElementTypeBinding:
  @Name: Test
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: test|StandaloneTest
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: L2Test
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: test|StandaloneTest
    @@ForCheck: ManakaiDOM|ManakaiDOM2 ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: L3Test
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: test|StandaloneTest
    @@ForCheck: ManakaiDOM|ManakaiDOM3 ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: LXTest
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: test|StandaloneTest
    @@ForCheck: ManakaiDOM|ManakaiDOMLatest ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: XDTest
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: test|StandaloneTest
    @@ForCheck: ManakaiDOM|ManakaiDOMLatest ManakaiDOM|ForClass

NodeTypeDef:
  @IFQName: DocumentType
  @ClsQName: ManakaiDOMDocumentType

  @DISLang:role: c|DocumentTypeRole

  @enDesc:
    The <IF::x|DocumentType> interface procides an interface to
    the list of general entities and notations that are defined
    for the document.

    In DOM levels 3 or earlier, <IF::x|DocumentType> nodes are read-only.

    A <IF::DocumentType> node can be a child of the <IF::DOMCore|Document> node
    but it <kwd:MUST> be an elder sibling of the document element node, if any.
    DOM Level 2 introduces the <M::DOMCore|DOMImplementation.createDocumentType>
    method which creates a <IF::DocumentType> node which does not
    bind to any <IF::DOMCore|Document> and that makes <IF::DocumentType>
    nodes without any parent being allowed.  The <IF::DocumentType>
    nodes themselves cannot have any children; <IF::Entity> and
    <IF::Notation> nodes are not defined to have parent.

  @enDesc:
    @@ddid: child
    @@For: ManakaiDOM|ManakaiDOM
    @@@:
      In DOM levels 3 or earlier, <IF::x|DocumentType> nodes
      can never has child nodes.  However, the manakai DOM implementation
      allows <IF::x|DocumentType> nodes to contain <IF::x|ProcessingInstruction>
      nodes as children.

  @Attr:
    @@Name: name
    @@enDesc:
      The document type name.
    @@DOMMain:isNamespaceUnaware: 1
    @@Type: DOMString
    @@dis:actualType: DOMMain|ManakaiDOMXMLName
    @@Get:
      @@@disDef:
        @@@@DISPerl:cloneCode: MDTDef.nodeName.get

    @@L2Test:
      @@@QName: DocumentType.name.get.test
      @@@PerlDef:
        my $impl;
        __CODE{t|createDOMImplForTest:: $impl => $impl}__;

        my $dtype = $impl-><M::c|DOMImplementation.createDocumentType>
                             ('type', 'pub', 'sys');
        $test->assert_equals ($dtype-><AG::DocumentType.name>, 'type');
            
  @Attr:
    @@Name: entities
    @@enDesc:
      A collection containing the general entities, both external
      and internal, declared in the DTD.

        {NOTE:: No parameter entities or duplicating entity declarations
                are contained.
        }
    @@Type: t|NamedNodeMap
    @@Get:
      @@@disDef:
        @@@@DISPerl:cloneCode: MDTDef.generalEntities.get

    @@Test:
      @@@QName: DocumentType.entities.get.test
      @@@PerlDef:
        my $impl;
        __CODE{t|createDOMImplForTest:: $impl => $impl}__;

        my $dtype = $impl-><M::c|DOMImplementation.createDocumentType>
                             ('type', 'pub', 'sys');
        my $ent = $dtype-><AG::DocumentType.entities>;
        $test->assert_isa ($ent, <IFName::t|NamedNodeMap>);
        $test->assert_num_equals
                 (actual_value => $ent-><AG::t|NamedNodeMap.length>,
                  expected_value => 0);

  @Attr:
    @@Name: notations
    @@enDesc:
      A collection containing the notations declared in the DTD.

        {NOTE:: Duplicating declarations are not contained in the collection.
        }
    @@Type: t|NamedNodeMap
    @@Get:
      @@@disDef:
        @@@@DISPerl:cloneCode: MDTDef.notations.get

    @@Test:
      @@@QName: DocumentType.notations.get.test
      @@@PerlDef:
        my $impl;
        __CODE{t|createDOMImplForTest:: $impl => $impl}__;

        my $dtype = $impl-><M::c|DOMImplementation.createDocumentType>
                             ('type', 'pub', 'sys');
        my $ent = $dtype-><AG::DocumentType.notations>;
        $test->assert_isa ($ent, <IFName::t|NamedNodeMap>);
        $test->assert_num_equals
                 (actual_value => $ent-><AG::t|NamedNodeMap.length>,
                  expected_value => 0);

  @L2Attr:
    @@Name: publicId
    @@enDesc:
      The public identifier of the external subset.
    @@Type: DOMString
    @@Get:
      @@@nullCase:
        @@@@For: ManakaiDOM|ManakaiDOM
        @@@@enDesc:
          If the external subset has no public identifier
          or if there is no external subset.
      @@@disDef:
        @@@@DISPerl:cloneCode: MDTDecl.publicId.get

    @@L2Test:
      @@@QName: DocumentType.publicId.get.test
      @@@PerlDef:
        my $impl;
        __CODE{t|createDOMImplForTest:: $impl => $impl}__;

        my $dtype = $impl-><M::c|DOMImplementation.createDocumentType>
                             ('type', 'pub', 'sys');
        $test->assert_equals ($dtype-><AG::DocumentType.publicId>, 'pub');

  @L2Attr:
    @@Name: systemId
    @@enDesc:
      The system identifier of the external subset.  It may
      or may not be an absolute URI.
    @@Type: DOMString
    @@Get:
      @@@nullCase:
        @@@@For: ManakaiDOM|ManakaiDOM
        @@@@enDesc:
          If the external subset has no system identifier
          or if there is no external subset.
      @@@disDef:
        @@@@DISPerl:cloneCode: MDTDecl.systemId.get

    @@L2Test:
      @@@QName: DocumentType.systemId.get.test
      @@@PerlDef:
        my $impl;
        __CODE{t|createDOMImplForTest:: $impl => $impl}__;

        my $dtype = $impl-><M::c|DOMImplementation.createDocumentType>
                             ('type', 'pub', 'sys');
        $test->assert_equals ($dtype-><AG::DocumentType.systemId>, 'sys');

  @Attr:
     @@Name:  internalSubset
     @@Description:
       @@@lang:en
       @@@@:
         The internal subset as a string, without delimiting square brackets.
     @@Get:
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The internal subset as a string.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: There is no internal subset.
        @@@ImplNote:
          @@@@lang:en
          @@@@@:
            The actual content returned depends on how much information
            is available to the DOM implementation.  This may vary 
            depending on various parameters, including the XML 
            processor used to build the document.
     @@Level[list]:  2
     @@SpecLevel:2
     @@L2:

  @L3Method:
    @@ForCheck: ManakaiDOM|ForClass
    @@Name: lookupPrefix
    @@enDesc:
      Looks up the namespace prefix associated to the given
      namespace URI, starting from this node.
    @@DOMMain:isNamespaceAware: 1
    @@Param:
      @@@Name: namespaceURI
      @@@Type: DOMString
      @@@dis:actualType: ManakaiDOM|ManakaiDOMNamespaceURI
      @@@enDesc:
        The namespace URI to look for.
    @@Return:
      @@@Type: DOMString
      @@@enDesc:
        An associated namespace prefix.
      @@@nullCase:
        @@@@enDesc:
          No namespace prefix is found.  For <IF::x|DocumentType>
          node the method always returns <DOM::null>.
      @@@disDef:
        @@@@DISPerl:cloneCode: MDTDef.lookupPrefix

    @@L3Test:
      @@@QName: DocumentType.lookupPrefix.test
      @@@PerlDef:
        my $impl;
        __CODE{t|createDOMImplForTest:: $impl => $impl}__;

        my $dtype = $impl-><M::c|DOMImplementation.createDocumentType>
                             ('type', 'pub', 'sys');
        $test->assert_null ($dtype-><M::Node.lookupPrefix> ('about:'));

  @Attr:
    @@Name: nodeName
    @@Description:
      @@@lang:en
      @@@@: The node name.
    @@DOMMain:isNamespaceUnaware:1
    @@Get:
      @@@Type: 
        DOMMain:DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: The document type name.
      @@@disDef:
        @@@@DISPerl:cloneCode: .name.get

    @@Test:
      @@@QName: DocumentType.nodeName.get.test
      @@@PerlDef:
        my $impl;
        __CODE{t|createDOMImplForTest:: $impl => $impl}__;

        my $dtype = $impl-><M::c|DOMImplementation.createDocumentType>
                             ('type', 'pub', 'sys');
        $test->assert_equals ($dtype-><AG::Node.nodeName>, 'type');

  @Attr:
    @@ForCheck: ManakaiDOM|ForClass
    @@Name: nodeType
    @@enDesc:
      The type of the node.
    @@Type: idl|unsignedShort||ManakaiDOM|all
    @@dis:actualType: t|NodeType
    @@Get:
      @@@InCase:
        @@@@Label:
          <C::t|Node.DOCUMENT_TYPE_NODE>
        @@@@enDesc:
          The node is a <IF::x|DocumentType>.
      @@@disDef:
        @@@@DISLang:constValue: t|Node.DOCUMENT_TYPE_NODE

    @@Test:
      @@@QName: DocumentType.nodeType.get.test
      @@@PerlDef:
        my $impl;
        __CODE{t|createDOMImplForTest:: $impl => $impl}__;

        my $dtype = $impl-><M::c|DOMImplementation.createDocumentType>
                             ('type', 'pub', 'sys');
        $test->assert_num_equals
                 (actual_value => $dtype-><AG::Node.nodeType>,
                  expected_value => <C::Node.DOCUMENT_TYPE_NODE>);

  @L3Attr:
    @@ForCheck: ManakaiDOM|ForClass
    @@Name: textContent
    @@enDesc:
      The text content of the node and its descendants.
    @@Type: DOMString
    @@Get:
      @@@nullCase:
        @@@@enDesc:
          The text content of the node is defined to be <DOM::null>.
      @@@PerlDef: $r = null;
    @@Set:
      @@@enDesc:
        Setting this attribute has no effect.
      @@@c:reports:
        @@@@@: c|setting-node-value-no-effect
        @@@@enDesc:
          Setting the attribute value has no effect, since the
          node value is defined as <DOM::null>.
        @@@@For: ManakaiDOM|ManakaiDOM
      @@@disDef:
        @@@@DISPerl:cloneCode: t|ManakaiDOMNode.nodeValue.set

    @@L3Test:
      @@@QName: DocumentType.textContent.get.test
      @@@PerlDef:
        my $impl;
        __CODE{t|createDOMImplForTest:: $impl => $impl}__;

        my $dtype = $impl-><M::c|DOMImplementation.createDocumentType>
                             ('type', 'pub', 'sys');
        $test->assert_null ($dtype-><AG::Node.textContent>);
    @@L3Test:
      @@@QName: DocumentType.textContent.set.test
      @@@PerlDef:
        my $impl;
        __CODE{t|createDOMImplForTest:: $impl => $impl}__;

        my $dtype = $impl-><M::c|DOMImplementation.createDocumentType>
                             ('type', 'pub', 'sys');

        $test->id ('set.non.null');
        $dtype-><AS::Node.textContent> ('abcdefg');
        $test->assert_null ($dtype-><AG::Node.textContent>);

        $test->id ('set.null');
        $dtype-><AS::Node.textContent> (null);
        $test->assert_null ($dtype-><AG::Node.textContent>);

  @L3Method:
    @@ForCheck: ManakaiDOM|ForClass
    @@Name: getFeature
    @@enDesc:
      Returns a specialized object that implements the specialized
      interfaces of the specified feature and version.
    @@Param:
      @@@Name: feature
      @@@Type: DOMString
      @@@dis:actualType: f|FeatureNameString
      @@@enDesc:
        The feature name to request.
      @@@InCase:
        @@@@Label:
          @@@@@lang:en
          @@@@@@:
            Feature name preceded by a <CHAR::PLUS SIGN>
    @@Param:
      @@@Name: version
      @@@Type: DOMString
      @@@dis:actualType: f|FeatureVersionString
      @@@enDesc:
        The feature version to request.
      @@@nullCase:
        @@@@enDesc:
          No specific version is requested.
    @@Return:
      @@@Type: DOMMain|DOMObject
      @@@enDesc:
        An object implementing the specialized interface.
        Note that the specialized object may or may nor
        implement the <IF::t|Node> interface.
      @@@nullCase:
        @@@@enDesc:
          There is no object available that implements the 
          specialized interface.
      @@@disDef:
        @@@@DISPerl:cloneCode: MDTDef.getFeature

    @@L3Test:
      @@@QName: DocumentType.getFeature.core.1.0.test
      @@@PerlDef:
        my $impl;
        __CODE{t|createDOMImplForTest:: $impl => $impl}__;

        my $dtype = $impl-><M::c|DOMImplementation.createDocumentType>
                             ('type', 'pub', 'sys');
        my $obj = $dtype-><M::Node.getFeature> (Core => '1.0');

        $test->assert_isa ($obj, <IFName::Node||ManakaiDOM|ManakaiDOM1>);
        $test->assert_isa
                 ($obj, <IFName::x|DocumentType||ManakaiDOM|ManakaiDOM1>);
    @@L3Test:
      @@@QName: DocumentType.getFeature.core.2.0.test
      @@@PerlDef:
        my $impl;
        __CODE{t|createDOMImplForTest:: $impl => $impl}__;

        my $dtype = $impl-><M::c|DOMImplementation.createDocumentType>
                             ('type', 'pub', 'sys');
        my $obj = $dtype-><M::Node.getFeature> (Core => '2.0');

        $test->assert_isa ($obj, <IFName::Node||ManakaiDOM|ManakaiDOM2>);
        $test->assert_isa
                 ($obj, <IFName::x|DocumentType||ManakaiDOM|ManakaiDOM2>);
    @@L3Test:
      @@@QName: DocumentType.getFeature.core.3.0.test
      @@@PerlDef:
        my $impl;
        __CODE{t|createDOMImplForTest:: $impl => $impl}__;

        my $dtype = $impl-><M::c|DOMImplementation.createDocumentType>
                             ('type', 'pub', 'sys');
        my $obj = $dtype-><M::Node.getFeature> (Core => '3.0');

        $test->assert_isa ($obj, <IFName::Node||ManakaiDOM|ManakaiDOM3>);
        $test->assert_isa
                 ($obj, <IFName::x|DocumentType||ManakaiDOM|ManakaiDOM3>);
    @@L3Test:
      @@@QName: DocumentType.getFeature.xml.1.0.test
      @@@PerlDef:
        my $impl;
        __CODE{t|createDOMImplForTest:: $impl => $impl}__;

        my $dtype = $impl-><M::c|DOMImplementation.createDocumentType>
                             ('type', 'pub', 'sys');
        my $obj = $dtype-><M::Node.getFeature> (XML => '1.0');

        $test->assert_isa
                 ($obj, <IFName::x|DocumentType||ManakaiDOM|ManakaiDOM1>);
    @@L3Test:
      @@@QName: DocumentType.getFeature.xml.2.0.test
      @@@PerlDef:
        my $impl;
        __CODE{t|createDOMImplForTest:: $impl => $impl}__;

        my $dtype = $impl-><M::c|DOMImplementation.createDocumentType>
                             ('type', 'pub', 'sys');
        my $obj = $dtype-><M::Node.getFeature> (XML => '2.0');

        $test->assert_isa
                 ($obj, <IFName::x|DocumentType||ManakaiDOM|ManakaiDOM2>);
    @@L3Test:
      @@@QName: DocumentType.getFeature.xml.3.0.test
      @@@PerlDef:
        my $impl;
        __CODE{t|createDOMImplForTest:: $impl => $impl}__;

        my $dtype = $impl-><M::c|DOMImplementation.createDocumentType>
                             ('type', 'pub', 'sys');
        my $obj = $dtype-><M::Node.getFeature> (XML => '3.0');

        $test->assert_isa
                 ($obj, <IFName::x|DocumentType||ManakaiDOM|ManakaiDOM3>);
##DocumentType

ResourceDef:
  @QName: Node
  @AliasFor: t|Node
  @For: ManakaiDOM|DOM1

NodeTypeDef:
  @IFQName: Notation
  @ClsQName: ManakaiDOMNotation

  @DISLang:role: 
    DOMCore:NotationRole

  @enDesc:
    The <IF::Notation> interface represents a notation declared in
    the DTD.

    In DOM levels 3 or earlier, <IF::Notation> nodes are always read-only.

    A <IF::Notation> node does not have any parent.
  @enDesc:
    @@ddid: edit
    @@For: ManakaiDOM|ManakaiDOMLatest
    @@@:
      The manakai implementation allows modifications of <IF::Notaion> nodes
      that are not read-only.

      Note that a modification might make the document ill-formed.
      For example, setting an illegal public identifier string
      to the attribute <A::Notation.publicId> makes it impossible
      to serialize the document into an XML document.

  @Attr:
    @@Name: publicId
    @@enDesc:
      The public identifier of the notation.
    @@nullCase:
      @@@enDesc:
        If the public identifier is not specified.
    @@Type: DOMString
    @@Get:
      @@@disDef:
        @@@@GetProp: infoset|publicIdentifier
    @@LXSet:
      @@@disDef:
        @@@@SetProp:
          @@@@@@: infoset|publicIdentifier
          @@@@@CheckReadOnly: 1
    @@XDTest:
      @@@QName: Notation.publicId.test
      @@@PerlDef:
        my $et;
        __CODE{d|newNotationForTest:: $et => $et}__;
        
        $test->id ('default');
        $test->assert_null ($et-><AG::Notation.publicId>);

        $test->id ('set');
        $et-><AS::Notation.publicId> ('string');
        $test->assert_equals ($et-><AG::Notation.publicId>, 'string');

        $test->id ('unset');
        $et-><AS::Notation.publicId> (null);
        $test->assert_null ($et-><AG::Notation.publicId>);

  @Attr:
    @@Name: systemId
    @@enDesc:
      The system identifier of the notation.  It might or might not
      be an absolute URI.
    @@nullCase:
      @@@enDesc:
        If the system identifier is not specified.
    @@Type: DOMString
    @@Get:
      @@@disDef:
        @@@@GetProp: infoset|systemIdentifier
    @@LXSet:
      @@@disDef:
        @@@@SetProp: 
          @@@@@@: infoset|systemIdentifier
          @@@@@CheckReadOnly: 1
    @@XDTest:
      @@@QName: Notation.systemId.test
      @@@PerlDef:
        my $et;
        __CODE{d|newNotationForTest:: $et => $et}__;
        
        $test->id ('default');
        $test->assert_null ($et-><AG::Notation.systemId>);

        $test->id ('set');
        $et-><AS::Notation.systemId> ('string');
        $test->assert_equals ($et-><AG::Notation.systemId>, 'string');

        $test->id ('unset');
        $et-><AS::Notation.systemId> (null);
        $test->assert_null ($et-><AG::Notation.systemId>);
  
  @ReAttr:
    @@Name: baseURI
    @@Description:
      @@@lang:en
      @@@@:
        The base URI of this node.
        \
        For the <IF::Notation> node, it is the <InfosetP::declaration base URI> 
        of the <InfoItem::notation information item>.
    @@Type:
      DOMMain:DOMString
    @@actualType:
      ManakaiDOM:ManakaiDOMURI
    @@Get:
      @@@Description:
        @@@@lang:en
        @@@@@:
          The absolute base DOM URI.
      @@@InCase:
        @@@@Value:
          @@@@@is-null:1
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The DOM implementation was not able to 
            obtain an absolute URI.
      @@@disDef:
        @@@@GetProp:
          infoset:declarationBaseURI
    @@SpecLevel:3
    @@Level:3
    @@L3:
  @ReMethod:
     @@Name:  lookupPrefix
     @@Description:
       @@@lang:en
       @@@@:
         Lookup the namespace prefix associated to the given namespace 
         URI, starting from this node.
     @@DOMMain:isNamespaceAware:1
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:
          DOMMain:DOMString
        @@@actualType:
          ManakaiDOM:ManakaiDOMNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@: The namespace URI to look for.
     @@Return:
        @@@Type:  
          DOMMain:DOMString
        @@@actualType:
          DOMMain:ManakaiDOMNamespacePrefix
        @@@Description:
          @@@@lang:en
          @@@@@:
            An associated namespace prefix.
          \
            If more than one prefix are associated to the 
            namespace URI, which is returned is implementation 
            dependent.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              No namespace prefix is found.  Always <DOM::null> 
              is returned for <IF::Notation> nodes.
        @@@PerlDef:
          @@@@@: $r = null;
     @@Level[list]:  3
     @@SpecLevel:3
     @@L3:

  @Attr:
    @@ForCheck: ManakaiDOM|ForClass
    @@Name: nodeName
    @@enDesc:
      The declared name of the notation.
    @@DOMMain:isNamespaceUnaware:1
    @@Type: DOMString
    @@Get:
      @@@disDef:
        @@@@GetProp: c|name
    @@XDTest:
      @@@QName: Notation.nodeName.test
      @@@PerlDef:
        my $et;
        __CODE{d|newNotationForTest:: $et => $et}__;
        
        $test->assert_equals ($et-><AG::Node.nodeName>, 'n1');

  @ReAttr:
    @@Name: nodeType
    @@Description:
      @@@lang:en
      @@@@: The type of this node.
    @@Get:
      @@@Type: 
        DOMMain:unsigned-short||ManakaiDOM|all
      @@@actualType:
        DOMCore:ManakaiDOMNodeType
      @@@InCase:
        @@@@Label: NOTATION_NODE
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            This node is a <IF::Notation>.
      @@@disDef:
        @@@@DISLang:constValue: t|Node.NOTATION_NODE
    @@XDTest:
      @@@QName: Notation.nodeType.test
      @@@PerlDef:
        my $et;
        __CODE{d|newNotationForTest:: $et => $et}__;
        
        $test->assert_num_equals
                 (actual_value => $et-><AG::Node.nodeType>,
                  expected_value => <C::t|Node.NOTATION_NODE>);

  @L3Attr:
     @@Name:  textContent
     @@Description:
       @@@lang:en
       @@@@:
         The text content of this node and its descendants.
     @@Type:
       DOMMain:DOMString
     @@actualType:
       DOMMain:ManakaiDOMString
     @@Get:
        @@@Description:
          @@@@lang:en
          @@@@@: The text content of this node.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The text content is defined to be <DOM::null>.
        @@@PerlDef:
          @@@@@: $r = null;
     @@Set:
        @@@Description:
          @@@@lang:en
          @@@@@: Setting this attribute has no effect.
      @@@c:reports:
        @@@@@: c|setting-node-value-no-effect
        @@@@enDesc:
          Setting the attribute value has no effect, since the
          node value is defined as <DOM::null>.
        @@@@For: ManakaiDOM|ManakaiDOM
      @@@disDef:
        @@@@DISPerl:cloneCode: t|ManakaiDOMNode.nodeValue.set

  @LXAttr:
    @@Name: ownerDocumentTypeDefinition
    @@enDesc:
      The document type definition node to which the notation is attached.
    @@Type: d|DocumentTypeDefinition
    @@Get:
      @@@nullCase:
        @@@@enDesc:
          The notation is not attached to any document type.
      @@@PerlDef:
        $r = <ClassM::t|ManakaiDOMNode.getNodeReference>
               ($self->{<H::mn:node>}->{<H::d|ownerDefinition>})
          if $self->{<H::mn:node>}->{<H::d|ownerDefinition>};
    @@XDTest:
      @@@QName: Notation.ownerDTDef.test
      @@@PerlDef:
        my $et;
        __CODE{d|newNotationForTest}__;
 
        my $odt = $et-><AG::x|Notation.ownerDocumentTypeDefinition>;
        $test->assert_null ($odt);

        my $dt = $et-><AG::t|Node.ownerDocument>
                     -><M::t|Node.getFeature> (<Q::fe:XDoctype>)
                     -><M::d|DocumentXDoctype.createDocumentTypeDefinition>
                         ('dt1');
        $test->assert_not_null ($dt);
        $dt-><M::d|DocumentTypeDefinition.setNotationNode> ($et);

        my $odt2 = $et-><AG::x|Entity.ownerDocumentTypeDefinition>;
        $test->assert_not_null ($odt2);
        $test->assert_isa ($odt2, <IFName::d|DocumentTypeDefinition>);
        $test->assert_equals ($odt2, $dt);
 
  @IntMethod:
    @@Name: newObject
    @@Description:
      @@@lang:en
      @@@@:
        Construct an object for a new instance of the <IF::Notation> node.
    @@NewObjectRefNodeParam:
    @@Return:
      @@@Type: DOMCore|NodeStem
      @@@Description:
        @@@@lang:en
        @@@@@:
          The new object for the <IF::Notation> node.
      @@@PerlDef:
        $r = <ClassM::DOMCore:ManakaiDOMNode.newObject> ($self, $refNode);
        $r->{<H::DOMCore:nodeType>} = <H::infoset:Notation>;
     @@ImplNote:
       @@@lang:en
       @@@@:
         Properties required for a <IF::DOMCore|Node> to be a legal 
         <IF::Notation>: <Q::DOMCore:name>, <Q::DOMCore:ownerDocument>.
         \
         Other available properties: <Q::infoset:declarationBaseURI>, 
         <Q::infoset:publicIdentifier>, <Q::infoset:systemIdentifier>, 
         <Q::DOMCore:read-only>, <Q::d|ownerDefinition>.
  @mn:xrefnode0: c|ownerDocument
  @mn:origin0: d|ownerDefinition

  @Method:
     @@Name:  getFeature
     @@enDesc:
       Returns a specialized object that implements the
       specialized interfaces of the specified feature and version.
     @@ManakaiDOM:isRedefining:1
     @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|DOM3
     @@Param:
        @@@Name:  feature
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOM|ManakaiDOMFeatureName
        @@@enDesc:
          The feature name to request.
        @@@InCase:
          @@@@Label:
            @@@@@lang:en
            @@@@@@: 
              Feature name preceded by a <CHAR::PLUS SIGN>
          @@@@enDesc:
            The <CHAR::PLUS SIGN> is ignored.
     @@Param:
        @@@Name:  version
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOM|ManakaiDOMFeatureVersion
        @@@enDesc:
          The feature version to request.
        @@@nullCase:
          @@@@enDesc:
            No specific version is requested.
     @@Return:
        @@@Type:  
          DOMMain:DOMObject
        @@@enDesc:
          An object implementing the specialized interfaces.
          Note that the specialized object may or may not
          implement the <IF::DOMCore|Node> interface.
        @@@nullCase:
          @@@@enDesc:
            There is no object available that implements
            the specialized interfaces.
        @@@PerlDef:
            $feature =~ s/^\+//;
            if ($Message::DOM::ClassFeature{ref $self}->{$feature}->{$version}) {
              ## This class
              $r = $self;
            } else {
              ## Notation dependent classes
                ## TODO:
              ## Notation independent classes
              CLASS: for my $class (grep {
                $Message::DOM::ManakaiDOMNotation::CompatClass{$_}
              } keys %Message::DOM::ManakaiDOMNotation::CompatClass) {
                if ($Message::DOM::ClassFeature{$class}
                            ->{$feature}->{$version}) {
                  __CODE{DOMCore|getNodeRef::
                    $object => {$self->{<H::mn:node>}},
                    $ref => $r,
                    $class => $class,
                  }__;
                  last CLASS;
                }
              }
            }


  @Attr:
    @@Name: childNodes
    @@ForCheck: ManakaiDOM|ForClass
    @@enDesc:
      A list of nodes that contains all children of the node.
    @@Get:
      @@@Type: DOMCore|NodeList
      @@@actualType: DOMCore|ManakaiDOMEmptyNodeList
      @@@enDesc:
        Since <IF::DOMCore|CharacterData> nodes cannot have any child nodes,
        the node list is always empty.
      @@@PerlDef:
        $r = <Class::DOMCore|ManakaiDOMEmptyNodeList>->new;
##Notation

NodeTypeDef:
  @IFQName: Entity
  @ClsQName: ManakaiDOMEntity

  @DISLang:role: 
    DOMCore:EntityRole

  @enDesc:
    An object implementing the <IF::Entity> interface represents
    a known entity, either parsed or unparsed, in an XML document.

     {NOTE:: The <IF::Entity> interface models the entity itself,
             <EM::not> the entity declaration.
     }

    An <IF::Entity> node does not have any parent.

  @enDesc:
    @@ddid: ns
    @@For: ManakaiDOM|DOM2
    @@@:
      If the entity contains an unbound namespace prefix, the
      <A::t|Node.namespaceURI> of the corresponding node in
      the <IF::Entity> subtree is <DOM::null>.  The same is
      true for an <IF::EntityReference> node that refers to such an
      entity, when they are created using the
      <M::t|Document.createEntityReference> method.
  @enDesc:
    @@ddid: edit
    @@@:
      DOM levels 3 or earlier do not support editing of <IF::Entity>
      nodes.  <IF::Entity> nodes and all their descendants are read-only.
  @enDesc:
    @@ddid: editm
    @@For: ManakaiDOM|ManakaiDOM
    @@@:
      In the manakai implementation, <IF::Entity> nodes and 
      their descendants are <EM::not> read-only unless their
      read-only flag is turned on at the time of creation
      (or later).

      Any modification to <IF::Entity> subtree or possible
      removal of the <IF::Entity> node itself will cause
      inconsistency between <IF::Entity> and <IF::EntityReference>
      subtrees.  It should be fixed by <M::t|Document.normalizeDocument>
      method if desired.
  
      Some change make a document invalid or even not well-formed.
      For example, setting <A::Entity.notationName> attribute
      might make a node unparsed entity and any reference to that 
      entity is an error.  An external entity with its
      <A::Entity.systemId> set to <DOM::null> is unserializable.

      When the replacement text of the entity is available, 
      the child list of the <IF::Entity> node represents the structure 
      of that replacement value (assuming that the replacement text would be 
      parsed in context of <XML::content>).  Otherwise, the child list is empty.
      Note that if the entity contains an unbound namespace prefix, 
      the <A::DOMCore:Node.namespaceURI> of the corresponding node in the 
      <IF::Entity> node subtree is <DOM::null>.
    \
      DOM Levels 1 to 3 do not support editing <IF::Entity> nodes, so that 
      all <IF::Entity> nodes and their descendants are read-only.
    \
      An <IF::Entity> node does not have any parent.

  @Attr:
    @@Name: publicId
    @@enDesc:
      The public identifier associated with the entity.
    @@nullCase:
      @@@enDesc:
        If no public identifier is associated.
    @@Type: DOMString
    @@Get:
      @@@disDef:
        @@@@GetProp: infoset|publicIdentifier
    @@LXSet:
      @@@disDef:
        @@@@SetProp:
          @@@@@@: infoset|publicIdentifier
          @@@@@CheckReadOnly: 1

  @Attr:
    @@Name: systemId
    @@enDesc:
      The system identifier associated with the entity.
    @@Type: DOMString
    @@nullCase:
      @@@enDesc:
        No system identifier is associated.
    @@Get:
      @@@disDef:
        @@@@GetProp: infoset|systemIdentifier
    @@LXSet:
      @@@disDef:
        @@@@SetProp:
          @@@@@@: infoset|systemIdentifier
          @@@@@CheckReadOnly: 1

  @Attr:
    @@Name: notationName
    @@enDesc:
      The name of the notation for the entity.
    @@Type: DOMString
    @@Get:
      @@@nullCase:
        @@@@enDesc:
          If it is a parsed entity.
      @@@disDef:
        @@@@GetProp: infoset|notationName
    @@LXSet:
      @@@disDef:
        @@@@SetProp:
          @@@@@@: infoset|notationName
          @@@@@CheckReadOnly: 1          

  @L3Attr:
    @@Name: inputEncoding
    @@enDesc:
      The encoding used for the entity at the time of parsing,
      when it is an external parsed entity.
    @@Type: DOMString
    @@enImplNote:
      What type of value?
    @@Get:
      @@@nullCase:
        @@@@enDesc:
          @@@@@For: !ManakaiDOM|ManakaiDOM
          @@@@@@:
            If it is an entity from the internal subset or if the
            encoding is not known.
          @@@@@enImplNote:
            This is not clear.
        @@@@enDesc:
          @@@@@For: ManakaiDOM|ManakaiDOM
          @@@@@@:
            If the entity is an internal entity or an unparsed entity,
            or if the character encoding name of the entity is not known
            to the DOM implementation.
      @@@disDef:
        @@@@GetProp: infoset|characterEncodingScheme

  @L3Attr:
    @@Name: xmlEncoding
    @@enDesc:
      The encoding of the entity specified in the text declaration.
    @@nullCase:
      @@@enDesc:
        If it is an external parsed entity.
    @@nullCase:
      @@@For: ManakaiDOM|ManakaiDOM
      @@@enDesc:
        If there is no text declaration.
    @@Type: DOMString
    @@Get:
      @@@disDef:
        @@@@GetProp: c|xmlEncoding

  @L3Attr:
    @@Name: xmlVersion
    @@enDesc:
      The XML version of the entity specified in the text declaration.
    @@nullCase:
      @@@enDesc:
        If it is not an exparsed entity.
    @@nullCase:
      @@@For: ManakaiDOM|ManakaiDOM
      @@@enDesc:
        If the entity has no text declaration.
      @@@enImplNote:
        Should any default value provided? Or <DOM::null>?
     @@ImplNote:
        @@@lang:en
        @@@@:
          XML 1.0 documents cannot include the external parsed entities 
          other than those versioned as XML 1.0.  XML 1.1 document 
          can use both XML 1.0 and XML 1.1 entities, but both interpreted 
          as XML 1.1 entities.
    @@Type: DOMString
    @@Get:
      @@@disDef:
        @@@@GetProp: infoset|version
    @@LXSet:
      @@@disDef:
        @@@@SetProp:
          @@@@@@: infoset|version
          @@@@@CheckReadOnly: 1
      @@@enImplNote:
        {ISSUE::
          Should <X::c|DOMException.NOT_SUPPORTED_ERR> be thrown?
        }
  
  @L3Attr:
    @@ForCheck: ManakaiDOM|ForClass
    @@Name: baseURI
    @@Description:
      @@@lang:en
      @@@@:
        The base URI of this node.
        \
        For the <IF::Entity> node, it is the <InfosetP::declaration base URI> 
        of the <InfoItem::unparsed entity information item>.
    @@Type: DOMString
    @@dis:actualType: ManakaiDOM|ManakaiDOMURI
    @@Get:
      @@@Description:
        @@@@lang:en
        @@@@@:
          The absolute base DOM URI.
      @@@InCase:
        @@@@Value:
          @@@@@is-null:1
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The DOM implementation was not able to 
            obtain an absolute URI.
      @@@disDef:
        @@@@GetProp:
          infoset:declarationBaseURI

  @ReMethod:
     @@Name:  lookupPrefix
     @@Description:
       @@@lang:en
       @@@@:
         Lookup the namespace prefix associated to the given namespace 
         URI, starting from this node.
     @@DOMMain:isNamespaceAware:1
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:
          DOMMain:DOMString
        @@@actualType:
          ManakaiDOM:ManakaiDOMNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@: The namespace URI to look for.
     @@Return:
        @@@Type:  
          DOMMain:DOMString
        @@@actualType:
          DOMMain:ManakaiDOMNamespacePrefix
        @@@Description:
          @@@@lang:en
          @@@@@:
            An associated namespace prefix.
          \
            If more than one prefix are associated to the 
            namespace URI, which is returned is implementation 
            dependent.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              No namespace prefix is found.  Always <DOM::null> 
              is returned for <IF::Entity> nodes.
        @@@PerlDef:
          @@@@@: $r = null;
     @@Level[list]:  3
     @@SpecLevel:3
     @@L3:

  @Attr:
    @@ForCheck: ManakaiDOM|ForClass
    @@Name: nodeName
    @@enDesc:
      The name of the node.  For an <IF::Entity> node, the attribute
      contains the name of the entity.
    @@DOMMain:isNamespaceUnaware:1
    @@Type: DOMString
    @@Get:
      @@@disDef:
        @@@@GetProp: c|name

  @ReAttr:
    @@Name: nodeType
    @@Description:
      @@@lang:en
      @@@@: The type of this node.
    @@Get:
      @@@Type: 
        DOMMain:unsigned-short||ManakaiDOM|all
      @@@actualType:
        DOMCore:ManakaiDOMNodeType
      @@@InCase:
        @@@@Label: ENTITY_NODE
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            This node is an <IF::Entity>.
      @@@disDef:
        @@@@DISLang:constValue:
          DOMCore:Node.ENTITY_NODE

  @LXAttr:
    @@Name: hasReplacementTree
    @@enDesc:
      Whether the structure of the replacement text is available
      via the child list of the node or not.

      When the replacement text of a general entity is available,
      the corresponding <IF::Entity> node's child list represents
      the structure of the replacement value.  Otherwise, the child
      list is empty.

        {NOTE::
          When this attribute contains <DOM::false> value, then
          the child list of the node, even if it is not empty, 
          should be ignored for e.g. creation of an entity reference
          subtree or serialization.
        }
    @@Type: idl|boolean||ManakaiDOM|all
    @@Get:
      @@@TrueCase:
        @@@@enDesc:
          If the entity is a general parsed entity and whose
          replacement tree is available.
      @@@FalseCase:
        @@@@enDesc:
          Otherwise.
      @@@disDef:
        @@@@GetProp: x|hasReplacementTree
    @@Set:
      @@@disDef:
        @@@@SetProp:
          @@@@@@: x|hasReplacementTree
          @@@@@CheckReadOnly: 1
      @@@enImplNote:
        {ISSUE::
           Should this modificataion be allowed?
        }

  @LXAttr:
    @@Name: ownerDocumentTypeDefinition
    @@enDesc:
      The document type definition node to which the entity is attached.
    @@Type: d|DocumentTypeDefinition
    @@Get:
      @@@nullCase:
        @@@@enDesc:
          The entity is not attached to any document type.
      @@@PerlDef:
        $r = <ClassM::t|ManakaiDOMNode.getNodeReference>
               ($self->{<H::mn:node>}->{<H::d|ownerDefinition>})
          if $self->{<H::mn:node>}->{<H::d|ownerDefinition>};
    @@XDTest:
      @@@QName: Entity.ownerDTDef.test
      @@@PerlDef:
        my $et;
        __CODE{d|newGeneralEntityForTest}__;
 
        my $odt = $et-><AG::x|Entity.ownerDocumentTypeDefinition>;
        $test->assert_null ($odt);

        my $dt = $et-><AG::t|Node.ownerDocument>
                     -><M::t|Node.getFeature> (<Q::ManakaiDOM:XDoctype>)
                     -><M::d|DocumentXDoctype.createDocumentTypeDefinition>
                         ('dt1');
        $test->assert_not_null ($dt);
        $dt-><M::d|DocumentTypeDefinition.setGeneralEntityNode> ($et);

        my $odt2 = $et-><AG::x|Entity.ownerDocumentTypeDefinition>;
        $test->assert_not_null ($odt2);
        $test->assert_isa ($odt2, <IFName::d|DocumentTypeDefinition>);
        $test->assert_equals ($odt2, $dt);

  @LXAttr:
    @@Name: isExternallyDeclared
    @@enDesc:
      Whether the entity is declared by an external markup declaration,
      i.e. a markup declaration occuring in the external subset or
      in a parameter entity.
    @@Type: idl|boolean||ManakaiDOM|all
    @@TrueCase:
      @@@enDesc:
        If the entity is declared by an external markup declaration.
    @@FalseCase:
      @@@enDesc:
        If the entity is declared by a markup declaration in
        the internal subset, or if the <IF::x|Entity> node
        is created in memory.
    @@Get:
      @@@disDef:
        @@@@GetProp: ManakaiDOM|isExternallyDeclared
    @@Set:
      @@@disDef:
        @@@@SetProp:
          @@@@@@: ManakaiDOM|isExternallyDeclared
          @@@@@CheckReadOnly: 1

    @@XDTest:
      @@@QName: Entity.isExternallyDeclared.test
      @@@PerlDef:
        my $et;
        __CODE{d|newGeneralEntityForTest}__;

        $test->id ('default');
        $test->assert_false ($et-><AG::Entity.isExternallyDeclared>);

        $test->id ('set.true');
        $et-><AS::Entity.isExternallyDeclared> (true);
        $test->assert_true ($et-><AG::Entity.isExternallyDeclared>);

        $test->id ('set.false');
        $et-><AS::Entity.isExternallyDeclared> (false);
        $test->assert_false ($et-><AG::Entity.isExternallyDeclared>);

  @IntMethod:
    @@Name: newObject
    @@Description:
      @@@lang:en
      @@@@:
        Construct an object for a new instance of the <IF::Entity> node.
    @@NewObjectRefNodeParam:
    @@Return:
      @@@Type: DOMCore|NodeStem
      @@@Description:
        @@@@lang:en
        @@@@@:
          The new object for the <IF::Entity> node.
      @@@PerlDef:
        $r = <ClassM::DOMCore:ManakaiDOMNode.newObject> ($self, $refNode);
        $r->{<H::infoset:children>} = [];
        $r->{<H::DOMCore:nodeType>} = <H::DOMXML:EntityNode>;
     @@Level[list]:
       1
       2
       3
     @@ImplNote:
       @@@lang:en
       @@@@:
         Properties required for a <IF::DOMCore|Node> to be a legal 
         <IF::Entity>: <Q::DOMCore:name>, <Q::DOMCore:ownerDocument>.
         \
         Other available properties: <Q::infoset:declarationBaseURI>, 
         <Q::DOMCore:read-only>,
         <Q::ManakaiDOM:isExpanded>, <Q::ManakaiDOM:isExternallyDeclared>, 
         <Q::x|hasReplacementTree>,
         <Q::d|ownerDefinition>.
         \
         Other available properties (for external entity): 
         <Q::DOMCore:documentURI>, <Q::infoset:publicIdentifier>,
         <Q::infoset:systemIdentifier>, <Q::infoset:notationName>,
         <Q::infoset:version>, <Q::DOMCore:xmlEncoding>,
         <Q::infoset:characterEncodingScheme>,
         <Q::infoset:baseURI>.

  @mn:xrefnode0: DOMCore|ownerDocument
  @mn:subnode1: infoset|children
  @mn:origin0: d|ownerDefinition

  @Method:
     @@Name:  getFeature
     @@enDesc:
       Returns a specialized object that implements the
       specialized interfaces of the specified feature and version.
     @@ManakaiDOM:isRedefining:1
     @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|DOM3
     @@Param:
        @@@Name:  feature
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOM|ManakaiDOMFeatureName
        @@@enDesc:
          The feature name to request.
        @@@InCase:
          @@@@Label:
            @@@@@lang:en
            @@@@@@: 
              Feature name preceded by a <CHAR::PLUS SIGN>
          @@@@enDesc:
            The <CHAR::PLUS SIGN> is ignored.
     @@Param:
        @@@Name:  version
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOM|ManakaiDOMFeatureVersion
        @@@enDesc:
          The feature version to request.
        @@@nullCase:
          @@@@enDesc:
            No specific version is requested.
     @@Return:
        @@@Type:  
          DOMMain:DOMObject
        @@@enDesc:
          An object implementing the specialized interfaces.
          Note that the specialized object may or may not
          implement the <IF::DOMCore|Node> interface.
        @@@nullCase:
          @@@@enDesc:
            There is no object available that implements
            the specialized interfaces.
        @@@PerlDef:
            $feature =~ s/^\+//;
            if ($Message::DOM::ClassFeature{ref $self}->{$feature}->{$version}) {
              ## This class
              $r = $self;
            } else {
              ## Entity dependent classes
                ## TODO:
              ## Entity independent classes
              CLASS: for my $class (grep {
                $Message::DOM::ManakaiDOMEntity::CompatClass{$_}
              } keys %Message::DOM::ManakaiDOMEntity::CompatClass) {
                if ($Message::DOM::ClassFeature{$class}
                            ->{$feature}->{$version}) {
                  __CODE{DOMCore|getNodeRef::
                    $object => {$self->{<H::mn:node>}},
                    $ref => $r,
                    $class => $class,
                  }__;
                  last CLASS;
                }
              }
            }
##Entity

PropDef:
  @QName: ManakaiDOM|isExternallyDeclared

PropDef:
  @QName: x|hasReplacementTree
  @enDesc:
    Whether an entity node has its replacement tree or not.
  @c:nodeProp: rep

NodeTypeDef:
  @IFQName: EntityReference
  @ClsQName: ManakaiDOMEntityReference

  @DISLang:role: 
    DOMCore:EntityReferenceRole

  @Description:
    @@lang:en
    @@@:
      An entity reference.
    \
      When an <IF::EntityReference> node represents a reference to an 
      <IF::Entity> node, the subtree of the <IF::EntityReference> node
      is a copy of the <IF::Entity> node subtree, except that when an entity
      contains an unbound namespace prefix, the descendants of the 
      <IF::EntityReference> node may be bound to different namespace URIs.
    \
      When an <IF::EntityReference> node represents a reference to an 
      known entity, the node has no child node.
    \
      In DOM Levels 1 to 3, an <IF::EntityReference> node and all 
      descendants are read-only.
    \
      Note that <IF::EntityReference> nodes may cause normalization 
      problems when the normalization is performed after 
      entity references are expanded.

        {NOTE:: An XML processor may choose to completely expand
                entities before the structure model is passed to the
                DOM implementation; in this case there will be
                no <IF::EntityReference> nodes in the document tree.
        }

  @ImplNote:
    @@lang:en
    @@@:
      Note that the character references and references to predefined 
      entities are considered to be expanded by the HTML or XML 
      processor.  Moreover, the XML processor may completely expand 
      references to entities.  (Does this clause in the DOM specification 
      mean that the character entity references in HTML document 
      should be expanded before the DOM tree constructed?)
  @ImplNote:
    @@lang:en
    @@@:
      The DOM Level 1 Specifications allow the lazy 
      evaluation of the children of the <IF::EntityReference>.
      For example, calling the <A::DOMCore:Node.childNodes>
      method might trigger the evaluation.

  @LXAttr:
    @@Name: isExpanded
    @@enDesc:
      Whether the reference is expanded so that its children list
      represents a part of the document.
    @@Type: idl|boolean||ManakaiDOM|all
    @@Get:
      @@@disDef:
        @@@@GetProp: ManakaiDOM|isExpanded
    @@Set:
      @@@disDef:
        @@@@SetProp:
          @@@@@@: ManakaiDOM|isExpanded
          @@@@@CheckReadOnly: 1
    @@enImplNote:
      {ISSUE::
        Should subtree modifications turn the flag like <A::t|Attr.specified>?
      }
  
  @ReAttr:
    @@Name: baseURI
    @@Description:
      @@@lang:en
      @@@@:
        The base URI of this node.
        \
        For the <IF::EntityReference> node, it is the 
        <InfosetP::declaration base URI> of the <InfoItem::unexpanded entity 
        reference information item>.
    @@Get:
      @@@Type:
        DOMMain:DOMString
      @@@actualType:
        ManakaiDOM:ManakaiDOMURI
      @@@Description:
        @@@@lang:en
        @@@@@:
          The absolute base DOM URI.
      @@@InCase:
        @@@@Value:
          @@@@@is-null:1
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The DOM implementation was not able to 
            obtain an absolute URI.
      @@@disDef:
        @@@@GetProp:
          infoset:declarationBaseURI
    @@SpecLevel:3
    @@Level:3
    @@L3:
  @ReAttr:
    @@Name: nodeName
    @@Description:
      @@@lang:en
      @@@@: The node name.
    @@DOMMain:isNamespaceUnaware:1
    @@Get:
      @@@Type: 
        DOMMain:DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: The name of the entity referred.
      @@@disDef:
        @@@@GetProp:
          DOMCore:name
  @ReAttr:
    @@Name: nodeType
    @@Description:
      @@@lang:en
      @@@@: The type of this node.
    @@Get:
      @@@Type: 
        DOMMain:unsigned-short||ManakaiDOM|all
      @@@actualType:
        DOMCore:ManakaiDOMNodeType
      @@@InCase:
        @@@@Label: ENTITY_REFERENCE_NODE
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            This node is an <IF::EntityReference>.
      @@@disDef:
        @@@@DISLang:constValue:
          DOMCore:Node.ENTITY_REFERENCE_NODE

  @IntMethod:
    @@Name: newObject
    @@Description:
      @@@lang:en
      @@@@:
        Construct an object for a new instance of the <IF::EntityReference> node.
    @@NewObjectRefNodeParam:
    @@Return:
      @@@Type: DOMCore|NodeStem
      @@@Description:
        @@@@lang:en
        @@@@@:
          The new object for the <IF::EntityReference> node.
      @@@PerlDef:
        $r = <ClassM::DOMCore:ManakaiDOMNode.newObject> ($self, $refNode);
        $r->{<H::infoset:children>} = [];
        $r->{<H::DOMCore:nodeType>} = <H::DOMXML:EntityReferenceNode>;
     @@ImplNote:
       @@@lang:en
       @@@@:
         Properties required for a <IF::DOMCore|Node> to be a legal 
         <IF::EntityReference>: <Q::DOMCore:name>, <Q::DOMCore:ownerDocument>.
         \
         Other available properties: <Q::infoset:declarationBaseURI>, 
         <Q::DOMCore:read-only>, <Q::infoset:parent>, <Q::infoset:children>, 
         <Q::ManakaiDOM:isExpanded>, <Q::ManakaiDOM:isExternallyDeclared>, 
         <Q::ManakaiDOM:isExternalEntity>.
         \
         Other available properties (for external entity): 
         <Q::infoset:baseURI>, <Q::DOMCore:documentURI>, 
         <Q::infoset:publicIdentifier>, <Q::infoset:systemIdentifier>.

  @mn:xrefnode0: DOMCore|ownerDocument
  @mn:origin0: infoset|parent
  @mn:subnode1: infoset|children
##EntityReference

ElementTypeBinding:
  @Name: TrueCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase
    @@Value:
      @@@@: 1
      @@@ContentType: DISCore|Boolean
    @@Type: idl|boolean||ManakaiDOM|all

ElementTypeBinding:
  @Name: FalseCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase
    @@Value:
      @@@@: 0
      @@@ContentType: DISCore|Boolean
    @@Type: idl|boolean||ManakaiDOM|all

NodeTypeDef:
  @IFQName: ProcessingInstruction
  @ClsQName: ManakaiDOMProcessingInstruction

  @DISLang:role: 
    DOMCore:ProcessingInstructionRole

  @Description:
    @@lang:en
    @@@:
      A processing instruction.  Note that the XML declaration and 
      text declarations are not considered as processing instructions.
  
  @Attr:
     @@Name:  target
     @@Description:
       @@@lang:en
       @@@@:
         The target of this processing instruction.
     @@DOMMain:isNamespaceUnaware:1
     @@Get:
        @@@Type:  
          DOMMain:DOMString
        @@@actualType:
          DOMMain:ManakaiDOMXMLName
        @@@Description:
          @@@@lang:en
          @@@@@: The target name.
        @@@disDef:
          @@@@GetProp:
            infoset:target
  @Attr:
     @@Name:  data
     @@Description:
       @@@lang:en
       @@@@:
         The content of this processing instruction.
       \
         The content does not contain the whitespaces 
         delimiting with the target name.
     @@Type:  
       DOMMain:DOMString
     @@actualType:
       DOMMain:ManakaiDOMString
     @@Get:
        @@@Description:
          @@@@lang:en
          @@@@@: The content.
        @@@disDef:
          @@@@GetProp:
            infoset:content
        @@@ImplNote:
          @@@@lang:en
          @@@@@:
            Can <DOM::null> be returned (to represent <XML::<lt>?name?<gt>>)?
     @@Set:
        @@@Description:
          @@@@lang:en
          @@@@@:
            The content.  It may contain the <CODE::PIC> (<XML::?<gt>>) but such 
            data result the document in unserializable.
        @@@dx:raises:
          @@@@@: DOMCore|DOMException.NO_MODIFICATION_ALLOWED_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: This node is read-only.
        @@@disDef:
          @@@@SetProp:
            @@@@@@:
              infoset:content
            @@@@@CheckReadOnly:1
  
  @ReAttr:
    @@Name: baseURI
    @@Description:
      @@@lang:en
      @@@@:
        The base URI of this node.
    @@Get:
      @@@Type:
        DOMMain:DOMString
      @@@actualType:
        ManakaiDOM:ManakaiDOMURI
      @@@Description:
        @@@@lang:en
        @@@@@:
          The absolute base DOM URI.
      @@@InCase:
        @@@@Value:
          @@@@@is-null:1
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The DOM implementation was not able to 
            obtain an absolute URI.
      @@@PerlDef:
        $r = $self->{<H::mn:node>}
                  -><M::ManakaiDOMCore:ManakaiDOMNodeObjectNode.contentBaseURI>
                                                                      (false);
    @@SpecLevel:3
    @@Level:3
    @@L3:
  @ReAttr:
    @@Name: nodeName
    @@Description:
      @@@lang:en
      @@@@: The node name.
    @@DOMMain:isNamespaceUnaware:1
    @@Get:
      @@@Type: 
        DOMMain:DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: 
          The target name, i.e. same as <A::ProcessingInstruction.target>.
      @@@disDef:
        @@@@DISPerl:cloneCode: .target.get
  @ReAttr:
    @@Name: nodeType
    @@Description:
      @@@lang:en
      @@@@: The type of this node.
    @@Get:
      @@@Type: 
        DOMMain:unsigned-short||ManakaiDOM|all
      @@@actualType:
        DOMCore:ManakaiDOMNodeType
      @@@InCase:
        @@@@Label: PROCESSING_INSTRUCTION_NODE
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            This node is a <IF::ProcessingInstruction>.
      @@@disDef:
        @@@@DISLang:constValue:
          DOMCore:Node.PROCESSING_INSTRUCTION_NODE
  @ReAttr:
     @@Name:  nodeValue
     @@Description:
       @@@lang:en
       @@@@: The value of this node.
     @@Get:
        @@@Type:  
          DOMMain:DOMString
        @@@actualType:
          DOMMain:ManakaiDOMString
        @@@dx:raises:
          @@@@@: DOMCore|DOMException.DOMSTRING_SIZE_ERR
          @@@@For: !ManakaiDOM|Perl
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              The target data, i.e. same as <A::ProcessingInstruction.data>.
        @@@disDef:
          @@@@DISPerl:cloneCode:.data.get
     @@Set:
        @@@Type:  
          DOMMain:DOMString
        @@@actualType:
          DOMMain:ManakaiDOMString
        @@@dx:raises:
          @@@@@: DOMCore|DOMException.NO_MODIFICATION_ALLOWED_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              This node is read-only.
        @@@Description:
          @@@@lang:en
          @@@@@:
            New node value.
        @@@disDef:
          @@@@DISPerl:cloneCode: .data.set
  @ReAttr:
     @@Name:  textContent
     @@Description:
       @@@lang:en
       @@@@: The text content of this node and its descendants. 
     @@@ImplNote:
        @@@@lang:en
        @@@@@:
          <A::ProcessingInstruction.data> == 
          <A::ProcessingInstruction.nodeValue> == 
          <A::ProcessingInstruction.textContent>.
     @@Type:  
       DOMMain:DOMString
     @@actualType:
       DOMMain:ManakaiDOMString
     @@Get:
        @@@Description:
          @@@@lang:en
          @@@@@:
            The text content of this node, i.e. the <A::DOMCore:Node.nodeValue>.
        @@@dx:raises:
          @@@@@: DOMCore|DOMException.DOMSTRING_SIZE_ERR
          @@@@For: !ManakaiDOM|Perl
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The attribute would return more characters than 
              fit in a <TYPE::DOMMain:DOMString> variable on the implementation 
              platform.
        @@@disDef:
          @@@@DISPerl:cloneCode: .data.get
     @@Set:
        @@@Description:
          @@@@lang:en
          @@@@@:
            The new text content of the node.
        @@@dx:raises:
          @@@@@: DOMCore|DOMException.NO_MODIFICATION_ALLOWED_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: This node is read-only.
        @@@disDef:
          @@@@DISPerl:cloneCode:.data.set
     @@Level[list]:
        3
     @@SpecLevel:3
     @@L3:

  @IntMethod:
    @@Name: newObject
    @@Description:
      @@@lang:en
      @@@@:
        Construct an object for a new instance of the 
        <IF::ProcessingInstruction> node.
    @@NewObjectRefNodeParam:
    @@Return:
      @@@Type: DOMCore|NodeStem
      @@@Description:
        @@@@lang:en
        @@@@@:
          The new object for the <IF::ProcessingInstruction> node.
      @@@PerlDef:
        $r = <ClassM::DOMCore:ManakaiDOMNode.newObject> ($self, $refNode);
        $r->{<H::DOMCore:nodeType>} = <H::infoset:ProcessingInstruction>;
        $r->{<H::infoset:content>} = '';
     @@ImplNote:
       @@@lang:en
       @@@@:
         Properties required for a <IF::DOMCore:Node> to be a legal 
         <IF::ProcessingInstruction>: <Q::infoset:target>, 
         <Q::DOMCore:ownerDocument>.
         \
         Other available properties: <Q::infoset:baseURI>, 
         <Q::DOMCore:read-only>, <Q::infoset:parent>, <Q::infoset:content>.

  @mn:xrefnode0: DOMCore|ownerDocument
  @mn:origin0: infoset|parent

  @Method:
     @@Name:  getFeature
     @@enDesc:
       Returns a specialized object that implements the
       specialized interfaces of the specified feature and version.
     @@ManakaiDOM:isRedefining:1
     @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|DOM3
     @@Param:
        @@@Name:  feature
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOM|ManakaiDOMFeatureName
        @@@enDesc:
          The feature name to request.
        @@@InCase:
          @@@@Label:
            @@@@@lang:en
            @@@@@@: 
              Feature name preceded by a <CHAR::PLUS SIGN>
          @@@@enDesc:
            The <CHAR::PLUS SIGN> is ignored.
     @@Param:
        @@@Name:  version
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOM|ManakaiDOMFeatureVersion
        @@@enDesc:
          The feature version to request.
        @@@nullCase:
          @@@@enDesc:
            No specific version is requested.
     @@Return:
        @@@Type:  
          DOMMain:DOMObject
        @@@enDesc:
          An object implementing the specialized interfaces.
          Note that the specialized object may or may not
          implement the <IF::DOMCore|Node> interface.
        @@@nullCase:
          @@@@enDesc:
            There is no object available that implements
            the specialized interfaces.
        @@@PerlDef:
            $feature =~ s/^\+//;
            if ($Message::DOM::ClassFeature{ref $self}->{$feature}->{$version}) {
              ## This class
              $r = $self;
            } else {
              ## Target dependent classes
                ## TODO:
              ## Target independent classes
              CLASS: for my $class (grep {
                $Message::DOM::ManakaiDOMProcessingInstruction::CompatClass{$_}
              } keys %Message::DOM::ManakaiDOMProcessingInstruction::CompatClass
              ) {
                if ($Message::DOM::ClassFeature{$class}
                            ->{$feature}->{$version}) {
                  __CODE{DOMCore|getNodeRef::
                    $object => {$self->{<H::mn:node>}},
                    $ref => $r,
                    $class => $class,
                  }__;
                  last CLASS;
                }
              }
            }


  @Attr:
    @@Name: childNodes
    @@ForCheck: ManakaiDOM|ForClass
    @@enDesc:
      A list of nodes that contains all children of the node.
    @@Get:
      @@@Type: DOMCore|NodeList
      @@@actualType: DOMCore|ManakaiDOMEmptyNodeList
      @@@enDesc:
        Since <IF::DOMCore|CharacterData> nodes cannot have any child nodes,
        the node list is always empty.
      @@@PerlDef:
        $r = <Class::DOMCore|ManakaiDOMEmptyNodeList>->new;
##ProcessingInstruction
