Module:
  @QName: 
    MDOM:DOMXML
  @AppName:
    @@@: dom
    @@prefix:  w3c.org
    @@ContentType:
      lang:IDL-DOM
    @@For:
      ManakaiDOM:IDL
  @AppName:
    @@@: org.w3c.dom
    @@ContentType:
      lang:Java
    @@ForCheck:
      ManakaiDOM:ForIF
    @@For:
      ManakaiDOM:Java
  @FullName:
    @@lang:en
    @@@: DOM XML Module
  @Spec:
    @@DOM3:
      http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-BBACDC08
  @Namespace:     
    http://suika.fam.cx/~wakaba/archive/2004/dom/xml#

  @enDesc:
    The DOM <DFN::XML Module>, also known as <DFN::Extended Interface>
    in DOM Core specification, is a set of interfaces specific 
    to XML document object model.  Objects that expose these interfaces
    will never encountered in a DOM implementation that deals
    only with HTML.

    {NOTE:: Objects in XHTML document might implement these interfaces.
            In addition, more SGML-like HTML implementation might
            implement some or all of these interfaces in fact.
    }

  @Author:
    @@FullName:Wakaba
    @@Mail:w@suika.fam.cx
  @License:
     license:Perl+MPL
  @Date:
    @@@:
      $Date: 2005/09/09 04:26:05 $
    @@ContentType:
      dis:Date.RCS

  @DefaultFor:
    ManakaiDOM:ManakaiDOMLatest
  
  @Require:
    @@Module:
      @@@QName: MDOM|DOMCore

Namespace:
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @doc:
    http://suika.fam.cx/~wakaba/archive/2005/7/tutorial#
  @DOMMain:
    http://suika.fam.cx/~wakaba/archive/2004/dom/main#
  @DOMMetaImpl:
    http://suika.fam.cx/~wakaba/archive/2004/dom/meta#
  @infoset:
     http://www.w3.org/2001/04/infoset#
  @kwd:
    http://suika.fam.cx/~wakaba/archive/2005/rfc2119/
  @lang:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @ManakaiDOMCore:
    http://suika.fam.cx/~wakaba/archive/2004/mdom-core#
  @ManakaiDOMXML:
    http://suika.fam.cx/~wakaba/archive/2004/mdom-xml#
  @MDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#
  @TreeCore:\


ElementTypeBinding:
  @Name: NodeTypeDef
  @ElementType: 
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@: dis|MultipleResource
      @@@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass
    @@resourceFor: ManakaiDOM|ForIF
    @@resourceFor:
      @@@@: ManakaiDOM|ForClass
      @@@ForCheck: ManakaiDOM|ManakaiDOM !=ManakaiDOM|ManakaiDOM
    @@For: ManakaiDOM|DOM1
    @@For: =ManakaiDOM|ManakaiDOM

    @@rdf:type:
      @@@@: ManakaiDOM|IF
      @@@ForCheck: ManakaiDOM|ForIF

    @@rdf:type:
      @@@@: ManakaiDOM|Class
      @@@ForCheck: ManakaiDOM|ForClass

    @@ISA:
      @@@@: DOMCore|Node
      @@@ForCheck: ManakaiDOM|ForIF
    @@ISA:
      @@@@:DOMCore| ManakaiDOMNode
      @@@ForCheck: ManakaiDOM|ForClass

    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOM||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOM1||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM1
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOM2||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM2
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOM3||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM3
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOMLatest||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOMLatest

    @@DOMMain:implementFeature:
      @@@@: DOMXML|XMLFeature10
      @@@For: ManakaiDOM|DOM1 ManakaiDOM|DOMXMLFeature
    @@DOMMain:implementFeature:
      @@@@: DOMXML|XMLFeature20
      @@@For: ManakaiDOM|DOM2 ManakaiDOM|DOMXMLFeature
    @@DOMMain:implementFeature:
      @@@@: DOMXML|XMLFeature30
      @@@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeature
    @@DOMMain:implementFeature:
      @@@@: DOMXML|XMLVersionFeature10
      @@@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeature
    @@DOMMain:implementFeature:
      @@@@: DOMXML|XMLVersionFeature11
      @@@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeatureXML11

ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:DOM !=ManakaiDOM:ManakaiDOM
ElementTypeBinding:
  @Name: IntMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM ManakaiDOM|ForClass
    @@ManakaiDOM:isForInternal: 1
ElementTypeBinding:
  @Name: ReMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM ManakaiDOM|ForClass
    @@ManakaiDOM:isRedefining: 1
ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethodParameter

ElementTypeBinding:
  @Name: Warning
  @ElementType:
    ManakaiDOM:alwaysWarns
ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethodReturn
ElementTypeBinding:
  @Name: Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttribute
    @@ForCheck:
      ManakaiDOM:DOM !=ManakaiDOM:ManakaiDOM
ElementTypeBinding:
  @Name: IntAttr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttribute
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM ManakaiDOM|ForClass
    @@ManakaiDOM:isForInternal: 1
ElementTypeBinding:
  @Name: ReAttr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttribute
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM ManakaiDOM|ForClass
    @@ManakaiDOM:isRedefining: 1
ElementTypeBinding:
  @Name: Get
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttrGet
ElementTypeBinding:
  @Name: Set
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttrSet
ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase

ElementTypeBinding:
  @Name: PerlDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:Perl

## -- Feature

ElementTypeBinding:
  @Name: FeatureDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DOMMain:DOMFeature
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:all
      @@@For:
        !=ManakaiDOM:all
ElementTypeBinding:
  @Name: FeatureVerDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DOMMain:DOMFeature

ElementTypeBinding:
  @Name: featureName
  @ElementType:
    dis:AppName
  @ShadowContent:
    @@ContentType:
      dis:String
ElementTypeBinding:
  @Name: featureQName
  @ElementType:
    dis:AppName
  @ShadowContent:
    @@ContentType:
      dis:TypeQName

FeatureDef:
  @featureName: XML
  @QName: XMLFeature
  @FeatureVerDef:
    @@Version: 1.0
    @@QName: XMLFeature10
    @@DOMMetaImpl:instanceFeatureOf: XMLFeature
    @@DOMMain:requireFeature:
      DOMCore:CoreFeature10
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-E067D597 
    @@Description:
      @@@lang:en
      @@@@:
        The DOM XML Module, Level 1.
  @FeatureVerDef:
    @@Version: 2.0
    @@QName: XMLFeature20
    @@DOMMetaImpl:extendFeature: XMLFeature10
    @@DOMMain:requireFeature:
      DOMCore:CoreFeature20
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-E067D597
    @@Description:
      @@@lang:en
      @@@@:
        The DOM XML Module, Level 2.
  @FeatureVerDef:
    @@Version: 3.0
    @@QName: XMLFeature30
    @@DOMMetaImpl:extendFeature: XMLFeature20
    @@DOMMain:requireFeature:
      DOMCore:CoreFeature30
    @@DOMMain:requireFeature: XMLVersionFeature10
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-E067D597
    @@Description:
      @@@lang:en
      @@@@:
        The DOM XML Module, Level 3.

FeatureDef:
  @featureName: XMLVersion
  @QName: XMLVersionFeature
  @FeatureVerDef:
    @@Version: 1.0
    @@QName: XMLVersionFeature10
    @@DOMMetaImpl:instanceFeatureOf: XMLVersionFeature
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#Document3-version
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-E067D597
    @@Description:
      @@@lang:en
      @@@@: The Extensible Markup Language (XML) 1.0. 
  @FeatureVerDef:
    @@Version: 1.1
    @@QName: XMLVersionFeature11
    @@DOMMetaImpl:instanceFeatureOf: XMLVersionFeature
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#Document3-version
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-E067D597
    @@Description:
      @@@lang:en
      @@@@: The Extensible Markup Language (XML) 1.1.

ElementTypeBinding:
  @Name: L1
  @ElementType:
    DOMMain:implementFeature
  @ShadowContent:
    @@@: XMLFeature10
    @@For:
      ManakaiDOM:DOM1
  @ShadowSibling:
    @@DOMMain:implementFeature:
      @@@@: XMLFeature20
      @@@For:
        ManakaiDOM:DOM2
    @@DOMMain:implementFeature:
      @@@@: XMLFeature30
      @@@For:
        ManakaiDOM:DOM3
    @@DOMMain:implementFeature:
      @@@@: XMLVersionFeature10
      @@@For:
        ManakaiDOM:DOM3
    @@DOMMain:implementFeature:
      @@@@: XMLVersionFeature11
      @@@For:
        ManakaiDOM:DOM3

ElementTypeBinding:
  @Name: L2
  @ElementType:
    DOMMain:implementFeature
  @ShadowContent:
    @@@: XMLFeature20
    @@For:
      ManakaiDOM:DOM2
  @ShadowSibling:
    @@DOMMain:implementFeature:
      @@@@: XMLFeature30
      @@@For:
        ManakaiDOM:DOM3
    @@DOMMain:implementFeature:
      @@@@: XMLVersionFeature10
      @@@For:
        ManakaiDOM:DOM3
    @@DOMMain:implementFeature:
      @@@@: XMLVersionFeature11
      @@@For:
        ManakaiDOM:DOM3

ElementTypeBinding:
  @Name: L3
  @ElementType:
    DOMMain:implementFeature
  @ShadowContent:
    @@@: XMLFeature30
    @@For:
      ManakaiDOM:DOM3
  @ShadowSibling:
    @@DOMMain:implementFeature:
      @@@@: XMLVersionFeature10
      @@@For:
        ManakaiDOM:DOM3
    @@DOMMain:implementFeature:
      @@@@: XMLVersionFeature11
      @@@For:
        ManakaiDOM:DOM3


ElementTypeBinding:
  @Name: IFISA
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsISA
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: IFQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: enDesc
  @ElementType:
    dis:Description
  @ShadowContent:
    @@lang:en

ElementTypeBinding:
  @Name: enImplNote
  @ElementType:
    dis:ImplNote
  @ShadowContent:
    @@lang:en

ResourceDef:
  @rdf:type:
    @@@: dis|MultipleResource
    @@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass
  @resourceFor: ManakaiDOM|ForIF
  @resourceFor:
    @@@: ManakaiDOM|ForClass
    @@ForCheck: ManakaiDOM|ManakaiDOM !=ManakaiDOM|ManakaiDOM
  @For: ManakaiDOM|DOM1
  @For: =ManakaiDOM|ManakaiDOM

  @IFQName: CDATASection
  @ClsQName: ManakaiDOMCDATASection

  @rdf:type:
    @@@: ManakaiDOM|IF
    @@ForCheck: ManakaiDOM|ForIF
  @rdf:type:
    @@@: ManakaiDOM|Class
    @@ForCheck: ManakaiDOM|ForClass

  @IFISA: DOMCore|Text
  @ClsISA: DOMCore|ManakaiDOMText

  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOM||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM
  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOM1||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM1
  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOM2||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM2
  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOM3||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM3
  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOMLatest||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOMLatest

  @DOMMain:implementFeature:
    @@@: DOMXML|XMLFeature10
    @@For: ManakaiDOM|DOM1 ManakaiDOM|DOMXMLFeature
  @DOMMain:implementFeature:
    @@@: DOMXML|XMLFeature20
    @@For: ManakaiDOM|DOM2 ManakaiDOM|DOMXMLFeature
  @DOMMain:implementFeature:
    @@@: DOMXML|XMLFeature30
    @@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeature
  @DOMMain:implementFeature:
    @@@: DOMXML|XMLVersionFeature10
    @@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeature
  @DOMMain:implementFeature:
    @@@: DOMXML|XMLVersionFeature11
    @@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeatureXML11

  @DISLang:role: 
    @@@:
      DOMCore:CDATASectionRole
    @@DISCore:stopISARecursive:1

  @enDesc:
    The <IF::CDATASection> interface represents <XML::CDATA>
    sections in XML documents.  A <IF::CDATASection> object
    corresponds to a <XML::CDATA> section.  Since <XML::CDATA>
    sections are physical structure rather than logical structure,
    they are not found in XML information set -- each character
    in <XML::CDATA> section are modeled as a <InfoItem::character
    information item>.

    A <SGML::CDATA> section is a marked section whose effective status
    is <SGML::CDATA>.  It is the only legal effective status 
    in XML document instances.  In <SGML::CDATA> sections, 
    no markup delimiter other than <SGML::MSE>, i.e. <XML::]]<gt>>
    in XML, is recognized.  In other word, they are used
    to escape markups in contents of elements.

    {NOTE:: The <IF::CDATASection> interface extends the
            <IF::DOMCore|Text> interface.
    }

  @ReAttr:
    @@Name: nodeName
    @@Description:
       @@@lang:en
       @@@@: The node name.
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-F68D095
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-1841493061
    @@DOMMain:isNamespaceUnaware:1
    @@Get:
      @@@Type: 
        DOMMain:DOMString
      @@@actualType:
        DOMMain:ManakaiDOMString
      @@@InCase:
        @@@@Value:\#cdata-section
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            Always this value for the <IF::CDATASection> node.
      @@@Def:
        @@@@ContentType:
          lang:dis
        @@@@DISLang:value:
          @@@@@@: \#cdata-section
          @@@@@ContentType:
            DISCore:String
  @ReAttr:
    @@Name: nodeType
    @@Description:
      @@@lang:en
      @@@@: The type of this node.
    @@Get:
      @@@Type: 
        DOMMain:unsigned-short||ManakaiDOM|all
      @@@InCase:
        @@@@Label:
          @@@@@lang:en
          @@@@@@:
            <C::DOMCore|Node.CDATA_SECTION_NODE>
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The node is a <IF::CDATASection>.
      @@@Def:
        @@@@ContentType:
          lang:dis
        @@@@DISLang:constValue:
          DOMCore:Node.CDATA_SECTION_NODE

  @IntMethod:
    @@Name: newObject
    @@Description:
      @@@lang:en
      @@@@:
        Construct an object for a new instance of the <IF::CDATASection> node.
    @@Return:
      @@@Type: DOMCore|NodeStem
      @@@Description:
        @@@@lang:en
        @@@@@:
          The new object for the <IF::CDATASection> node.
      @@@PerlDef:
        $r = <ClassM::DOMCore:ManakaiDOMNode.newObject>;
        push @{$r->{<Q::TreeCore:origin>}}, <Q::infoset:parent>;
        $r->{<Q::DOMCore:nodeType>} = <Q::DOMXML:CDATASection>;
        $r->{<Q::infoset:content>} = '';
     @@ImplNote:
       @@@lang:en
       @@@@:
         Other properties required to be a legal <IF::CDATASection> object:
         <Q::DOMCore::ownerDocument>.
         \
         Other available properties: <Q::infoset:parent>, 
         <Q::infoset:content>.

  @Method:
     @@Name:  getFeature
     @@enDesc:
       Returns a specialized object that implements the
       specialized interfaces of the specified feature and version.
     @@ManakaiDOM:isRedefining:1
     @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|DOM3
     @@Param:
        @@@Name:  feature
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOM|ManakaiDOMFeatureName
        @@@enDesc:
          The feature name to request.
        @@@InCase:
          @@@@Label:
            @@@@@lang:en
            @@@@@@: 
              Feature name preceded by a <CHAR::PLUS SIGN>
          @@@@enDesc:
            The <CHAR::PLUS SIGN> is ignored.
     @@Param:
        @@@Name:  version
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOM|ManakaiDOMFeatureVersion
        @@@enDesc:
          The feature version to request.
        @@@nullCase:
          @@@@enDesc:
            No specific version is requested.
     @@Return:
        @@@Type:  
          DOMMain:DOMObject
        @@@enDesc:
          An object implementing the specialized interfaces.
          Note that the specialized object may or may not
          implement the <IF::DOMCore|Node> interface.
        @@@nullCase:
          @@@@enDesc:
            There is no object available that implements
            the specialized interfaces.
        @@@PerlDef:
            $feature =~ s/^\+//;
            if ($Message::DOM::ClassFeature{ref $self}->{$feature}->{$version}) {
              ## This class
              $r = $self;
            } else {
              CLASS: for my $class (grep {
                $Message::DOM::ManakaiDOMCDATASection::CompatClass{$_}
              } keys %Message::DOM::ManakaiDOMCDATASection::CompatClass) {
                if ($Message::DOM::ClassFeature{$class}
                            ->{$feature}->{$version}) {
                  __CODE{DOMCore|getNodeRef::
                    $object => {$self->{<Q::TreeCore:node>}},
                    $ref => $r,
                    $class => $class,
                  }__;
                  last CLASS;
                }
              }
            }
##CDATASection

NodeTypeDef:
  @IFQName: DocumentType
  @ClsQName: ManakaiDOMDocumentType

  @DISLang:role: 
    DOMCore:DocumentTypeRole

  @enDesc:
    Objects implementing the <IF::DocumentType> interface represents
    a document type declaration.  It corresponds to 
    a <InfoItem::document type declaration information item>
    in XML information set.

    The DOM interfaces do provide little information on document
    type declaration of the document.  The DOM specification
    describes that this is because the effect of namespaces
    and the various schema language efforts on DTD representation
    are not cleary undersood.  The <IF::DocumentType> interface
    only provides lists of general parased entities and
    notations and they are all read-only.

    A <IF::DocumentType> node can be a child of the <IF::DOMCore|Document> node
    but it <kwd:MUST> be an elder sibling of the document element node, if any.
    DOM Level 2 introduces the <M::DOMCore|DOMImplementation.createDocumentType>
    method which creates a <IF::DocumentType> node which does not
    bind to any <IF::DOMCore|Document> and that makes <IF::DocumentType>
    nodes without any parent being allowed.  The <IF::DocumentType>
    nodes themselves cannot have any children; <IF::Entity> and
    <IF::Notation> nodes are not defined to have parent.

  @Attr:
    @@Name: name
    @@enDesc:
      The document type name.
      
      {NOTE:: In a valid document, the document type name matches
              to the element type name of the document element.
      }

     @@DOMMain:isNamespaceUnaware:1
     @@Get:
        @@@Type:  
          DOMMain:DOMString
        @@@actualType:
          DOMMain:ManakaiDOMXMLName
        @@@Description:
          @@@@lang:en
          @@@@@: The document type name.
        @@@PerlDef:
            my $node = $self->{<Q::TreeCore:node>};
            if (defined $node->{<Q::infoset:localName>}) {
              $r = (defined $node->{<Q::infoset:prefix>} ?
                   $node->{<Q::infoset:prefix>} . ':' : '') . 
                   $node->{<Q::infoset:localName>};
            } else {
              $r = $node->{<Q::DOMCore:name>};
            }
            
  @Attr:
     @@Name:  entities
     @@Description:
       @@@lang:en
       @@@@:
         A collection containing the general entities, both external 
         and internal, declared in the DTD.  Parameter entities and 
         duplicating declarations are not contained.
     @@Get:
        @@@Type:
          DOMCore:NamedNodeMap
        @@@actualType:
          @@@@@:
            ManakaiDOMXML:ManakaiDOMEntities
          @@@@ForCheck: ManakaiDOM|ForClass
        @@@Description:
          @@@@lang:en
          @@@@@:
            A <IF::DOMCore|NamedNodeMap> containing <IF::Entity>s.
      @@@PerlDef:
        __CODE{DOMCore|getNodeRef::
          $object => {$self->{<Q::TreeCore:node>}},
          $ref => $r,
          $class => {
            <ClassName::ManakaiDOMXML:ManakaiDOMEntities>
          },
        }__;
  @Attr:
     @@Name:  notations
     @@Description:
       @@@lang:en
       @@@@:
         A collection containing the notations declared in the DTD.
     @@Get:
        @@@Type:
          DOMCore:NamedNodeMap
        @@@actualType:
          @@@@@:
            ManakaiDOMXML:ManakaiDOMNotations
          @@@@ForCheck: ManakaiDOM|ForClass
        @@@Description:
          @@@@lang:en
          @@@@@:
            A <IF::DOMCore|NamedNodeMap> containing <IF::Notation>s.
      @@@PerlDef:
        __CODE{DOMCore|getNodeRef::
          $object => {$self->{<Q::TreeCore:node>}},
          $ref => $r,
          $class => {
            <ClassName::ManakaiDOMXML:ManakaiDOMNotations>
          },
        }__;
  @Attr:
     @@Name:  publicId
     @@Description:
        @@@lang:en
        @@@@: The public identifier of the external subset.
     @@Get:
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The public identifier.
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@GetProp:
            infoset:publicIdentifier
     @@Level[list]:  2
     @@SpecLevel:2
     @@L2:
  @Attr:
     @@Name:  systemId
     @@Description:
       @@@lang:en
       @@@@: The system identifier of the external subset.
     @@Get:
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The system identifier.
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@GetProp:
            infoset:systemIdentifier
     @@Level[list]:  2
     @@SpecLevel:2
     @@L2:
  @Attr:
     @@Name:  internalSubset
     @@Description:
       @@@lang:en
       @@@@:
         The internal subset as a string, without delimiting square brackets.
     @@Get:
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The internal subset as a string.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: There is no internal subset.
        @@@ImplNote:
          @@@@lang:en
          @@@@@:
            The actual content returned depends on how much information
            is available to the DOM implementation.  This may vary 
            depending on various parameters, including the XML 
            processor used to build the document.
     @@Level[list]:  2
     @@SpecLevel:2
     @@L2:
  
  @ReMethod:
     @@Name:  lookupPrefix
     @@Description:
       @@@lang:en
       @@@@:
         Lookup the namespace prefix associated to the given namespace 
         URI, starting from this node.
     @@DOMMain:isNamespaceAware:1
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:
          ManakaiDOM:ManakaiDOMNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@: The namespace URI to look for.
     @@Return:
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:
            An associated namespace prefix.
          \
            If more than one prefix are associated to the 
            namespace URI, which is returned is implementation 
            dependent.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              No namespace prefix is found.  Always <DOM::null> 
              is returned for <IF::DocumentType> nodes.
        @@@PerlDef:
          @@@@@: $r = null;
     @@Level[list]:  3
     @@SpecLevel:3
     @@L3:
  @ReAttr:
    @@Name: nodeName
    @@Description:
      @@@lang:en
      @@@@: The node name.
    @@DOMMain:isNamespaceUnaware:1
    @@Get:
      @@@Type: 
        DOMMain:DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: The document type name.
      @@@Def:
        @@@@ContentType:
          lang:dis
        @@@@DISPerl:cloneCode: .name.get
  @ReAttr:
    @@Name: nodeType
    @@Description:
      @@@lang:en
      @@@@: The type of this node.
    @@Get:
      @@@Type: 
        DOMMain:unsigned-short||ManakaiDOM|all
      @@@actualType:
        DOMCore:ManakaiDOMNodeType
      @@@InCase:
        @@@@Label: DOCUMENT_TYPE_NODE
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            This node is a <IF::DocumentType>.
      @@@Def:
        @@@@ContentType:
          lang:dis
        @@@@DISLang:constValue:
          DOMCore:Node.DOCUMENT_TYPE_NODE
  @ReAttr:
     @@Name:  textContent
     @@Description:
       @@@lang:en
       @@@@:
         The text content of this node and its descendants.
     @@Get:
        @@@Type:  
          DOMMain:DOMString
        @@@actualType:
          DOMMain:ManakaiDOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The text content of this node.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The text content is defined to be <DOM::null>.
        @@@PerlDef:
          @@@@@: $r = null;
     @@Set:
        @@@Type:  
          DOMMain:DOMString
        @@@actualType:
          DOMMain:ManakaiDOMString
        @@@Description:
          @@@@lang:en
          @@@@@: Setting this attribute has no effect.
        @@@Warning:
          @@@@Type:
            ManakaiDOM:ManakaiDOMImplementationWarning
          @@@@Name: ATTR_SET_NO_EFFECT
          @@@@Description:
            @@@@@lang:en
            @@@@@@: Setting this attribute has no effect.
        @@@PerlDef: \
     @@Level[list]: 3
     @@SpecLevel:3
     @@L3:

  @IntMethod:
    @@Name: newObject
    @@Description:
      @@@lang:en
      @@@@:
        Construct an object for a new instance of the <IF::DocumentType> node.
    @@Return:
      @@@Type: DOMCore|NodeStem
      @@@Description:
        @@@@lang:en
        @@@@@:
          The new object for the <IF::DocumentType> node.
      @@@PerlDef:
        $r = <ClassM::DOMCore:ManakaiDOMNode.newObject>;
        push @{$r->{<Q::TreeCore:origin>}}, <Q::infoset:parent>;
        $r->{<Q::DOMCore:nodeType>} = <Q::infoset:DocumentTypeDeclaration>;
     @@ImplNote:
       @@@lang:en
       @@@@:
         Properties required for a <IF::DOMCore|Node> to be a legal 
         <IF::DocumentType>: either <Q::infoset:localName> or 
         <Q::DOMCore:name>, <Q::DOMCore:implementation>, 
         <Q::ManakaiDOM:implID>.
         \
         Other available properties: <Q::infoset:parent>, 
         <Q::infoset:publicIdentifier>, <Q::infoset:systemIdentifier>, 
         <Q::infoset:prefix>, <Q::DOMCore:read-only>, <Q::DOMCore:ownerDocument>.

  @Method:
     @@Name:  getFeature
     @@enDesc:
       Returns a specialized object that implements the
       specialized interfaces of the specified feature and version.
     @@ManakaiDOM:isRedefining:1
     @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|DOM3
     @@Param:
        @@@Name:  feature
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOM|ManakaiDOMFeatureName
        @@@enDesc:
          The feature name to request.
        @@@InCase:
          @@@@Label:
            @@@@@lang:en
            @@@@@@: 
              Feature name preceded by a <CHAR::PLUS SIGN>
          @@@@enDesc:
            The <CHAR::PLUS SIGN> is ignored.
     @@Param:
        @@@Name:  version
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOM|ManakaiDOMFeatureVersion
        @@@enDesc:
          The feature version to request.
        @@@nullCase:
          @@@@enDesc:
            No specific version is requested.
     @@Return:
        @@@Type:  
          DOMMain:DOMObject
        @@@enDesc:
          An object implementing the specialized interfaces.
          Note that the specialized object may or may not
          implement the <IF::DOMCore|Node> interface.
        @@@nullCase:
          @@@@enDesc:
            There is no object available that implements
            the specialized interfaces.
        @@@PerlDef:
            $feature =~ s/^\+//;
            if ($Message::DOM::ClassFeature{ref $self}->{$feature}->{$version}) {
              ## This class
              $r = $self;
            } else {
              ## Document type dependent classes
                ## TODO:
              ## Document type independent classes
              CLASS: for my $class (grep {
                $Message::DOM::ManakaiDOMDocumentType::CompatClass{$_}
              } keys %Message::DOM::ManakaiDOMDocumentType::CompatClass) {
                if ($Message::DOM::ClassFeature{$class}
                            ->{$feature}->{$version}) {
                  __CODE{DOMCore|getNodeRef::
                    $object => {$self->{<Q::TreeCore:node>}},
                    $ref => $r,
                    $class => $class,
                  }__;
                  last CLASS;
                }
              }
            }
##DocumentType

NodeTypeDef:
  @IFQName: Notation
  @ClsQName: ManakaiDOMNotation

  @DISLang:role: 
    DOMCore:NotationRole

  @Description:
    @@lang:en
    @@@:
      A notation declaration in the DTD or 
      the notation information item in the XML Infoset.
    \
      DOM Levels 1 to 3 do not support editing <IF::Notation> nodes so that 
      all <IF::Notation> nodes are read-only.
    \
      A <IF::Notation> node does not have any parent.
  @Attr:
     @@Name:  publicId
     @@Description:
        @@@lang:en
        @@@@: The public identifier of this notation.
     @@Get:
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The public identifier.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The public identifier was not specified.
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@GetProp:
            infoset:publicIdentifier
  @Attr:
     @@Name:  systemId
     @@Description:
       @@@lang:en
       @@@@: The system identifier of this notation.
     @@Get:
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The system identifier.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The system identifier was not specified.
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@GetProp:
            infoset:systemIdentifier
  
  @ReAttr:
    @@Name: baseURI
    @@Description:
      @@@lang:en
      @@@@:
        The base URI of this node.
        \
        For the <IF::Notation> node, it is the <InfosetP::declaration base URI> 
        of the notation information item.
    @@Type:
      DOMMain:DOMString
    @@actualType:
      ManakaiDOM:ManakaiDOMURI
    @@Get:
      @@@Description:
        @@@@lang:en
        @@@@@:
          The absolute base DOM URI.
      @@@InCase:
        @@@@Value:
          @@@@@is-null:1
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The DOM implementation was not able to 
            obtain an absolute URI.
      @@@Def:
        @@@@ContentType:
          lang:dis
        @@@@GetProp:
          infoset:declarationBaseURI
    @@SpecLevel:3
    @@Level:3
    @@L3:
  @ReMethod:
     @@Name:  lookupPrefix
     @@Description:
       @@@lang:en
       @@@@:
         Lookup the namespace prefix associated to the given namespace 
         URI, starting from this node.
     @@DOMMain:isNamespaceAware:1
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:
          DOMMain:DOMString
        @@@actualType:
          ManakaiDOM:ManakaiDOMNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@: The namespace URI to look for.
     @@Return:
        @@@Type:  
          DOMMain:DOMString
        @@@actualType:
          DOMMain:ManakaiDOMNamespacePrefix
        @@@Description:
          @@@@lang:en
          @@@@@:
            An associated namespace prefix.
          \
            If more than one prefix are associated to the 
            namespace URI, which is returned is implementation 
            dependent.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              No namespace prefix is found.  Always <DOM::null> 
              is returned for <IF::Notation> nodes.
        @@@PerlDef:
          @@@@@: $r = null;
     @@Level[list]:  3
     @@SpecLevel:3
     @@L3:
  @ReAttr:
    @@Name: nodeName
    @@Description:
      @@@lang:en
      @@@@: The node name.
    @@DOMMain:isNamespaceUnaware:1
    @@Get:
      @@@Type: 
        DOMMain:DOMString
      @@@actualType:
        DOMMain:ManakaiDOMString
      @@@Description:
        @@@@lang:en
        @@@@@: The notation name.
      @@@Def:
        @@@@ContentType:
          lang:dis
        @@@@GetProp:
          DOMCore:name
  @ReAttr:
    @@Name: nodeType
    @@Description:
      @@@lang:en
      @@@@: The type of this node.
    @@Get:
      @@@Type: 
        DOMMain:unsigned-short||ManakaiDOM|all
      @@@actualType:
        DOMCore:ManakaiDOMNodeType
      @@@InCase:
        @@@@Label: NOTATION_NODE
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            This node is a <IF::Notation>.
      @@@Def:
        @@@@ContentType:
          lang:dis
        @@@@DISLang:constValue: 
          DOMCore:Node.NOTATION_NODE
  @ReAttr:
     @@Name:  textContent
     @@Description:
       @@@lang:en
       @@@@:
         The text content of this node and its descendants.
     @@Type:
       DOMMain:DOMString
     @@actualType:
       DOMMain:ManakaiDOMString
     @@Get:
        @@@Description:
          @@@@lang:en
          @@@@@: The text content of this node.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The text content is defined to be <DOM::null>.
        @@@PerlDef:
          @@@@@: $r = null;
     @@Set:
        @@@Description:
          @@@@lang:en
          @@@@@: Setting this attribute has no effect.
        @@@Warning:
          @@@@Type:
            ManakaiDOM:ManakaiDOMImplementationWarning
          @@@@Name: ATTR_SET_NO_EFFECT
          @@@@Description:
            @@@@@lang:en
            @@@@@@: Setting this attribute has no effect.
        @@@PerlDef: \
     @@Level[list]: 3
     @@SpecLevel:3
     @@L3:
 
  @IntMethod:
    @@Name: newObject
    @@Description:
      @@@lang:en
      @@@@:
        Construct an object for a new instance of the <IF::Notation> node.
    @@Return:
      @@@Type: DOMCore|NodeStem
      @@@Description:
        @@@@lang:en
        @@@@@:
          The new object for the <IF::Notation> node.
      @@@PerlDef:
        $r = <ClassM::DOMCore:ManakaiDOMNode.newObject>;
        $r->{<Q::DOMCore:nodeType>} = <Q::infoset:Notation>;
     @@ImplNote:
       @@@lang:en
       @@@@:
         Properties required for a <IF::DOMCore|Node> to be a legal 
         <IF::Notation>: <Q::DOMCore:name>, <Q::DOMCore:ownerDocument>.
         \
         Other available properties: <Q::infoset:declarationBaseURI>, 
         <Q::infoset:publicIdentifier>, <Q::infoset:systemIdentifier>, 
         <Q::DOMCore:read-only>.

  @Method:
     @@Name:  getFeature
     @@enDesc:
       Returns a specialized object that implements the
       specialized interfaces of the specified feature and version.
     @@ManakaiDOM:isRedefining:1
     @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|DOM3
     @@Param:
        @@@Name:  feature
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOM|ManakaiDOMFeatureName
        @@@enDesc:
          The feature name to request.
        @@@InCase:
          @@@@Label:
            @@@@@lang:en
            @@@@@@: 
              Feature name preceded by a <CHAR::PLUS SIGN>
          @@@@enDesc:
            The <CHAR::PLUS SIGN> is ignored.
     @@Param:
        @@@Name:  version
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOM|ManakaiDOMFeatureVersion
        @@@enDesc:
          The feature version to request.
        @@@nullCase:
          @@@@enDesc:
            No specific version is requested.
     @@Return:
        @@@Type:  
          DOMMain:DOMObject
        @@@enDesc:
          An object implementing the specialized interfaces.
          Note that the specialized object may or may not
          implement the <IF::DOMCore|Node> interface.
        @@@nullCase:
          @@@@enDesc:
            There is no object available that implements
            the specialized interfaces.
        @@@PerlDef:
            $feature =~ s/^\+//;
            if ($Message::DOM::ClassFeature{ref $self}->{$feature}->{$version}) {
              ## This class
              $r = $self;
            } else {
              ## Notation dependent classes
                ## TODO:
              ## Notation independent classes
              CLASS: for my $class (grep {
                $Message::DOM::ManakaiDOMNotation::CompatClass{$_}
              } keys %Message::DOM::ManakaiDOMNotation::CompatClass) {
                if ($Message::DOM::ClassFeature{$class}
                            ->{$feature}->{$version}) {
                  __CODE{DOMCore|getNodeRef::
                    $object => {$self->{<Q::TreeCore:node>}},
                    $ref => $r,
                    $class => $class,
                  }__;
                  last CLASS;
                }
              }
            }
##Notation

NodeTypeDef:
  @IFQName: Entity
  @ClsQName: ManakaiDOMEntity

  @DISLang:role: 
    DOMCore:EntityRole

  @Description:
    @@lang:en
    @@@:
      A general entity, not entity declaration, either parsed or unparsed, 
      or either internal or external.
    \
      When the replacement text of the entity is available, 
      the child list of the <IF::Entity> node represents the structure 
      of that replacement value (assuming that the replacement text would be 
      parsed in context of <XML::content>).  Otherwise, the child list is empty.
      Note that if the entity contains an unbound namespace prefix, 
      the <A::DOMCore:Node.namespaceURI> of the corresponding node in the 
      <IF::Entity> node subtree is <DOM::null>.
    \
      DOM Levels 1 to 3 do not support editing <IF::Entity> nodes, so that 
      all <IF::Entity> nodes and their descendants are read-only.
    \
      An <IF::Entity> node does not have any parent.
  @Attr:
     @@Name:  publicId
     @@Description:
       @@@lang:en
       @@@@: The public identifier associated with the entity.
     @@Get:
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The public identifier.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The public identifier is not specified.
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@GetProp:
            infoset:publicIdentifier
  @Attr:
     @@Name:  systemId
     @@Description:
        @@@lang:en
        @@@@: The system identifier associated with the entity.
     @@Get:
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The system identifier.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The system identifier is not specified.
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@GetProp:
            infoset:systemIdentifier
  @Attr:
     @@Name:  notationName
     @@Description:
       @@@lang:en
       @@@@: The name of the notation for the entity.
     @@Get:
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The notation name.
        @@@ImplNote:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: This entity is a parsed entity.
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@GetProp:
            infoset:notationName
  @Attr:
     @@Name:  inputEncoding
     @@Description:
       @@@lang:en
       @@@@: The encoding used for this entity at the time of parsing.
     @@Get:
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:
            The encoding used for this entity.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Either the entity is from the internal subset or 
              the input encoding is not known.
          @@@@ImplNote:
            @@@@@lang:en
            @@@@@@:
              Is it mean that even the internal entity declared in the external 
              entity might have the input encoding!?
         @@@Def:
           @@@@ContentType:
             lang:dis
           @@@@GetProp:
             infoset:characterEncodingScheme
     @@Level[list]:  3
     @@SpecLevel:3
     @@L3:
  @Attr:
     @@Name:  xmlEncoding
     @@Description:
       @@@lang:en
       @@@@:
         The encoding of this entity, as specified in the text declaration.
     @@Get:
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The encoding name.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              This is not an external parsed entity.
        @@@ImplNote:
          @@@@lang:en
          @@@@@: 
            The encoding declaration is required if the text declaration 
            is used, but the text declaration itself is not required. 
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@GetProp:
            DOMCore:xmlEncoding
     @@Level[list]:  3
     @@SpecLevel:3
     @@L3:
  @Attr:
     @@Name:  xmlVersion
     @@Description:
       @@@lang:en
       @@@@:
         The XML version number of this entity, as specified in the 
         text declaration.
     @@ImplNote:
        @@@lang:en
        @@@@:
          XML 1.0 documents cannot include the external parsed entities 
          other than those versioned as XML 1.0.  XML 1.1 document 
          can use both XML 1.0 and XML 1.1 entities, but both interpreted 
          as XML 1.1 entities.
     @@Get:
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The version number.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              This is not an external parsed entity.
        @@@ImplNote:
          @@@@lang:en
          @@@@@:
            The XML Specifications allows the text declaration omitted. 
            Does the DOM implementation need to provide the default value? 
            What's the default value?
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@GetProp:
            infoset:version
     @@Level[list]:  3
     @@L3:
     @@ImplNote:
       @@@lang:en
       @@@@:
         Need consideration for the internal structure of the 
         XML and text declarations.  See <A::DOMCore:Document.xmlEncoding> and 
         <A::DOMCore:Document.xmlVersion> attributes defined in the 
         <Module::MDOM:DOMCore> module.
  
  @ReAttr:
    @@Name: baseURI
    @@Description:
      @@@lang:en
      @@@@:
        The base URI of this node.
        \
        For the <IF::Entity> node, it is the <InfosetP::declaration base URI> 
        of the unparsed entity information item.
    @@Get:
      @@@Type:
        DOMMain:DOMString
      @@@actualType:
        ManakaiDOM:ManakaiDOMURI
      @@@Description:
        @@@@lang:en
        @@@@@:
          The absolute base DOM URI.
      @@@InCase:
        @@@@Value:
          @@@@@is-null:1
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The DOM implementation was not able to 
            obtain an absolute URI.
      @@@Def:
        @@@@ContentType:
          lang:dis
        @@@@GetProp:
          infoset:declarationBaseURI
    @@SpecLevel:3
    @@Level:3
    @@L3:
  @ReMethod:
     @@Name:  lookupPrefix
     @@Description:
       @@@lang:en
       @@@@:
         Lookup the namespace prefix associated to the given namespace 
         URI, starting from this node.
     @@DOMMain:isNamespaceAware:1
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:
          DOMMain:DOMString
        @@@actualType:
          ManakaiDOM:ManakaiDOMNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@: The namespace URI to look for.
     @@Return:
        @@@Type:  
          DOMMain:DOMString
        @@@actualType:
          DOMMain:ManakaiDOMNamespacePrefix
        @@@Description:
          @@@@lang:en
          @@@@@:
            An associated namespace prefix.
          \
            If more than one prefix are associated to the 
            namespace URI, which is returned is implementation 
            dependent.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              No namespace prefix is found.  Always <DOM::null> 
              is returned for <IF::Entity> nodes.
        @@@PerlDef:
          @@@@@: $r = null;
     @@Level[list]:  3
     @@SpecLevel:3
     @@L3:
  @ReAttr:
    @@Name: nodeName
    @@Description:
      @@@lang:en
      @@@@: The node name.
    @@DOMMain:isNamespaceUnaware:1
    @@Get:
      @@@Type: 
        DOMMain:DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: The entity name.
      @@@Def:
        @@@@ContentType:
          lang:dis
        @@@@GetProp:
          DOMCore:name
    @@Redefine: Node
  @ReAttr:
    @@Name: nodeType
    @@Description:
      @@@lang:en
      @@@@: The type of this node.
    @@Get:
      @@@Type: 
        DOMMain:unsigned-short||ManakaiDOM|all
      @@@actualType:
        DOMCore:ManakaiDOMNodeType
      @@@InCase:
        @@@@Label: ENTITY_NODE
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            This node is an <IF::Entity>.
      @@@Def:
        @@@@ContentType:
          lang:dis
        @@@@DISLang:constValue:
          DOMCore:Node.ENTITY_NODE

  @IntMethod:
    @@Name: newObject
    @@Description:
      @@@lang:en
      @@@@:
        Construct an object for a new instance of the <IF::Entity> node.
    @@Return:
      @@@Type: DOMCore|NodeStem
      @@@Description:
        @@@@lang:en
        @@@@@:
          The new object for the <IF::Entity> node.
      @@@PerlDef:
        $r = <ClassM::DOMCore:ManakaiDOMNode.newObject>;
        push @{$r->{<Q::TreeCore:subnode>}}, <Q::infoset:children>;
        $r->{<Q::infoset:children>} = [];
        $r->{<Q::DOMCore:nodeType>} = <Q::DOMXML:Entity>;
     @@Level[list]:
       1
       2
       3
     @@ImplNote:
       @@@lang:en
       @@@@:
         Properties required for a <IF::DOMCore|Node> to be a legal 
         <IF::Entity>: <Q::DOMCore:name>, <Q::DOMCore:ownerDocument>.
         \
         Other available properties: <Q::infoset:declarationBaseURI>, 
         <Q::DOMCore:read-only>,
         <Q::ManakaiDOM:isExpanded>, <Q::ManakaiDOM:isExternallyDeclared>, 
         <Q::ManakaiDOM:isExternalEntity>.
         \
         Other available properties (for external entity): 
         <Q::DOMCore:documentURI>, <Q::infoset:publicIdentifier>,
         <Q::infoset:systemIdentifier>, <Q::infoset:notationName>,
         <Q::infoset:version>, <Q::DOMCore:xmlEncoding>,
         <Q::infoset:characterEncodingScheme>,
         <Q::infoset:baseURI>.

  @Method:
     @@Name:  getFeature
     @@enDesc:
       Returns a specialized object that implements the
       specialized interfaces of the specified feature and version.
     @@ManakaiDOM:isRedefining:1
     @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|DOM3
     @@Param:
        @@@Name:  feature
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOM|ManakaiDOMFeatureName
        @@@enDesc:
          The feature name to request.
        @@@InCase:
          @@@@Label:
            @@@@@lang:en
            @@@@@@: 
              Feature name preceded by a <CHAR::PLUS SIGN>
          @@@@enDesc:
            The <CHAR::PLUS SIGN> is ignored.
     @@Param:
        @@@Name:  version
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOM|ManakaiDOMFeatureVersion
        @@@enDesc:
          The feature version to request.
        @@@nullCase:
          @@@@enDesc:
            No specific version is requested.
     @@Return:
        @@@Type:  
          DOMMain:DOMObject
        @@@enDesc:
          An object implementing the specialized interfaces.
          Note that the specialized object may or may not
          implement the <IF::DOMCore|Node> interface.
        @@@nullCase:
          @@@@enDesc:
            There is no object available that implements
            the specialized interfaces.
        @@@PerlDef:
            $feature =~ s/^\+//;
            if ($Message::DOM::ClassFeature{ref $self}->{$feature}->{$version}) {
              ## This class
              $r = $self;
            } else {
              ## Entity dependent classes
                ## TODO:
              ## Entity independent classes
              CLASS: for my $class (grep {
                $Message::DOM::ManakaiDOMEntity::CompatClass{$_}
              } keys %Message::DOM::ManakaiDOMEntity::CompatClass) {
                if ($Message::DOM::ClassFeature{$class}
                            ->{$feature}->{$version}) {
                  __CODE{DOMCore|getNodeRef::
                    $object => {$self->{<Q::TreeCore:node>}},
                    $ref => $r,
                    $class => $class,
                  }__;
                  last CLASS;
                }
              }
            }
##Entity

NodeTypeDef:
  @IFQName: EntityReference
  @ClsQName: ManakaiDOMEntityReference

  @DISLang:role: 
    DOMCore:EntityReferenceRole

  @Description:
    @@lang:en
    @@@:
      An entity reference.
    \
      When an <IF::EntityReference> node represents a reference to an 
      <IF::Entity> node, the subtree of the <IF::EntityReference> node
      is a copy of the <IF::Entity> node subtree, except that when an entity
      contains an unbound namespace prefix, the descendants of the 
      <IF::EntityReference> node may be bound to different namespace URIs.
    \
      When an <IF::EntityReference> node represents a reference to an 
      known entity, the node has no child node.
    \
      In DOM Levels 1 to 3, an <IF::EntityReference> node and all 
      descendants are read-only.
    \
      Note that <IF::EntitiReference> nodes may cause normalization 
      problems when the normalization is performed after 
      entity references are expanded.
  @ImplNote:
    @@lang:en
    @@@:
      Note that the character references and references to predefined 
      entities are considered to be expanded by the HTML or XML 
      processor.  Moreover, the XML processor may completely expand 
      references to entities.  (Does this clause in the DOM specification 
      mean that the character entity references in HTML document 
      should be expanded before the DOM tree constructed?)
  @ImplNote:
    @@lang:en
    @@@:
      The DOM Level 1 Specifications allow the lazy 
      evaluation of the children of the <IF::EntityReference>.
      For example, calling the <A::DOMCore:Node.childNodes>
      method might trigger the evaluation.
  
  @ReAttr:
    @@Name: baseURI
    @@Description:
      @@@lang:en
      @@@@:
        The base URI of this node.
        \
        For the <IF::EntityReference> node, it is the 
        <InfosetP::declaration base URI> of the unexpanded entity 
        reference information item.
    @@Get:
      @@@Type:
        DOMMain:DOMString
      @@@actualType:
        ManakaiDOM:ManakaiDOMURI
      @@@Description:
        @@@@lang:en
        @@@@@:
          The absolute base DOM URI.
      @@@InCase:
        @@@@Value:
          @@@@@is-null:1
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The DOM implementation was not able to 
            obtain an absolute URI.
      @@@Def:
        @@@@ContentType:
          lang:dis
        @@@@GetProp:
          infoset:declarationBaseURI
    @@SpecLevel:3
    @@Level:3
    @@L3:
  @ReAttr:
    @@Name: nodeName
    @@Description:
      @@@lang:en
      @@@@: The node name.
    @@DOMMain:isNamespaceUnaware:1
    @@Get:
      @@@Type: 
        DOMMain:DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: The name of the entity referred.
      @@@Def:
        @@@@ContentType:
          lang:dis
        @@@@GetProp:
          DOMCore:name
  @ReAttr:
    @@Name: nodeType
    @@Description:
      @@@lang:en
      @@@@: The type of this node.
    @@Get:
      @@@Type: 
        DOMMain:unsigned-short||ManakaiDOM|all
      @@@actualType:
        DOMCore:ManakaiDOMNodeType
      @@@InCase:
        @@@@Label: ENTITY_REFERENCE_NODE
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            This node is an <IF::EntityReference>.
      @@@Def:
        @@@@ContentType:
          lang:dis
        @@@@DISLang:constValue:
          DOMCore:Node.ENTITY_REFERENCE_NODE

  @IntMethod:
    @@Name: newObject
    @@Description:
      @@@lang:en
      @@@@:
        Construct an object for a new instance of the <IF::EntityReference> node.
    @@Return:
      @@@Type: DOMCore|NodeStem
      @@@Description:
        @@@@lang:en
        @@@@@:
          The new object for the <IF::EntityReference> node.
      @@@PerlDef:
        $r = <ClassM::DOMCore:ManakaiDOMNode.newObject>;
        push @{$r->{<Q::TreeCore:subnode>}}, <Q::infoset:children>;
        $r->{<Q::infoset:children>} = [];
        push @{$r->{<Q::TreeCore:origin>}}, <Q::infoset:parent>;
        $r->{<Q::DOMCore:nodeType>} = <Q::DOMXML:EntityReference>;
     @@ImplNote:
       @@@lang:en
       @@@@:
         Properties required for a <IF::DOMCore|Node> to be a legal 
         <IF::EntityReference>: <Q::DOMCore:name>, <Q::DOMCore:ownerDocument>.
         \
         Other available properties: <Q::infoset:declarationBaseURI>, 
         <Q::DOMCore:read-only>, <Q::infoset:parent>, <Q::infoset:children>, 
         <Q::ManakaiDOM:isExpanded>, <Q::ManakaiDOM:isExternallyDeclared>, 
         <Q::ManakaiDOM:isExternalEntity>.
         \
         Other available properties (for external entity): 
         <Q::infoset:baseURI>, <Q::DOMCore:documentURI>, 
         <Q::infoset:publicIdentifier>, <Q::infoset:systemIdentifier>.
##EntityReference

NodeTypeDef:
  @IFQName: ProcessingInstruction
  @ClsQName: ManakaiDOMProcessingInstruction

  @DISLang:role: 
    DOMCore:ProcessingInstructionRole

  @Description:
    @@lang:en
    @@@:
      A processing instruction.  Note that the XML declaration and 
      text declarations are not considered as processing instructions.
  
  @Attr:
     @@Name:  target
     @@Description:
       @@@lang:en
       @@@@:
         The target of this processing instruction.
     @@DOMMain:isNamespaceUnaware:1
     @@Get:
        @@@Type:  
          DOMMain:DOMString
        @@@actualType:
          DOMMain:ManakaiDOMXMLName
        @@@Description:
          @@@@lang:en
          @@@@@: The target name.
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@GetProp:
            infoset:target
  @Attr:
     @@Name:  data
     @@Description:
       @@@lang:en
       @@@@:
         The content of this processing instruction.
       \
         The content does not contain the whitespaces 
         delimiting with the target name.
     @@Type:  
       DOMMain:DOMString
     @@actualType:
       DOMMain:ManakaiDOMString
     @@Get:
        @@@Description:
          @@@@lang:en
          @@@@@: The content.
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@GetProp:
            infoset:content
        @@@ImplNote:
          @@@@lang:en
          @@@@@:
            Can <DOM::null> be returned (to represent <XML::<lt>?name?<gt>>)?
     @@Set:
        @@@Description:
          @@@@lang:en
          @@@@@:
            The content.  It may contain the <CODE::PIC> (<XML::?<gt>>) but such 
            data result the document in unserializable.
        @@@ManakaiDOM:raises:
          @@@@@:
            DOMCore:DOMException.NO_MODIFICATION_ALLOWED_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: This node is read-only.
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@SetProp:
            @@@@@@:
              infoset:content
            @@@@@CheckReadOnly:1
  
  @ReAttr:
    @@Name: baseURI
    @@Description:
      @@@lang:en
      @@@@:
        The base URI of this node.
    @@Get:
      @@@Type:
        DOMMain:DOMString
      @@@actualType:
        ManakaiDOM:ManakaiDOMURI
      @@@Description:
        @@@@lang:en
        @@@@@:
          The absolute base DOM URI.
      @@@InCase:
        @@@@Value:
          @@@@@is-null:1
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The DOM implementation was not able to 
            obtain an absolute URI.
      @@@PerlDef:
        $r = $self->{<Q::TreeCore:node>}
                  -><M::ManakaiDOMCore:ManakaiDOMNodeObjectNode.contentBaseURI>
                                                                      (false);
    @@SpecLevel:3
    @@Level:3
    @@L3:
  @ReAttr:
    @@Name: nodeName
    @@Description:
      @@@lang:en
      @@@@: The node name.
    @@DOMMain:isNamespaceUnaware:1
    @@Get:
      @@@Type: 
        DOMMain:DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: 
          The target name, i.e. same as <A::ProcessingInstruction.target>.
      @@@Def:
        @@@@ContentType:
          lang:dis
        @@@@DISPerl:cloneCode: .target.get
  @ReAttr:
    @@Name: nodeType
    @@Description:
      @@@lang:en
      @@@@: The type of this node.
    @@Get:
      @@@Type: 
        DOMMain:unsigned-short||ManakaiDOM|all
      @@@actualType:
        DOMCore:ManakaiDOMNodeType
      @@@InCase:
        @@@@Label: PROCESSING_INSTRUCTION_NODE
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            This node is a <IF::ProcessingInstruction>.
      @@@Def:
        @@@@ContentType:
          lang:dis
        @@@@DISLang:constValue:
          DOMCore:Node.PROCESSING_INSTRUCTION_NODE
  @ReAttr:
     @@Name:  nodeValue
     @@Description:
       @@@lang:en
       @@@@: The value of this node.
     @@Get:
        @@@Type:  
          DOMMain:DOMString
        @@@actualType:
          DOMMain:ManakaiDOMString
        @@@ManakaiDOM:raises:
          @@@@@: 
            DOMCore:DOMException.DOMSTRING_SIZE_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              The target data, i.e. same as <A::ProcessingInstruction.data>.
        @@@Def:
          @@@@ContentType: 
            lang:dis
          @@@@DISPerl:cloneCode:.data.get
     @@Set:
        @@@Type:  
          DOMMain:DOMString
        @@@actualType:
          DOMMain:ManakaiDOMString
        @@@ManakaiDOM:raises:
          @@@@@:
            DOMCore:DOMException.NO_MODIFICATION_ALLOWED_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              This node is read-only.
        @@@Description:
          @@@@lang:en
          @@@@@:
            New node value.
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@DISPerl:cloneCode: .data.set
  @ReAttr:
     @@Name:  textContent
     @@Description:
       @@@lang:en
       @@@@: The text content of this node and its descendants. 
     @@@ImplNote:
        @@@@lang:en
        @@@@@:
          <A::ProcessingInstruction.data> == 
          <A::ProcessingInstruction.nodeValue> == 
          <A::ProcessingInstruction.textContent>.
     @@Type:  
       DOMMain:DOMString
     @@actualType:
       DOMMain:ManakaiDOMString
     @@Get:
        @@@Description:
          @@@@lang:en
          @@@@@:
            The text content of this node, i.e. the <A::DOMCore:Node.nodeValue>.
        @@@ManakaiDOM:raises:
          @@@@@: 
            DOMCore:DOMException.DOMSTRING_SIZE_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The attribute would return more characters than 
              fit in a <TYPE::DOMMain:DOMString> variable on the implementation 
              platform.
        @@@Def:
          @@@@ContentType: 
            lang:dis
          @@@@DISPerl:cloneCode: .data.get
     @@Set:
        @@@Description:
          @@@@lang:en
          @@@@@:
            The new text content of the node.
        @@@ManakaiDOM:raises:
          @@@@@: 
            DOMCore:DOMException.NO_MODIFICATION_ALLOWED_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: This node is read-only.
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@DISPerl:cloneCode:.data.set
     @@Level[list]:
        3
     @@SpecLevel:3
     @@L3:

  @IntMethod:
    @@Name: newObject
    @@Description:
      @@@lang:en
      @@@@:
        Construct an object for a new instance of the 
        <IF::ProcessingInstruction> node.
    @@Return:
      @@@Type: DOMCore|NodeStem
      @@@Description:
        @@@@lang:en
        @@@@@:
          The new object for the <IF::ProcessingInstruction> node.
      @@@PerlDef:
        $r = <ClassM::DOMCore:ManakaiDOMNode.newObject>;
        push @{$r->{<Q::TreeCore:origin>}}, <Q::infoset:parent>;
        $r->{<Q::DOMCore:nodeType>} = <Q::infoset:ProcessingInstruction>;
        $r->{<Q::infoset:content>} = '';
     @@ImplNote:
       @@@lang:en
       @@@@:
         Properties required for a <IF::DOMCore:Node> to be a legal 
         <IF::ProcessingInstruction>: <Q::infoset:target>, 
         <Q::DOMCore:ownerDocument>.
         \
         Other available properties: <Q::infoset:baseURI>, 
         <Q::DOMCore:read-only>, <Q::infoset:parent>, <Q::infoset:content>.

  @Method:
     @@Name:  getFeature
     @@enDesc:
       Returns a specialized object that implements the
       specialized interfaces of the specified feature and version.
     @@ManakaiDOM:isRedefining:1
     @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|DOM3
     @@Param:
        @@@Name:  feature
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOM|ManakaiDOMFeatureName
        @@@enDesc:
          The feature name to request.
        @@@InCase:
          @@@@Label:
            @@@@@lang:en
            @@@@@@: 
              Feature name preceded by a <CHAR::PLUS SIGN>
          @@@@enDesc:
            The <CHAR::PLUS SIGN> is ignored.
     @@Param:
        @@@Name:  version
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOM|ManakaiDOMFeatureVersion
        @@@enDesc:
          The feature version to request.
        @@@nullCase:
          @@@@enDesc:
            No specific version is requested.
     @@Return:
        @@@Type:  
          DOMMain:DOMObject
        @@@enDesc:
          An object implementing the specialized interfaces.
          Note that the specialized object may or may not
          implement the <IF::DOMCore|Node> interface.
        @@@nullCase:
          @@@@enDesc:
            There is no object available that implements
            the specialized interfaces.
        @@@PerlDef:
            $feature =~ s/^\+//;
            if ($Message::DOM::ClassFeature{ref $self}->{$feature}->{$version}) {
              ## This class
              $r = $self;
            } else {
              ## Target dependent classes
                ## TODO:
              ## Target independent classes
              CLASS: for my $class (grep {
                $Message::DOM::ManakaiDOMProcessingInstruction::CompatClass{$_}
              } keys %Message::DOM::ManakaiDOMProcessingInstruction::CompatClass
              ) {
                if ($Message::DOM::ClassFeature{$class}
                            ->{$feature}->{$version}) {
                  __CODE{DOMCore|getNodeRef::
                    $object => {$self->{<Q::TreeCore:node>}},
                    $ref => $r,
                    $class => $class,
                  }__;
                  last CLASS;
                }
              }
            }
##ProcessingInstruction
