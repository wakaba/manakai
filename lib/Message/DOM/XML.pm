#!/usr/bin/perl 
## This file is automatically generated
## 	at 2006-11-05T08:47:57+00:00,
## 	from file "XML.dis",
## 	module <http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.XML>,
## 	for <http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOMLatest>.
## Don't edit by hand!
use strict;
require Message::DOM::CharacterData;
require Message::DOM::DOMCore;
require Message::DOM::Document;
require Message::DOM::TreeCore;
require Message::Util::Error::DOMException;
package Message::DOM::XML;
our $VERSION = 20061105.0847;
package Message::DOM::XML::ManakaiDOMXMLDocument;
our $VERSION = 20061105.0847;
push @Message::DOM::Document::ManakaiDOMDocument::ISA, q<Message::DOM::XML::ManakaiDOMXMLDocument> unless Message::DOM::Document::ManakaiDOMDocument->isa (q<Message::DOM::XML::ManakaiDOMXMLDocument>);
use Char::Class::XML 'InXMLNameChar10',
'InXMLNameChar11',
'InXMLNameStartChar11',
'InXML_NameStartChar10';
sub create_cdata_section ($$) {
my ($self, $data) = @_;
my $r;

{

my 
$bag = 
$self->{'b'}
;
my $stem;


{


$stem = 'Message::DOM::XML::ManakaiDOMCDATASection'->___create_node_stem ($bag, {
  
'rc'
 => 0,
  
'id'
 => \
(
  'tag:suika.fam.cx,2005-09:' . time . ':' . $$ . ':' .
  (++$Message::Util::ManakaiNode::UniqueIDN)
)
,
}, {
    'od' => $self,
    'con' => \$data,
  });


{

if 
(defined 'Message::DOM::XML::ManakaiDOMCDATASection') {
  if (ref 'Message::DOM::XML::ManakaiDOMCDATASection' eq 'SCALAR') {
    $stem->{'cls'} = 'Message::DOM::XML::ManakaiDOMCDATASection';
  } elsif (defined $Message::Util::ManakaiStringRef::Value{'Message::DOM::XML::ManakaiDOMCDATASection'}) {
    $stem->{'cls'} = $Message::Util::ManakaiStringRef::Value{'Message::DOM::XML::ManakaiDOMCDATASection'};
  } else {
    require Scalar::Util;
    $stem->{'cls'} = $Message::Util::ManakaiStringRef::Value{'Message::DOM::XML::ManakaiDOMCDATASection'} = \('Message::DOM::XML::ManakaiDOMCDATASection');
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{'Message::DOM::XML::ManakaiDOMCDATASection'});
  }
} else {
  CORE::delete $stem->{'cls'};
}


}

;
$bag->{${$stem->{
'id'
}}} = $stem;


}

;


{


$r = ${$stem->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $stem->{
'id'
},
  
'b'
 => $bag,
}, {
  });
$stem->{
'rc'
}++;


}

;


}
$r}
sub create_entity_reference ($$) {
my ($self, $name) = @_;
my $r;

{

our 
$CreateEntityReference_OpenEntity;
  ## NOTE: Multithread unsafe

my $orig_strict = $self->
strict_error_checking
;
if ($orig_strict) {
  my $version = $self->
xml_version
;
  

{

if 
(defined $name) {
  

{

if 
(((not defined $version or $version eq '1.0') and
         not 
($name =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        (defined $version and $version eq '1.1' and
         not 
($name =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $name, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
  


}

;
  

;
}


}

;
}

my $bag = 
$self->{'b'}
;
my $stem;


{


$stem = 'Message::DOM::XML::ManakaiDOMEntityReference'->___create_node_stem ($bag, {
  
'rc'
 => 0,
  
'id'
 => \
(
  'tag:suika.fam.cx,2005-09:' . time . ':' . $$ . ':' .
  (++$Message::Util::ManakaiNode::UniqueIDN)
)
,
}, {
    'xname' => \$name,
    'od' => $self,
  });


{

if 
(defined 'Message::DOM::XML::ManakaiDOMEntityReference') {
  if (ref 'Message::DOM::XML::ManakaiDOMEntityReference' eq 'SCALAR') {
    $stem->{'cls'} = 'Message::DOM::XML::ManakaiDOMEntityReference';
  } elsif (defined $Message::Util::ManakaiStringRef::Value{'Message::DOM::XML::ManakaiDOMEntityReference'}) {
    $stem->{'cls'} = $Message::Util::ManakaiStringRef::Value{'Message::DOM::XML::ManakaiDOMEntityReference'};
  } else {
    require Scalar::Util;
    $stem->{'cls'} = $Message::Util::ManakaiStringRef::Value{'Message::DOM::XML::ManakaiDOMEntityReference'} = \('Message::DOM::XML::ManakaiDOMEntityReference');
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{'Message::DOM::XML::ManakaiDOMEntityReference'});
  }
} else {
  CORE::delete $stem->{'cls'};
}


}

;
$bag->{${$stem->{
'id'
}}} = $stem;


}

;


{


$r = ${$stem->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $stem->{
'id'
},
  
'b'
 => $bag,
}, {
  });
$stem->{
'rc'
}++;


}

;

## Expansion


{

local $Error::Depth = $Error::Depth + 1;

{


  unless 
($CreateEntityReference_OpenEntity->{$name}) {
    local $CreateEntityReference_OpenEntity->{$name} = 
1
;
    my $__doctype = $self->
doctype
;
    $__doctype = $__doctype->
get_feature

                             (
'http://suika.fam.cx/www/2006/feature/XDoctype'
 => '3.0')
      if $__doctype;
    if ($__doctype) {
      my $__et = $__doctype->
get_general_entity_node
 ($name);
      if ($__et) {
        $self->
strict_error_checking
 (
0
);
        my @node;
        for my $c (@{$__et->
child_nodes
}) {
          my $clone = $c->
clone_node
 (
1
);
          $r->
append_child
 ($clone);
          push @node, $clone;
        }
        $r->
manakai_expanded

              ($__et->
has_replacement_tree
);
        $self->
strict_error_checking
 ($orig_strict);
      } # entity
    } # doctype
  }
  $r->
manakai_set_read_only
 (
1
, 
1
);



}


;}

;


}
$r}
sub create_processing_instruction ($$$) {
my ($self, $target, $data) = @_;
my $r;

{

if 
($self->
strict_error_checking
) {
  my $version = $self->
xml_version
;
  

{

if 
(defined $target) {
  

{

if 
(((not defined $version or $version eq '1.0') and
         not 
($target =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        (defined $version and $version eq '1.1' and
         not 
($target =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $target, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
  


}

;
  

;
}


}

;
}

my $bag = 
$self->{'b'}
;
$data = '' unless defined $data;
my $stem;


{


$stem = 'Message::DOM::XML::ManakaiDOMProcessingInstruction'->___create_node_stem ($bag, {
  
'rc'
 => 0,
  
'id'
 => \
(
  'tag:suika.fam.cx,2005-09:' . time . ':' . $$ . ':' .
  (++$Message::Util::ManakaiNode::UniqueIDN)
)
,
}, {
    'target' => \$target,
    'con' => \$data,
    'od' => $self,
  });


{

if 
(defined 'Message::DOM::XML::ManakaiDOMProcessingInstruction') {
  if (ref 'Message::DOM::XML::ManakaiDOMProcessingInstruction' eq 'SCALAR') {
    $stem->{'cls'} = 'Message::DOM::XML::ManakaiDOMProcessingInstruction';
  } elsif (defined $Message::Util::ManakaiStringRef::Value{'Message::DOM::XML::ManakaiDOMProcessingInstruction'}) {
    $stem->{'cls'} = $Message::Util::ManakaiStringRef::Value{'Message::DOM::XML::ManakaiDOMProcessingInstruction'};
  } else {
    require Scalar::Util;
    $stem->{'cls'} = $Message::Util::ManakaiStringRef::Value{'Message::DOM::XML::ManakaiDOMProcessingInstruction'} = \('Message::DOM::XML::ManakaiDOMProcessingInstruction');
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{'Message::DOM::XML::ManakaiDOMProcessingInstruction'});
  }
} else {
  CORE::delete $stem->{'cls'};
}


}

;
$bag->{${$stem->{
'id'
}}} = $stem;


}

;


{


$r = ${$stem->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $stem->{
'id'
},
  
'b'
 => $bag,
}, {
  });
$stem->{
'rc'
}++;


}

;


}
$r}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XML::ManakaiDOMXMLDocument>}->{has_feature} = {};
$Message::DOM::ClassPoint{q<Message::DOM::XML::ManakaiDOMXMLDocument>} = 0;
package Message::DOM::IFLatest::CDATASection;
our $VERSION = 20061105.0848;
package Message::DOM::XML::ManakaiDOMCDATASection;
our $VERSION = 20061105.0848;
push our @ISA, 'Message::DOM::CharacterData::ManakaiDOMText',
'Message::DOM::IF::CDATASection',
'Message::DOM::IF::CharacterData',
'Message::DOM::IF::Node',
'Message::DOM::IF::Text',
'Message::DOM::IFLatest::CDATASection',
'Message::DOM::IFLatest::CharacterData',
'Message::DOM::IFLatest::Node',
'Message::DOM::IFLatest::Text',
'Message::DOM::IFLevel1::CDATASection',
'Message::DOM::IFLevel1::CharacterData',
'Message::DOM::IFLevel1::Node',
'Message::DOM::IFLevel1::Text',
'Message::DOM::IFLevel2::CDATASection',
'Message::DOM::IFLevel2::CharacterData',
'Message::DOM::IFLevel2::Node',
'Message::DOM::IFLevel2::Text',
'Message::DOM::IFLevel3::CDATASection',
'Message::DOM::IFLevel3::CharacterData',
'Message::DOM::IFLevel3::Node',
'Message::DOM::IFLevel3::Text';
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 4;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XML::ManakaiDOMCDATASection', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub append_child ($$) {
my ($self, $newChild) = @_;
my $r;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::CharacterData::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;


}
$r}
sub insert_before ($$;$) {
my ($self, $newChild, $refChild) = @_;
my $r;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_before', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::CharacterData::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;


}
$r}
sub replace_child ($$$) {
my ($self, $newChild, $oldChild) = @_;
my $r;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::CharacterData::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;


}
$r}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = '#cdata-section';
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XML::ManakaiDOMCDATASection', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub get_feature ($$$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


}

{


$version = '' unless defined $version;


}
my $r;

{


$feature =~ s/^\+//;


{

if 
($Message::Util::AutoLoad::Registry::Feature->{$feature}->{$version}) {
  $r = $self;
}


}

;
unless (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->SUPER::get_feature ($feature, $version);
  


}


;}

;
}


}
$r}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XML::ManakaiDOMCDATASection>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::DOM::XML::ManakaiDOMCDATASection>} = 14.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XML::ManakaiDOMCDATASection>}->{compat_class}->{q<Message::DOM::XML::ManakaiDOMCDATASection>} = 1;
$Message::Util::Grove::ClassProp{q<Message::DOM::XML::ManakaiDOMCDATASection>} = {'o0',
['parent'],
'w0',
['od']};
package Message::DOM::IFLatest::DocumentType;
our $VERSION = 20061105.0848;
package Message::DOM::IFLatest::Notation;
our $VERSION = 20061105.0848;
package Message::DOM::XML::ManakaiDOMNotation;
our $VERSION = 20061105.0848;
push our @ISA, 'Message::DOM::TreeCore::ManakaiDOMNode',
'Message::DOM::IF::Node',
'Message::DOM::IF::Notation',
'Message::DOM::IFLatest::Node',
'Message::DOM::IFLatest::Notation',
'Message::DOM::IFLevel1::Node',
'Message::DOM::IFLevel1::Notation',
'Message::DOM::IFLevel2::Node',
'Message::DOM::IFLevel2::Notation',
'Message::DOM::IFLevel3::Node',
'Message::DOM::IFLevel3::Notation';
sub ___create_node_stem ($$$$) {
my ($self, $bag, $obj, $opt) = @_;
my $r = {};

{


{

if 
(defined ${$opt->{'xname'}}) {
  if (ref ${$opt->{'xname'}} eq 'SCALAR') {
    $obj->{'xname'} = ${$opt->{'xname'}};
  } elsif (defined $Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}}) {
    $obj->{'xname'} = $Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}};
  } else {
    require Scalar::Util;
    $obj->{'xname'} = $Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}} = \(${$opt->{'xname'}});
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}});
  }
} else {
  CORE::delete $obj->{'xname'};
}


}

;


{


$obj->{'od'} = $opt->{'od'}->{
'id'
};
$bag->{${$opt->{'od'}->{
'id'
}}}
    ->{'do'}->{${$obj->{
'id'
}}}
  = $obj->{
'id'
};


}

;
$r = $obj;


}
$r}
sub child_nodes ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


$r = bless [], 
'Message::DOM::TreeCore::ManakaiDOMEmptyNodeList'
;


}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XML::ManakaiDOMNotation', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'child_nodes';
}
}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$v;


{


$v = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'xname'};


}

;
$r = $$v;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XML::ManakaiDOMNotation', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 12;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XML::ManakaiDOMNotation', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub text_content ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = 
undef
;


}
$r;
} else {my ($self, $given) = @_;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#setting-node-value-no-effect', 'rdata' => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::TreeCore::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_value';

;


}
}
}
sub append_child ($$) {
my ($self, $newChild) = @_;
my $r;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::CharacterData::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;


}
$r}
sub insert_before ($$;$) {
my ($self, $newChild, $refChild) = @_;
my $r;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_before', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::CharacterData::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;


}
$r}
sub replace_child ($$$) {
my ($self, $newChild, $oldChild) = @_;
my $r;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::CharacterData::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;


}
$r}
sub get_feature ($$$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


}

{


$version = '' unless defined $version;


}
my $r;

{


$feature =~ s/^\+//;


{

if 
($Message::Util::AutoLoad::Registry::Feature->{$feature}->{$version}) {
  $r = $self;
}


}

;
unless (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->SUPER::get_feature ($feature, $version);
  


}


;}

;
}


}
$r}
sub public_id ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'pubid'};


}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'pubid'} = $given;


}

;


}
}
}
sub system_id ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'sysid'};


}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'sysid'} = $given;


}

;


}
}
}
sub base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
base_uri
;



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XML::ManakaiDOMNotation', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'base_uri';
}
}
sub manakai_declaration_base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'dbaseuri'};


}

;
unless (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
base_uri
;
  


}


;}

;
}


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'dbaseuri'} = $given;


}

;


}
}
}
sub owner_document_type_definition ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

my 
$__v = $self->{
'b'
}->{${$self->{
'id'
}}}
              ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'};
if (defined $__v) {
  

{


$r = ${$self->{'b'}->{${$__v}}->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $__v,
  
'b'
 => $self->{'b'},
}, {});
$self->{'b'}->{${$__v}}->{
'rc'
}++;


}

;
}


}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XML::ManakaiDOMNotation', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'owner_document_type_definition';
}
}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XML::ManakaiDOMNotation>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::DOM::XML::ManakaiDOMNotation>} = 14.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XML::ManakaiDOMNotation>}->{compat_class}->{q<Message::DOM::XML::ManakaiDOMNotation>} = 1;
$Message::Util::Grove::ClassProp{q<Message::DOM::XML::ManakaiDOMNotation>} = {'o0',
['http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'],
'w0',
['od']};
package Message::DOM::IFLatest::Entity;
our $VERSION = 20061105.0848;
package Message::DOM::XML::ManakaiDOMEntity;
our $VERSION = 20061105.0848;
push our @ISA, 'Message::DOM::TreeCore::ManakaiDOMNode',
'Message::DOM::IF::Entity',
'Message::DOM::IF::Node',
'Message::DOM::IFLatest::Entity',
'Message::DOM::IFLatest::Node',
'Message::DOM::IFLevel1::Entity',
'Message::DOM::IFLevel1::Node',
'Message::DOM::IFLevel2::Entity',
'Message::DOM::IFLevel2::Node',
'Message::DOM::IFLevel3::Entity',
'Message::DOM::IFLevel3::Node';
sub ___create_node_stem ($$$$) {
my ($self, $bag, $obj, $opt) = @_;
my $r = {};

{


{

if 
(defined ${$opt->{'xname'}}) {
  if (ref ${$opt->{'xname'}} eq 'SCALAR') {
    $obj->{'xname'} = ${$opt->{'xname'}};
  } elsif (defined $Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}}) {
    $obj->{'xname'} = $Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}};
  } else {
    require Scalar::Util;
    $obj->{'xname'} = $Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}} = \(${$opt->{'xname'}});
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}});
  }
} else {
  CORE::delete $obj->{'xname'};
}


}

;


{


$obj->{'od'} = $opt->{'od'}->{
'id'
};
$bag->{${$opt->{'od'}->{
'id'
}}}
    ->{'do'}->{${$obj->{
'id'
}}}
  = $obj->{
'id'
};


}

;
$obj->{
'child'
} = [];
$r = $obj;


}
$r}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$v;


{


$v = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'xname'};


}

;
$r = $$v;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XML::ManakaiDOMEntity', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 6;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XML::ManakaiDOMEntity', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub append_child ($$) {
my ($self, $newChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
if ($self_od->
strict_error_checking
) {
  my $anode = $self;
  while (defined $anode) {
    if ($anode eq $newChild) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_ANCESTOR_OR_SELF', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;
    }
    $anode = $anode->
parent_node
;
  }
}
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    3 => 1,
    5 => 1,
    1 => 1,
    4 => 1,
    7 => 1,
    8 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    3 => 1,
    5 => 1,
    1 => 1,
    4 => 1,
    7 => 1,
    8 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      

{


$newChild->{
'b'
}->{${$newChild->{
'id'
}}}
    ->{'child'} = [];


}

;
    } else {
      my $v;
      

{


$v = $nc_parent->{
'b'
}->{${$nc_parent->{
'id'
}}}
         ->{'child'};


}

;
      RP: for my $i (0..$#$v) {
        my $nodeid = $v->[$i];
        if (
(${$new_child[0]->{'id'}} eq ${$nodeid})
) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    

{


$nc->{
'b'
}->{${$nc->{
'id'
}}}
    ->{'parent'} = $self->{
'id'
};


}

;
  }

  my $children;
  

{


$children = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'child'};


}

;

  

{


## -- Adds to children list
    push @$children, map {
      
$_->{'id'}

    } @new_child;
    $r = $newChild;
  


}

;

  

;

  

;



}


;}

;


}

;


}
$r}
sub insert_before ($$;$) {
my ($self, $newChild, $refChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
if ($self_od->
strict_error_checking
) {
  my $anode = $self;
  while (defined $anode) {
    if ($anode eq $newChild) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_before', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_ANCESTOR_OR_SELF', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;
    }
    $anode = $anode->
parent_node
;
  }
}
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    3 => 1,
    5 => 1,
    1 => 1,
    4 => 1,
    7 => 1,
    8 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    3 => 1,
    5 => 1,
    1 => 1,
    4 => 1,
    7 => 1,
    8 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

{


# tc:ForAppendChild & tc:ForReplaceChild
    if (defined $refChild) {
      if ($refChild eq $newChild) {
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#insert-before-itself', 'rdata' => $refChild, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
        


}

;
        

;
      }

      my $cns = $self->
child_nodes
;
      my $cnsl = @$cns;
      C: {
        $index = 0;
        for my $i (0..($cnsl-1)) {
          my $cn = $cns->[$i];
          if ($cn eq $refChild) {
            $index += $i;
            last C;
          } elsif ($cn eq $newChild) {
            $index = -1; # offset
          }
        }
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'refChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $refChild;


}


;}

;
        


}

;
        

;
      } # C
    } else { # |oldChild| is not defined
      

;
    }
  


}

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      

{


$newChild->{
'b'
}->{${$newChild->{
'id'
}}}
    ->{'child'} = [];


}

;
    } else {
      my $v;
      

{


$v = $nc_parent->{
'b'
}->{${$nc_parent->{
'id'
}}}
         ->{'child'};


}

;
      RP: for my $i (0..$#$v) {
        my $nodeid = $v->[$i];
        if (
(${$new_child[0]->{'id'}} eq ${$nodeid})
) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    

{


$nc->{
'b'
}->{${$nc->{
'id'
}}}
    ->{'parent'} = $self->{
'id'
};


}

;
  }

  my $children;
  

{


$children = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'child'};


}

;

  

;

  

{


## -- Adds to children list
    if ($index == -1) {
      push @$children, map {
        
$_->{'id'}

      } @new_child;
    } else {
      splice @$children, $index, 0, map {
        
$_->{'id'}

      } @new_child;
    }
    $r = $newChild;
  


}

;

  

;



}


;}

;


}

;


}
$r}
sub replace_child ($$$) {
my ($self, $newChild, $oldChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
if ($self_od->
strict_error_checking
) {
  my $anode = $self;
  while (defined $anode) {
    if ($anode eq $newChild) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_ANCESTOR_OR_SELF', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;
    }
    $anode = $anode->
parent_node
;
  }
}
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    3 => 1,
    5 => 1,
    1 => 1,
    4 => 1,
    7 => 1,
    8 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    3 => 1,
    5 => 1,
    1 => 1,
    4 => 1,
    7 => 1,
    8 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

{


# tc:ForAppendChild & tc:ForReplaceChild
    if (defined $oldChild) {
      if ($oldChild eq $newChild) {
        

;
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#replace-by-itself', 'rdata' => $oldChild, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
        


}

;
      }

      my $cns = $self->
child_nodes
;
      my $cnsl = @$cns;
      C: {
        $index = 0;
        for my $i (0..($cnsl-1)) {
          my $cn = $cns->[$i];
          if ($cn eq $oldChild) {
            $index += $i;
            last C;
          } elsif ($cn eq $newChild) {
            $index = -1; # offset
          }
        }
        

;
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $oldChild;


}


;}

;
        


}

;
      } # C
    } else { # |oldChild| is not defined
      

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $oldChild;


}


;}

;
      


}

;
    }
  


}

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      

{


$newChild->{
'b'
}->{${$newChild->{
'id'
}}}
    ->{'child'} = [];


}

;
    } else {
      my $v;
      

{


$v = $nc_parent->{
'b'
}->{${$nc_parent->{
'id'
}}}
         ->{'child'};


}

;
      RP: for my $i (0..$#$v) {
        my $nodeid = $v->[$i];
        if (
(${$new_child[0]->{'id'}} eq ${$nodeid})
) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    

{


$nc->{
'b'
}->{${$nc->{
'id'
}}}
    ->{'parent'} = $self->{
'id'
};


}

;
  }

  my $children;
  

{


$children = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'child'};


}

;

  

;

  

;

  

{


## -- Replaces the node
    splice @$children, $index, 1, map {
      
$_->{'id'}

    } @new_child;
    

{

CORE::delete 
$oldChild->{
'b'
}->{${$oldChild->{
'id'
}}}
                 ->{'parent'};


}

;
    $r = $oldChild;
  


}

;



}


;}

;


}

;


}
$r}
sub manakai_append_text ($$) {
my ($self, $string) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$lc = $self->
last_child
;
  if (defined $lc and
      $lc->
node_type
 == 
3
) {
    $lc->
manakai_append_text

           (ref $string eq 'SCALAR' ? $string : \$string);
  } else {
    my $text = $self->
owner_document

                    ->
create_text_node
 
                        (ref $string eq 'SCALAR' ? $$string : $string);
    $self->
append_child
 ($text);
  }
  $r = $self;



}


;}

;


}
$r}
sub get_feature ($$$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


}

{


$version = '' unless defined $version;


}
my $r;

{


$feature =~ s/^\+//;


{

if 
($Message::Util::AutoLoad::Registry::Feature->{$feature}->{$version}) {
  $r = $self;
}


}

;
unless (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->SUPER::get_feature ($feature, $version);
  


}


;}

;
}


}
$r}
sub base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
base_uri
;



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XML::ManakaiDOMEntity', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'base_uri';
}
}
sub input_encoding ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'ces'};


}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'ces'} = $given;


}

;


}
}
}
sub notation_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'http://www.w3.org/2001/04/infoset#notationName'};


}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'http://www.w3.org/2001/04/infoset#notationName'} = $given;


}

;


}
}
}
sub public_id ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'pubid'};


}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'pubid'} = $given;


}

;


}
}
}
sub system_id ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'sysid'};


}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'sysid'} = $given;


}

;


}
}
}
sub xml_encoding ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'xcs'};


}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'xcs'} = $given;


}

;


}
}
}
sub xml_version ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'http://www.w3.org/2001/04/infoset#version'};


}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'http://www.w3.org/2001/04/infoset#version'} = $given;


}

;


}
}
}
sub manakai_declaration_base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'dbaseuri'};


}

;
unless (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
base_uri
;
  


}


;}

;
}


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'dbaseuri'} = $given;


}

;


}
}
}
sub manakai_entity_base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'entburi'};


}

;
unless (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
manakai_entity_uri
;
    $r = $self->
base_uri unless 
defined $r;
  


}


;}

;
}


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'entburi'} = $given;


}

;


}
}
}
sub manakai_entity_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'enturi'};


}

;
unless (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
system_id
;
    if (defined $r) {
      if (
($r !~ m!\A[^:/?#]+:!)
) {
        my $base = $self->
manakai_declaration_base_uri
;
        $r = $self->
owner_document

                  ->
implementation

                  ->
create_uri_reference

                      ($r)
                  ->
get_absolute_reference

                      ($base)
                  ->
uri_reference
          if 
defined $base;
      }
    } else {
      $r = 
undef
;
    }
  


}


;}

;
}


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'enturi'} = $given;


}

;


}
}
}
sub has_replacement_tree ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'reptree'};


}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'reptree'} = $given;


}

;


}
}
}
sub owner_document_type_definition ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

my 
$__v = $self->{
'b'
}->{${$self->{
'id'
}}}
              ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'};
if (defined $__v) {
  

{


$r = ${$self->{'b'}->{${$__v}}->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $__v,
  
'b'
 => $self->{'b'},
}, {});
$self->{'b'}->{${$__v}}->{
'rc'
}++;


}

;
}


}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XML::ManakaiDOMEntity', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'owner_document_type_definition';
}
}
sub is_externally_declared ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'xdecled'};


}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'xdecled'} = $given;


}

;


}
}
}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XML::ManakaiDOMEntity>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::DOM::XML::ManakaiDOMEntity>} = 14.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XML::ManakaiDOMEntity>}->{compat_class}->{q<Message::DOM::XML::ManakaiDOMEntity>} = 1;
$Message::Util::Grove::ClassProp{q<Message::DOM::XML::ManakaiDOMEntity>} = {'o0',
['http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'],
's1a',
['child'],
'w0',
['od']};
package Message::DOM::IFLatest::EntityReference;
our $VERSION = 20061105.0848;
package Message::DOM::XML::ManakaiDOMEntityReference;
our $VERSION = 20061105.0848;
push our @ISA, 'Message::DOM::TreeCore::ManakaiDOMNode',
'Message::DOM::IF::EntityReference',
'Message::DOM::IF::Node',
'Message::DOM::IFLatest::EntityReference',
'Message::DOM::IFLatest::Node',
'Message::DOM::IFLevel1::EntityReference',
'Message::DOM::IFLevel1::Node',
'Message::DOM::IFLevel2::EntityReference',
'Message::DOM::IFLevel2::Node',
'Message::DOM::IFLevel3::EntityReference',
'Message::DOM::IFLevel3::Node';
sub ___create_node_stem ($$$$) {
my ($self, $bag, $obj, $opt) = @_;
my $r = {};

{


$obj->{
'child'
} = [];


{

if 
(defined ${$opt->{'xname'}}) {
  if (ref ${$opt->{'xname'}} eq 'SCALAR') {
    $obj->{'xname'} = ${$opt->{'xname'}};
  } elsif (defined $Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}}) {
    $obj->{'xname'} = $Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}};
  } else {
    require Scalar::Util;
    $obj->{'xname'} = $Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}} = \(${$opt->{'xname'}});
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}});
  }
} else {
  CORE::delete $obj->{'xname'};
}


}

;


{


$obj->{'od'} = $opt->{'od'}->{
'id'
};
$bag->{${$opt->{'od'}->{
'id'
}}}
    ->{'do'}->{${$obj->{
'id'
}}}
  = $obj->{
'id'
};


}

;
$r = $obj;


}
$r}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 5;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XML::ManakaiDOMEntityReference', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub append_child ($$) {
my ($self, $newChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
if ($self_od->
strict_error_checking
) {
  my $anode = $self;
  while (defined $anode) {
    if ($anode eq $newChild) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_ANCESTOR_OR_SELF', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;
    }
    $anode = $anode->
parent_node
;
  }
}
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    3 => 1,
    5 => 1,
    1 => 1,
    4 => 1,
    7 => 1,
    8 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    3 => 1,
    5 => 1,
    1 => 1,
    4 => 1,
    7 => 1,
    8 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      

{


$newChild->{
'b'
}->{${$newChild->{
'id'
}}}
    ->{'child'} = [];


}

;
    } else {
      my $v;
      

{


$v = $nc_parent->{
'b'
}->{${$nc_parent->{
'id'
}}}
         ->{'child'};


}

;
      RP: for my $i (0..$#$v) {
        my $nodeid = $v->[$i];
        if (
(${$new_child[0]->{'id'}} eq ${$nodeid})
) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    

{


$nc->{
'b'
}->{${$nc->{
'id'
}}}
    ->{'parent'} = $self->{
'id'
};


}

;
  }

  my $children;
  

{


$children = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'child'};


}

;

  

{


## -- Adds to children list
    push @$children, map {
      
$_->{'id'}

    } @new_child;
    $r = $newChild;
  


}

;

  

;

  

;



}


;}

;


}

;


}
$r}
sub insert_before ($$;$) {
my ($self, $newChild, $refChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
if ($self_od->
strict_error_checking
) {
  my $anode = $self;
  while (defined $anode) {
    if ($anode eq $newChild) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_before', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_ANCESTOR_OR_SELF', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;
    }
    $anode = $anode->
parent_node
;
  }
}
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    3 => 1,
    5 => 1,
    1 => 1,
    4 => 1,
    7 => 1,
    8 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    3 => 1,
    5 => 1,
    1 => 1,
    4 => 1,
    7 => 1,
    8 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

{


# tc:ForAppendChild & tc:ForReplaceChild
    if (defined $refChild) {
      if ($refChild eq $newChild) {
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#insert-before-itself', 'rdata' => $refChild, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
        


}

;
        

;
      }

      my $cns = $self->
child_nodes
;
      my $cnsl = @$cns;
      C: {
        $index = 0;
        for my $i (0..($cnsl-1)) {
          my $cn = $cns->[$i];
          if ($cn eq $refChild) {
            $index += $i;
            last C;
          } elsif ($cn eq $newChild) {
            $index = -1; # offset
          }
        }
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'refChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $refChild;


}


;}

;
        


}

;
        

;
      } # C
    } else { # |oldChild| is not defined
      

;
    }
  


}

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      

{


$newChild->{
'b'
}->{${$newChild->{
'id'
}}}
    ->{'child'} = [];


}

;
    } else {
      my $v;
      

{


$v = $nc_parent->{
'b'
}->{${$nc_parent->{
'id'
}}}
         ->{'child'};


}

;
      RP: for my $i (0..$#$v) {
        my $nodeid = $v->[$i];
        if (
(${$new_child[0]->{'id'}} eq ${$nodeid})
) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    

{


$nc->{
'b'
}->{${$nc->{
'id'
}}}
    ->{'parent'} = $self->{
'id'
};


}

;
  }

  my $children;
  

{


$children = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'child'};


}

;

  

;

  

{


## -- Adds to children list
    if ($index == -1) {
      push @$children, map {
        
$_->{'id'}

      } @new_child;
    } else {
      splice @$children, $index, 0, map {
        
$_->{'id'}

      } @new_child;
    }
    $r = $newChild;
  


}

;

  

;



}


;}

;


}

;


}
$r}
sub replace_child ($$$) {
my ($self, $newChild, $oldChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
if ($self_od->
strict_error_checking
) {
  my $anode = $self;
  while (defined $anode) {
    if ($anode eq $newChild) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_ANCESTOR_OR_SELF', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::Element::ManakaiDOMElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;
    }
    $anode = $anode->
parent_node
;
  }
}
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    3 => 1,
    5 => 1,
    1 => 1,
    4 => 1,
    7 => 1,
    8 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    3 => 1,
    5 => 1,
    1 => 1,
    4 => 1,
    7 => 1,
    8 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

{


# tc:ForAppendChild & tc:ForReplaceChild
    if (defined $oldChild) {
      if ($oldChild eq $newChild) {
        

;
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#replace-by-itself', 'rdata' => $oldChild, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
        


}

;
      }

      my $cns = $self->
child_nodes
;
      my $cnsl = @$cns;
      C: {
        $index = 0;
        for my $i (0..($cnsl-1)) {
          my $cn = $cns->[$i];
          if ($cn eq $oldChild) {
            $index += $i;
            last C;
          } elsif ($cn eq $newChild) {
            $index = -1; # offset
          }
        }
        

;
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $oldChild;


}


;}

;
        


}

;
      } # C
    } else { # |oldChild| is not defined
      

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $oldChild;


}


;}

;
      


}

;
    }
  


}

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      

{


$newChild->{
'b'
}->{${$newChild->{
'id'
}}}
    ->{'child'} = [];


}

;
    } else {
      my $v;
      

{


$v = $nc_parent->{
'b'
}->{${$nc_parent->{
'id'
}}}
         ->{'child'};


}

;
      RP: for my $i (0..$#$v) {
        my $nodeid = $v->[$i];
        if (
(${$new_child[0]->{'id'}} eq ${$nodeid})
) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    

{


$nc->{
'b'
}->{${$nc->{
'id'
}}}
    ->{'parent'} = $self->{
'id'
};


}

;
  }

  my $children;
  

{


$children = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'child'};


}

;

  

;

  

;

  

{


## -- Replaces the node
    splice @$children, $index, 1, map {
      
$_->{'id'}

    } @new_child;
    

{

CORE::delete 
$oldChild->{
'b'
}->{${$oldChild->{
'id'
}}}
                 ->{'parent'};


}

;
    $r = $oldChild;
  


}

;



}


;}

;


}

;


}
$r}
sub manakai_append_text ($$) {
my ($self, $string) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$lc = $self->
last_child
;
  if (defined $lc and
      $lc->
node_type
 == 
3
) {
    $lc->
manakai_append_text

           (ref $string eq 'SCALAR' ? $string : \$string);
  } else {
    my $text = $self->
owner_document

                    ->
create_text_node
 
                        (ref $string eq 'SCALAR' ? $$string : $string);
    $self->
append_child
 ($text);
  }
  $r = $self;



}


;}

;


}
$r}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$v;


{


$v = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'xname'};


}

;
$r = $$v;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XML::ManakaiDOMEntityReference', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub get_feature ($$$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


}

{


$version = '' unless defined $version;


}
my $r;

{


$feature =~ s/^\+//;


{

if 
($Message::Util::AutoLoad::Registry::Feature->{$feature}->{$version}) {
  $r = $self;
}


}

;
unless (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->SUPER::get_feature ($feature, $version);
  


}


;}

;
}


}
$r}
sub base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$pe = $self->
parent_node
;
  W: {
    while (defined $pe) {
      my $nt = $pe->
node_type
;
      if ($nt == 
1 or
          
$nt == 
2 or
          
$nt == 
9 or
          
$nt == 
11 or
          
$nt == 
6
) {
        $r = $pe->
base_uri
;
        last W;
      } elsif ($nt == 
5
) {
        if ($pe->
manakai_external
) {
          $r = $pe->
manakai_entity_base_uri
;
          last W;
        }
      }
      $pe = $pe->
parent_node
;
    }
    if ($pe) {
      $r = $pe->
base_uri
;
    } else {
      $r = $self->
owner_document
->
base_uri
;
    }
  } # W



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XML::ManakaiDOMEntityReference', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'base_uri';
}
}
sub manakai_expanded ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'xpnded'};


}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'xpnded'} = $given;


}

;


}
}
}
sub manakai_entity_base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'entburi'};


}

;
unless (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
base_uri
;
  


}


;}

;
}


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'entburi'} = $given;


}

;


}
}
}
sub manakai_external ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'extent'};


}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'extent'} = $given;


}

;


}
}
}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XML::ManakaiDOMEntityReference>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::DOM::XML::ManakaiDOMEntityReference>} = 14.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XML::ManakaiDOMEntityReference>}->{compat_class}->{q<Message::DOM::XML::ManakaiDOMEntityReference>} = 1;
$Message::Util::Grove::ClassProp{q<Message::DOM::XML::ManakaiDOMEntityReference>} = {'o0',
['parent'],
's1a',
['child'],
'w0',
['od']};
package Message::DOM::IFLatest::ProcessingInstruction;
our $VERSION = 20061105.0848;
package Message::DOM::XML::ManakaiDOMProcessingInstruction;
our $VERSION = 20061105.0848;
push our @ISA, 'Message::DOM::TreeCore::ManakaiDOMNode',
'Message::DOM::IF::Node',
'Message::DOM::IF::ProcessingInstruction',
'Message::DOM::IFLatest::Node',
'Message::DOM::IFLatest::ProcessingInstruction',
'Message::DOM::IFLevel1::Node',
'Message::DOM::IFLevel1::ProcessingInstruction',
'Message::DOM::IFLevel2::Node',
'Message::DOM::IFLevel2::ProcessingInstruction',
'Message::DOM::IFLevel3::Node',
'Message::DOM::IFLevel3::ProcessingInstruction';
sub ___create_node_stem ($$$$) {
my ($self, $bag, $obj, $opt) = @_;
my $r = {};

{


{

if 
(defined ${$opt->{'target'}}) {
  if (ref ${$opt->{'target'}} eq 'SCALAR') {
    $obj->{'target'} = ${$opt->{'target'}};
  } elsif (defined $Message::Util::ManakaiStringRef::Value{${$opt->{'target'}}}) {
    $obj->{'target'} = $Message::Util::ManakaiStringRef::Value{${$opt->{'target'}}};
  } else {
    require Scalar::Util;
    $obj->{'target'} = $Message::Util::ManakaiStringRef::Value{${$opt->{'target'}}} = \(${$opt->{'target'}});
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{${$opt->{'target'}}});
  }
} else {
  CORE::delete $obj->{'target'};
}


}

;
$obj->{
'con'
} = $opt->{
'con'
};


{


$obj->{'od'} = $opt->{'od'}->{
'id'
};
$bag->{${$opt->{'od'}->{
'id'
}}}
    ->{'do'}->{${$obj->{
'id'
}}}
  = $obj->{
'id'
};


}

;
$r = $obj;


}
$r}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 7;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XML::ManakaiDOMProcessingInstruction', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub child_nodes ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


$r = bless [], 
'Message::DOM::TreeCore::ManakaiDOMEmptyNodeList'
;


}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XML::ManakaiDOMProcessingInstruction', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'child_nodes';
}
}
sub append_child ($$) {
my ($self, $newChild) = @_;
my $r;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::CharacterData::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;


}
$r}
sub insert_before ($$;$) {
my ($self, $newChild, $refChild) = @_;
my $r;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_before', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::CharacterData::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;


}
$r}
sub replace_child ($$$) {
my ($self, $newChild, $oldChild) = @_;
my $r;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::CharacterData::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;


}
$r}
sub manakai_append_text ($$) {
my ($self, $string) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
($self->
owner_document

           ->
strict_error_checking and
      
$self->
manakai_read_only
) {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'manakai_append_text', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::CharacterData::ManakaiDOMCharacterData';


}


;}

;
  }
  my $v;
  

{


$v = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'con'};


}

;
  $$v .= ref $string eq 'SCALAR' ? $$string : $string;
  $r = $self;



}


;}

;


}
$r}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$v;


{


$v = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'target'};


}

;
$r = $$v;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XML::ManakaiDOMProcessingInstruction', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_value ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
data
;



}


;}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $self->
data
 ($given);



}


;}

;


}
}
}
sub text_content ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
data
;



}


;}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $self->
data

           (defined $given ? $given : '');



}


;}

;


}
}
}
sub get_feature ($$$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


}

{


$version = '' unless defined $version;


}
my $r;

{


$feature =~ s/^\+//;


{

if 
($Message::Util::AutoLoad::Registry::Feature->{$feature}->{$version}) {
  $r = $self;
}


}

;
unless (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->SUPER::get_feature ($feature, $version);
  


}


;}

;
}


}
$r}
sub base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'buri'};


}

;
unless (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$node = $self->
parent_node
;
    W: {
      while (defined $node) {
        my $nt = $node->
node_type
;
        if ($nt == 
1 or
            
$nt == 
9 or
            
$nt == 
11 or
            
$nt == 
10 or
            
$nt == 
6
) {
          $r = $node->
base_uri
;
          last W;
        } elsif ($nt == 
5
) {
          if ($node->
manakai_external
) {
            $r = $node->
manakai_entity_base_uri
;
            last W;
          }
        }
        $node = $node->
parent_node
;
      }
      if ($node) {
        $r = $node->
base_uri
;
      } else {
        $r = $self->
owner_document
->
base_uri
;
      }
    } # W
  


}


;}

;
}


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XML::ManakaiDOMProcessingInstruction', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'base_uri';
}
}
sub target ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$v;


{


$v = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'target'};


}

;
$r = $$v;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XML::ManakaiDOMProcessingInstruction', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'target';
}
}
sub data ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$v;


{


$v = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'con'};


}

;
$r = $$v;


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'con'} = \$given;


}

;


}
}
}
sub manakai_base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'buri'};


}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'buri'} = $given;


}

;


}
}
}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XML::ManakaiDOMProcessingInstruction>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::DOM::XML::ManakaiDOMProcessingInstruction>} = 14.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XML::ManakaiDOMProcessingInstruction>}->{compat_class}->{q<Message::DOM::XML::ManakaiDOMProcessingInstruction>} = 1;
$Message::Util::Grove::ClassProp{q<Message::DOM::XML::ManakaiDOMProcessingInstruction>} = {'o0',
['parent'],
'w0',
['od']};
for ($Message::DOM::IF::CDATASection::, $Message::DOM::IF::CharacterData::, $Message::DOM::IF::Entity::, $Message::DOM::IF::EntityReference::, $Message::DOM::IF::Node::, $Message::DOM::IF::Notation::, $Message::DOM::IF::ProcessingInstruction::, $Message::DOM::IF::Text::, $Message::DOM::IFLatest::CharacterData::, $Message::DOM::IFLatest::Node::, $Message::DOM::IFLatest::Text::, $Message::DOM::IFLevel1::CDATASection::, $Message::DOM::IFLevel1::CharacterData::, $Message::DOM::IFLevel1::Entity::, $Message::DOM::IFLevel1::EntityReference::, $Message::DOM::IFLevel1::Node::, $Message::DOM::IFLevel1::Notation::, $Message::DOM::IFLevel1::ProcessingInstruction::, $Message::DOM::IFLevel1::Text::, $Message::DOM::IFLevel2::CDATASection::, $Message::DOM::IFLevel2::CharacterData::, $Message::DOM::IFLevel2::Entity::, $Message::DOM::IFLevel2::EntityReference::, $Message::DOM::IFLevel2::Node::, $Message::DOM::IFLevel2::Notation::, $Message::DOM::IFLevel2::ProcessingInstruction::, $Message::DOM::IFLevel2::Text::, $Message::DOM::IFLevel3::CDATASection::, $Message::DOM::IFLevel3::CharacterData::, $Message::DOM::IFLevel3::Entity::, $Message::DOM::IFLevel3::EntityReference::, $Message::DOM::IFLevel3::Node::, $Message::DOM::IFLevel3::Notation::, $Message::DOM::IFLevel3::ProcessingInstruction::, $Message::DOM::IFLevel3::Text::){}
## License: <http://suika.fam.cx/~wakaba/archive/2004/8/18/license#Perl+MPL>
1;
