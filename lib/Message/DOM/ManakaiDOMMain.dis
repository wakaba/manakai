Namespace:
  @DOMCore:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
  @lang:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @perl:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#Perl--
  @license:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOMImplementationException:
     http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @MDOM_EXCEPTION:
     http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @TreeCore:
     \
Module:
  @Name: ManakaiDOMMain
  @FullName:
    @@lang:en
    @@@: Manakai DOM Implementation Main Module
  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  
  @License:
     license:Perl
  @Date.RCS:
     $Date: 2004/09/20 13:58:44 $
  
  @Description:
    @@lang:en
    @@@:
      The Manakai DOM Implementation Main Module defines 
      the fundemental interfaces that is used commonly by the 
      manakai DOM implementation.

  @Feature:
    @@QName: 
      ManakaiDOM:ManakaiDOM
    @@Version: 1.0
    @@Description:
      @@@lang:en
      @@@@:
        The Manakai DOM Implementation Main Module, version 1.0.

  @Require:
    @@Module:
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@require:
          Message::Util::Error
    @@Module:
      @@@Name: ManakaiDOMMain
      @@@Namespace:
        http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@: 0;
      @@@Def:\
      @@@Description:
        @@@@lang:en
        @@@@@: Dummy.
    @@Module:
      @@@Name: DOMCore
      @@@Namespace:
        http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@: 0;
      @@@Def:\
      @@@Description:
        @@@@lang:en
        @@@@@: Dummy.

DataType:
  @Name: ManakaiDOMURI
  @ISA: 
    DOMMain:DOMString
  @FullName: 
    @@lang:en
    @@@: DOMString (DOM URI)
  @Description:
    @@lang:en
    @@@:
      A DOM URI.  It is a specialized case of the "DOMString" and 
      that met the conditions:
    \
      1. An absolute identifier absolutely identifies a resource on the Web.
    \
      2. Simple string equality of absolute resource identifiers. 
      No other equaivalence is considered significant to the 
      DOM specification.
    \
      3. A relative identifier is easily detected and made absolute 
      relative to an absolute identifier.
    \
      4. Retrieval of content of a resource may be accomplished 
      where required.
  @ImplNote:
    @@lang:en
    @@@:
      Examples of the DOM URIs include the URI references and 
      the IRI references.

DataType:
  @Name: ManakaiDOMNamespaceURI
  @ISA: 
    DOMMain:DOMString
  @FullName:
    @@lang:en
    @@@: DOMString (Namespace URI)
  @Description:
    @@lang:en
    @@@:
      A namespace URI.  In general, the DOM implementation does not 
      perform any URI normalization or canonicalization.  The URIs 
      given to the DOM are assumed to be valid and no lexical 
      checking is performed.
      
      Absolute URI references are treated 
      as strings and compared literally.  How relative namespace URI 
      references are treated is undefined.  DOM applications should 
      use "null" if they wish to have no namespace.
      
      Some programing languages can differentiate empty strings 
      from "null".  Empty strings were specified as a legal namespace 
      URI in the DOM Level 2 Specification but the DOM Level 2 Errata 
      refines this as the implementaton dependent matter.  The 
      DOM Level 3 Specification again refines to be converted to "null".
  @ImplNote:
    @@lang:en
    @@@: 
      The "dis2pm.pl" is coded so that if the input (the parameter of 
      a method or the given value of an attribute) is typed as 
      "ManakaiDOMNamespaceURI", the Perl code to check the empty 
      string is outputed as part of the implementation.

DataType:
  @Name: ManakaiDOMFeatureName
  @ISA: 
    DOMMain:DOMString
  @FullName:
    @@lang:en
    @@@: DOMString (feature name)
  @Description:
    @@lang:en
    @@@:
      The DOM feature name.

DataType:
  @Name: ManakaiDOMFeatureVersion
  @ISA: 
    DOMMain:DOMString
  @FullName:
    @@lang:en
    @@@: DOMString (feature version)
  @Description:
    @@lang:en
    @@@: The DOM feature version.

DataType:
  @Name: ManakaiDOMFeatures
  @ISA: 
    DOMMain:DOMString
  @FullName:
    @@lang:en
    @@@: DOMString (features)
  @Description:
    @@lang:en
    @@@: The DOM features and versions.

Exception:
  @Name: ManakaiDOMImplementationException
  @Description:
    @@lang:en
    @@@:
      Exceptions not covered by the language- and platform-independent 
      official DOM specifications.

  @Attr:
     @@Name:  code
     @@Get:
       @@@Type:  unsigned-short
       @@@Description:
         @@@@lang:en
         @@@@@:
           The error code from the constant value group
           "ManakaiDOMImplementationExceptionCode".

  @ConstGroup:
    @@Name: ManakaiDOMImplementationExceptionCode

    @@Const:
      @@@Name: MDOM_TYPE_MISMATCH_ERR
      @@@Type: unsigned-short
      @@@Value: 0
      @@@Description:
        @@@@lang:en
        @@@@@:
          The type of an object is incompatible with the expected 
          type of the parameter.
      @@@Description:
        @@@@lang:en
        @@@@Type:
          lang:muf
        @@@@@:
            The type of an object specified as the value of parameter
            %t (name => {<Q:MDOM_EXCEPTION:param-name>},
            prefix => { "}, suffix => {"}); is incompatible with the
            expected type%t (name => {<Q:MDOM_EXCEPTION:class>}, 
            prefix => {: "}, suffix => {"}).
      @@@Param:
        @@@@QName:
          ManakaiDOMImplementationException:param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter name.
          
      @@@Param:
        @@@@QName:
          ManakaiDOMImplementationException:class
        @@@@Type:
          perl:package-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: Class name to which given value belongs.
          

    @@Const:
      @@@Name: PARAM_NULL_POINTER
      @@@Type: unsigned-short
      @@@Value: 1
      @@@Description:
        @@@@lang:en
        @@@@@: The null value is passed as a parameter.
      @@@Description:
        @@@@lang:en
        @@@@Type:
          lang:muf
        @@@@@:
            The null value is passed to the parameter%t (
            name => {<Q:MDOM_EXCEPTION:param-name>},
            prefix => { "}, suffix => {"});.
      @@@Param:
        @@@@QName:
          ManakaiDOMImplementationException:param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The name of the parameter to which the null value is given.

    @@Const:
      @@@Name: MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR
      @@@Type: unsigned-long
      @@@Value: 2
      @@@Description:
        @@@@lang:en
        @@@@@: 
          An attempt to break surrogate pair, i.e. the first character of 
          the range is the low-surrogate (the second 16-bit unit of the surrogate
          pair) or the last character of the range is the high-surrogate 
          (the first 16-bit unit of the surrogate pair).
      @@@Param:
        @@@@QName:
          ManakaiDOMImplementationException:param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter to which inappropriate value is specified.

    @@Const:
      @@@Name: MDOM_DEBUG_BUG
      @@@Type: unsigned-short
      @@@Value: 3
      @@@Description:
        @@@@lang:en
        @@@@@:
          Unexpected case occurs.  In general, this exception is not 
          reported.  If the DOM implementation has a bug and 
          something unexpected is occur, this exception is raised. 
        \
          DOM application MUST NOT try to catch this exception. 
          If this exception is raised, please report to the 
          author of that module.
      @@@Param:
        @@@@QName:
          ManakaiDOMImplementationException:values
        @@@@Type: 
          perl:hash
        @@@@Description:
          @@@@@lang:en
          @@@@@@: Arbitrary values for debugging.
  
  @Const:
    @@Name: MDOM_IMPL_BY_APP
    @@Type: unsigned-short
    @@Value: 4
    @@Description:
      @@@lang:en
      @@@@:
        The method or attribute called is part of the callback 
        interface so that the DOM application must implement it.

Warning:
  @Name: ManakaiDOMImplementationWarning
  @Description:
    @@lang:en
    @@@:
      Warnings for the implementation dependent matters and 
      "no effect" actions.
  
  @Attr:
     @@Name:  code
     @@Get:
       @@@Type:  unsigned-short
       @@@Description:
         @@@@lang:en
         @@@@@:
           The warning code from the constant value group
           ManakaiDOMImplementationWarningCode.

  @ConstGroup:
    @@Name: ManakaiDOMImplementationWarningCode
    
    @@Const:
      @@@Name: ATTR_SET_NO_EFFECT
      @@@Type: unsigned-short
      @@@Value: 0
      @@@Description:
        @@@@lang:en
        @@@@@:
          Setting an attribute value has no effect by definition.

    @@Const:
      @@@Name: MDOM_NEWCHILD_IS_REFCHILD
      @@@Type: unsigned-short
      @@@Value: 1
      @@@Description:
        @@@@lang:en
        @@@@@:
          The node to be inserted is same as the reference node.
      @@@Param:
        @@@@QName:
          MDOM_EXCEPTION:newChild-param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter name for "newChild" node.
      @@@Param:
        @@@@QName:
          MDOM_EXCEPTION:refChild-param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter name for "refChild" node.
    
    @@Const:
      @@@Name: MDOM_NS_EMPTY_URI
      @@@Type: unsigned-short
      @@@Value: 4
      @@@Description:
        @@@@lang:en
        @@@@@:
          The DOM Level 2 Core Specification defines that even the empty 
          string is treated as a real namespace URI.  The Errata for 
          the DOM Level 2 Specifications says that it is an error and 
          the way empty strings are treated is implementation dependent. 
          The DOM Level 3 Core Specification defines that empty strings 
          are converted to "null".
      @@@Param:
        @@@@QName:
          ManakaiDOMImplementationException:param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter to which inappropriate value is specified.

IF:
  @Name: ManakaiDOMObject
  @Description:
    @@lang:en
    @@@:
      The common interface that is implemented by all Manakai DOM objects.
  @ImplNote:
    @@lang:en
    @@@:
      "ISA" attribute whose value is "ManakaiDOMObject" MUST NOT 
      be written in the "dis" files.  It will be generated by 
      converters such as "dis2pm.pl".
  

## TODO:  ___report_error

IF:
  @Name: ManakaiDOMNodeObject
  @Description:
    @@lang:en
    @@@:
      An internal node object.  This interface defines a number of basic 
      operations to the node or the grove. 
  \
  @ImplNote:
    @@lang:en
    @@@:
      In manakai DOM implementation, most of DOM objects such as 
      "Element" or "Document" are implemented as a reference 
      (implementing the "ManakaiDOMNodeReference" interface) to 
      the node object.
  @IntMethod:
    @@Name: new
    @@Description:
      @@@lang:en
      @@@@: 
        Construct a new "ManakaiDOMNodeObject" object.
    @@Return:
      @@@Type: ManakaiDOMNodeObject
      @@@Description:
        @@@@lang:en
        @@@@@: The new "ManakaiDOMNodeObject" created.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          $r = bless {
            <Q:TreeCore:origin> => [],
            <Q:TreeCore:subnode> => [],
            <Q:TreeCore:subnode2> => [],
            <Q:TreeCore:irefnode> => [],
            <Q:TreeCore:urefnode> => [],
            <Q:TreeCore:anydata> => [],
            <Q:TreeCore:rc> => 0,
            <Q:TreeCore:treeID> => __CODE{UniqueID}__,
            <Q:TreeCore:nodeID> => __CODE{UniqueID}__,
            <Q:DOMCore:hasFeature> => {},
          }, ref $self || $self;
  @IntMethod:
    @@Name: newReference
    @@Description:
      @@@lang:en
      @@@@: Return a new reference to the node.
    @@Param:
      @@@Name: class
      @@@Description:
        @@@@lang:en
        @@@@@: A class the new reference is blessed with.
      @@@IsOptional:1
    @@Return:
      @@@Type: ManakaiDOMNodeReference
      @@@Description:
        @@@@lang:en
        @@@@@: A new reference to the node.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          $r = bless {
            <Q:TreeCore:node> => $self,
          }, ref $class ? ref $class : $class ? $class :
             '__CLASS{ManakaiDOMNodeReference::}__';
          $self->{<Q:TreeCore:rc>}++;
  @IntMethod:
    @@Name: isExternallyReferred
    @@Description:
      @@@lang:en
      @@@@: Check whether the tree is externally referred or not.
    @@Return:
      @@@Type: boolean
      @@@InCase:
        @@@@Value: true
        @@@@Description:
          @@@@@lang:en
          @@@@@@: There is a node referred externally.
      @@@InCase:
        @@@@Value: false
        @@@@Description:
          @@@@@lang:en
          @@@@@@: No external reference to the node in this tree found.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          if ($self->{<Q:TreeCore:rc>}) {
            $r = true;
          } else {
            ## Up - toward root node
            for my $key (@{$self->{<Q:TreeCore:origin>}}) {
              if ($self->{$key}) {
                if ($self->{$key}
                    ->__SUPER{ManakaiDOMNodeObject::}__::__INT{isExternallyReferred}__) {
                  $r = true;
                  last;
                }
              }
            }
            ## Down - toward leaf nodes
            unless (@{$self->{<Q:TreeCore:origin>}}) {
              SUBNODES:
              for my $key (@{$self->{<Q:TreeCore:subnode>}}) {
                for (ref $self->{$key} eq 'ARRAY' ? @{$self->{$key}}
                                                  : values %{$self->{$key}}) {
                  if ($_->__SUPER{ManakaiDOMNodeObject::}__::__INT{isExternallyReferredDownward}__) {
                    $r = true;
                    last SUBNODES;
                  }
                }
              }
              SUBNODES2:
              for my $key (@{$self->{<Q:TreeCore:subnode2>}}) {
                for (ref $self->{$key} eq 'ARRAY' ? @{$self->{$key}}
                                                  : values %{$self->{$key}}) {
                  for (ref $_ eq 'ARRAY' ? @$_ : values %$_) {
                    if ($_->__SUPER{ManakaiDOMNodeObject::}__::__INT{isExternallyReferredDownward}__) {
                      $r = true;
                      last SUBNODES2;
                    }
                  }
                }
              }
            }
          }
  @IntMethod:
    @@Name: isExternallyReferredDownward
    @@Description:
      @@@lang:en
      @@@@: Check whether the node or any of subnodes is externally referred.
    @@Return:
      @@@Type: boolean
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          if ($self->{<Q:TreeCore:rc>}) {
            $r = true;
          } else {
            SUBNODES:
            for my $key (@{$self->{<Q:TreeCore:subnode>}}) {
              for (ref $self->{$key} eq 'ARRAY' ? @{$self->{$key}}
                                                : values %{$self->{$key}||{}}) {
                if ($_->__SUPER{ManakaiDOMNodeObject::}__::__INT{isExternallyReferredDownward}__) {
                  $r = true;
                  last SUBNODES;
                }
              }
            }
            SUBNODES2:
            for my $key (@{$self->{<Q:TreeCore:subnode2>}}) {
              for (ref $self->{$key} eq 'ARRAY' ? @{$self->{$key}}
                                                : values %{$self->{$key}||{}}) {
                for (ref $_ eq 'ARRAY' ? @$_ : values %$_) {
                  if ($_->__SUPER{ManakaiDOMNodeObject::}__::__INT{isExternallyReferredDownward}__) {
                    $r = true;
                    last SUBNODES2;
                  }
                }
              }
            }
          }
  @IntMethod:
    @@Name: destroy
    @@Description:
      @@@lang:en
      @@@@: Destroy this tree.
    @@Return:
      @@@Def:
        @@@@Type: 
          lang:Perl
        @@@@@:
          $_->__SUPER{ManakaiDOMNodeObject::}__::__INT{destroyDownward}__
          for @{$self->__SUPER{ManakaiDOMNodeObject::}__::__INT{getRootNodes}__};
  @IntMethod:
    @@Name: destroyDownward
    @@Description:
      @@@lang:en
      @@@@: Destroy this node and subnodes.
    @@Return:
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          delete $self->{$_} for @{$self->{<Q:TreeCore:origin>}};
          for my $key (@{$self->{<Q:TreeCore:subnode>}}) {
            my @node = ref $self->{$key} eq 'ARRAY' ? @{$self->{$key}}
                                         : values %{$self->{$key}||{}};
            delete $self->{$key};
            $_->__SUPER{ManakaiDOMNodeObject::}__::__INT{destroyDownward}__
                                                                   for @node;
          }
          for my $key (@{$self->{<Q:TreeCore:subnode2>}}) {
            my @node = map {ref $_ eq 'ARRAY' ? @$_ : values %$_}
                       ref $self->{$key} eq 'ARRAY' ? @{$self->{$key}}
                                         : values %{$self->{$key}||{}};
            delete $self->{$key};
            $_->__SUPER{ManakaiDOMNodeObject::}__::__INT{destroyDownward}__
                                                                   for @node;
          }
   \       for my $key (@{$self->{<Q:TreeCore:irefnode>}},
   \                    @{$self->{<Q:TreeCore:urefnode>}},
   \                    @{$self->{<Q:TreeCore:anydata>}}) {
            if (ref $self->{$key} eq 'ARRAY') {
              for (@{$self->{$key}}) {
                delete $self->{$key}->{$_};
              }
            } elsif (ref $self->{$key} eq 'HASH') {
              for (keys %{$self->{$key}}) {
                delete $self->{$key}->{$_};
              }
            } else {
              delete $self->{$key};
            }
          }
  @IntMethod:
    @@Name: importTree
    @@Description:
      @@@lang:en
      @@@@: Change internal tree identifier to be same as this node.
    @@Param:
      @@@Name: node
      @@@Type: ManakaiDOMNodeObject
      @@@Description:
        @@@@lang:en
        @@@@@: The node that belongs to the tree the identifier is changed.
    @@Return:
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          unless ($node->{<Q:TreeCore:treeID>} eq $self->{<Q:TreeCore:treeID>}) {
            $_->__SUPER{ManakaiDOMNodeObject}__::__INT{changeTreeIDDownward}__
                                                  ($self->{<Q:TreeCore:treeID>})
              for @{$node->__SUPER{ManakaiDOMNodeObject}__::__INT{getRootNodes}__};
          }
  @IntMethod:
    @@Name: changeTreeIDDownward
    @@Description:
      @@@lang:en
      @@@@:
        Change internal tree identifier of the node and subnodes.
        This method is intended to be used by the internal method 
        importTree.
    @@Param:
      @@@Name: treeID
      @@@Type: 
        DOMMain:DOMString
      @@@Description:
        @@@@lang:en
        @@@@@:
          The new tree identifier to which the tree identifier of this node
          is changed.
    @@Return:
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          $self->{<Q:TreeCore:treeID>} = ''.$treeID;
          for my $key (@{$self->{<Q:TreeCore:subnode>}}) {
            for (ref $self->{$key} eq 'ARRAY' ? @{$self->{$key}}
                                              : values %{$self->{$key}||{}}) {
              $_->__SUPER{ManakaiDOMNodeObject::}__::__INT{changeTreeIDDownward}__ ($treeID);
            }
          }
          for my $key (@{$self->{<Q:TreeCore:subnode2>}}) {
            for (ref $self->{$key} eq 'ARRAY' ? @{$self->{$key}}
                                              : values %{$self->{$key}||{}}) {
              for (ref $_ eq 'ARRAY' ? @$_ : values %$_) {
                $_->__SUPER{ManakaiDOMNodeObject::}__::__INT{changeTreeIDDownward}__ ($treeID);
              }
            }
          }
  @IntMethod:
    @@Name: getRootNodes
    @@Description:
      @@@lang:en
      @@@@:
        Get all root nodes (i.e. nodes that does not have the origin) in 
        the tree. 
    @@Return:
      @@@Type:
        perl:ARRAY
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          for (@{$self->{<Q:TreeCore:origin>}}) {
            NEW: for my $new (@{$self->{$_}
                ->__SUPER{ManakaiDOMNodeObject::}__::__INT{getRootNodes}__}) {
              for my $old (@$r) {
                next NEW if $old eq $new;
              }
              push @$r, $new;
            }
          }
          push @$r, $self if @$r == 0;
  @IntMethod:
    @@Name: isSameNode
    @@Description:
      @@@lang:en
      @@@@: Check whether the two nodes are same or not.
    @@Operator:
      @@@Type:
        lang:Perl
      @@@@: eq
    @@Param:
      @@@Name: node
      @@@Type: ManakaiDOMNodeObject
      @@@Description:
        @@@@lang:en
        @@@@@: The node to be compared.
    @@Return:
      @@@Type: boolean
      @@@Description:
        @@@@lang:en
        @@@@@: Whether the two nodes are same or not.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          if (ref $node and
              $node->isa ('__IF{ManakaiDOMNodeObject::}__') and
              $node->{<Q:TreeCore:nodeID>} eq $self->{<Q:TreeCore:nodeID>}) {
            $r = true;
          }
  @IntMethod:
    @@Name: orhpanate
    @@Description:
      @@@lang:en
      @@@@:
        Change the tree identifier or destroy the tree if it is 
        no longer referred.
    @@Return:
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          if ($self->__SUPER{ManakaiDOMNodeObject::}__::__INT{isExternallyReferred}__) {
            $_->__SUPER{ManakaiDOMNOdeObject::}__::__INT{changeTreeIDDownward}__
                                                           (__CODE{UniqueID}__)
              for @{$self->__SUPER{ManakaiDOMNodeObject::}__::__INT{getRootNodes}__};
          } else {
            $self->__SUPER{ManakaiDOMNodeObject::}__::__INT{destroy}__;
          }

IF:
  @Name: ManakaiDOMNodeReference
  @IntMethod:
    @@Name: destroy
    @@Description:
      @@@lang:en
      @@@@: Destroy this reference object.
    @@Operator:
      @@@Type:
        lang:Perl
      @@@@: DESTROY
    @@Return:
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          my $node = $self->{<Q:TreeCore:node>};
          delete $self->{<Q:TreeCore:node>};
          $node->{<Q:TreeCore:rc>}--;
          unless ($node->__SUPER{ManakaiDOMNodeObject::}__::__INT{isExternallyReferred}__) {
            $node->__SUPER{ManakaiDOMNodeObject::}__::__INT{destroy}__;
          }

## - For ManakaiDOMNodeObject
## TreeCore:nodeID  - The world-unique identifier of the node object.
## TreeCore:origin  - Hash key names of the origin properties.
## TreeCore:rc      - The number that denotes how many external references 
##                    ("ManakaiDOMNodeReference"s) there are.
## TreeCore:subnode - Hash key names of subnode properties.
## TreeCore:subnode2 - Hash key names of two-step subnode properties.
## TreeCore:treeID  - The world-unique identifier of the grove.
## - For ManakaiDOMNodeReference
## TreeCore:node    - The node object ("ManakaiDOMNodeObject") to which
##                    this is referring.

## ManakaiDOMMain.dis ends here
