Module:
  @QName: 
    MDOM:ManakaiDOMMain
  @FullName:
    @@lang:en
    @@@: Manakai DOM Implementation Main Module
  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  
  @Author:
    @@FullName:Wakaba
    @@Mail:w@suika.fam.cx
  @License:
     license:Perl+MPL
  @Date:
    @@@:
      $Date: 2004/11/27 10:59:09 $
    @@ContentType:
      dis:Date.RCS
  
  @Description:
    @@lang:en
    @@@:
      The Manakai DOM Implementation Main Module defines 
      the fundemental interfaces that is used commonly by the 
      manakai DOM implementation.

  @DefaultFor:
    ManakaiDOM:ManakaiDOMCommon

  @Feature:
    @@QName: 
      ManakaiDOM:ManakaiDOM
    @@Version: 1.0
    @@Description:
      @@@lang:en
      @@@@:
        The Manakai DOM Implementation Main Module, version 1.0.
    @@Contrib:
      DOMCore:DOMImplementation::DOM1
    @@Contrib:
      DOMCore:DOMImplementation::DOM2
    @@Contrib:
      DOMCore:DOMImplementation::DOM3

  @Require:
    @@Module:
      @@@Name: DISCore
    @@Module:
      @@@Name: DOMMain
    @@Module:
      @@@Name: ManakaiDOMMain
      @@@WithFor: ManakaiDOMCommon
    @@Module:
      @@@Name: ManakaiDOMMain
      @@@WithFor: ManakaiDOMLatest
      @@@For: ManakaiDOMCommon

Namespace:
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @DOMCore:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
  @lang:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @perl:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#Perl--
  @license:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @MDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.
  @MDOMX:
     http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @MUError:\
  @MUErrorCore:-
  @owl:
    http://www.w3.org/2002/07/owl#
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#
  @TreeCore:\

ForDef:
  @QName:
      ManakaiDOM:IDL
  @FullName:
    @@lang:en
    @@@: DOM IDL
ForDef:
  @QName:
      ManakaiDOM:Perl
  @FullName:
    @@lang:en
    @@@: Perl 5
ForDef:
  @QName:
      ManakaiDOM:DOM
  @FullName:
    @@lang:en
    @@@:DOM
ForDef:
  @QName:
      ManakaiDOM:DOM1
  @FullName:
    @@lang:en
    @@@:DOM Level 1
  @ISA:
      ManakaiDOM:DOM
ForDef:
  @QName:
      ManakaiDOM:DOM2
  @FullName:
    @@lang:en
    @@@:DOM Level 2
  @ISA:
      ManakaiDOM:DOM1
ForDef:
  @QName:
      ManakaiDOM:DOM3
  @FullName:
    @@lang:en
    @@@:DOM Level 3
  @ISA:
      ManakaiDOM:DOM2
ForDef:
  @QName:
      ManakaiDOM:DOMLatest
  @FullName:
    @@lang:en
    @@@:The latest level of DOM
  @ISA:
      ManakaiDOM:DOM3
ForDef:
  @QName:
      ManakaiDOM:ManakaiDOM
  @FullName:
    @@lang:en
    @@@: The manakai DOM implementation
  @Implement:
      ManakaiDOM:DOM
  @ISA:
      ManakaiDOM:Perl
ForDef:
  @QName:
      ManakaiDOM:ManakaiDOM1
  @FullName:
    @@lang:en
    @@@:The manakai DOM Level 1 implementation
  @Implement:
      ManakaiDOM:DOM1
  @ISA:
      ManakaiDOM:ManakaiDOM
ForDef:
  @QName:
      ManakaiDOM:ManakaiDOM2
  @FullName:
    @@lang:en
    @@@:The manakai DOM Level 2 implementation
  @Implement:
      ManakaiDOM:DOM2
  @ISA:
      ManakaiDOM:ManakaiDOM1
ForDef:
  @QName:
      ManakaiDOM:ManakaiDOM3
  @FullName:
    @@lang:en
    @@@:The manakai DOM Level 3 implementation
  @Implement:
      ManakaiDOM:DOM3
  @ISA:
      ManakaiDOM:ManakaiDOM2
ForDef:
  @QName:
      ManakaiDOM:ManakaiDOMLatest
  @FullName:
    @@lang:en
    @@@:The manakai implementation of the latest level of DOM
  @Implement:
      ManakaiDOM:DOMLatest
  @ISA:
      ManakaiDOM:ManakaiDOM3
ForDef:
  @QName:
    ManakaiDOM:ManakaiDOMCommon
  @FullName:
    @@lang:en
    @@@: The manakai implementation of DOM, level independent
  @Implement:
    ManakaiDOM:DOM
  @ISA:
    ManakaiDOM:ManakaiDOM
ForDef:
  @QName:
    ManakaiDOM:Java
  @FullName:
    @@lang:en
    @@@: Java

ForDef:
  @QName:
    ManakaiDOM:ForIF
  @Description:
    @@lang:en
    @@@: An interface definition.
ForDef:
  @QName:
    ManakaiDOM:ForClass
  @Description:
    @@lang:en
    @@@: A class definition.

ElementTypeBinding:
  @Name: ResourceTypeDef
  @ElementType: 
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      rdfs:Class
    @@ISA:
      rdfs:Class

ResourceTypeDef:
  @Name: IF
  @Description:
    @@lang:en
    @@@:
      An interface.

ElementTypeBinding:
  @Name: DataTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DataType

ResourceTypeDef:
  @Name: ExceptionIF
  @Description:
    @@lang:en
    @@@:
      An exception type.
ResourceTypeDef:
  @Name: ExceptionClass
  @Description:
    @@lang:en
    @@@:
      A concrete implementation of exception.
ElementTypeBinding:
  @Name: ExceptionDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:ExceptionClass
    @@ISA: ManakaiDOMException
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:ManakaiDOMCommon
      @@@For:
        ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOMCommon

ResourceTypeDef:
  @Name: WarningClass
  @Description:
    @@lang:en
    @@@:
      A warning type.
ElementTypeBinding:
  @Name: WarningDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:WarningClass
    @@ISA: ManakaiDOMWarning
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:ManakaiDOMCommon
      @@@For:
        ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOMCommon

PropDef:
  @Name: exceptionOrWarningParameter
  @rdfs:domain: Const
  @Description:
    @@lang:en
    @@@:
      Declares the existence of an additional information about the exception.
ResourceTypeDef:
  @Name: ExceptionOrWarningSubType
  @Description:
    @@lang:en
    @@@:
      A subtype of an exception or warning.
ElementTypeBinding:
  @Name: XParam
  @ElementType:
    ManakaiDOM:exceptionOrWarningParameter
  @ShadowContent:
    @@ForCheck:
      ManakaiDOM:ManakaiDOM

ResourceTypeDef:
  @Name: ConstGroup
  @Description:
    @@lang:en
    @@@:
      A set of constant values.
ResourceTypeDef:
  @Name: Const
  @Description:
    @@lang:en
    @@@: A constant value.
ElementTypeBinding:
  @Name: Const
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: Const
PropDef:
  @QName: 
    dis:IsBitMask
  @dataType:
    DOMMain:boolean
  @Description:
    @@lang:en
    @@@:
      Whether the constant group is defined as bitmask values or not.

ResourceTypeDef:
  @Name: Class
  @Description:
    @@lang:en
    @@@:
      A programming language class.
ElementTypeBinding:
  @Name: ClassDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:Class
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:ManakaiDOMCommon
      @@@For:
        ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOMCommon
ResourceTypeDef:
  @Name: PrimitiveTypeClass
  @Description:
    @@lang:en
    @@@:
      A programing language primitive type class (aka wrapper class). 
      \
      <Q:PrimitiveTypeClass> may or may not have its instance object; 
      it is typically accessed via class method, not via object method.
  @ISA: Class

ResourceDef:
  @QName:
    MDOM:
  @rdf:type:
    dis:ModuleGroup
  @Description:
    @@lang:en
    @@@:
      The manakai DOM modules
  @AppName:
    @@@:
      Message::DOM::IFLatest::
    @@ContentType:
      lang:Perl
    @@For:
      ManakaiDOM:ManakaiDOMLatest
    @@ForCheck:
      ManakaiDOM:ForIF
  @AppName:
    @@@:
      Message::DOM::IFLevel3::
    @@ContentType:
      lang:Perl
    @@For:
      ManakaiDOM:ManakaiDOM3
    @@ForCheck:
      ManakaiDOM:ForIF
  @AppName:
    @@@:
      Message::DOM::IFLevel2::
    @@ContentType:
      lang:Perl
    @@For:
      ManakaiDOM:ManakaiDOM2
    @@ForCheck:
      ManakaiDOM:ForIF
  @AppName:
    @@@:
      Message::DOM::IFLevel1::
    @@ContentType:
      lang:Perl
    @@For:
      ManakaiDOM:ManakaiDOM1
    @@ForCheck:
      ManakaiDOM:ForIF
  @AppName:
    @@@:
      Message::DOM::IF::
    @@ContentType:
      lang:Perl
    @@For:
      ManakaiDOM:ManakaiDOM
    @@ForCheck:
      ManakaiDOM:ForIF
  @AppName:
    @@@:
      Message::DOM::
    @@For:
      ManakaiDOM:ManakaiDOMLatest
  @AppName:
    @@@:
      Message::DOM::
    @@ManakaiDOM:moduleSuffix: Level3
    @@For: 
      ManakaiDOM:ManakaiDOM3
  @AppName:
    @@@:
      Message::DOM::
    @@ManakaiDOM:moduleSuffix: Level2
    @@For: 
      ManakaiDOM:ManakaiDOM2
  @AppName:
    @@@:
      Message::DOM::
    @@ManakaiDOM:moduleSuffix: Level1
    @@For: 
      ManakaiDOM:ManakaiDOM1
  @AppName:
    @@@:
      Message::DOM::
    @@For:
      ManakaiDOM:ManakaiDOMCommon

ElementTypeBinding:
  @Name: PropDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      rdfs:Property

ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMAttribute
  @Description:
    @@lang:en
    @@@: A DOM attribute.
ResourceTypeDef:
  @QName: 
    ManakaiDOM:DOMAttrGet
  @Description:
    @@lang:en
    @@@: DOM attribute getter.
ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMAttrSet
  @Description:
    @@lang:en
    @@@: DOM attribute setter.
ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMMethod
  @Description:
    @@lang:en
    @@@: A DOM method.
ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMMethodParameter
  @Description:
    @@lang:en
    @@@: A DOM method parameter.
PropDef:
  @QName:
    dis:Read
  @Description:
    @@lang:en
    @@@: Whether the subject resource is readable or not.
  @dataType:
    dis:Boolean
PropDef:
  @QName:
    dis:Write
  @Description:
    @@lang:en
    @@@: Whether the subject resource is writable or not.
  @dataType: 
    dis:Boolean
ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMMethodReturn
  @Description:
    @@lang:en
    @@@: A DOM method return value.
ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMConfigParameter
  @Description:
    @@lang:en
    @@@: A DOM configuration parameter.
ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMEvent
  @Description:
    @@lang:en
    @@@: A DOM event definition.
ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMError
  @Description:
    @@lang:en
    @@@: A DOM error definition.
ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMConfigParameterSet
  @Description:
    @@lang:en
    @@@: A set of DOM configuration parameters.
ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMEventSet
  @Description:
    @@lang:en
    @@@: A set of DOM event definitions.
ResourceTypeDef:
  @QName:
    ManakaiDOM:DOMErrorSet
  @Description:
    @@lang:en
    @@@: A set of DOM error definitions.
ResourceTypeDef:
  @QName:
    ManakaiDOM:InCase
  @Description:
    @@lang:en
    @@@: 
      <QUOTE:In case> description.
PropDef:
  @QName: raises
  @Description:
    @@lang:en
    @@@:
      An exception the method or attribute might raise.
PropDef:
  @QName: alwaysWarns
  @Description:
    @@lang:en
    @@@:
      A warning that is reported everytime the method or attribute is called. 
      \
      {NOTE:: By the configuration for warning level, it might not be 
              reported.
      \
      }
ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:DOM
ElementTypeBinding:
  @Name: IntMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isForInternal: 1
ElementTypeBinding:
  @Name: ReMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isRedefining: 1
ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethodParameter
ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethodReturn
    @@ForCheck:
      ManakaiDOM:DOM
ElementTypeBinding:
  @Name: Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttribute
    @@ForCheck:
      ManakaiDOM:DOM
ElementTypeBinding:
  @Name: IntAttr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttribute
    @@ForCheck:
      ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isForInternal: 1
ElementTypeBinding:
  @Name: ReAttr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttribute
    @@ForCheck:
      ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isRedefining: 1
ElementTypeBinding:
  @Name: Get
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttrGet
ElementTypeBinding:
  @Name: Set
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttrSet
ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase


PropDef:
  @QName:
    dis:Operator
  @Description:
    @@lang:en
    @@@:
      Overload of an operator.

PropDef:
  @QName:
    dis:Type
  @rdfs:domain:
    rdfs:Resource
  @rdfs:range:
    rdfs:Resource
  @Description:
    @@lang:en
    @@@:
      The data type of the resource defined, including 
      class attribute type and method return value type.
PropDef:
  @QName:
    dis:actualType
  @rdfs:domain:
    rdfs:Resource
  @rdfs:range:
    rdfs:Resource
  @Description:
    @@lang:en
    @@@:
      The actual data type of the resource defined, including 
      class attribute type and method return value type. 
PropDef:
  @QName:
    dis:Value
  @Description:
    @@lang:en
    @@@:
      A value of the resource.
PropDef:
  @QName:
    dis:DefaultValue
  @Description:
    @@lang:en
    @@@: The default value of the resource.
PropDef:
  @QName:
    dis:Def
  @Description:
    @@lang:en
    @@@:
      A definition of the resource.
PropDef:
  @QName:
    dis:IntDef
  @Description:
    @@lang:en
    @@@:
      A definition of the resource (for internal use).
PropDef:
  @QName:
    dis:IsAbstract
  @Description:
    @@lang:en
    @@@:
      Whether the resource is defined abstractly or concretly. 
      Abstractly defined resource must be concretly overloaded 
      by inheriting class.
PropDef:
  @QName:
    dis:IsFinal
  @Description: 
    @@lang:en
    @@@:
      Whether the resource is overloadable or not.

ResourceTypeDef:
  @QName: 
    ManakaiDOM:DataType
  @Description:
    @@lang:en
    @@@:
      A data type.
  @rdf:type:
    rdfs:Class
  @ISA:
    rdfs:Datatype

PropDef:
  @QName:
    ManakaiDOM:isForInternal
  @dataType:
    DOMMain:boolean
PropDef:
  @QName:
    ManakaiDOM:isRedefining
  @dataType:
    DOMMain:boolean

PropDef:
  @QName:
    dis:Redefine
  @Description:
    @@lang:en
    @@@: Declares redefining (obsolete)
PropDef:
  @QName:
    dis:RedefinedBy
  @Description:
    @@lang:en
    @@@: Declares redefined in elsewhere (obsolete)
PropDef:
  @QName:
    dis:Redefined
  @Description:
    @@lang:en
    @@@: Declares redefined in elsewhere (obsolete)

PropDef:
  @QName:
    ManakaiDOM:moduleSuffix
  @dataType:
    DOMMain:DOMString

PropDef:
  @QName:
    dis:NSVersion
  @Description:
    @@lang:en
    @@@:
      A namespace-aware variant of the method or attribute.
PropDef:
  @QName:
    dis:NoNSVersion
  @Description:
    @@lang:en
    @@@: A namespace-unaware variant of the method or attribute.
PropDef:
  @QName:
    dis:Role
  @Description:
    @@lang:en
    @@@:
      A role of the class in the DOM system.

DataTypeDef:
  @QName:
    lang:Perl
  @FullName:
    @@lang:en
    @@@: Perl 5 code
DataTypeDef:
  @QName:
    perl:ARRAY
  @FullName:
    @@lang:en
    @@@: Perl array reference
DataTypeDef:
  @QName:
    perl:hash
  @FullName:
    @@lang:en
    @@@: Perl hash reference
DataTypeDef:
  @QName:
    dis:Perl
  @FullName:
    @@lang:en
    @@@: dis grove for Perl
  @ISA: 
    lang:dis

DataTypeDef:
  @QName:
    lang:muf
  @FullName:
    @@lang:en
    @@@: 
      <PerlModule:Message::Util::Formatter> template
DataTypeDef:
  @QName:
    lang:Java
  @FullName:
    @@lang:en
    @@@: Java

ElementTypeBinding:
  @Name: StringDataTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DataType
    @@ISA:
      @@@@:
        DOMMain:ManakaiDOMString
      @@@For:
        !=ManakaiDOM:ManakaiDOMCommon
    @@AliasFor: 
      @@@@:
        ::ManakaiDOM:ManakaiDOMLatest
      @@@For:
        ManakaiDOM:ManakaiDOMCommon
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM

StringDataTypeDef:
  @Name: ManakaiDOMURI
  @FullName: 
    @@lang:en
    @@@: DOM URI
  @Description:
    @@lang:en
    @@@:
      A DOM URI.  It is a specialized case of the "DOMString" and 
      that met the conditions:
    \
      1. An absolute identifier absolutely identifies a resource on the Web.
    \
      2. Simple string equality of absolute resource identifiers. 
      No other equaivalence is considered significant to the 
      DOM specification.
    \
      3. A relative identifier is easily detected and made absolute 
      relative to an absolute identifier.
    \
      4. Retrieval of content of a resource may be accomplished 
      where required.
  @ImplNote:
    @@lang:en
    @@@:
      Examples of the DOM URI include RFC 2396/2773 URI reference and 
      IRI reference.

StringDataTypeDef:
  @Name: ManakaiDOMNamespaceURI
  @FullName:
    @@lang:en
    @@@: DOM Namespace URI
  @Description:
    @@lang:en
    @@@:
      A namespace URI.  In general, the DOM implementation does not 
      perform any URI normalization or canonicalization.  The URIs 
      given to the DOM are assumed to be valid and no lexical 
      checking is performed.
      
      Absolute URI references are treated 
      as strings and compared literally.  How relative namespace URI 
      references are treated is undefined.  DOM applications should 
      use "null" if they wish to have no namespace.
      
      Some programing languages can differentiate empty strings 
      from "null".  Empty strings were specified as a legal namespace 
      URI in the DOM Level 2 Specification but the DOM Level 2 Errata 
      refines this as the implementaton dependent matter.  The 
      DOM Level 3 Specification again refines to be converted to "null".
  @ImplNote:
    @@lang:en
    @@@: 
      The "dis2pm.pl" is coded so that if the input (the parameter of 
      a method or the given value of an attribute) is typed as 
      "ManakaiDOMNamespaceURI", the Perl code to check the empty 
      string is outputed as part of the implementation.

StringDataTypeDef:
  @Name: ManakaiDOMFeatureName
  @FullName:
    @@lang:en
    @@@: feature name
  @Description:
    @@lang:en
    @@@:
      The DOM feature name.

StringDataTypeDef:
  @Name: ManakaiDOMFeatureVersion
  @FullName:
    @@lang:en
    @@@: feature version
  @Description:
    @@lang:en
    @@@: The DOM feature version.

StringDataTypeDef:
  @Name: ManakaiDOMFeatures
  @For:
    ManakaiDOM:ManakaiDOM3
  @FullName:
    @@lang:en
    @@@: features
  @Description:
    @@lang:en
    @@@:
      A list of zero or more pairs of a <TYPE:ManakaiDOM:ManakaiDOMFeature> 
      and an optional <TYPE:ManakaiDOM:ManakaiDOMFeatureVersion>, 
      separated by white space.

StringDataTypeDef:
  @Name:ManakaiDOMKeyIdentifier
  @For:
    ManakaiDOM:ManakaiDOM3
  @FullName:
    @@lang:en
    @@@: key identifier
  @Description:
    @@lang:en
    @@@:
      A key identifier.
    \
      {NOTE:: A set of key identifiers are defined in the Appendix A 
              of the <CITE:DOM Level 3 Events> Specification.
    \
      }

StringDataTypeDef:
  @Name:ManakaiDOMKeyIdentifiers
  @For:
    ManakaiDOM:ManakaiDOM3
  @FullName:
    @@lang:en
    @@@:list of key identifiers
  @Description:
    @@lang:en
    @@@:
      Zero or more <TYPE:ManakaiDOM:ManakaiDOMKeyIdentifier> separated 
      by white space (XML 1.0 <CODE:S>).

ExceptionDef:
  @Name: ManakaiDOMImplementationException
  @ISA: ManakaiDOMException
  @For: ManakaiDOM
  @Description:
    @@lang:en
    @@@:
      A set of implementation-dependent exceptions.

  @Attr:
     @@Name:  code
     @@Description:
       @@@lang:en
       @@@@:
         The error code that denotes what kind of exception occures.
     @@Get:
       @@@Type:  
         DOMMain:unsigned-short
       @@@actualType: ManakaiDOMImplementationExceptionCode

  @ResourceDef:
    @@QName: ManakaiDOMImplementationExceptionCode
    @@rdf:type:
      ManakaiDOM:ConstGroup
    @@ISA:
      DOMMain:unsigned-short

    @@Const:
      @@@Name: MDOM_TYPE_MISMATCH_ERR
      @@@Type: unsigned-short
      @@@Value: 0
      @@@Description:
        @@@@lang:en
        @@@@@:
          The type of an object is incompatible with the expected 
          type of the parameter.
      @@@Description:
        @@@@lang:en
        @@@@Type:
          lang:muf
        @@@@@:
            The type of an object specified as the value of parameter
            %t (name => {<Q:MDOMX:param-name>},
            prefix => { "}, suffix => {"}); is incompatible with the
            expected type%t (name => {<Q:MDOMX:class>}, 
            prefix => {: "}, suffix => {"}).
      @@@XParam:
        @@@@QName:
          MDOMX:param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter name.
          
      @@@XParam:
        @@@@QName:
          MDOMX:class
        @@@@Type:
          perl:package-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: Class name to which given value belongs.
          

    @@Const:
      @@@Name: PARAM_NULL_POINTER
      @@@Type: unsigned-short
      @@@Value: 1
      @@@Description:
        @@@@lang:en
        @@@@@: The null value is passed as a parameter.
      @@@Description:
        @@@@lang:en
        @@@@Type:
          lang:muf
        @@@@@:
            The null value is passed to the parameter%t (
            name => {<Q:MDOMX:param-name>},
            prefix => { "}, suffix => {"});.
      @@@XParam:
        @@@@QName:
          MDOMX:param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The name of the parameter to which the null value is given.

    @@Const:
      @@@Name: MDOM_DOMSTRING_INDEX_IN_SURROGATE_PAIR
      @@@Type: unsigned-long
      @@@Value: 2
      @@@Description:
        @@@@lang:en
        @@@@@: 
          An attempt to break surrogate pair, i.e. the first character of 
          the range is the low-surrogate (the second 16-bit unit of the surrogate
          pair) or the last character of the range is the high-surrogate 
          (the first 16-bit unit of the surrogate pair).
      @@@XParam:
        @@@@QName:
          MDOMX:param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter to which inappropriate value is specified.

    @@Const:
      @@@Name: MDOM_DEBUG_BUG
      @@@Type: unsigned-short
      @@@Value: 3
      @@@Description:
        @@@@lang:en
        @@@@@:
          Unexpected case occurs.  In general, this exception is not 
          reported.  If the DOM implementation has a bug and 
          something unexpected is occur, this exception is raised. 
        \
          DOM application MUST NOT try to catch this exception. 
          If this exception is raised, please report to the 
          author of that module.
      @@@XParam:
        @@@@QName:
          MDOMX:values
        @@@@Type: 
          perl:hash
        @@@@Description:
          @@@@@lang:en
          @@@@@@: Arbitrary values for debugging.
  
  @Const:
    @@Name: MDOM_IMPL_BY_APP
    @@Type: unsigned-short
    @@Value: 4
    @@Description:
      @@@lang:en
      @@@@:
        The method or attribute called is part of the callback 
        interface so that the DOM application must implement it.

WarningDef:
  @Name: ManakaiDOMImplementationWarning
  @ISA: ManakaiDOMWarning
  @For: ManakaiDOM
  @Description:
    @@lang:en
    @@@:
      Warnings for the implementation dependent matters and 
      "no effect" actions.
  
  @Attr:
     @@Name:  code
     @@Get:
       @@@Type:  
         DOMMain:unsigned-short
       @@@Description:
         @@@@lang:en
         @@@@@:
           The warning code from the constant value group
           ManakaiDOMImplementationWarningCode.

  @ResourceDef:
    @@Name: ManakaiDOMImplementationWarningCode
    @@rdf:type:
      ManakaiDOM:ConstGroup
    @@ISA: 
      DOMMain:unsigned-short
    
    @@Const:
      @@@Name: ATTR_SET_NO_EFFECT
      @@@Type: unsigned-short
      @@@Value: 0
      @@@Description:
        @@@@lang:en
        @@@@@:
          Setting an attribute value has no effect by definition.

    @@Const:
      @@@Name: MDOM_NEWCHILD_IS_REFCHILD
      @@@Type: unsigned-short
      @@@Value: 1
      @@@Description:
        @@@@lang:en
        @@@@@:
          The node to be inserted is same as the reference node.
      @@@XParam:
        @@@@QName:
          MDOMX:newChild-param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter name for "newChild" node.
      @@@XParam:
        @@@@QName:
          MDOMX:refChild-param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter name for "refChild" node.

    @@Const:
      @@@Name: MDOM_REPLACE_BY_ITSELF_NO_EFFECT
      @@@Type:unsigned-short
      @@@Value:2
      @@@Description:
        @@@@lang:en
        @@@@@:
          An attempt to replace a node by itself is made. 
          It is no effect by definition.
    
    @@Const:
      @@@Name: MDOM_NS_EMPTY_URI
      @@@Type: unsigned-short
      @@@Value: 4
      @@@Description:
        @@@@lang:en
        @@@@@:
          The DOM Level 2 Core Specification defines that even the empty 
          string is treated as a real namespace URI.  The Errata for 
          the DOM Level 2 Specifications says that it is an error and 
          the way empty strings are treated is implementation dependent. 
          The DOM Level 3 Core Specification defines that empty strings 
          are converted to "null".
      @@@XParam:
        @@@@QName:
          MDOMX:param-name
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The parameter to which inappropriate value is specified.

ClassDef:
  @Name: ManakaiDOMObject
  @For: ManakaiDOM
  @Description:
    @@lang:en
    @@@:
      The common class that is inherited by all manakai DOM object classes.
  
  @IntMethod:
    @@Name:reportError
    @@Operator:
      @@@@:object-error-handler
      @@@Type:
        lang:Perl
      @@@ImplNote:
        @@@@lang:en
        @@@@@:
          TODO: Operator name required.
    @@Description:
      @@@lang:en
      @@@@:
        The generic error handler; throw an exception if it is 
        an exception; raise an event if it is a warning.
      \
        See also <PerlModule:Message::Util::Error>.
    @@Param:
      @@@Name:err
      @@@Type: ManakaiDOMExceptionOrWarning
      @@@Description:
        @@@@lang:en
        @@@@@:
          The exception object that inherits <PerlModule:Message::Util::Error>.
    @@Return:
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          if ($err->isa ('__CLASS{ManakaiDOMException::}__')) {
            $err->throw;
          } else {
            \## TODO: Implement warning reporting
            warn $err->stringify;
          }

ClassDef:
  @Name: ManakaiDOMExceptionOrWarning
  @For: ManakaiDOM !=ManakaiDOM
  @ISA: ManakaiDOMObject
  @Description:
    @@lang:en
    @@@:
      The common interface that is implemented by all Manakai DOM 
      exceptions and warnings.
  @ReMethod:
    @@Name:text
    @@Description:
      @@@lang:en
      @@@@:
        Generate a short plain text message that describes 
        the error occuring.
        \
        This method is not part of DOM APIs, rather part of the 
        native interface. 
        \
        This method is defined in <PerlModule:Message::Util::Error> 
        but redefined here for the purpose of manakai DOM modules.
    @@Return:
      @@@Type:
        DOMMain:DOMString
      @@@Description:
        @@@@lang:en
        @@@@@:
          The error message written in <CODE:i-default> language.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          my $template;
          if (defined $self->{<Q:MDOMX:subtype>} and
              defined $self->{<Q:MUErrorCore:def>}->{<Q:MDOMX:subtype>}
                   ->{$self->{<Q:MDOMX:subtype>}}
                   ->{<Q:MUError:description>}) {
            $template = $self->{<Q:MUErrorCore:def>}
                   ->{<Q:MDOMX:subtype>}
                   ->{$self->{<Q:MDOMX:subtype>}}
                   ->{<Q:MUError:description>};
          } elsif (defined $self->{<Q:MUErrorCore:def>}
                   ->{<Q:MUError:description>}) {
            $template = $self->{<Q:MUErrorCore:def>}
                   ->{<Q:MUError:description>};
          } else {
            $template = $self->{<Q:MUErrorCore:type>};
          }
          $r = $self->_FORMATTER_PACKAGE_->new
                    ->replace ($template, param => $self);

ResourceDef:
  @Name: ManakaiDOMException
  @rdf:type:
    ManakaiDOM:ExceptionClass
  @ISA: ManakaiDOMExceptionOrWarning
  @For: ManakaiDOM !=ManakaiDOM
  @AliasFor:
    @@@:
      ::ManakaiDOM:ManakaiDOMCommon
    @@For: !=ManakaiDOMCommon
  @Description:
    @@lang:en
    @@@:
      An abstract class that is inherited by all manakai DOM exception classes.
ResourceDef:
  @Name: ManakaiDOMWarning
  @rdf:type:
    ManakaiDOM:WarningClass
  @ISA: ManakaiDOMExceptionOrWarning
  @For: ManakaiDOM !=ManakaiDOM
  @AliasFor:
    @@@:
      ::ManakaiDOM:ManakaiDOMCommon
    @@For: !=ManakaiDOMCommon
  @Description:
    @@lang:en
    @@@:
      An abstract class that is inherited by all manakai DOM warning classes.

ClassDef:
  @Name: ManakaiDOMNodeObject
  @ISA: ManakaiDOMObject
  @For: ManakaiDOM
  @Description:
    @@lang:en
    @@@:
      An internal node object that is accessed via <CLS:ManakaiDOMNodeReference>.
  @ImplNote:
    @@lang:en
    @@@:
      In manakai DOM implementation, most of DOM objects including 
      <IF:Element> and <IF:Document> instances are implemented as a 
      reference, i.e. <CLS:ManakaiDOMNodeReference>, to node object.
  @IntMethod:
    @@Name: new
    @@Description:
      @@@lang:en
      @@@@: 
        Constructs a new instance of <CLS:ManakaiDOMNodeObject> and 
        returns it.
    @@Return:
      @@@Type: ManakaiDOMNodeObject
      @@@Description:
        @@@@lang:en
        @@@@@: 
          The newly created <CLS:ManakaiDOMNodeObject>.
      @@@Def:
        @@@@ContentType:
          lang:Perl
        @@@@@:
          $r = bless {
            <Q:TreeCore:origin> => [],
            <Q:TreeCore:subnode> => [],
            <Q:TreeCore:subnode2> => [],
            <Q:TreeCore:irefnode> => [],
            <Q:TreeCore:urefnode> => [],
            <Q:TreeCore:anydata> => [],
            <Q:TreeCore:anydata2> => [],
            <Q:TreeCore:rc> => 0,
            <Q:TreeCore:treeID> => __CODE{UniqueID}__,
            <Q:TreeCore:nodeID> => __CODE{UniqueID}__,
            <Q:DOMCore:hasFeature> => {},
          }, ref $self || $self;
  @IntMethod:
    @@Name: newReference
    @@Description:
      @@@lang:en
      @@@@:
        Creates a new reference to this node and returns it.
    @@Param:
      @@@Name: class
      @@@Type:
        DOMMain:any
      @@@Description:
        @@@@lang:en
        @@@@@:
          A Perl class package name with which the newly created 
          reference is blessed.  The <P:class> class must be a 
          subset of <CLS:ManakaiDOMNodeReference>.
    @@Return:
      @@@Type: ManakaiDOMNodeReference
      @@@Description:
        @@@@lang:en
        @@@@@:
          The newly created node reference.
      @@@Def:
        @@@@ContentType:
          lang:Perl
        @@@@@:
          $r = bless {
            <Q:TreeCore:node> => $self,
          }, ref $class ? ref $class : $class ? $class :
             '__CLASS{ManakaiDOMNodeReference::}__';
          $self->{<Q:TreeCore:rc>}++;
  @IntMethod:
    @@Name: isExternallyReferred
    @@Description:
      @@@lang:en
      @@@@:
        Tests and returns whether the tree that contains this node 
        is externally referred or not.
    @@Return:
      @@@Type: 
        DOMMain:boolean
      @@@InCase:
        @@@@Value: true
        @@@@Description:
          @@@@@lang:en
          @@@@@@: 
            There is one or more nodes that has been 
            referred from <CLS:ManakaiDOMNodeReference> objects.
      @@@InCase:
        @@@@Value: false
        @@@@Description:
          @@@@@lang:en
          @@@@@@: No external reference to the node in this tree found.
      @@@Def:
        @@@@ContentType:
          lang:Perl
        @@@@@:
          if ($self->{<Q:TreeCore:rc>}) {
            $r = true;
          } else {
            for (@{$self->__SUPER{ManakaiDOMNodeObject::}__::__INT{getRootNodes}__}) {
              if ($_->__SUPER{ManakaiDOMNodeObject::}__::__INT{isExternallyReferredDownward}__) {
                $r = true;
                last;
              }
            }
          }
  @IntMethod:
    @@Name: isExternallyReferredDownward
    @@Description:
      @@@lang:en
      @@@@: Check whether the node or any of subnodes is externally referred.
    @@Return:
      @@@Type: boolean
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          if ($self->{<Q:TreeCore:rc>}) {
            $r = true;
          } else {
            DW:{
            SUBNODES:
            for my $key (@{$self->{<Q:TreeCore:subnode>}}) {
              for (ref $self->{$key} eq 'ARRAY' ? @{$self->{$key}}
                                                : values %{$self->{$key}||{}}) {
                if ($_->__SUPER{ManakaiDOMNodeObject::}__::__INT{isExternallyReferredDownward}__) {
                  $r = true;
                  last DW;
                }
              }
            }
            SUBNODES2:
            for my $key (@{$self->{<Q:TreeCore:subnode2>}}) {
              for (ref $self->{$key} eq 'ARRAY' ? @{$self->{$key}}
                                                : values %{$self->{$key}||{}}) {
                for (ref $_ eq 'ARRAY' ? @$_ : values %$_) {
                  if ($_->__SUPER{ManakaiDOMNodeObject::}__::__INT{isExternallyReferredDownward}__) {
                    $r = true;
                    last DW;
                  }
                }
              }
            }}
          }
  @IntMethod:
    @@Name: destroy
    @@Description:
      @@@lang:en
      @@@@: Destroy this tree.
    @@Return:
      @@@Def:
        @@@@Type: 
          lang:Perl
        @@@@@:
          $_->__SUPER{ManakaiDOMNodeObject::}__::__INT{destroyDownward}__
          for @{$self->__SUPER{ManakaiDOMNodeObject::}__::__INT{getRootNodes}__};
  @IntMethod:
    @@Name: destroyDownward
    @@Description:
      @@@lang:en
      @@@@: Destroy this node and subnodes.
    @@Return:
      @@@Def:
        @@@@ContentType:
          lang:Perl
        @@@@@:
          delete $self->{$_} for @{$self->{<Q:TreeCore:origin>}};
          for my $key (@{$self->{<Q:TreeCore:subnode>}}) {
            my @node = ref $self->{$key} eq 'ARRAY' ? @{$self->{$key}}
                                         : values %{$self->{$key}||{}};
            delete $self->{$key};
            $_->__SUPER{ManakaiDOMNodeObject::}__::__INT{destroyDownward}__
                                                                   for @node;
          }
          for my $key (@{$self->{<Q:TreeCore:subnode2>}}) {
            my @node = map {ref $_ eq 'ARRAY' ? @$_ : values %$_}
                       ref $self->{$key} eq 'ARRAY' ? @{$self->{$key}}
                                         : values %{$self->{$key}||{}};
            delete $self->{$key};
            $_->__SUPER{ManakaiDOMNodeObject::}__::__INT{destroyDownward}__
                                                                   for @node;
          }
   \       for my $key (@{$self->{<Q:TreeCore:irefnode>}},
   \                    @{$self->{<Q:TreeCore:urefnode>}},
   \                    @{$self->{<Q:TreeCore:anydata>}},
   \                    @{$self->{<Q:TreeCore:anydata2>}}) {
            delete $self->{$key};
          }
  @IntMethod:
    @@Name: importTree
    @@Description:
      @@@lang:en
      @@@@: Change internal tree identifier to be same as this node.
    @@Param:
      @@@Name: node
      @@@Type: ManakaiDOMNodeObject
      @@@Description:
        @@@@lang:en
        @@@@@: The node that belongs to the tree the identifier is changed.
    @@Return:
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          unless ($node->{<Q:TreeCore:treeID>} eq $self->{<Q:TreeCore:treeID>}) {
            $_->__SUPER{ManakaiDOMNodeObject}__::__INT{changeTreeIDDownward}__
                                                  ($self->{<Q:TreeCore:treeID>})
              for @{$node->__SUPER{ManakaiDOMNodeObject}__::__INT{getRootNodes}__};
          }
  @IntMethod:
    @@Name: changeTreeIDDownward
    @@Description:
      @@@lang:en
      @@@@:
        Change internal tree identifier of the node and subnodes.
        This method is intended to be used by the internal method 
        importTree.
    @@Param:
      @@@Name: treeID
      @@@Type: 
        DOMMain:DOMString
      @@@Description:
        @@@@lang:en
        @@@@@:
          The new tree identifier to which the tree identifier of this node
          is changed.
    @@Return:
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          $self->{<Q:TreeCore:treeID>} = ''.$treeID;
          for my $key (@{$self->{<Q:TreeCore:subnode>}}) {
            for (ref $self->{$key} eq 'ARRAY' ? @{$self->{$key}}
                                              : values %{$self->{$key}||{}}) {
              $_->__SUPER{ManakaiDOMNodeObject::}__::__INT{changeTreeIDDownward}__ ($treeID);
            }
          }
          for my $key (@{$self->{<Q:TreeCore:subnode2>}}) {
            for (ref $self->{$key} eq 'ARRAY' ? @{$self->{$key}}
                                              : values %{$self->{$key}||{}}) {
              for (ref $_ eq 'ARRAY' ? @$_ : values %$_) {
                $_->__SUPER{ManakaiDOMNodeObject::}__::__INT{changeTreeIDDownward}__ ($treeID);
              }
            }
          }
  @IntMethod:
    @@Name: getRootNodes
    @@Description:
      @@@lang:en
      @@@@:
        Get all root nodes (i.e. nodes that does not have the origin) in 
        the tree. 
    @@Return:
      @@@Type:
        perl:ARRAY
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          for (@{$self->{<Q:TreeCore:origin>}}) {
            next unless $self->{$_};
            NEW: for my $new (@{$self->{$_}
                ->__SUPER{ManakaiDOMNodeObject::}__::__INT{getRootNodes}__}) {
              for my $old (@$r) {
                next NEW if $old eq $new;
              }
              push @$r, $new;
            }
          }
          push @$r, $self if @$r == 0;
  @IntMethod:
    @@Name: isSameNode
    @@Description:
      @@@lang:en
      @@@@: Check whether the two nodes are same or not.
    @@Operator:
      @@@Type:
        lang:Perl
      @@@@: eq
    @@Param:
      @@@Name: node
      @@@Type: ManakaiDOMNodeObject
      @@@Description:
        @@@@lang:en
        @@@@@: The node to be compared.
    @@Return:
      @@@Type: boolean
      @@@Description:
        @@@@lang:en
        @@@@@: Whether the two nodes are same or not.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          if (ref $node and
              $node->isa ('__IF{ManakaiDOMNodeObject::}__') and
              $node->{<Q:TreeCore:nodeID>} eq $self->{<Q:TreeCore:nodeID>}) {
            $r = true;
          }
  @IntMethod:
    @@Name: orphanate
    @@Description:
      @@@lang:en
      @@@@:
        Change the tree identifier or destroy the tree if it is 
        no longer referred.
    @@Return:
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          if ($self->__SUPER{ManakaiDOMNodeObject::}__::__INT{isExternallyReferred}__) {
            $_->__SUPER{ManakaiDOMNodeObject::}__::__INT{changeTreeIDDownward}__
                                                           (__CODE{UniqueID}__)
              for @{$self->__SUPER{ManakaiDOMNodeObject::}__::__INT{getRootNodes}__};
          } else {
            $self->__SUPER{ManakaiDOMNodeObject::}__::__INT{destroy}__;
          }

ClassDef:
  @Name: ManakaiDOMNodeReference
  @For: ManakaiDOM
  @ISA: ManakaiDOMObject
  @IntMethod:
    @@Name: destroy
    @@Description:
      @@@lang:en
      @@@@: Destroy this reference object.
    @@Operator:
      @@@Type:
        lang:Perl
      @@@@: DESTROY
    @@Return:
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          my $node = $self->{<Q:TreeCore:node>};
          if ($node) {
            delete $self->{<Q:TreeCore:node>};
            $node->{<Q:TreeCore:rc>}--;
            unless ($node->__SUPER{ManakaiDOMNodeObject::}__::__INT{isExternallyReferred}__) {
              $node->__SUPER{ManakaiDOMNodeObject::}__::__INT{destroy}__;
            }
          } else {
            warn "An object of type ".ref ($self)." that does not have associated node object is to be destroied; there might be a memory leaking code";
          }

## - For ManakaiDOMNodeObject
## TreeCore:nodeID  - The world-unique identifier of the node object.
## TreeCore:origin  - Hash key names of the origin properties.
## TreeCore:rc      - The number that denotes how many external references 
##                    ("ManakaiDOMNodeReference"s) there are.
## TreeCore:subnode - Hash key names of subnode properties.
## TreeCore:subnode2 - Hash key names of two-step subnode properties.
## TreeCore:treeID  - The world-unique identifier of the grove.
## - For ManakaiDOMNodeReference
## TreeCore:node    - The node object ("ManakaiDOMNodeObject") to which
##                    this is referring.

## ManakaiDOMMain.dis ends here
