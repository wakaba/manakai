Module:
  @QName:
    MDOM:DOMMetaImpl
  @FullName:
    @@lang: en
    @@@: DOM Meta Implementation
  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2004/dom/meta#
  
  @Description:
    @@lang:en
    @@@:
      The <Module::MDOM:DOMMetaImpl> module provides interfaces 
      to boot DOM implementations. 

  @Author:
    @@FullName: Wakaba
    @@Mail: w@suika.fam.cx
  @License:
     license:Perl+MPL
  @Date:
    @@@:
      $Date: 2005/05/11 14:07:41 $
    @@ContentType:
      dis:Date.RCS
  
  @Require:
    @@Module:
      @@@Name: DISIDL
      @@@QName:
        DISlib:DISIDL
      @@@WithFor:
        ManakaiDOM:all
    @@Module:
      @@@Name: DISPerl
      @@@QName:
        DISlib:DISPerl
      @@@WithFor:
        ManakaiDOM:all
    @@Module:
      @@@Name: DOMException
      @@@QName:
        UtilError:DOMException
      @@@WithFor:
        ManakaiDOM:all
    @@Module:
      @@@Name: ManakaiNode
      @@@QName:
        Util:ManakaiNode
      @@@WithFor:
        ManakaiDOM:Perl
    @@Module:
      @@@Name: DOMMetaImpl
      @@@WithFor:
        ManakaiDOM:ManakaiDOM
    @@Module:
      @@@Name: DOMMetaImpl
      @@@WithFor:
        ManakaiDOM:ManakaiDOM3
    @@Module:
      @@@Name: DOMMetaImpl
      @@@WithFor:
        ManakaiDOM:ManakaiDOMLatest
  @DefaultFor:
    ManakaiDOM:ManakaiDOMLatest

Namespace:
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @dis2pm:
    http://suika.fam.cx/~wakaba/archive/2004/11/8/dis2pm#
  @DISlib:
    http://suika.fam.cx/~wakaba/archive/2004/dis/
  @DOMCore:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
  @DOMEvents:
    http://suika.fam.cx/~wakaba/archive/2004/dom/events#
  @DOMLS:
    http://suika.fam.cx/~wakaba/archive/2004/dom/ls#
  @DOMMain:
    http://suika.fam.cx/~wakaba/archive/2004/dom/main#
  @DOMMetaImpl:
    http://suika.fam.cx/~wakaba/archive/2004/dom/meta#
  @DOMXML:
    http://suika.fam.cx/~wakaba/archive/2004/dom/xml#
  @infoset:
    http://www.w3.org/2001/04/infoset#
  @lang:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @MDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.
  @MDOMX:
    http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @owl:
    http://www.w3.org/2002/07/owl#
  @Perl:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#Perl--
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#
  @TreeCore:\
  @Util:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/
  @UtilError:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/
  @xml:
    http://www.w3.org/XML/1998/namespace
  @xmlns:
    http://www.w3.org/2000/xmlns/

## -- Manakai object

ResourceDef:
  @QName: 
    ManakaiDOM:ManakaiDOMObject
  @rdf:type:
    ManakaiDOM:Class
  @For: 
    ManakaiDOM:ManakaiDOM

  @Description:
    @@lang:en
    @@@:
      The common class that is inherited by all manakai DOM object classes.
  
  @IntMethod:
    @@Operator:
      @@@@:
        ManakaiDOM:MUErrorHandler
      @@@ContentType:
        dis:TypeQName
    @@Description:
      @@@lang:en
      @@@@:
        This method is a generic error handler; all manakai exceptions 
        and warnings associated to an object are once reported to this method 
        and then delivered to appropriate entities. 
        \
        If the error is an exception (such as <X::DOMCore:DOMException> or 
        <X::ManakaiDOM:ManakaiDOMImplementationException>), it is 
        simply thrown.  If the error is only a warning, it is reported 
        via the <IF::DOMCore:DOMError> interface. 
        \
        See <PerlModule::Message::Util::Error> documentation for more 
        information on the error reporting mechanism.
        \
        {NOTE:: This kind of methods are named as <Perl::___report_error> 
                in the convention of <PerlModule::Message::Util::Error>. 
        \
        }
    @@Param:
      @@@Name:err
      @@@Type: 
        ManakaiDOM:ManakaiDOMExceptionOrWarning::ManakaiDOM:Perl
      @@@Description:
        @@@@lang:en
        @@@@@:
          An exception object that describes what kind of error it is 
          and how it should be recovered. 
          \
          {NOTE:: Exception objects in manakai implementation 
                  inherit the class <PerlModule::Message::Util::Error>, 
                  that in turn inherits <PerlModule::Error>.
          \
          }
    @@Return:
      @@@PerlDef:
          if ($err->isa (<ClassName::ManakaiDOM:ManakaiDOMException
                                   ::ManakaiDOM:Perl>)) {
            $err->throw;
          } else {
            \## TODO: Implement warning reporting
            warn $err->stringify;
          }

## -- The feature system (DOM)

StringDataTypeDef:
  @QName: 
    ManakaiDOM:ManakaiDOMFeatureName
  @FullName:
    @@lang:en
    @@@: DOM feature name
  @Description:
    @@lang:en
    @@@:
      A DOM feature name. 
      \
      In some context, a feature name might be prefixed by <CHAR::PLUS SIGN> 
      to indicate that feature is not required to be <EM::directly> 
      accessible (including via binding-dependent cast mechanism).
      \
      Note that feature names are case-insensitive.

  @InputProcessor:
    @@PerlDef:
      $INPUT = lc $INPUT;

  @ManakaiDOM:inputNormalizer:
    @@ContentType:
      lang:Perl
    @@@:
      $INPUT = lc $INPUT;

ElementTypeBinding:
  @Name: InputProcessor
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:InputProcessor

StringDataTypeDef:
  @QName: 
    ManakaiDOM:ManakaiDOMFeatureVersion
  @FullName:
    @@lang:en
    @@@: DOM feature version
  @Description:
    @@lang:en
    @@@: 
      A DOM feature version number. 
      \
      In most contexts, an empty string and the <DOM:null> value are 
      also valid values.  Both values indicate that any version of 
      that feature is acceptable.

  @InputProcessor:
    @@PerlDef:
      $INPUT = '' unless defined $INPUT;

  @ManakaiDOM:inputNormalizer:
    @@ContentType:
      lang:Perl
    @@@:
      $INPUT = '' unless defined $INPUT;

StringDataTypeDef:
  @QName: 
    ManakaiDOM:ManakaiDOMFeatures
  @For:
    ManakaiDOM:ManakaiDOM3
  @FullName:
    @@lang:en
    @@@: 
      A DOM <P:features>
  @Description:
    @@lang:en
    @@@:
      A list of zero or more pairs of a <TYPE::ManakaiDOM:ManakaiDOMFeature> 
      and an optional <TYPE::ManakaiDOM:ManakaiDOMFeatureVersion>, 
      separated by white space.
      \
      In the manakai DOM implementation, method parameters and attributes 
      whose actual datatype is <P::features> also accept a reference 
      to hash whose key is a feature name and value is corresponding 
      a feature version (or an empty string).  Don't forget to quote 
      version number when its fraction part is <CODE:0> (e.g. 
      quote <FeatureVer:2.0> like <Perl:'2.0'>).      

  @ManakaiDOM:inputNormalizer:
    @@ContentType:
      lang:Perl
    @@@:
      if (CORE::defined $INPUT) {
        if (CORE::ref ($INPUT) eq 'HASH') {
          my $new = {};
          for my $fname (keys %{$INPUT}) {
            if (CORE::ref ($INPUT->{$fname}) eq 'HASH') {
              my $lfname = lc $fname;
              for my $fver (keys %{$INPUT->{$fname}}) {
                $new->{$lfname}->{$fver} = $INPUT->{$fname}->{$fver};
              }
            } else {
              $new->{lc $fname} = {(CORE::defined $INPUT->{$fname}
                                      ? $INPUT->{$fname} : '') => 1};
            }
          }
          $INPUT = $new;
        } else {
          my @f = split /\s+/, $INPUT;
          $INPUT = {};
          while (@f) {
            my $name = lc shift @f;
            if (@f and $f[0] =~ /^[\d\.]+$/) {
              $INPUT->{$name}->{shift @f} = 1;
            } else {
              $INPUT->{$name}->{''} = 1;
            }
          }
        }
      } else {
        $INPUT = {};
      }

  @InputProcessor:
    @@PerlDef:
      if (CORE::defined $INPUT) {
        if (CORE::ref ($INPUT) eq 'HASH') {
          my $new = {};
          for my $fname (keys %{$INPUT}) {
            if (CORE::ref ($INPUT->{$fname}) eq 'HASH') {
              my $lfname = lc $fname;
              for my $fver (keys %{$INPUT->{$fname}}) {
                $new->{$lfname}->{$fver} = $INPUT->{$fname}->{$fver};
              }
            } else {
              $new->{lc $fname} = {(CORE::defined $INPUT->{$fname}
                                      ? $INPUT->{$fname} : '') => 1};
            }
          }
          $INPUT = $new;
        } else {
          my @f = split /\s+/, $INPUT;
          $INPUT = {};
          while (@f) {
            my $name = lc shift @f;
            if (@f and $f[0] =~ /^[\d\.]+$/) {
              $INPUT->{$name}->{shift @f} = 1;
            } else {
              $INPUT->{$name}->{''} = 1;
            }
          }
        }
      } else {
        $INPUT = {};
      }

    @@ImplNote:
      @@@lang:en
      @@@@:
        In current specifications of DOM, order of features are not 
        significant and treatement for dupulication of a feature name 
        is not specified.  
        If <P::features> in future levels of DOM does not 
        have this characteristic, this and some other implementation 
        must be revisited for that levels. 
        \
        This input normalizer creates a copy of feature list even if 
        it is given as a hash reference; it means that <QUOTE::breaking> 
        any parameter does not affect the input source. 

  @ResourceDef:
    @@QName:
      DOMMain:stringifyFeatures
    @@rdf:type:
      dis2pm:BlockCode
    @@Description:
      @@@lang:en
      @@@@:
        Converts a manakai internal hash representation of <P::features> 
        (<PerlVar::$IN>) to a DOM standard string representation of it 
        (<PerlVar::$OUT>). 
        \
        Note that whether input is valid feature name-value pairs is 
        not checked; bad input will produce bad output.
    @@PerlDef:
      my @out;
      for my $fname (keys %{$IN}) {
        for my $fver (keys %{$IN->{$fname}}) {
          push @out, $fname . ' ' . $fver . ' ' if $IN->{$fname}->{$fver};
        }
      }
      $OUT = join ' ', @out;

ResourceDef:
  @QName: 
    DOMMain:DOMFeature
  @FullName:
    @@lang:en
    @@@: DOM feature
  @rdf:type:
    rdfs:Class
  @rdfs:subClassOf:
    rdfs:Class::ManakaiDOM:all
  @AliasFor:
    @@@:
      ::ManakaiDOM:all
    @@For:
      !=ManakaiDOM:all

## -- The feature system (manakai)

ElementTypeBinding:
  @Name: FeatureDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DOMMain:DOMFeature
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:all
      @@@For:
        !=ManakaiDOM:all

ElementTypeBinding:
  @Name: FeatureVerDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DOMMain:DOMFeature

ElementTypeBinding:
  @Name: featureQName
  @ElementType:
    dis:AppName
  @ShadowContent:
    @@ContentType:
      dis:TypeQName

PropDef:
  @QName:
    dis:Version
  @FullName:
    @@lang:en
    @@@: Feature version
  @Description:
    @@lang:en
    @@@:
      A version number of a feature to define.
  @rdfs:domain: 
    DOMMain:DOMFeature

PropDef:
  @QName: provideFeature
  @Description:
    @@lang:en
    @@@:
      The subject resource intends to provide a part 
      of the object feature. 
  @rdfs:domain:
    DOMMain:DOMFeature

PropDef:
  @QName: providedThrough
  @Description:
    @@lang:en
    @@@:
      The feature is provided through the object class. 
      \
      If this attribute is missing from a <Q::provideFeature>
      element and its parent is a <Q::ManakaiDOM:Class> definition,
      then that class with the current <QUOTE::for> is
      the <Q::providedThrough> class.
  @rdfs:domain:
    ManakaiDOM:Class

PropDef:
  @QName: 
    DOMMain:implementFeature
  @Description:
    @@lang:en
    @@@:
      A subject resource implements a object feature. 
  @rdfs:range: 
    DOMMain:DOMFeature
  @dataType: 
    dis:TypeQName

PropDef:
  @QName: instanceFeatureOf
  @Description:
    @@lang:en
    @@@:
      The subject feature is an instance of the object feature set.
  @rdfs:range:
    DOMMain:DOMFeature
  @rdfs:domain:
    DOMMain:DOMFeature

PropDef:
  @QName: extendFeature
  @Description:
    @@lang:en
    @@@:
      The subject feature extends the object feature.
  @rdfs:range:
    DOMMain:DOMFeature
  @rdfs:domain:
    DOMMain:DOMFeature

PropDef:
  @QName: 
    DOMMain:requireFeature
  @Description:
    @@lang:en
    @@@:
      A subject resource requires a object feature. 
  @rdfs:range: 
    DOMMain:DOMFeature
  @dataType:
    dis:TypeQName

FeatureDef:
  @QName: 
    ManakaiDOM:Minimum
  @FeatureVerDef:
    @@Version: 3.0
    @@QName: 
      ManakaiDOM:MinimumFeature30
    @@Description:
      @@@lang:en
      @@@@:
        Minimum DOM implementation, level 3.
    @@DOMMetaImpl:instanceFeatureOf:
      ManakaiDOM:Minimum

## -- Roles

ResourceDef:
  @QName: ImplementationSourceForManakaiDOMImplementationRegistry
  @rdf:type:
    DISLang:Role
  @ForCheck:
    =ManakaiDOM:all
  @Description:
    @@lang:en
    @@@:
      If a class plays this <QUOTE::role>, then it must implement
      the <IF::DOMCore:DOMImplementationSource> interface with
      its two methods statically callable (i.e. they can be 
      called without any instance of the class).  Any class
      playing this <QUOTE::role> will be contacted when 
      the <M::DOMMain:ManakaiDOMImplementationRegistry.getDOMImplementationList>
      method is called.

ResourceDef:
  @QName: ManakaiDOMImplementationSourceRole
  @rdf:type:
    DISLang:Role
  @ForCheck:
    =ManakaiDOM:all
  @rdfs:subClassOf: ImplementationSourceForManakaiDOMImplementationRegistry
  @Description:
    @@lang:en
    @@@:
      If a class plays this <QUOTE::role>, then it must implement
      the <IF::DOMCore:DOMImplementationSource> interface with
      its two methods statically callable (i.e. they can be 
      called without any instance of the class).  Any class
      playing this <QUOTE::role> will be contacted when 
      the <M::DOMMain:ManakaiDOMImplementationRegistry.getDOMImplementationList>
      method is called.
      \
      {NOTE:: Whether the class implements the 
              <IF::DOMCore:ManakaiDOMImplementationSource> interface
              or not is another problem.
      \
      }

ResourceDef:
  @QName: ImplementationForManakaiDOMImplementationSource
  @rdf:type:
    DISLang:Role
  @ForCheck:
    =ManakaiDOM:all
  @Description:
    @@lang:en
    @@@:
      The <QUOTE::role> that instances of the class is available via
      the <IF::DOMCore:DOMImplementationSource> interface 
      implemented by the <Class::DOMCore:ManakaiDOMImplementationSource>
      objects.

ResourceDef:
  @QName: ImplementationCompatibleWithManakaiDOMMinimumImplementation
  @rdf:type:
    DISLang:Role
  @ForCheck:
    =ManakaiDOM:all
  @Description:
    @@lang:en
    @@@:
      The <QUOTE::role> that the class is compatible with the class
      <Class::DOMMetaImpl:ManakaiDOMMetaImplementation> so that 
      any instance of the class compatible with it is castable 
      to the class via the <M::DOMMetaImpl:ManakaiDOMMetaImplementation
      .getFeature> method.

ResourceDef:
  @QName: ManakaiAnyImplementationRole
  @rdf:type:
    DISLang:Role
  @ForCheck:
    =ManakaiDOM:all
  @rdfs:subClassOf: ImplementationCompatibleWithManakaiDOMMinimumImplementation
  @Description:
    @@lang:en
    @@@:
      Any class that plays this <QUOTE::role> might be accessible 
      via <M::DOMMetaImpl:ManakaiDOMMinimumImplementation
            ::ManakaiDOM:ManakaiDOMLatest.getFeature>.
      \
      {NOTE:: The class don't have to implement the 
              <IF::DOMMetaImpl:ManakaiDOMMinimumImplementationIF
                 ::ManakaiDOM:ManakaiDOMLatest> interface.
      \
      }

ResourceDef:
  @QName: ManakaiDOMImplementationRole
  @rdf:type:
    DISLang:Role
  @ForCheck:
    =ManakaiDOM:all
  @rdfs:subClassOf: ImplementationForManakaiDOMImplementationSource
  @rdfs:subClassOf: ManakaiAnyImplementationRole
  @Description:
    @@lang:en
    @@@:
      Any class that plays this <QUOTE::role> might be accessible
      via <Class::DOMCore:ManakaiDOMImplementationSource
                ::ManakaiDOM:ManakaiDOMLatest>
      or <M::DOMMetaImpl:ManakaiDOMMinimumImplementation
           ::ManakaiDOM:ManakaiDOMLatest.getFeature>.
      \
      {NOTE:: The class that plays this <QUOTE::role> must implement the
              <IF::DOMMetaImpl:ManakaiDOMMinimumImplementation
                 ::ManakaiDOM:ManakaiDOMLatest> interface.
      \
      }

PropDef:
  @QName:
    dis:Role
  @Description:
    @@lang:en
    @@@:
      A role of the subject class in the DOM system.  It identifies 
      what kind of classes should be provided as <QUOTE::alternative>s 
      via, for example, <M::DOMCore:DOMImplementation.getFeature>. 
      \
      {P:: Currently, its values includes: 
      \
        - <CODE::DOMEvents:ManakaiDOMEvent::ManakaiDOM:ManakaiDOMLatest>::: 
            Classes that should be available via 
            <M::DOMEvents:ManakaiDOMDocumentEvent.createEvent>.
      \
        - <CODE::DOMCore:DOMImplementation::ManakaiDOM:ManakaiDOM>::: 
            Classes that might be available via <IF::DOMImplementationRegistry>, 
            <IF::DOMCore:DOMImplementationSource> or 
            <M::DOMCore:DOMImplementation.getFeature>. 
      \
        - <CODE::DOMCore:DOMImplementationSource::ManakaiDOM:ManakaiDOM>:::
            Classes that should be known to 
            <Class::ManakaiDOMImplementationRegistry>.
      \
        - <CODE::DOMCore:Node::ManakaiDOM:ManakaiDOM>::: 
            Classes that might be available via <M::DOMCore:Node.getFeature> 
            or any <IF::Node> returning method and attributes.
      \
      }
      \
      {NOTE:: <Q::dis:Role> is deprecated in favor of <Q::DISLang:role>;
              <Q::dis:Role> is retained here for compatibility 
              with old <CODE::cdis2pm> utility.
      \
      }
  @rdfs:domain:
    ManakaiDOM:Class
  @rdfs:range:
    ManakaiDOM:IF
  @dataType:
    dis:TypeForQNames

PropDef:
  @QName:
    dis:compat
  @Description:
    @@lang:en
    @@@:
      The internal data structure (and so on) of a subject resource is 
      compatible with that of object resource. 
      \
      This property is described as a child element of 
      <Q::dis:Role> property element because of historical reason. 
      \
      {P:: Currently used its values are:
         \
         - <CODE::DOMCore:ManakaiDOMImplementation::ManakaiDOM:ManakaiDOMLatest>::: 
             An class that should be available via 
             <M::DOMCore:ManakaiDOMImplementation.getFeature>. 
         \
         - <CODE::DOMCore:ManakaiDOMImplementationSource::ManakaiDOM:ManakaiDOMLatest>:::
             An class that is able to handle as same manner 
             as <M::DOMCore:ManakaiDOMImplementationSource> by 
             <Class::ManakaiDOMImplementationRegistry>.
         \
         - <CODE::DOMCore:ManakaiDOMNode::ManakaiDOM:ManakaiDOMLatest>:::
             An class that should be available via 
             <M::DOMCore:ManakaiDOMNode.getFeature>.
         \
      }
      \
      {NOTE:: <Q::dis:compat> is deprecated in favor of <Q::DISLang:role>;
              <Q::dis:compat> is retained here for compatibility 
              with old <CODE::cdis2pm> utility.
      \
      }
  @rdfs:domain:
    ManakaiDOM:Class
  @rdfs:range:
    ManakaiDOM:Class
  @dataType:
    dis:TypeForQNames

## -- The bootstrap object

ResourceDef:
  @QName: 
    DOMMain:ManakaiDOMImplementationRegistryVar
  @rdf:type:
    DISPerl:ScalarVariable
  @AppName:
    @@@:
      Message::DOM::DOMImplementationRegistry
    @@ContentType:
      lang:Perl
  @DefaultValue:
    @@@:
      <ClassName::DOMMain:ManakaiDOMImplementationRegistry
                                  ::ManakaiDOM:ManakaiDOMLatest>
    @@ContentType:
      lang:Perl
  @Type:
    DOMMain:DOMString
  @For:
    ManakaiDOM:ManakaiDOMLatest

ForDef:
  @QName: 
    DOMMetaImpl:ForCDIS
  @enDesc:
    For <File::cdis2pm.pl>, an old version of the <QUOTE::dis> utility.

ForDef:
  @QName: 
    DOMMetaImpl:ForDAC
  @enDesc:
    For <QUOTE::dac>, the latest version of the <QUOTE::dis> utility.

ElementTypeBinding:
  @Name: enDesc
  @ElementType:
    dis:Description
  @ShadowContent:
    @@lang:en

ImplNote:
  {TODO:: Exclude <Q::ForCDIS> part by module plan.
  \
  }

## -- The implementation registry object

ResourceDef:
  @QName:
    @@@: 
      DOMMain:ManakaiDOMImplementationRegistry
    @@ForCheck: ForDAC
  @QName:
    @@@:  
      DOMMain:DOMImplementationRegistry
    @@ForCheck:
      !ManakaiDOM:ManakaiDOM ForCDIS
  @QName:
    @@@: 
      DOMMain:ManakaiDOMImplementationRegistryCompat
    @@ForCheck:
      ManakaiDOM:ManakaiDOM ForCDIS
  @rdf:type:
    @@@:
      ManakaiDOM:Class
    @@ForCheck: ForDAC
  @rdf:type:
    @@@:
      ManakaiDOM:Class
    @@ForCheck: ForCDIS

  @ForCheck:
    ManakaiDOM:DOM3 !=ManakaiDOM:ManakaiDOM
  @rdf:type:
    @@@:
      dis:MultipleResource
    @@ForCheck: !ForCDIS !ForDAC
  @resourceFor:
    @@@: ForCDIS
    @@ForCheck:
      ManakaiDOM:ManakaiDOMLatest
  @resourceFor: ForDAC

  @ISA:
    @@@:
      ManakaiDOM:ManakaiDOMObject
    @@For:
      ManakaiDOM:ManakaiDOM
  @DOMMFeature:

  @Description:
    @@lang:en
    @@@:
      A binding dependent bootstrap for <IF::DOMCore:DOMImplementation> objects.
  @Description:
    @@For:
      ManakaiDOM:ManakaiDOM
    @@lang:en
    @@@:
      A bootstrap class/object from which DOM implementations can be 
      retrieved.  For the manakai <Class::ManakaiDOMImplementationRegistry> 
      implementation, DOM applications can access the registry both 
      via class methods and via object methods.  That is, applications 
      are free, but need not to instantiate a 
      <Class::ManakaiDOMImplementationRegistry> object to get 
      DOM implementations. 
      \
      {NOTE:: Authors of DOM applications will usually want to access 
              the registry by the means of class methods (i.e. no 
              instance objects), since most applications don't 
              require more than one implementations.
      \
      }
  @Method:
    @@ForCheck:
      ManakaiDOM:ManakaiDOM ForCDIS
    @@Name: newInstance
    @@ManakaiDOM:isStatic: 1
    @@Description:
      @@@lang:en
      @@@@:
        Constructs and returns a new instance of 
        <Class::ManakaiDOMImplementationRegistry>. 
        \
        The newly created object initially has DOM implementation sources 
        registered to the array 
        <Perl::@org::w3c::dom::DOMImplementationSourceList> at the time 
        of the instantiation.  No addition of sources afterwards to the 
        object is reflected to the global registry and vice versa.
    @@ImplNote:
      @@@lang:en
      @@@@:
        This method is taken from the normative Java binding.
      \
        Note that in this implementation, unlike the Java binding, 
        <IF:DOMImplementationSource> classes available are not 
        instantiated at this stage.
    @@Return:
      @@@Type: 
        DOMMain:ManakaiDOMImplementationRegistry
      @@@Description:
        @@@@lang:en
        @@@@@:
          A new instance of the <IF:ManakaiDOMImplementationRegistry>.
      @@@PerlDef:
          $r = bless [@org::w3c::dom::DOMImplementationSourceList], $self;

  @Method:
     @@Name:  getDOMImplementation
     @@ManakaiDOM:isStatic: 1
     @@Description:
       @@@lang:en
       @@@@:
         Seeks and returns the first implementation that implements 
         desired features. 
     @@Param:
        @@@Name:  features
        @@@Type:  
          DOMMain:DOMString
        @@@actualType:
          ManakaiDOM:ManakaiDOMFeatures
        @@@Description:
          @@@@lang:en
          @@@@@: 
            A list of desired features that must be implemented.
     @@Return:
       @@@Type:
         @@@@@:
           DOMCore:DOMImplementation::ManakaiDOM:ManakaiDOM
         @@@@ForCheck:
           ManakaiDOM:ManakaiDOM
       @@@Type:
         DOMCore:DOMImplementation
       @@@Description:
         @@@@lang:en
         @@@@@:
           The first implementation that has the derired features. 
           \
           {NOTE:: DOM implementations returned by this method 
                   might not be manakai DOM objects. 
           \
           }
       @@@Description:
         @@@@lang:en
         @@@@@:
           {NOTE:: The DOM implementation returned might not implement 
                   Level 3 <IF::DOMCore:DOMImplementation> interface. 
           \
           }
         @@@@For:
           ManakaiDOM:ManakaiDOM
       @@@InCase:
         @@@@Value:
           @@@@@is-null:1
         @@@@Description:
           @@@@@lang:en
           @@@@@@: 
             No implementation implementing the desired features is found.
       @@@PerlDef:
         @@@@ForCheck: ForDAC
         @@@@@:
           __CODE{DOMMain:stringifyFeatures:: $IN => $features,
                                              $OUT => $features}__;
           __DEEP{
             for my $class (
               keys %Message::DOM::ManakaiDOMImplementationRegistry::SourceClass
             ) {
               $r = $class-><M::DOMCore:DOMImplementationSource
                               .getDOMImplementation> ($features);
               last if defined $r;
             }
           }__;
       @@@PerlDef:
         @@@@ForCheck: ForCDIS
         @@@@@:
           __CODE{DOMMain:stringifyFeatures:: $IN => $features,
                                              $OUT => $features}__;
           __DEEP{
             for (ref $self ? @$self
                            : @org::w3c::dom::DOMImplementationSourceList) {
               $r = $_-><M::DOMCore:DOMImplementationSource.getDOMImplementation>
                                      ($features);
               last if defined $r;
             }
           }__;
      @@@ImplNote:
        @@@@lang:en
        @@@@@:
          Converting <P::features> into a string is necessary since 
          a <IF::DOMCore:DOMImplementationSource> might not be part 
          of manakai so that it does not support the hash representation. 
  @Method:
     @@Name:  getDOMImplementationList
     @@ManakaiDOM:isStatic: 1
     @@Description:
       @@@lang:en
       @@@@:
         Returns a list of all the DOM implementations that implement 
         desired features.
     @@Param:
        @@@Name:  features
        @@@Type:  
          DOMMain:DOMString
        @@@actualType:
          ManakaiDOM:ManakaiDOMFeatures
        @@@Description:
          @@@@lang:en
          @@@@@: A list of desired features that must be implemented.
     @@Return:
       @@@Type:  
         DOMCore:DOMImplementationList
       @@@actualType:
         DOMCore:ManakaiDOMImplementationList
       @@@Description:
         @@@@lang:en
         @@@@@: 
           A list of DOM implementations that support the desired features. 
       @@@Description:
         @@@@lang:en
         @@@@@:
           \
           {NOTE:: Whilst the returned list itself is a manakai object, 
                   its containing implementation objects might not 
                   be part of manakai.
           \
           }
           \
           It may contain a DOM implementation more than one times.
         @@@@For:
           ManakaiDOM:ManakaiDOM
       @@@PerlDef:
         @@@@ForCheck: ForDAC
         @@@@@:
           __CODE{DOMMain:stringifyFeatures:: $IN => $features,
                                              $OUT => $features}__;
           __DEEP{
             $r = <ClassM::DOMCore:ManakaiDOMImplementationList.new>;
             for my $class (
               keys %Message::DOM::ManakaiDOMImplementationRegistry::SourceClass
             ) {
               $r-><M::DOMCore:ManakaiDOMImplementationList.add>
                         ($class-><M::DOMCore:ManakaiDOMImplementationSource
                                       .getDOMImplementationList> ($features));
             }
           }__;
       @@@PerlDef:
         @@@@ForCheck: ForCDIS
         @@@@@:
           __CODE{DOMMain:stringifyFeatures:: $IN => $features,
                                              $OUT => $features}__;
           __DEEP{
             $r = <ClassM::DOMCore:ManakaiDOMImplementationList.new>;
             for (ref $self ? @$self
                            : @org::w3c::dom::DOMImplementationSourceList) {
               $r-><M::DOMCore:ManakaiDOMImplementationList.add>
                         ($_-><M::DOMCore:ManakaiDOMImplementationSource
                                       .getDOMImplementationList> ($features));
             }
           }__;
  @Method:
    @@Name: addSource
    @@ManakaiDOM:isStatic: 1
    @@Description:
      @@@lang:en
      @@@@:
        Registers a <IF::DOMCore:DOMImplementationSource> object to the 
        list of DOM implementation sources available to this registry. 
        \
        When this method is called as a class method, i.e. with no 
        object, the new source is added to the global registry.  
        Otherwise, the new source is added to the local, the object's own 
        registry and it unable to access via other registries. 
        \
        {NOTE:: This method is a manakai-specific method.  Its name and 
                most of behaviour follow that of the normative Java binding as 
                defined in the <CITE::DOM Level 3 Specification>.
        \
        }
    @@ForCheck:
      ManakaiDOM:ManakaiDOM ForCDIS
    @@Param:
      @@@Name: s
      @@@Type:
        @@@@@:
          DOMCore:DOMImplementationSource::ManakaiDOM:ManakaiDOM
        @@@@ForCheck:
          ManakaiDOM:ManakaiDOM
      @@@Type: 
        DOMCore:DOMImplementationSource
      @@@Description:
        @@@@lang:en
        @@@@@: 
          A <IF::DOMCore:DOMImplementationSource> object to be registered. 
    @@Return:
      @@@PerlDef:
        @@@@require: overload
        @@@@@:
          my $reg = ref $self ? $self
                              : \@org::w3c::dom::DOMImplementationSourceList;
          PUSH: {
            ## Checks if $s is already in list
            for (@$reg) {
              last PUSH if overload::StrVal ($_) eq overload::StrVal ($s) or
                           $_ eq $s;
            }
            push @$reg, $s;
          }
## Object:DOMImplementationRegistry

## -- DOM implementation list & source from DOM Level 3 Core module

ResourceDef:
  @rdf:type:
    @@@:
      dis:MultipleResource
    @@ForCheck:
      !ManakaiDOM:ForClass !ManakaiDOM:ForIF
  @rdf:type:
    @@@:
      ManakaiDOM:IF
    @@ForCheck:
      ManakaiDOM:ForIF
  @rdf:type:
    @@@:
      ManakaiDOM:Class
    @@ForCheck:
      ManakaiDOM:ForClass
  @resourceFor:
    ManakaiDOM:ForIF
  @resourceFor:
    @@@:
      ManakaiDOM:ForClass
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM

  @IFQName:
    DOMCore:DOMImplementationList
  @ClsQName:
    DOMCore:ManakaiDOMImplementationList

  @For:
    ManakaiDOM:DOM3
  @For:
    =ManakaiDOM:ManakaiDOM

  @DOMMain:implementFeature:
    DOMCore:CoreFeature30

  @ISA:
    @@@:
      ManakaiDOM:ManakaiDOMObject
    @@ForCheck:
      ManakaiDOM:ForClass
  @Implement:
    @@@:
      DOMCore:DOMImplementationList
    @@ForCheck:
      ManakaiDOM:ForClass

  @ISA:
    @@@:
      DOMCore:DOMImplementationList::ManakaiDOM:ManakaiDOM
    @@ForCheck:
      ManakaiDOM:ForIF ManakaiDOM:ManakaiDOM3
  @ISA:
    @@@:
      DOMCore:DOMImplementationList::ManakaiDOM:ManakaiDOM3
    @@ForCheck:
      ManakaiDOM:ForIF ManakaiDOM:ManakaiDOMLatest

  @Spec:
    @@DOM3:
      http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMImplementationList
  @Description:
    @@lang:en
    @@@: 
      An ordered collection of DOM implementation objects.

  @Description:
    @@lang:en
    @@@:
      {NOTE:: Items of this collection might or might not an instance of 
              <Class::DOMCore:ManakaiDOMImplementation> class; they might be 
              an instance of foreign class that implements the 
              <IF::DOMCore:DOMImplementation> interface. 
      \
      }
  @ImplNote:
    @@lang:en
    @@@:
      How this collection is implemented is not specified by the specification.
  @Method:
     @@Name:  item
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMImplementationList-item
     @@Description:
       @@@lang:en
       @@@@: 
         Returns the <P::index>th item in this collection.
     @@Param:
        @@@Name:  index
        @@@Type:  
          DOMMain:unsigned-long::ManakaiDOM:all
        @@@Description:
          @@@@lang:en
          @@@@@: 
            An index of the item to retrieve in this collection.
     @@Return:
        @@@Type:
          @@@@@:
            DOMCore:DOMImplementation::ManakaiDOM:ManakaiDOM
          @@@@For:
            ManakaiDOM:ManakaiDOM
        @@@Type:  
          DOMCore:DOMImplementation
        @@@Description:
          @@@@lang:en
          @@@@@: 
            The <IF::DOMCore:DOMImplementation> object at the <P::index>th 
            position in this collection.
        @@@InCase:
          @@@@Value: 
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Either there is no <IF::DOMImplementation> for the 
              specified <P::index> or the <P::index> is out of range.
        @@@PerlDef:
          if (not defined $index or
              $index < 0 or
              $index > $#$self) {
            $r = null;
          } else {
            $r = $self->[$index];
          }
  @Attr:
     @@Name:  length
     @@Description:
       @@@lang:en
       @@@@:  
         The number of <IF::DOMImplementation> objects in this collection.
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMImplementationList-length
     @@Get:
        @@@Type:  
          DOMMain:unsigned-long::ManakaiDOM:all
        @@@PerlDef:
            $r = @$self;
  @IntMethod:
    @@Name: new
    @@ManakaiDOM:isStatic:1
    @@Description:
      @@@lang:en
      @@@@: 
        Constructs and returns a new instance of the 
        <Class::ManakaiDOMImplementationList> class.
    @@Return:
      @@@Type: 
        DOMCore:ManakaiDOMImplementationList
      @@@Description:
        @@@@lang:en
        @@@@@: 
          The newly created instance.
      @@@PerlDef:
          $r = bless [], ref $self ? ref $self : $self;
  @IntMethod:
    @@Name: add
    @@Description:
      @@@lang: en
      @@@@:
        Appends one or more <IF::DOMImplementation> object to this collection.
    @@Param:
      @@@Name: list
      @@@Type: 
        Perl:Array::ManakaiDOM:all
      @@@Description:
        @@@@lang:en
        @@@@@:
          A list of <IF::DOMImplementation> and/or 
          <IF::DOMImplementationList> objects to add.
    @@Return:
      @@@Type:
        DOMMain:boolean::ManakaiDOM:all
      @@@Description:
        @@@@lang:en
        @@@@@: Whether the addition has succeed or not. 
      @@@InCase:
        @@@@Value:true
        @@@@Description:
          @@@@@lang:en
          @@@@@@: 
            The <P::list> has been added. 
      @@@InCase:
        @@@@Value:false
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            One or more implementation in the <P::list> has not been added. 
      @@@PerlDef:
          $r = true;
          for (@list) {
            if (UNIVERSAL::isa ($_, <IFName::DOMCore:DOMImplementationList>)) {
              __DEEP{
                my $len = $_-><AG::DOMCore:DOMImplementationList.length>; 
                for (my $i = 0; $i < $len; $i++) {
                  push @$self, $_-><M::DOMCore:DOMImplementationList.item> ($i);
                }
              }__;
            } elsif (UNIVERSAL::isa ($_,
                                     <IFName::DOMCore:DOMImplementation
                                            ::ManakaiDOM:ManakaiDOM>) and
                     UNIVERSAL::isa ($_,
                                     <ClassName::ManakaiDOM:ManakaiDOMNodeObject
                                               ::ManakaiDOM:Perl>)) {
              push @$self, $_;
            } else {
              $r = false;
              last;
            }
          }

ResourceDef:
  @rdf:type:
    @@@:
      dis:MultipleResource
    @@ForCheck:
      !ManakaiDOM:ForIF !ManakaiDOM:ForClass !ForCDIS !ForDAC
  @resourceFor:
    @@@:
      ManakaiDOM:ForIF
    @@ForCheck:
      !ManakaiDOM:ForClass
  @resourceFor:
    @@@:
      ManakaiDOM:ForClass
    @@ForCheck: 
      !ManakaiDOM:ForClass ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
  
  @rdf:type:
    @@@:
      ManakaiDOM:IF
    @@ForCheck:
      ManakaiDOM:ForIF
  @QName:
    @@@:
      DOMCore:DOMImplementationSource
    @@ForCheck:
      ManakaiDOM:ForIF

  @rdf:type:
    @@@:
      dis:MultipleResource
    @@ForCheck:
      ManakaiDOM:ForClass !ForCDIS !ForDAC !ManakaiDOM:ForIF
  @resourceFor:
    @@@: ForCDIS
    @@ForCheck:
      ManakaiDOM:ForClass ManakaiDOM:ManakaiDOMLatest
  @resourceFor:
    @@@: ForDAC
    @@ForCheck:
      ManakaiDOM:ForClass

  @rdf:type:
    @@@:
      ManakaiDOM:Class
    @@ForCheck: 
      ManakaiDOM:ForClass ForCDIS
  @QName:
    @@@:
      DOMCore:ManakaiDOMImplementationSourceCompat
    @@ForCheck:
      ManakaiDOM:ForClass ForCDIS
  
  @rdf:type:
    @@@:
      ManakaiDOM:Class
    @@ForCheck:
      ManakaiDOM:ForClass ForDAC
  @QName:
    @@@: 
      DOMCore:ManakaiDOMImplementationSource
    @@ForCheck:
      ManakaiDOM:ForClass ForDAC

  @Implement:
    @@@:
      DOMCore:DOMImplementationSource::ManakaiDOM:ManakaiDOMLatest
    @@ForCheck:
      ManakaiDOM:ForClass ForDAC ManakaiDOM:ManakaiDOMLatest
  @Implement:
    @@@:
      DOMCore:DOMImplementationSource::ManakaiDOM:ManakaiDOM3
    @@ForCheck:
      ManakaiDOM:ForClass ForDAC ManakaiDOM:ManakaiDOM3
  @Implement:
    @@@:
      DOMCore:DOMImplementationSource::ManakaiDOM:ManakaiDOM
    @@ForCheck:
      ManakaiDOM:ForClass ForDAC ManakaiDOM:ManakaiDOM

  @For:
    ManakaiDOM:DOM3
  @For:
    =ManakaiDOM:ManakaiDOM

  @DOMMain:implementFeature:
    DOMCore:CoreFeature30

  @ISA:
    @@@:
      DOMCore:DOMImplementationSource::ManakaiDOM:ManakaiDOM3
    @@ForCheck:
      ManakaiDOM:ForIF ManakaiDOM:ManakaiDOMLatest
  @ISA:
    @@@:
      DOMCore:DOMImplementationSource::ManakaiDOM:ManakaiDOM
    @@ForCheck:
      ManakaiDOM:ForIF ManakaiDOM:ManakaiDOM3

  @DISLang:role:
    @@@: ManakaiDOMImplementationSourceRole
    @@ForCheck: ForDAC

  @Role:
    @@@: 
      DOMCore:DOMImplementationSource::ManakaiDOM:ManakaiDOM
    @@For:
      ManakaiDOM:ManakaiDOM
    @@ForCheck:
      ManakaiDOM:ForClass ForCDIS

  @Description:
    @@lang:en
    @@@:
      An interface providing access to available DOM implementations.
  @Spec:
    @@DOM3:
      http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMImplementationSource

  @Method:
     @@Name:  getDOMImplementation
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-getDOMImpl
     @@Description:
        @@@lang:en
        @@@@: 
          Returns the first DOM implementation that support specific 
          features.
     @@Param:
        @@@Name:  features
        @@@Type:
          DOMMain:DOMString
        @@@actualType:
          ManakaiDOM:ManakaiDOMFeatures
        @@@Description:
          @@@@lang:en
          @@@@@:
            A string that specifies which features and versions are 
            required.
     @@Return:
        @@@Type:
          @@@@@:
            DOMCore:DOMImplementation::ManakaiDOM:ManakaiDOM
          @@@@For:
            ManakaiDOM:ManakaiDOM
        @@@Type:  
          DOMCore:DOMImplementation
        @@@Description:
          @@@@lang:en
          @@@@@: 
            The first DOM implementation that support the desired 
            features and versions.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              This source has no DOM implementation that supports the 
              desired features and versions.
        @@@PerlDef:
          @@@@ForCheck: ForDAC
          @@@@@:
            CLS: for my $class (grep {
              $Message::DOM::ManakaiDOMImplementationSource::SourceClass{$_}
            } keys %Message::DOM::ManakaiDOMImplementationSource::SourceClass) {
              __CODE{makeClassISAList:: $CLASS => $class}__;
              for my $fname (keys %$features) {
                my $fkey = $fname;
                my $plus = $fname =~ s/^\+// ? true : false;
                FVER: for my $fver (grep {$features->{$fkey}->{$_}}
                                       keys %{$features->{$fkey}}) {
                  for my $cls ($class, @{$Message::DOM::ClassISA{$class}}) {
                    if ($Message::DOM::ImplFeature{$class}->{$fname}->{$fver} ||=
                           ## (Caching)
                        $Message::DOM::ImplFeature{$cls}->{$fname}->{$fver}) {
                      next FVER; # Feature/version found
                    }
                  }

                  if ($plus) {
                    if ($Message::DOM::ManakaiDOMImplementation::CompatClass{
                          $class}) {
                      my %compat_cls;
                      for my $cls (grep {
                        $Message::DOM::ManakaiDOMImplementation::CompatClass{
                        $_}
                      } keys
                      %Message::DOM::ManakaiDOMImplementation::CompatClass) {
                        next if $compat_cls{$cls};
                        __CODE{makeClassISAList:: $CLASS => $cls}__;
                        for my $c (@{$Message::DOM::ClassISA{$cls}}) {
                          $compat_cls{$c} = true;
                        }                 
                      }
                      for my $cls (keys %compat_cls) {
                        if ($Message::DOM::ImplFeature{$cls}
                              ->{$fname}->{$fver}) {
                          next FVER; # +Feature/ver found
                        }
                      }
                    }
                  }
                  next CLS; # Not found
                } # FVER
              } # FNAME

              ## Class found
              $r = $class->_new;
              last CLS;    ## NOTE: Method name directly written
            } # CLS
        @@@PerlDef:
          @@@@ForCheck: ForCDIS
          @@@@@:
          $features->{'core'}->{''} = 1;
              ## NOTE: This method must return a DOMImplementation object. 
          CLS: for my $fcls (values %<IF::DOMCore:DOMImplementation
                                     ::ManakaiDOM:ManakaiDOM>::Class) {
            for my $fname (keys %$features) {
              my $fkey = $fname;
              my $plus = $fname =~ s/^\+// ? 1 : 0;
              F: for my $fver (grep {$features->{$fkey}->{$_}}
                                     keys %{$features->{$fkey}}) {
                unless ($fcls->{feature}->{$fname}->{$fver}) {
                  ## Accessible via getFeature
                  if ($plus and
                      $Message::DOM::DOMCore::ManakaiDOMImplementation::Class{
                        $fcls->{packageName}}->{packageName}) {
                    for my $pfcls (values
                       %Message::DOM::DOMCore::ManakaiDOMImplementation::Class) {
                      if ($pfcls->{feature}->{$fname}->{$fver}) {
                        next F;
                      }
                    }
                  }
                  next CLS;
                }
              }
            }
            $r = $fcls->{packageName}->_new;
            last CLS;
          }
  @Method:
     @@Name:  getDOMImplementationList
     @@Description:
       @@@lang:en
       @@@@:
         Returns a list of DOM implementations that support the specified 
         features and versions.
     @@Param:
        @@@Name:  features
        @@@Type:
          DOMMain:DOMString
        @@@actualType:
          ManakaiDOM:ManakaiDOMFeatures
        @@@Description:
          @@@@lang:en
          @@@@@:
            A string that specifies which features and versions are required.
     @@Return:
        @@@Type:  
          DOMCore:DOMImplementationList
        @@@actualType: 
          DOMCore:ManakaiDOMImplementationList
        @@@Description:
          @@@@lang:en
          @@@@@:
            A list of DOM implementations that support the desired 
            features and versions.
        @@@PerlDef:
          @@@@ForCheck: ForDAC
          @@@@@:
            $r = <ClassM::DOMCore:ManakaiDOMImplementationList.new>;
            CLS: for my $class (grep {
              $Message::DOM::ManakaiDOMImplementationSource::SourceClass{$_}
            } keys %Message::DOM::ManakaiDOMImplementationSource::SourceClass) {
              __CODE{makeClassISAList:: $CLASS => $class}__;
              for my $fname (keys %$features) {
                my $fkey = $fname;
                my $plus = $fname =~ s/^\+// ? true : false;
                FVER: for my $fver (grep {$features->{$fkey}->{$_}}
                                       keys %{$features->{$fkey}}) {
                  for my $cls ($class, @{$Message::DOM::ClassISA{$class}}) {
                    if ($Message::DOM::ImplFeature{$class}->{$fname}->{$fver} ||=
                           ## (Caching)
                        $Message::DOM::ImplFeature{$cls}->{$fname}->{$fver}) {
                      next FVER; # Feature/version found
                    }
                  }

                  if ($plus) {
                    if ($Message::DOM::ManakaiDOMImplementation::CompatClass{
                          $class}) {
                      my %compat_cls;
                      for my $cls (grep {
                        $Message::DOM::ManakaiDOMImplementation::CompatClass{
                        $_}
                      } keys
                      %Message::DOM::ManakaiDOMImplementation::CompatClass) {
                        next if $compat_cls{$cls};
                        __CODE{makeClassISAList:: $CLASS => $cls}__;
                        for my $c (@{$Message::DOM::ClassISA{$cls}}) {
                          $compat_cls{$c} = true;
                        }                 
                      }
                      for my $cls (keys %compat_cls) {
                        if ($Message::DOM::ImplFeature{$cls}
                              ->{$fname}->{$fver}) {
                          next FVER; # +Feature/ver found
                        }
                      }
                    }
                  }
                  next CLS; # Not found
                } # FVER
              } # FNAME

              ## Class found
              $r-><M::DOMCore:ManakaiDOMImplementationList.add> ($class->_new);
              last CLS;                 ## NOTE: Method name directly written
            } # CLS
        @@@PerlDef:
          @@@@ForCheck: ForCDIS
          @@@@@:
          $features->{'core'}->{''} = 1;
              ## NOTE: This method must return DOMImplementation objects. 
          $r = <ClassM::DOMCore:ManakaiDOMImplementationList.new>;
          CLS: for (values %Message::DOM::DOMCore::DOMImplementation::Class) {
            for my $fname (keys %$features) {
              my $plus = $fname =~ s/^\+// ? 1 : 0;
              F: for my $fver (ref $features->{$fname} eq 'HASH'
                                 ? grep {$features->{$fname}->{$_}}
                                     keys %{$features->{$fname}}
                                 : $features->{$fname}) {
                unless ($_->{feature}->{$fname}->{$fver}) {
                  ## Accessible via getFeature
                  if ($plus and
                      $Message::DOM::DOMCore::ManakaiDOMImplementation::Class{
                        $_->{packageName}}->{packageName}) {
                    for (values
                       %Message::DOM::DOMCore::ManakaiDOMImplementation::Class) {
                      if ($_->{feature}->{$fname}->{$fver}) {
                        next F;
                      }
                    }
                  }
                  next CLS;
                }
              }
            }
            $r-><M::DOMCore:ManakaiDOMImplementationList.add>
                  ($_->{packageName}->_new);
          }
##DOMImplementationSource

ResourceDef:
  @QName: makeClassISAList
  @rdf:type:
    dis2pm:BlockCode
  @enDesc:
    Makes the list of <QUOTE::is-a> classes of a class.
  @PerlDef:
    unless ($Message::DOM::ClassISA{$CLASS}) {
      no strict 'refs';
      my %__class;
      my @__chk = ($CLASS);
      while (my $__chk = shift @__chk) {
        $__class{$__chk} = true;
        for my $__isa (@{$__chk . '::ISA'}) {
          if ($__isa !~ /::IF::/ and 
              not $__class{$__isa}) {
            push @__chk, $__isa;
          }
        }
      }
      $Message::DOM::ClassISA{$CLASS} = [keys %__class];
    }

## -- Simplified DOMImplementation interface

ResourceDef:
  @rdf:type:
    @@@:
      dis:MultipleResource
    @@ForCheck:
      !ManakaiDOM:ForIF !ManakaiDOM:ForClass !ForCDIS !ForDAC
  @resourceFor:
    @@@:
      ManakaiDOM:ForIF
    @@ForCheck:
      !ManakaiDOM:ForClass
  @resourceFor:
    @@@:
      ManakaiDOM:ForClass
    @@ForCheck: 
      !ManakaiDOM:ForClass
  
  @rdf:type:
    @@@:
      ManakaiDOM:IF
    @@ForCheck:
      ManakaiDOM:ForIF
  @QName:
    @@@: ManakaiDOMMinimumImplementationIF
    @@ForCheck:
      ManakaiDOM:ForIF

  @rdf:type:
    @@@:
      dis:MultipleResource
    @@ForCheck:
      ManakaiDOM:ForClass !ForCDIS !ForDAC !ManakaiDOM:ForIF
  @resourceFor:
    @@@: ForCDIS
    @@ForCheck:
      ManakaiDOM:ForClass ManakaiDOM:ManakaiDOMLatest
  @resourceFor:
    @@@: ForDAC
    @@ForCheck:
      ManakaiDOM:ForClass

  @rdf:type:
    @@@:
      ManakaiDOM:Class
    @@ForCheck: 
      ManakaiDOM:ForClass ForCDIS
  @QName:
    @@@: ManakaiDOMMinimumImplementationCompat
    @@ForCheck:
      ManakaiDOM:ForClass ForCDIS
  
  @rdf:type:
    @@@:
      ManakaiDOM:Class
    @@ForCheck:
      ManakaiDOM:ForClass ForDAC
  @QName:
    @@@: ManakaiDOMMinimumImplementation
    @@ForCheck:
      ManakaiDOM:ForClass ForDAC
  @Implement:
    @@@: ManakaiDOMMinimumImplementationIF
    @@ForCheck:
      ManakaiDOM:ForClass ForDAC ManakaiDOM:ManakaiDOMLatest

  @Description:
    @@lang:en
    @@@:
      The <IF::ManakaiDOMMinimumImplementationIF> interface 
      is a subset of the DOM Level 3 <IF::DOMCore:DOMImplementation>
      interface.  This interface provides only two methods:
      <M::.hasFeature> (DOM Level 1) and <M::.getFeature> (DOM Level 3).

  @ISA:
    @@@:
      ManakaiDOMMinimumImplementationIF::ManakaiDOM:ManakaiDOM3
    @@ForCheck:
      ManakaiDOM:ForIF ManakaiDOM:ManakaiDOM3 !=ManakaiDOM:ManakaiDOM3
  @ISA:
    @@@:
      ManakaiDOMMinimumImplementationIF::ManakaiDOM:ManakaiDOM
    @@ForCheck:
      ManakaiDOM:ForIF ManakaiDOM:ManakaiDOM3
  @ISA:
    @@@:
      DOMCore:DOMImplementation::ManakaiDOM:ManakaiDOM1
    @@ForCheck:
      ManakaiDOM:ForIF
  @ISA:
    @@@:
      DOMCore:DOMImplementation::ManakaiDOM:ManakaiDOM
    @@ForCheck:
      ManakaiDOM:ForIF

  @ISA:
    @@@:
      ManakaiDOM:ManakaiDOMNodeReference::ManakaiDOM:Perl
    @@ForCheck:
      ManakaiDOM:ManakaiDOM ManakaiDOM:ForClass
  @ISA:
    @@@:
      ManakaiDOM:ManakaiDOMObject
    @@ForCheck:
      ManakaiDOM:ForClass ManakaiDOM:ManakaiDOM

  @DISLang:role:
    @@@: ManakaiDOMImplementationRole
    @@ForCheck: ForDAC
  @DOMMetaImpl:provideFeature:
    ManakaiDOM:MinimumFeature30

  @Role:
    @@@:
      DOMCore:DOMImplementation::ManakaiDOM:ManakaiDOM
    @@compat:
      DOMCore:ManakaiDOMImplementation::ManakaiDOM:ManakaiDOMLatest
    @@ForCheck:
      ManakaiDOM:ForClass ManakaiDOM:ManakaiDOM ForCDIS
  @DOMMain:implementFeature:
    DOMCore:CoreFeature10
  @DOMMain:implementFeature:
    ManakaiDOM:MinimumFeature30

  @For:
    ManakaiDOM:ManakaiDOM3
  @For:
    =ManakaiDOM:ManakaiDOM
  
  @Method:
    @@Name:  hasFeature
    @@Description:
      @@@lang:en
      @@@@:
         Tests whether this DOM implementation supports a specific 
         feature and version or not.
    @@Param:
      @@@Name:  feature
      @@@Type:
        DOMMain:DOMString
      @@@actualType:
        ManakaiDOM:ManakaiDOMFeatureName
      @@@Description:
        @@@@lang:en
        @@@@@: 
          The name of the feature to test, with or without 
          <CHAR::PLUS SIGN> prefix.
    @@Param:
      @@@Name:  version
      @@@Type:
        DOMMain:DOMString
      @@@actualType:
        ManakaiDOM:ManakaiDOMFeatureVersion
      @@@Description:
        @@@@lang:en
        @@@@@:
          The version number of the feature to test. 
    @@Return:
      @@@Type:  
        DOMMain:boolean::ManakaiDOM:all
      @@@Description:
        @@@@lang:en
        @@@@@: 
          Whether the feature and version is implemented or not.
      @@@InCase:
        @@@@Value: true
        @@@@Description:
          @@@@@lang:en
          @@@@@@: 
            The <P::feature> is implemented in the specified <P::version>.
      @@@InCase:
        @@@@Value: false
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The feature is not implemented.
        @@@PerlDef:
          @@@@ForCheck: ForDAC
          @@@@@:
            my $plus = $feature =~ s/^\+// ? 1 : 0;
            my $class = ref $self;
            __CODE{makeClassISAList:: $CLASS => $class}__;
            if (defined $Message::DOM::ImplFeature{$class}
                                ->{$feature}->{$version}) {
              $r = $Message::DOM::ImplFeature{$class}
                                ->{$feature}->{$version};
            } elsif ($plus) {
              CLASS: for my $class (grep {
                $Message::DOM::ManakaiDOMImplementation::CompatClass{$_}
              } keys %Message::DOM::ManakaiDOMImplementation::CompatClass) {
                for my $cls ($class, @{$Message::DOM::ClassISA{$class}}) {
                  if ($Message::DOM::ImplFeature{$class}
                                   ->{$feature}->{$version}) {
                    $r = true;
                    last CLASS;
                  }
                }
              }
            }
        @@@PerlDef:
          @@@@ForCheck: ForCDIS
          @@@@@:
            my $plus = $feature =~ s/^\+// ? 1 : 0;
        if ($<IF::DOMCore:DOMImplementation::ManakaiDOM:ManakaiDOM>::Class{
            ref $self}->{$feature}->{$version}) {
          $r = true;
        } else {
          for (values %Message::DOM::DOMCore::ManakaiDOMImplementation::Class) {
            if ($_->{feature}->{$feature}->{$version}) {
              $r = true;
              last;
            }
          }
        } 
  @Method:
     @@Name:  getFeature
     @@Description:
        @@@lang:en
        @@@@:
          Returns a specialized object that implements the specialized 
          interfaces of the specified feature and version.
     @@Param:
        @@@Name:  feature
        @@@Type:
          DOMMain:DOMString
        @@@actualType:
          ManakaiDOM:ManakaiDOMFeatureName
        @@@Description:
          @@@@lang:en
          @@@@@:
            A feature name to request.
     @@Param:
        @@@Name:  version
        @@@Type:
          DOMMain:DOMString
        @@@actualType:
          ManakaiDOM:ManakaiDOMFeatureVersion
        @@@Description:
          @@@@lang:en
          @@@@@:
            A feature version number to request.
     @@Return:
        @@@Type:  
          DOMMain:Object::ManakaiDOM:all
        @@@Description:
          @@@@lang:en
          @@@@@:
            An object that implements the specialized APIs of the 
            <P::feature> and <P::version>.  It might or might not 
            implements the <IF::DOMImplementation> interface. 
            In addition, the object might or might not part of 
            manakai. 
        @@@ImplNote:
          @@@@lang:en
          @@@@@:
            If the object implements the <IF::DOMImplementation> interface, 
            it must delegate to the primary core <IF::DOMImplementation> 
            and must not result incosistent with the primary core 
            <IF::DOMImplementation> such as <M::DOMImplementation.hasFeature>, 
            <M::DOMImplementation.getFeature>, etc.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@@: 
            There is no object available that implements interfaces 
            associated with the <P::feature> and <P::version>. 
        @@@PerlDef:
          @@@@ForCheck: ForDAC
          @@@@@:
            $feature =~ s/^\+//;
            CLASS: for my $class (grep {
              $Message::DOM::ManakaiDOMImplementation::CompatClass{$_}
            } keys %Message::DOM::ManakaiDOMImplementation::CompatClass) {
              __CODE{makeClassISAList:: $CLASS => $class}__;
              for my $cls ($class, @{$Message::DOM::ClassISA{$class}}) {
                if ($Message::DOM::ImplFeature{$class}->{$feature}->{$version}) {
                  $r = $self->{<Q::TreeCore:node>}
                            -><M::ManakaiDOM:ManakaiDOMNodeObject
                                     ::ManakaiDOM:Perl.newReference> ($class);
                  last CLASS;
                }
              }
            }
        @@@PerlDef:
          @@@@ForCheck: ForCDIS
          @@@@@:
          $feature =~ s/^\+//;
          for (values %Message::DOM::DOMCore::ManakaiDOMImplementation::Class) {
            if ($_->{feature}->{$feature}->{$version}) {
              $r = $self->{<Q::TreeCore:node>}
                        -><M::ManakaiDOM:ManakaiDOMNodeObject
                                     ::ManakaiDOM:Perl.newReference>
                                                        ($_->{packageName});
              last;
            }
          }
  @IntMethod:
    @@Name:new
    @@Description:
      @@@lang:en
      @@@@:
        Constructs a new instance of <Class::ManakaiDOMMinimumImplementation> 
        class. 
    @@Return:
      @@@Type: ManakaiDOMMinimumImplementation
      @@@Description:
        @@@@lang:en
        @@@@@:
          The newly created DOM implementation object.
      @@@PerlDef:
        my $node = <ClassM::ManakaiDOM:ManakaiDOMNodeObject
                          ::ManakaiDOM:Perl.new>;
        $r = $node-><M::ManakaiDOM:ManakaiDOMNodeObject
                          ::ManakaiDOM:Perl.newReference> ($self);
        $node->{<Q::ManakaiDOM:implID>} = $node->{<Q::TreeCore:nodeID>};
##ManakaiDOMMinimumImplementation

PropDef:
  @QName:
    DOMCore:implementation
  @Description:
    @@lang:en
    @@@:
      The implementation object.

ElementTypeBinding:
  @Name: PerlDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:Perl

ElementTypeBinding:
  @Name: MDOMFeature
  @ElementType:
    DOMMain:implementFeature
  @ShadowContent:
    @@@: 
      DOMMain:ManakaiDOMFeature10

ElementTypeBinding:
  @Name: DOMMFeature
  @ElementType:
    DOMMain:implementFeature
  @ShadowContent:
    @@@: 
      DOMMain:DOMMainFeature10
    @@For:
      ManakaiDOM:DOM1
  @ShadowSibling:
    @@DOMMain:implementFeature:
      @@@@: 
        DOMMain:DOMMainFeature20
      @@@For:
        ManakaiDOM:DOM2
    @@DOMMain:implementFeature:
      @@@@: 
        DOMMain:DOMMainFeature30
      @@@For:
        ManakaiDOM:DOM3

ElementTypeBinding:
  @Name: PropDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      rdf:Property
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:all
      @@@For:
        !=ManakaiDOM:all

ElementTypeBinding:
  @Name: Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttribute
    @@ForCheck:
      ManakaiDOM:DOM !=ManakaiDOM:ManakaiDOM

ElementTypeBinding:
  @Name: Get
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttrGet

ElementTypeBinding:
  @Name: Set
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttrSet

ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:DOM !=ManakaiDOM:ManakaiDOM

ElementTypeBinding:
  @Name: IntMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isForInternal: 1

ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethodParameter

ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethodReturn

ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase

ElementTypeBinding:
  @Name: StringDataTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DataType
    @@AliasFor: 
      @@@@:
        ::ManakaiDOM:ManakaiDOMLatest
      @@@For:
        ManakaiDOM:ManakaiDOMCommon
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM

ElementTypeBinding:
  @Name: IFQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck:
      ManakaiDOM:ForIF

ElementTypeBinding:
  @Name: ClsQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck:
      ManakaiDOM:ForClass

