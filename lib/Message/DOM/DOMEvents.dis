Module:
  @QName: 
    MDOM:DOMEvents
  @Namespace:
     http://suika.fam.cx/~wakaba/archive/2004/dom/events#
  @BindingName:
     @@@:  events
     @@Type:
        lang:IDL-DOM
     @@prefix:  dom.w3c.org
  @FullName:
    @@lang:en
    @@@: DOM Events Module

  @Author:
     @@FullName:  Wakaba
     @@Mail:  w@suika.fam.cx
  @License:
     license:Perl+MPL
  @Date:
    @@@:
      $Date: 2005/08/31 13:02:46 $
    @@ContentType:
      dis:Date.RCS

  @DefaultFor:
    ManakaiDOM:ManakaiDOMLatest

  @Require:
     @@Module:
        @@@Name:  DOMCore
    @@Module:
      @@@Name: DOMEvents
      @@@WithFor:
        ManakaiDOM:ManakaiDOM
    @@Module:
      @@@Name: DOMEvents
      @@@WithFor:
        ManakaiDOM:ManakaiDOM2
    @@Module:
      @@@Name: DOMEvents
      @@@WithFor:
        ManakaiDOM:ManakaiDOM3
    @@Module:
      @@@Name: DOMEvents
      @@@WithFor:
        ManakaiDOM:ManakaiDOMLatest

Namespace:
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @ev:
    http://www.w3.org/2001/xml-events
  @infoset:
     http://www.w3.org/2001/04/infoset#
  @lang:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @ManakaiDOMCore:
    http://suika.fam.cx/~wakaba/archive/2004/mdom-core#
  @ManakaiDOMEvents:
    http://suika.fam.cx/~wakaba/archive/2004/mdom-ev#
  @MDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.
  @MDOMX:
    http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @Perl:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#Perl--
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#
  @TreeCore:\

## -- Features

ElementTypeBinding:
  @Name: FeatureDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DOMMain:DOMFeature
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:all
      @@@For:
        !=ManakaiDOM:all
ElementTypeBinding:
  @Name: FeatureVerDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DOMMain:DOMFeature

ElementTypeBinding:
  @Name: featureName
  @ElementType:
    dis:AppName
  @ShadowContent:
    @@ContentType:
      dis:String

FeatureDef:
  @featureName: Events
  @QName: EventsFeature
  @FeatureVerDef:
    @@Version:2.0
    @@FullName: DOM Level 2 Events
    @@QName: EventsFeature20
    @@ISA: EventsFeature
    @@DOMMain:requireFeature:
      DOMCore:CoreFeature20
  @FeatureVerDef:
    @@Version:3.0
    @@FullName: DOM Level 3 Events
    @@QName: EventsFeature30
    @@ISA: EventsFeature20
    @@DOMMain:requireFeature:
      DOMCore:CoreFeature20

ImplNote:
  @FullName:
    @@lang:en
    @@@: Event Types and Event Categories
  @Description:
    @@lang:en
    @@@:
      Each event is associated with a <DFN::event type>.  The type is 
      identified by the pair of a DOM URI and a local name. 
      They are case-sensitive.
    \
      Each event type in turn could be part of one or more categories. 
      An <DFN::event category> is also identified by the pair of 
      a DOM URI and a local name.
    \
      {NOTE::
         DOM Level 2 Events methods are namespace ignorant; in DOM 
         Level 2 Events, the event type is only represented by 
         an XML 1.0 <CODE::Name>.  While it is safe to use both Level 2 and 
         Level 3 methods when not dealing with namespaces, 
         using them at the same time should be avoided.
      \
      }
      \
      {P:: For compatibility, the dispatching of an event will ignore 
      namespace URIs if either the event or the event listener 
      has a <DOM::null> namespace URI, that is:
      \
      - If a DOM Level 2 event (<DOM::null> namespace URI) is 
        dispatched, all event listeners that match the local name 
        will be triggered.
      \
      - If a DOM Level 3 event (non-<DOM::null> namespace URI) is 
        dispatched, all event listeners with the same local name 
        that match the namespace URI or whose namespace URI is <DOM::null> 
        will be triggered.
      \
      }
  @ImplNote:
    @@lang:en
    @@@:

ResourceDef:
  @QName: ManakaiDOMEventNamespaceURI
  @rdf:type:
    ManakaiDOM:DataType
  @ISA:
    ManakaiDOM:ManakaiDOMNamespaceURI
  @Description:
    @@lang:en
    @@@:
      An event namespace URI.  In DOM Level 3, an event type is identified 
      by the pair of namespace URI and local name. 
  @L3:
  @For:
    ManakaiDOM:DOM3

## TODO: inherit of inputNormalizer

ResourceDef:
  @QName: ManakaiDOMEventLocalName
  @rdf:type:
    ManakaiDOM:DataType
  @ISA:
    DOMMain:ManakaiDOMXMLName
  @Description:
    @@lang:en
    @@@:
      An event type name.  In DOM Level 2, it identifies the type of 
      an event.  In DOM Level 3, a pair of a namespace URI and 
      a local name identifies an event. 
  @L2:
  @For:
    ManakaiDOM:DOM2
  @InCase:
    @@Label:
      @@@lang:en
      @@@@:
        XML 1.0 <CODE::Name>
    @@Description:
      @@@lang:en
      @@@@:
        In DOM Level 2, an event type must be an XML 1.0 <CODE::Name>. 
      In DOM Level 2 Events, event type names begin with 
      <CODE::DOM> (in any case) was reserved.  Third party added 
      events were strongly recommended to start with 
      some prefix to avoid confusion.
    @@L2:
  @InCase:
    @@Label:
      @@@lang:en
      @@@@:
        XML Namespace 1.0 <CODE::NCName>
    @@Description:
      @@@lang:en
      @@@@:
        In DOM Level 3, a local name part of an event type should 
        be a XML Namespace 1.0 <CODE::NCName>.
    @@L3:

ImplNote:
  @FullName:
    @@lang:en
    @@@: DOM Event Flow
  @Description:
    @@lang:en
    @@@:
      {P:: The event dispathcing (propagation) occurs in the order:
      \
       = Capture phase:: the event is dispatched to ancestors of 
                         the target from the root of the tree 
                         to the direct parent of the target node.
      \
       = Target pharse:: the event is dispatched to the target node.
      \
       = Bubbling phase:: the event is dispatched to ancestors of 
                          the target from the direct parent of 
                          the target node to the root of the tree.
      \
       = Default actions:: not part of the DOM Event flow; they are 
                           invoked, if any, after the event is dispatched.
      \
      }
      \
      Some events may not necessarily accomplish the three pharses; 
      see <A::Event.bubbles>.
      \
      Ancesotrs are determined before the initial dispatch; even if 
      the target node is removed during the dispatching or if 
      an ancestor is added or removed, the event propagation 
      will always be based on the nodes determined before the dispatching.

ElementTypeBinding:
  @Name: DataTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DataType
    @@ForCheck:
      ManakaiDOM:DOM2

DataTypeDef:
  @Name:  DOMString
  @AliasFor:
    @@@:
      DOMMain:DOMString
    @@For:
      !ManakaiDOM:IDL
  @Def:
    @@For:
      ManakaiDOM:IDL
    @@@DISLang:dataTypeAliasFor:
      DOMMain:DOMString
DataTypeDef:
  @Name:  DOMTimeStamp
  @AliasFor:
    @@@:
      DOMMain:DOMTimeStamp
    @@For:
      !ManakaiDOM:IDL
  @Def:
    @@For:
      ManakaiDOM:IDL
    @@@DISLang:dataTypeAliasFor:
      DOMMain:DOMTimeStamp
DataTypeDef:
  @Name:  DOMObject
  @AliasFor:
    @@@:
      DOMMain:DOMObject
    @@For:
      !ManakaiDOM:IDL
  @Def:
    @@For:
      ManakaiDOM:IDL
    @@@DISLang:dataTypeAliasFor:
      DOMMain:DOMObject
  @For:
    ManakaiDOM:DOM3
DataTypeDef:
  @Name:  Node
  @AliasFor:
    @@@:
      DOMCore:Node
    @@For:
      !ManakaiDOM:IDL
  @Def:
    @@For:
      ManakaiDOM:IDL
    @@@DISLang:dataTypeAliasFor:
      DOMCore:Node

ElementTypeBinding:
  @Name: ExceptionDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@:
        dis:MultipleResource
      @@@ForCheck:
        !ManakaiDOM:ForClass !ManakaiDOM:ForIF
    @@rdf:type:
      @@@@:
        ManakaiDOM:ExceptionIF
      @@@ForCheck:
        ManakaiDOM:ForIF
    @@rdf:type:
      @@@@:
        ManakaiDOM:ExceptionClass
      @@@ForCheck:
        ManakaiDOM:ForClass
    @@resourceFor:
      ManakaiDOM:ForIF
    @@resourceFor:
      @@@@:
        ManakaiDOM:ForClass
      @@@ForCheck:
        ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
    @@ForCheck:
      ManakaiDOM:DOM
    @@ISA:
      @@@@:
        DOMMain:ManakaiDOMExceptionIF::ManakaiDOM:Perl
      @@@ForCheck:
        ManakaiDOM:ManakaiDOM ManakaiDOM:ForIF
    @@ISA:
      @@@@:
        ManakaiDOM:ManakaiDOMException::ManakaiDOM:Perl
      @@@ForCheck:
        ManakaiDOM:ManakaiDOM
      @@@ForCheck:
        ManakaiDOM:ForClass
    @@ISA:
      @@@@:
        ManakaiDOM:ManakaiDOMObject
      @@@ForCheck:
        ManakaiDOM:ManakaiDOM ManakaiDOM:ForClass
    @@ISA:
      @@@@:
        ::ManakaiDOM:ManakaiDOM
      @@@ForCheck:
        ManakaiDOM:ForIF
      @@@For:
        ManakaiDOM:ManakaiDOM2

ElementTypeBinding:
  @Name: L2
  @ElementType:
    DOMMain:implementFeature
  @ShadowContent:
    @@@: EventsFeature20
    @@For:
      ManakaiDOM:DOM2
  @ShadowSibling:
    @@DOMMain:implementFeature:
      @@@@: EventsFeature30
      @@@For:
        ManakaiDOM:DOM3

ElementTypeBinding:
  @Name: L2IF
  @ElementType:
    DOMMain:implementFeature
  @ShadowContent:
    @@@: EventsFeature20
    @@For:
      ManakaiDOM:DOM2
  @ShadowSibling:
    @@DOMMain:implementFeature:
      @@@@: EventsFeature30
      @@@For:
        ManakaiDOM:DOM3
    @@ISA:
      @@@@:
        ::ManakaiDOM:ManakaiDOM2
      @@@ForCheck:
        ManakaiDOM:ForIF
      @@@For:
        ManakaiDOM:ManakaiDOM3
    @@For:
      ManakaiDOM:DOM2
    @@For:
      =ManakaiDOM:ManakaiDOM

ElementTypeBinding:
  @Name: L3
  @ElementType:
    DOMMain:implementFeature
  @ShadowContent:
    @@@: EventsFeature30
    @@For:
      ManakaiDOM:DOM3

ElementTypeBinding:
  @Name: L3IF
  @ElementType:
    DOMMain:implementFeature
  @ShadowContent:
    @@@: EventsFeature30
    @@For:
      ManakaiDOM:DOM3
  @ShadowSibling:
    @@For:
      ManakaiDOM:DOM3
    @@For:
      =ManakaiDOM:ManakaiDOM

ExceptionDef:
  @Name: 
    @@@: EventException
    @@ForCheck:
      ManakaiDOM:ForIF
  @QName:
    @@@: ManakaiDOMEventException
    @@ForCheck:
      ManakaiDOM:ForClass

  @Level[list]:  2
  @SpecLevel[list]:  2
  @L2IF:

  @Attr:
     @@Name:  code
     @@Get:
        @@@Type:
           DOMMain:unsigned-short
        @@@actualType: ManakaiDOMEventExceptionCode
        @@@PerlDef:
          __CODE{ManakaiDOM:getExceptionCode}__;
  @XConstGroup:
     @@QName:
       @@@@: EventExceptionCode
       @@@ForCheck:
         ManakaiDOM:ForIF
     @@QName:
       @@@@:ManakaiDOMEventExceptionCode
       @@@ForCheck:
         ManakaiDOM:ForClass
     @@Description: 
       @@@lang:en
       @@@@:
         The type of error generated.

     @@ISA:
       @@@@:
         DOMMain:unsigned-short
       @@@ForCheck:
         ManakaiDOM:ForClass

     @@XConst:
        @@@Name:  UNSPECIFIED_EVENT_TYPE_ERR
        @@@Type:
           DOMMain:unsigned-short
        @@@Value:  0
        @@@Description:
          @@@@lang:en
          @@@@@:
            The event type was not specified or the event type 
            is <DOM::null> or an empty string.
     @@XConst:
        @@@Name:  DISPATCH_REQUEST_ERR
        @@@Type:
           DOMMain:unsigned-short
        @@@Value:  1
        @@@Level[list]:  3
        @@@SpecLevel[list]:  3
        @@@Description:
          @@@@lang:en
          @@@@@:
            The <IF::Event> object is already dispatched in the tree.

ElementTypeBinding:
  @Name: PerlDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:Perl

ElementTypeBinding:
  @Name: IF
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@:
        dis:MultipleResource
      @@@ForCheck:
        !ManakaiDOM:ForClass !ManakaiDOM:ForIF
    @@rdf:type:
      @@@@:
        ManakaiDOM:IF
      @@@ForCheck:
        ManakaiDOM:ForIF
    @@rdf:type:
      @@@@:
        ManakaiDOM:Class
      @@@ForCheck:
        ManakaiDOM:ForClass
    @@resourceFor:
      ManakaiDOM:ForIF
    @@resourceFor:
      @@@@:
        ManakaiDOM:ForClass
      @@@ForCheck:
        ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
    @@ForCheck:
      ManakaiDOM:DOM
    @@ISA:
      @@@@:
        ManakaiDOM:ManakaiDOMObject
      @@@ForCheck:
        ManakaiDOM:ForClass
    @@ISA:
      @@@@:
        ::ManakaiDOM:ManakaiDOM
      @@@ForCheck:
        ManakaiDOM:ForIF
      @@@For:
        ManakaiDOM:ManakaiDOM2

ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:DOM !=ManakaiDOM:ManakaiDOM
ElementTypeBinding:
  @Name: IntMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isForInternal: 1
ElementTypeBinding:
  @Name: ReMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethod
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isRedefining: 1
ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethodParameter
ElementTypeBinding:
  @Name: Exception
  @ElementType:
    ManakaiDOM:raises

ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMMethodReturn
ElementTypeBinding:
  @Name: Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttribute
    @@ForCheck:
      ManakaiDOM:DOM !=ManakaiDOM:ManakaiDOM

ElementTypeBinding:
  @Name: ReAttr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttribute
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM
    @@ManakaiDOM:isRedefining: 1
ElementTypeBinding:
  @Name: Get
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttrGet
ElementTypeBinding:
  @Name: Set
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DOMAttrSet
ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase

ElementTypeBinding:
  @Name: ConstGroup
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:ConstGroup
    @@ForCheck:
      ManakaiDOM:DOM !=ManakaiDOM:ManakaiDOM

ElementTypeBinding:
  @Name: XConstGroup
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:ConstGroup
    @@ForCheck:
      ManakaiDOM:DOM !=ManakaiDOM:ManakaiDOM
    @@aliasChild:
      @@@@: 1
      @@@For:
        ManakaiDOM:ManakaiDOM
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:ManakaiDOMLatest
      @@@For:
        !ManakaiDOM:ManakaiDOM1

ElementTypeBinding:
  @Name: Const
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: 
      ManakaiDOM:Const
    @@ForCheck:
      ManakaiDOM:DOM !=ManakaiDOM:ManakaiDOM

ElementTypeBinding:
  @Name: XConst
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: 
      ManakaiDOM:Const
    @@ForCheck:
      ManakaiDOM:DOM !=ManakaiDOM:ManakaiDOM
    @@aliasChild:
      @@@@: 1
      @@@For:
        ManakaiDOM:ManakaiDOM
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:ManakaiDOMLatest
      @@@For:
        !ManakaiDOM:ManakaiDOM1
ElementTypeBinding:
  @Name: XParam
  @ElementType:
    ManakaiDOM:exceptionOrWarningParameter
  @ShadowContent:
    @@ForCheck:
      ManakaiDOM:ManakaiDOM
ElementTypeBinding:
  @Name: SubTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:ExceptionOrWarningSubType
    @@ForCheck:
      ManakaiDOM:ManakaiDOM
    @@ForCheck:
      ManakaiDOM:ForClass
    @@aliasChild:1
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:ManakaiDOMLatest
      @@@For:
        !ManakaiDOM:ManakaiDOM1


IF:
  @Name:
    @@@: Event
    @@ForCheck:
      ManakaiDOM:ForIF

  @QName:
    @@@: ManakaiDOMEvent
    @@ForCheck:
      ManakaiDOM:ForClass
  @Role:
    @@@:
      DOMEvents:ManakaiDOMEvent::ManakaiDOM:ManakaiDOMLatest
    @@ForCheck:
      ManakaiDOM:ForClass

  @L2IF:
  @Level[list]:  2
  @SpecLevel[list]:  2  

  @DOMEvents:createEventType: HTMLEvents

  @Description:
    @@lang:en
    @@@:
      Provide contextual information about an event to the listener 
      processing the event.  More specific context information is passed to 
      event listeners by deriving additional interfaces from 
      <IF::Event>.
    \
      {NOTE:: An object that implements the <IF::Event> interface 
              (and additional interfaces, if any) is passed as 
              the parameter to an <IF::EventListener>.
    \
      }
    \
      {NOTE:: To create an instance of the <IF::Event> interface, 
              use the <M::DocumentEvent.createEvent> method.
    \
      }

  @ConstGroup:
     @@QName:
       @@@@: PhaseType
       @@@ForCheck:
         ManakaiDOM:ForIF

     @@QName:
       @@@@: ManakaiDOMPhaseType
       @@@ForCheck:
         ManakaiDOM:ForClass
     @@ISA:
       @@@@:
         DOMMain:unsigned-short
       @@@ForCheck:
         ManakaiDOM:ForClass

     @@Description:
       @@@lang:en
       @@@@:
         Pharses of the event flow.
     @@Const:
        @@@Name:  CAPTURING_PHASE
        @@@Type:
           DOMMain:unsigned-short
        @@@Value:  1
        @@@Description:
          @@@@lang:en
          @@@@@:
            The current event pharse is the capture phase.
     @@Const:
        @@@Name:  AT_TARGET
        @@@Type:
           DOMMain:unsigned-short
        @@@Value:  2
        @@@Description:
          @@@@lang:en
          @@@@@:
            The current event phase is the target phase.
     @@Const:
        @@@Name:  BUBBLING_PHASE
        @@@Type:
           DOMMain:unsigned-short
        @@@Value:  3
        @@@Description:
          @@@@lang:en
          @@@@@:
            The current event phase is the bubbling phase.
  @Attr:
     @@Name:  type
     @@Description:
       @@@lang:en
       @@@@:
         The event type.
     @@DOMEvents:isNSAware:
       @@@@:1
       @@@For:
         ManakaiDOM:DOM3
     @@DOMEvents:isNSUnaware:
       @@@@:1
       @@@For:
         !ManakaiDOM:DOM3
     @@Get:
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOMEventLocalName
        @@@Description:
          @@@@lang:en
          @@@@@:
            The event type.  This value is case-sensitive.
          \
            {NOTE:: If the attribute <A::Event.namespaceURI> is 
                    different from <DOM::null>, the pair of 
                    <A::.namespaceURI> and <A::.type> (local name) 
                    identifies the type of the event.
          \
            }
       @@@Def:
         @@@@ContentType:
           lang:dis
         @@@@GetProp:
           DOMEvents:type
  @Attr:
     @@Name:  target
     @@Description:
       @@@lang:en
       @@@@:
         The event target.
     @@Get:
        @@@Type:  EventTarget
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@GetProp:
            DOMEvents:target
  @Attr:
     @@Name:  currentTarget
     @@Description:
       @@@lang:en
       @@@@:
         The <IF::EventTarget> whose <IF::EventListeners> are 
         currently being processed.
     @@Get:
        @@@Type:  EventTarget
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@GetProp:
            DOMEvents:currentTarget
  @Attr:
     @@Name:  eventPhase
     @@Description:
       @@@lang:en
       @@@@:
         Which phase of event flow is currently being accomplished.
     @@Get:
        @@@Type: 
          DOMMain:unsigned-short
        @@@actualType: ManakaiDOMPhaseType
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@GetProp:
            DOMEvents:eventPhase
  @Attr:
     @@Name:  bubbles
     @@Description:
       @@@lang:en
       @@@@:
         Whether the event is a bubbling event.
     @@Get:
        @@@Type:
           DOMMain:boolean
        @@@InCase:
           @@@@Value:  true
           @@@@Description:
             @@@@@lang:en
             @@@@@@: The event can bubble.
        @@@InCase:
           @@@@Value:  false
           @@@@Description:
             @@@@@lang:en
             @@@@@@: The event cannot bubble.
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@GetProp:
            DOMEvents:bubbles
  @Attr:
     @@Name:  cancelable
     @@Description:
       @@@lang:en
       @@@@:
         Whether the event can have its default action prevented.
     @@Get:
        @@@Type:
           DOMMain:boolean
        @@@InCase:
           @@@@Value:  true
           @@@@Description:
             @@@@@lang:en
             @@@@@@: The default action can be prevented.
        @@@InCase:
           @@@@Value:  false
           @@@@Description:
             @@@@@lang:en
             @@@@@@: The default action cannot be prevented.
       @@@Def:
         @@@@ContentType:
           lang:dis
         @@@@GetProp:
           DOMEvents:cancelable
  @Attr:
     @@Name:  timeStamp
     @@Description:
       @@@lang:en
       @@@@:
         The time at which the event was created.
     @@Get:
        @@@Type:  DOMTimeStamp
        @@@Description:
          @@@@lang:en
          @@@@@:
            The time in milliseconds relative to the implementation 
            dependent epoch.
        @@@InCase:
          @@@@Value:0
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The time is not available.
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@GetProp:
            DOMEvents:timeStamp
  @Method:
     @@Name:  stopPropagation
     @@Description:
       @@@lang:en
       @@@@:
         Prevent event listeners of the same group to be triggered 
         but its effect is deferred untill all event listeners attached 
         on the <A::.currentTarget> have been triggerred.
         Multiple calles to this method have no additional effect.
       \
         {NOTE:: This method does not prevent the default action 
                 from being invoked.
       \
         }
     @@Return:  
       @@@PerlDef:
         @@@@@:
           $self->{<Q::TreeCore:node>}
                ->{<Q::DOMEvents:isPropagationStopped>} = true;
         @@@@ImplNote:
           @@@@@lang:en
           @@@@@@:
             This implementation only changes the status of this object; 
             the caller of this event should access this property 
             to know whether the propagation should be continued or not.
  @Method:
     @@Name:  preventDefault
     @@Description:
       @@@lang:en
       @@@@:
         Signify that the event is to be canceled, i.e. 
         any default action normally taken after the DOM Event flow 
         will not occur.  Calling this method for a non-cancelable 
         event has no effect.
       \
         {NOTE:: This method does not stop the event propagation.
       \
         }
     @@Return: 
       @@@PerlDef:
         @@@@@:
           $self->{<Q::TreeCore:node>}
                ->{<Q::DOMEvents:isDefaultPrevented>} = true;
         @@@@ImplNote:
           @@@@@lang:en
           @@@@@@:
             This implementation only changes the status of this object; 
             the caller of this event should access this property 
             to know whether the default action should be fired or not.
  @Method:
     @@Name:  initEvent
     @@Description:
       @@@lang:en
       @@@@:
         Initialize the value of an <IF::Event> created through 
         the <M::DocumentEvent.createEvent> method. 
         \
         This event 
         only be called before the <IF::Event> has been dispatched 
         via the <M::EventTarget.dispatchEvent> method.
         If this method is called several times before invoking 
         the <M::EventTarget.dispatchEvent>, only the final invocation 
         takes precedence.  This method has no effect if called 
         after the event has been dispatched.  If called from 
         a subclass of the <IF::Event> interface, only the values 
         specified in this method are modified; all other attributes 
         are left unchanged.
     @@DOMEvents:isNSUnaware:1
     @@DOMEvents:NSVariant:.initEventNS
     @@Param:
        @@@Name:  eventTypeArg
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOMEventLocalName
        @@@Description:
          @@@@lang:en
          @@@@@:
            The event type.  The <A::Event.type> is set to this value. 
            \
            {NOTE:: The attribute <A::Event.namespaceURI> is set 
                    to <DOM::null>.
            \
            }
     @@Param:
        @@@Name:  canBubbleArg
        @@@Type:
           DOMMain:boolean
        @@@Description:
          @@@@lang:en
          @@@@@:
            Whether the bubbling can be occur.  The <A::Event.bubbles> is set 
            to this value.
            This parameter overrides the intrinsic bubbling behavior.
        @@@InCase:
           @@@@Value:  true
        @@@InCase:
           @@@@Value:  false
     @@Param:
        @@@Name:  cancelableArg
        @@@Description:
          @@@@lang:en
          @@@@@:
            Whether the default action is cancelable.  The <A::Event.cancelable> 
            is set to this value.
            This parameter overrides the intrinsic cancelabilization.
        @@@Type:
           DOMMain:boolean
        @@@InCase:
           @@@@Value:  true
        @@@InCase:
           @@@@Value:  false
     @@Return: 
       @@@PerlDef:
           my $node = $self->{<Q::TreeCore:node>};
           unless ($node->{<Q::DOMEvents:isDispatched>}) {
             $node->{<Q::infoset:namespaceName>} = null;
             $node->{<Q::DOMEvents:type>} = $eventTypeArg;
             $node->{<Q::DOMEvents:bubbles>} = $canBubbleArg;
             $node->{<Q::DOMEvents:cancelable>} = $cancelableArg;
           }
  @Attr:
     @@Name:  namespaceURI
     @@Description:
       @@@lang:en
       @@@@:
         The namespace URI associated with this event.
     @@DOMEvents:isNSAware:1
     @@Get:
        @@@Type: 
          DOMMain:DOMString
        @@@actualType: ManakaiDOMEventNamespaceURI
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The namespace URI is unspecified.
              \
              {NOTE:: For events initialized with a DOM Level 2 Events 
                      method, the namespace URI is always <DOM::null>.
              \
              }
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@GetProp:
            infoset:namespaceName
     @@Level[list]:  3
     @@SpecLevel[list]:  3
     @@L3:
     @@For:
       ManakaiDOM:DOM3
  @Method:
     @@Name:  isCustom
     @@Description:
       @@@lang:en
       @@@@:
         Whether the event implements the <IF::CustomEvent> interface.
     @@Return:
        @@@Type:
           DOMMain:boolean
        @@@InCase:
           @@@@Value:  true
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The event object implements the <IF::CustomEvent> interface.
        @@@InCase:
           @@@@Value:  false
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The event object does not implement the 
               <IF::CustomEvent> interface.
        @@@PerlDef: \
     @@Level[list]:  3
     @@SpecLevel[list]:  3
     @@L3:
     @@For:
       ManakaiDOM:DOM3
  @Method:
     @@Name:  stopImmediatePropagation
     @@Description:
       @@@lang:en
       @@@@:
         Prevent event listeners of the same group to be triggered. 
         Multiple calles of this method have no additional effect.
       \
         {NOTE:: This method does not prevent the default action 
                 from being invoked. 
       \
         }
     @@Return:  
       @@@PerlDef:
         $self->{<Q::TreeCore:node>}
              ->{<Q::DOMEvents:isImmediatePropagationStopped>} = true;
     @@Level[list]:  3
     @@SpecLevel[list]:  3
     @@L3:
     @@For:
       ManakaiDOM:DOM3
  @Method:
     @@Name:  isDefaultPrevented
     @@Description:
       @@@lang:en
       @@@@:
         Whether the <M::Event.preventDefault> method has been called.
     @@Return:
        @@@Type:
           DOMMain:boolean
        @@@InCase:
           @@@@Value:  true
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The <M::Event.preventDefault> method has been called.
        @@@InCase:
           @@@@Value:  false
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The <M::Event.preventDefault> method has not been called.
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@GetProp:
            DOMEvents:isDefaultPrevented
     @@Level[list]:  3
     @@SpecLevel[list]:  3
     @@L3:
     @@For:
       ManakaiDOM:DOM3
  @Method:
     @@Name:  initEventNS
     @@Description:
       @@@lang:en
       @@@@:
         Initialize the value of an <IF::Event> created through 
         the <M::DocumentEvent.createEvent> method. 
         \
         This event 
         only be called before the <IF::Event> has been dispatched 
         via the <M::EventTarget.dispatchEvent> method.
         If this method is called several times before invoking 
         the <M::EventTarget.dispatchEvent>, only the final invocation 
         takes precedence.  This method has no effect if called 
         after the event has been dispatched.  If called from 
         a subclass of the <IF::Event> interface, only the values 
         specified in this method are modified; all other attributes 
         are left unchanged.
     @@DOMEvents:noNSVariant:.initEvent
     @@DOMEvents:isNSAware:1
     @@Param:
        @@@Name:  namespaceURIArg
        @@@Type: 
          DOMMain:DOMString
        @@@actualType: ManakaiDOMEventNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@:
            The namespace URI of the event type.  The <A::Event.namespaceURI> 
            is set to this value.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The event type has no namespace.
     @@Param:
        @@@Name:  eventTypeArg
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:
            The local name of the event type.  The <A::Event.type> 
            is set to this value.
     @@Param:
        @@@Name:  canBubbleArg
        @@@Type:
           DOMMain:boolean
        @@@Description:
          @@@@lang:en
          @@@@@:
            Whether the bubbling can occur.  The <A::Event.bubbling> 
            is set to this value.  This parameter overrides the 
            intrinsic bubbling behavior.
        @@@InCase:
           @@@@Value:  true
        @@@InCase:
           @@@@Value:  false
     @@Param:
        @@@Name:  cancelableArg
        @@@Type:
           DOMMain:boolean
        @@@Description:
          @@@@lang:en
          @@@@@:
            Whether the default action is cancelable.  The <A::Event.cancelable> 
            is set to this value.  This parameter overrides the 
            intrinsic cancalability.
        @@@InCase:
           @@@@Value:  true
        @@@InCase:
           @@@@Value:  false
     @@Return: 
       @@@PerlDef:
           my $node = $self->{<Q::TreeCore:node>};
           unless ($node->{<Q::DOMEvents:isDispatched>}) {
             $node->{<Q::infoset:namespaceName>} = $namespaceURIArg;
             $node->{<Q::DOMEvents:type>} = $eventTypeArg;
             $node->{<Q::DOMEvents:bubbles>} = $canBubbleArg;
             $node->{<Q::DOMEvents:cancelable>} = $cancelableArg;
           }
     @@Level[list]:  3
     @@SpecLevel[list]:  3
     @@L3:
     @@For:
       ManakaiDOM:DOM3

  @IntMethod:
    @@Name: new
    @@Description:
      @@@lang:en
      @@@@:
        Constructs a new instance of <IF::Event>.
    @@Return:
      @@@Type: ManakaiDOMEvent
      @@@PerlDef:
        my $node = <ClassM::ManakaiDOM:ManakaiDOMNodeObject.new>;
        $r = $node-><M::ManakaiDOM:ManakaiDOMNodeObject.newReference> ($self);
##IF:Events

ElementTypeBinding:
  @Name: PropDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      rdf:Property

PropDef:
  @QName: isNSAware
  @Description:
    @@lang:en
    @@@:
      Whether a subject resource is namespace aware or not. 
      Namespaces for event types are introduced in DOM Level 3.
  @dataType:
    dis:Boolean
PropDef:
  @QName: isNSUnaware
  @Description:
    @@lang:en
    @@@:
      Whether a subject resource is namespace unware or not. 
      Namespaces for event types are introduced in DOM Level 3.
PropDef:
  @QName: NSVariant
  @Description:
    @@lang:en
    @@@:
      A namespace aware variant of subject resource.
  @dataType:
    DISPerl:MemRef
PropDef:
  @QName: noNSVariant
  @Description:
    @@lang:en
    @@@:
      A namespace unaware variant of subject resource.
  @dataType:
    DISPerl:MemRef

ResourceDef:
  @QName: CreateEventType
  @Description:
    @@lang:en
    @@@:
      A type of event interface.  It is used when creating an 
      event object by <M::DocumentEvent.createEvent>. 
          \
      Event type names that can specify as an <P::eventType> 
      parameter of <M::DocumentEvent.createEvent> method is 
      interface names of event objects. 
          \
          {FIG:: Examples for event interface names
            \
            {eg:: 
             \
             - <IF::Event>
             \
             - <IF::MouseEvent>
             \
             - <IF::UIEvent>
             \
             - <IF::MutationEvent>
             \
            }
          \
          }
      \
      {NOTE:: Although DOM levels 2 and 3 both defines <P::eventType> 
              values to specify an interface name, examples in 
              the DOM Level 2 Events Specification shows feature 
              names such as <Feature::UIEvents> by mistake.  
              DOM Level 3 requests DOM implementations to support 
              these incorrect names for compatibility. 
       \
       }
  @@InCase:
    @@@Value:UIEvents
    @@@Description:
      @@@@lang:en
      @@@@@:
        <IF::UIEvent>.  This name is allowed for backward compatibility. 
  @@InCase:
    @@@Value:MouseEvents
    @@@Description:
      @@@@lang:en
      @@@@@:
        <IF::MouseEvent>.  This name is allowed for backward compatibility. 
  @@InCase:
    @@@Value:MutationEvents
    @@@Description:
      @@@@lang:en
      @@@@@:
        <IF::MutationEvent>.  This name is allowed for backward compatibility. 
  @@InCase:
    @@@Value:HTMLEvents
    @@@Description:
      @@@@lang:en
      @@@@@:
        <IF::Event>.  This name is allowed for backward compatibility. 
  @rdf:type:
    ManakaiDOM:DataType
  @ISA:
    DOMMain:DOMString
  @For:
    ManakaiDOM:ManakaiDOM

PropDef:
  @QName: createEventType
  @Description:
    @@lang:en
    @@@:
      A type of subject event, as used in <M::DocumentEvent.createEvent>.  
      It is usually an interface name but some additional names are 
      also allowed for compatibility with DOM Level 2. 
  @dataType: CreateEventType

PropDef:
  @QName: type
  @Description:
    @@lang:en
    @@@:
      The event type of an subject event object. 
  @Type:
    ManakaiDOMEventLocalName::ManakaiDOM:ManakaiDOMLatest

PropDef:
  @QName: isPropagationStopped
  @Description:
    @@lang:en
    @@@:
      Whether the propagation of an subject event object is 
      stopped by DOM application or not.
  @dataType:
    dis:Boolean

PropDef:
  @QName: isImmediatePropagationStopped
  @Description:
    @@lang:en
    @@@:
      Whether the immediate propagation of an subject event object is 
      stopped by DOM application or not.
  @dataType:
    dis:Boolean

PropDef:
  @QName: isDefaultPrevented
  @Description:
    @@lang:en
    @@@:
      Whether the default action of a subject event object is 
      prevented by DOM application or not.
  @dataType:
    dis:Boolean

PropDef:
  @QName: bubbles
  @Description:
    @@lang:en
    @@@:
      Whether an subject event object bubbles or not.
  @dataType:
    dis:Boolean

PropDef:
  @QName: cancelable
  @Description:
    @@lang:en
    @@@:
      Whether an subject event object is cancelable or not. 
  @dataType:
    dis:Boolean

PropDef:
  @QName: isDispatched
  @Description:
    @@lang:en
    @@@:
      Whether a subject event object has once dispatched or not.
  @dataType:
    dis:Boolean

PropDef:
  @QName: wasDispatched
  @Description:
    @@lang:en
    @@@:
      Whether a subject event object had already dispatched or not.
  @dataType:
    dis:Boolean

PropDef:
  @QName: timeStamp
  @Description:
    @@lang:en
    @@@:
      When a subject event object had issued.
  @Type:
    DOMMain:DOMTimeStamp::ManakaiDOM:ManakaiDOMLatest

PropDef:
  @QName: target
  @Description:
    @@lang:en
    @@@:
      An event target of subject event object. 
  @Type:
    EventTarget::ManakaiDOM:ManakaiDOMLatest

PropDef:
  @QName: currentTarget
  @Description:
    @@lang:en
    @@@:
      The current event target of subject event object.
  @Type:
    EventTarget::ManakaiDOM:ManakaiDOMLatest

PropDef:
  @QName: eventPhase
  @Description:
    @@lang:en
    @@@:
      An event phase at which a subject event object is now. 
  @Type:
    ManakaiDOMPhaseType::ManakaiDOM:ManakaiDOMLatest

IF:
  @Name:
    @@@: EventTarget
    @@ForCheck:
      ManakaiDOM:ForIF
  
  @QName:
    @@@: ManakaiDOMEventTarget
    @@ForCheck:
      ManakaiDOM:ForClass
  @Role:
    @@@:
      DOMCore:ManakaiDOMNode::ManakaiDOM:ManakaiDOMLatest
    @@ForCheck:
      ManakaiDOM:ForClass

  @L2IF:
  @Level[list]:  2
  @SpecLevel[list]:  2

  @Description:
    @@lang:en
    @@@:
      The interface implemented by all the objects that could 
      be event targets in a DOM implementation that supports 
      the Event flows.
    \
      When used with the DOM event flow, this interface is 
      implemented by all target nodes and target ancestors.  
      This interface can be obtained by using binding-specific casting 
      methods on an instance of the <IF::DOMCore:Node> interface.
    \
      {NOTE:: Copying a <IF::DOMCore:Node> (with methods such as 
              <M::DOMCore:Node.cloneNode>) does not copy event listeners 
              attached to it.  Moving a <IF::DOMCore:Node> does not 
              affect event listeners.
    \
      }
  
  @ImplNote:
    @@lang:en
    @@@:
      Asynchronous <IF::LSParser> objects are expected to implement 
      the <IF::EventTarget> interface.  See <Module::MDOM:DOMLS> module.

  @Method:
     @@Name:  addEventListener
     @@Description:
       @@@lang:en
       @@@@:
         Register an event listener in the default group.
         \
         Invoking <M::.addEventListener> or <M::.addEventListenerNS> 
         multiple times on the same <IF::EventTarget> with the 
         same parameters <A::.namespaceURI>, <A::.type>, <A::.listener> 
         and <A::.useCapture> has no additional effect - it is 
         independently of the event group.  In order to change 
         the triggering order or to guarantee that an event listener 
         will be added to the event target for the specified 
         event group, invoke <M::.removeEventListenerNS> first.
     @@DOMEvents:isNSAware:1
     @@DOMEvents:NSVariant:.addEventListenerNS
     @@Param:
        @@@Name:  type
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:
            The event type.
     @@Param:
        @@@Name:  listener
        @@@Type:  EventListener
        @@@Description:
          @@@@lang:en
          @@@@@:
            The event listener.  It is an object implemented by 
            the DOM application that implements the 
            <IF::EventListener> interface.
     @@Param:
        @@@Name:  useCapture
        @@@Type:
           DOMMain:boolean
        @@@InCase:
           @@@@Value:  true
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The event listener will be called on the capture phase.
        @@@InCase:
           @@@@Value:  false
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The event listener will be triggered during 
               the target and bubbling phases.
     @@Return:  
       @@@PerlDef:
           my $ev = $self->{<Q::TreeCore:node>}->{<Q::DOMEvents:eventListener>}
                         ->{$type}->[$useCapture ? 1 : 0] ||= [];
           REGISTER: {
             for (@$ev) {
               \## ISSUE: How this check should be done?
               if (not defined $_->{namespaceURI} and
                   $_->{eventListener} eq $listener) {
                 ## Already registered
                 last REGISTER;
               }
             }
             if (ref $listener eq 'CODE') {
               $listener = <ClassM::ManakaiDOMEventListener.newByCODE>
                                  ($listener);
             }
             push @$ev, {
               eventListener => $listener,
               namespaceURI => null,
               evtGroup => null,
             };
           }#REGISTER
     @@SpecLevel:2
     @@Level[list]:
       2
       3
  @Method:
     @@Name:  removeEventListener
     @@Description:
       @@@lang:en
       @@@@:
         Remove an event listener from the default group. 
         If arguments do not identify any currently registered 
         <IF::EventListener>, the method call has no effect.
     @@ImplNote:
       @@@lang:en
       @@@@: 
         If the event target has event listeners that met the 
         arguments and that has a namespace URI, this method 
         could remove any or none of those listeners - the 
         result is implementation dependent.
     @@DOMEvents:isNSAware:1
     @@DOMEvents:NSVariant:removeEventListenerNS
     @@Param:
        @@@Name:  type
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The event type.
     @@Param:
        @@@Name:  listener
        @@@Type:  EventListener
        @@@Description:
          @@@@lang:en
          @@@@@: The event listener to remove.
     @@Param:
        @@@Name:  useCapture
        @@@Type:
           DOMMain:boolean
        @@@Description:
          @@@@lang:en
          @@@@@:
            Whether the event listener to remove was registered 
            for the capture phase or not.
          \
            {NOTE:: Removal of an event listener registered for 
                    the capture phase does not affect the same listener 
                    registered for the target and bubbling phases, and 
                    vice versa.
          \
            }
        @@@InCase:
           @@@@Value:  true
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The event listener to remove was registered for 
               the capture phase.
        @@@InCase:
           @@@@Value:  false
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The event listener to remove was registered for 
               the target and bubbling phases.
        @@@ImplNote:
          @@@@@lang:en
          @@@@@@:
            TODO: A warning about NS required.
     @@Return:  
       @@@PerlDef:
           my $ev = $self->{<Q::TreeCore:node>}->{<Q::DOMEvents:eventListener>}
                         ->{$type}->[$useCapture ? 1 : 0] ||= [];
           for (0..$#$ev) {
             if (not defined $ev->[$_]->{namespaceURI} and
                 $ev->[$_]->{eventListener} eq $listener) {
               CORE::delete $ev->[$_];
               last;
             }
           }
  @Method:
     @@Name:  dispatchEvent
     @@Description:
        @@@lang:en
        @@@@:
          Dispatch an event.  The event target of the event dispatched 
          is the <IF::EventTarget> object on which this method is called.
     @@Param:
        @@@Name:  evt
        @@@Type:  Event
        @@@Description:
          @@@@lang:en
          @@@@@:
            The event to be diapatched.
     @@Return:
        @@@Type:
           DOMMain:boolean
        @@@Description:
          @@@@lang:en
          @@@@@:
            Whether any of the event listeners called 
            the <M::Event.preventDefault> method.
        @@@InCase:
           @@@@Value:  true
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The <M::Event.preventDefault> method was not called.
        @@@InCase:
           @@@@Value:  false
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The <M::Event.preventDefault> method was called.
        @@@Exception:
           @@@@Name:  UNSPECIFIED_EVENT_TYPE_ERR
           @@@@Type:  EventException
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The <IF::Event.type> is not specified or its value 
               is <DOM::null> or an empty string.
           @@@@SpecLevel:2
        @@@Exception:
          @@@@Name:DISPATCH_REQUEST_ERR
          @@@@Type:EventException
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The <P::evt> is already being dispatched in the tree.
          @@@@SpecLevel:3
        @@@Exception:
          @@@@Name:NOT_SUPPORTED_ERR
          @@@@Type:
            @@@@@: 
              DOMCore:DOMException
            @@@@ImplNote:
              @@@@@lang:en
              @@@@@@:
                While the specification does not say this exception is 
                in <IF::DOMCore:DOMException> nor says that this method 
                raises a <IF::DOMCore:DOMException>, the <IF::EventException> 
                does not have the <CODE::NOT_SUPPORTED_ERR>.
          @@@@SubType:
            @@@@@QName:
              ManakaiDOMEvents:FOREIGN_EVENT_ERR
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@:
                The <P::evt> has not been created using 
                <M::DocumentEvent.createEvent> and does not 
                implement the <IF::CustomEvent> interface. 
            @@@@@L3:
     @@Level[list]:
        2
        3
     @@SpecLevel[list]:
        2
        3
  @Method:
     @@Name:  addEventListenerNS
     @@Description:
       @@@lang:en
       @@@@:
         Register an event listener in a specified group.
         \
         Invoking <M::.addEventListener> or <M::.addEventListenerNS> 
         multiple times on the same <IF::EventTarget> with the 
         same parameters <A::.namespaceURI>, <A::.type>, <A::.listener> 
         and <A::.useCapture> has no additional effect - it is 
         independently of the event group.  In order to change 
         the triggering order or to guarantee that an event listener 
         will be added to the event target for the specified 
         event group, invoke <M::.removeEventListenerNS> first.
     @@DOMEvents:isNSAware:1
     @@DOMEvents:noNSVariant:.addEventListener
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOMEventNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@:
            The namespace URI of the event.
     @@Param:
        @@@Name:  type
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:
            The local name of the event.
     @@Param:
        @@@Name:  listener
        @@@Type:  EventListener
        @@@Description:
          @@@@lang:en
          @@@@@:
            The event listener - an object implemented by the DOM 
            application that implements the <IF::EventListener> 
            interface.
     @@Param:
        @@@Name:  useCapture
        @@@Type:
           DOMMain:boolean
        @@@InCase:
           @@@@Value:  true
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The event listener will be called on the capture phase.
        @@@InCase:
           @@@@Value:  false
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The event listener will be triggered during the target 
               and bubbling phases.
     @@Param:
        @@@Name:  evtGroup
        @@@Type:  DOMObject
        @@@Description:
          @@@@lang:en
          @@@@@:
            The object that represents the event group.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The event listener is attached to the default group.
     @@Return:  
       @@@PerlDef:
           my $ev = $self->{<Q::TreeCore:node>}->{<Q::DOMEvents:eventListener>}
                         ->{$type}->[$useCapture ? 1 : 0] ||= [];
           REGISTER: {
             for (@$ev) {
               if (((defined $_->{namespaceURI} and defined $namespaceURI and
                     $_->{namespaceURI} eq $namespaceURI) or
                    (not defined $_->{namespaceURI} and
                     not defined $namespaceURI)) and
                   ($_->{eventListener} eq $listener)) {
                 ## Already registered
                 last REGISTER;
               }
             }
             if (ref $listener eq 'CODE') {
               $listener = <ClassM::ManakaiDOMEventListener.newByCODE>
                                  ($listener);
             }
             push @$ev, {
               eventListener => $listener,
               namespaceURI => $namespaceURI,
               localName => $type,
               phase => $useCapture,
               evtGroup => $evtGroup,
             };
           }#REGISTER
     @@Level[list]:  3
     @@SpecLevel[list]:  3
     @@For:
       ManakaiDOM:DOM3
     @@L3:
  @Method:
     @@Name:  removeEventListenerNS
     @@Description:
       @@@lang:en
       @@@@:
         Remove an event listener.
         If arguments do not identify any currently registered 
         <IF::EventListener>, the method call has no effect.
     @@DOMEvents:isNSAware:1
     @@DOMEvents:noNSVariant:.removeEventListener
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOMEventNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@:
            The namespace URI of the event.
     @@Param:
        @@@Name:  type
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:
            The local name of the event.
     @@Param:
        @@@Name:  listener
        @@@Type:  EventListener
        @@@Description:
          @@@@lang:en
          @@@@@:The event listener to remove.
     @@Param:
        @@@Name:  useCapture
        @@@Type:
           DOMMain:boolean
        @@@Description:
          @@@@lang:en
          @@@@@:
            Whether the event listener to remove was registered 
            for the capture phase or not.
          \
            {NOTE:: Removal of an event listener registered for 
                    the capture phase does not affect the same listener 
                    registered for the target and bubbling phases, and 
                    vice versa.
          \
            }
        @@@InCase:
           @@@@Value:  true
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The event listener to remove was registered for 
               the capture phase.
        @@@InCase:
           @@@@Value:  false
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The event listener to remove was registered for 
               the target and bubbling phases.
     @@Return:  
       @@@PerlDef:
           my $ev = $self->{<Q::TreeCore:node>}->{<Q::DOMEvents:eventListener>}
                         ->{$type}->[$useCapture ? 1 : 0] ||= [];
           for (0..$#$ev) {
             if (((defined $ev->[$_]->{namespaceURI} and
                   defined $namespaceURI and
                   $ev->[$_]->{namespaceURI} eq $namespaceURI) or
                  (not defined $ev->[$_]->{namespaceURI} and
                   not defined $namespaceURI)) and
                 ($ev->[$_]->{eventListener} eq $listener)) {
               CORE::delete $ev->[$_];
               last;
             }
           }
     @@Level[list]:  3
     @@SpecLevel[list]:  3
     @@For:
       ManakaiDOM:DOM3
     @@L3:
  @Method:
     @@Name:  willTriggerNS
     @@Description:
       @@@lang:en
       @@@@:
         Return whether an event listener, attached to this 
         <IF::EventTarget> or one of its ancestors, will be 
         triggered by the specified event type during the 
         dispatch of the event to this <IF::EventTarget> 
         or one of its descendants.
     @@DOMEvents:isNSAware:1
     @@Param:
        @@@Name:  namespaceURI
        @@@Type: 
          DOMMain:DOMString
        @@@actualType: ManakaiDOMEventNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@:The namespace URI of the event.
     @@Param:
        @@@Name:  type
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:The local name of the event.
     @@Return:
        @@@Type:
           DOMMain:boolean
        @@@InCase:
           @@@@Value:  true
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               An event listener will be triggered.
        @@@InCase:
           @@@@Value:  false
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               No event listener will be triggered.
     @@Level[list]:  3
     @@SpecLevel[list]:  3
     @@For:
       ManakaiDOM:DOM3
     @@L3:
  @Method:
     @@Name:  hasEventListenerNS
     @@Description:
       @@@lang:en
       @@@@:
         Return whether this <IF::EventTarget> contains an 
         event listener registered for the specified event type.
     @@DOMEvents:isNSAware:1
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:  
          DOMMain:DOMString
        @@@actualType: ManakaiDOMEventNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@:
            The namespace URI of the event.
     @@Param:
        @@@Name:  type
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:
            The event type (local name).
     @@Return:
        @@@Type:
           DOMMain:boolean
        @@@InCase:
           @@@@Value:  true
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               At least one event listener is registered.
        @@@InCase:
           @@@@Value:  false
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               No event listener is registered.
        @@@PerlDef:
            for (@{$self->{<Q::TreeCore:node>}->{<Q::DOMEvents:eventListener>}
                                             ->{$type}||[]}) {
              if (@$_) {
                $r = true;
                last;
              }
            }
     @@Level[list]:  3
     @@SpecLevel[list]:  3
     @@For:
       ManakaiDOM:DOM3
     @@L3:
##IF:EventTarget

PropDef:
  @QName: eventListener
  @Description:
    @@lang:en
    @@@:
      The list of event listeners currently registered to 
      a subject event target. 
      \
      {P:: For the manakai <Class::ManakaiDOMEventTarget> internal 
      implementation, the value of <Q::eventListener> property 
      is a hash of arrays of arrays of event listener hashs; the first hash has 
      event types (local name) as key and former arrays indicate the phase 
      (<P::useCapture>).  The later arrays, i.e. the third depth arrays, 
      preserves the order in which event listeners are called.  
      An event listener hash contains information for an event listener: 
          \
          - <CODE::namespaceURI>::: The namespace URI of the event. 
          \
          - <CODE::localName>::: The local name of the event (first hash's key). 
          \
          - <CODE::evtGroup>::: The event group of the listener.
          \
          - <CODE::phase>::: The <P::useCapture> value (first array's index).
          \
          - <CODE::eventListener>::: The listener itself. 
          \
      }

IF:
  @Name:
    @@@: EventListener
    @@ForCheck:
      ManakaiDOM:ForIF

  @QName:
    @@@: ManakaiDOMEventListener
    @@ForCheck:
      ManakaiDOM:ForClass
  @ISA:
    @@@:
      Perl:CODE::ManakaiDOM:all
    @@ForCheck:
      ManakaiDOM:ForClass

  @Description:
    @@lang:en
    @@@:
      The primary way for handling events.  A DOM application 
      can implement this interface and register its listener 
      on an <IF::EventTarget>. 
      \
      Event listeners are able to be registered on all DOM nodes and 
      some DOM objects such as <IF::LSParser> if it implements 
      <IF::EventTarget> interface.  Each event listener is always 
      part of an event group; it is either explicitly in a group 
      if a group is specified at the registration or implicitly 
      in the default group.  (DOM Level 2 does not have the concept 
      of the event group so that any listener is assumed in the default 
      group.) Within a group, listeners are ordered in the order 
      of registration. Listeners will be triggered in that order. 
      If the two listeners are not part of the same group, 
      the order triggered is not specified.  (DOM Level 2 does 
      not specify trigerring order.) 
      \
      {NOTE:: In general, a DOM application does not need to define 
              and use a separate group unless other event listeners, 
              external to the DOM application, may change the propagation.
              While the DOM implementation may impose priorities on groups, 
              DOM applications must not rely on it.
      \
      }
      \
      If an event listener is registered on a node while an event 
      gets processed on the node, the event listener will not be 
      triggered during the current phase but may be triggered 
      during a later phase in the event flow.
      \
      If an event listener is removed from a node while an event 
      is being processed on the node, the event listener will not 
      be trigerred by the curren actions. 
      \
      {P:: There are two ways to associate an event listener to a node:
      \
        - at the programming level:: using the <IF::EventTarget> methods.
      \
        - at the document level:: using markup such as XML Events, 
          HTML, SVG, VoiceXML, and so on.
      \
      }
      \
      Actions taken by an event listener might cause additional 
      events to be dispatched.  Additional events should be 
      handled in a synchronous manner and may cause reentrance 
      into the event model.  A DOM application should not depend 
      on how many synchronous events may be triggered.
      \
      DOM Level 2 Events Specification said that any 
      exceptions throw inside an <IF::EventListener> will not 
      stop propagation of the event.  DOM Level 3 Events Specification 
      does have no such clause. 
    @@ForCheck:
      ManakaiDOM:ForIF
  @Description:
    @@lang:en
    @@@:
      In the manakai DOM implementation, an event listener 
      is required to be able to test its equality with another event listener 
      or Perl <Perl::CODE> reference by the Perl <Perl::eq> operator.  
    @@For: 
      ManakaiDOM:ManakaiDOM
    @@ForCheck:
      ManakaiDOM:ForIF
  @Description:
    @@lang:en
    @@@:
      An event listener. 
      \
      {NOTE:: In the manakai DOM implementation, any Perl 
              <Perl::CODE> reference is able to register 
              as an event listener.  Event listener registering 
              method such as <M::ManakaiDOMEventTarget.addEventListenerNS> 
              converts such listener to a <Class::ManakaiDOMEventListener> 
              object. 
      \
      }
      \
      {NOTE:: When using a <Perl::CODE> reference as an event listener, 
              please take lots of care for use of lexical variables. 
              For example, 
              \
              $node->addEventListenerNS ($ns, $event, sub {
                print $node->nodeName;
              }, 0);
              \
              might cause a memory leak, since the <Perl::$node> 
              has the <Perl::CODE> as an event listener and 
              the <Perl::CODE> has a <QUOTE::reference> to 
              the variable <Perl::$node> so that Perl's garbage 
              collection system would not release these memory areas 
              even after <Perl::$node> is disposed.  One solution is 
              removing event listeners before <Perl::$node> goes out 
              of scope.  Example:
              \
              my $el = sub {
                print $node->nodeName;
              };
              $node->addEventListenerNS ($ns, $event, $el, 0);
              \
              ...
              \
              $node->removeEventListenerNS ($ns, $event, $el, 0);
              \
              But it might be difficut to take this way in some complex 
              cases.  Providing a way to make a node reference <QUOTE::waken> 
              might be a better solution and it's now under consideration.
  @ImplNote:
    @@lang:en
    @@@:
      In the ECMAScript binding, an <IF::EventListener> is 
      a function with a parameter <P::evt>.

  @Level[list]:  2
  @SpecLevel[list]:  2
  @L2IF:

  @Method:
     @@Name:  handleEvent
     @@Description:
       @@@lang:en
       @@@@:
         Handle an event.  This method is called whenever an 
         event occurs.
     @@Param:
        @@@Name:  evt
        @@@Type:  Event
        @@@Description:
          @@@@lang:en
          @@@@@:
            The contextual information about the event.
     @@Return:  
       @@@PerlDef:
         $self->($evt);
  @IntMethod:
    @@Name:isSameEventListener
    @@Operator:
      @@@@:eq
      @@@ContentType:
        lang:Perl
    @@Description:
      @@@lang:en
      @@@@:
        Return whether two event listeners are same or not.
    @@Param:
      @@@Name:listener
      @@@Type:EventListener
    @@Return:
      @@@Type:
        DOMMain:boolean
      @@@PerlDef:
          if (ref $listener eq 'CODE') {
            $r = overload::Overloaded ($self) eq $listener ? true : false;
          } elsif (not ref $listener) {
            $r = false;
          } else {
            $r = overload::Overloaded ($self) eq $listener ? true : false;
          }
  @IntMethod:
    @@Name:newByCODE
    @@Description:
      @@@lang:en
      @@@@:
        Create a new instance of the <IF::EventListener> with a 
        code.
    @@Param:
      @@@Name:code
      @@@Type:
        Perl:CODE::ManakaiDOM:all
      @@@Description:
        @@@@lang:en
        @@@@@:
          The code used as an event handler. 
        \
          In the Perl binding, it is a <Perl::CODE> reference - a reference 
          to the subroutine.
        \
          {NOTE:: The <P::code> is blessed with the event handler class.
        \
          }
    @@Return:
      @@@Type:EventListener
      @@@actualType: ManakaiDOMEventListener
      @@@Description:
        @@@@lang:en
        @@@@@:
          The newly created event listener.
      @@@PerlDef:
        $r = bless $code, ref $self ? ref $self : $self;
##IF:EventListener

IF:
  @Name:
    @@@: DocumentEvent
    @@ForCheck:
      ManakaiDOM:ForIF
  
  @QName:
    @@@: ManakaiDOMDocumentEvent
    @@ForCheck:
      ManakaiDOM:ForClass
  @ISA:
    @@@:
      DOMCore:ManakaiDOMDocument
    @@ForCheck:
      ManakaiDOM:ForClass
  @Role:
    @@@:
      DOMCore:ManakaiDOMDocument::ManakaiDOM:ManakaiDOMLatest
    @@ForCheck:
      ManakaiDOM:ForClass

  @Level[list]:  2
  @SpecLevel[list]:  2
  @L2IF:

  @Description:
    @@lang:en
    @@@:
      Provide a mechanism by which the DOM application 
      can create an <IF::Event> object.
  @ImplNote:
    @@lang:en
    @@@:
      If the <IF::DOMCore:Document> object supports the feature 
      <Feature::Events>, this interface must be implemented on the same object.
      \
      If the <IF::DOMCore:Document> object supports the feature 
      <Feature::Events> 
      with the prefix of <DOM::+>, an object that supports 
      this interface must be returned by invoking the method 
      <M::DOMCore:Node.getFeature> with arguements <DOM::+Events> and 
      <FeatureVer::3.0> on the <IF::DOMCore:Document> object.

  @Method:
     @@Name:  createEvent
     @@Description:
       @@@lang:en
       @@@@:
         Creates an <IF::Event> object.  This method is used when 
         it is inconvenient or unnecessary for DOM application 
         to create it by themselves.
       \
         {NOTE:: In cases where the <IF::Event> implementation provided 
                 by the DOM implementation is insufficient, the DOM application 
                 might want to supply their own <IF::Event>. However, 
                 the DOM implementation needs write-access to attributes 
                 <A::Event.currentTarget> and <A::Event.eventPhase> so 
                 that <IF::Event> implementations by DOM application 
                 might need to support the <IF::CustomEvent> interface.
            \
         }
       \
         {NOTE:: The appropriate event initialization method 
                 of the created object must be called before 
                 the <IF::Event> is diapatched via the 
                 <M::EventTarget,dispatchEvent> method.
       \
         }
     @@Param:
        @@@Name:  eventType
        @@@Type:  DOMString
        @@@actualType: CreateEventType
        @@@Description:
          @@@@lang:en
          @@@@@:
            The name of the DOM Events interface to be supported 
            by the created event objects.
     @@Return:
        @@@Type:  Event
        @@@Description:
          @@@@lang:en
          @@@@@:The newly created event object.
        @@@Exception:
           @@@@Name:  NOT_SUPPORTED_ERR
           @@@@Type:
              DOMCore:DOMException
           @@@@SubType:
             @@@@@QName:
               ManakaiDOMEvents:MDOM_IMPL_NOSUPPORT_EVENT
             @@@@@Description:
               @@@@@@lang:en
               @@@@@@@:
                 The DOM implementation does not support the 
                 interface requested.
       @@PerlDef:
         my $cls;
         for (values %{$<Class::ManakaiDOMEvent::ManakaiDOM:ManakaiDOMLatest
                            >::Class}) {
           if ($_->{eventType}->{$eventType}) {
             $cls = $_->{packageName};
             last;
           }
         }
         unless ($cls) {
           __EXCEPTION{ManakaiDOMEvents:MDOM_IMPL_NOSUPPORT_EVENT::
             DOMEvents:createEventType => {$eventType},
             MDOMX:param-name => 'eventType',
           }__;
         }
         $r = $cls->_new;
  @Method:
     @@Name:  canDispatch
     @@Description:
       @@@lang:en
       @@@@:
         Test if the DOM implementation can generate events 
         of a specified type.
     @@DOMEvents:isNSAware:1
     @@Param:
        @@@Name:  namespaceURI
        @@@Type: 
          DOMMain:DOMString
        @@@actualType: ManakaiDOMEventNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@:The namespace URI of the event type.
     @@Param:
        @@@Name:  type
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:The local name of the event type.
     @@Return:
        @@@Type:
           DOMMain:boolean
        @@@InCase:
           @@@@Value:  true
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The DOM implementation can generate and dispatch 
               the event type specified.
        @@@InCase:
           @@@@Value:  false
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The DOM implementation cannot generate and dispatch
               the event type specified.
     @@Level[list]:  3
     @@SpecLevel[list]:  3
     @@For:
       ManakaiDOM:DOM3
     @@L3:
##IF:DocumentEvent

IF:
  @Name:
    @@@: CustomEvent
    @@ForCheck:
      ManakaiDOM:ForIF
  @ISA:
    @@@: Event
    @@ForCheck:
      ManakaiDOM:ForIF

  @QName:
    @@@: ManakaiDOMCustomEvent
    @@ForCheck:
      ManakaiDOM:ForClass
  @ISA:
    @@@: ManakaiDOMEvent
    @@ForCheck:
      ManakaiDOM:ForClass

  @Level[list]:  3
  @SpecLevel[list]:  3
  @L3IF:

  @Description:
    @@lang:en
    @@@:
      Provide access to the attributes <A::Event.currentTarget> and 
      <A::Event.eventPhase>.  It is intended to be used by the 
      DOM implementation to access the underlying current target and 
      event phase while dispatching a custom <IF::Event> in the tree.
      \
      {NOTE:: It is intended to be implemented, and <EM::not used>, 
              by the DOM application.
      \
      }
      \
      {NOTE:: Changing the current target or the current phase by a 
              DOM application during the dispatch may result in 
              unpredictable results.
      \
      }
  @ImplNote:
    @@lang:en
    @@@:
      The DOM implementation should ensure that both methods 
      return the appropriate current target and phase before 
      invoking each event listener on the current target, 
      to protect DOM applications from malicious event listeners.
      \
      {NOTE:: An object that implements this interface must have 
              the <M::Event.isCustom> method returning <DOM::true>.
      \
      }

  @Method:
     @@Name:  setDispatchState
     @@Description:
       @@@lang:en
       @@@@:
         Set the values of attributes <A::Event.currentTarget> 
         and <A::Event.eventPhase>.  It also reset the states 
         of <M::Event.isPropagationStopped> and 
         <M::Event.isImmediatePropagationStopped>.
     @@Param:
        @@@Name:  target
        @@@Type:  EventTarget
        @@@Description:
          @@@@lang:en
          @@@@@: The new event target.
     @@Param:
        @@@Name:  phase
        @@@Type: 
          DOMMain:unsigned-short
        @@@actualType:ManakaiDOMPhaseType
        @@@Description:
          @@@@lang:en
          @@@@@: The event phase.
     @@Return:  
        @@@PerlDef:
            for ($self->{<Q::TreeCore:node>}) {
              $_->{<Q::DOMEvents:currentTarget>} = $target;
              $_->{<Q::DOMEvents:phase>} = $phase;
              $_->{<Q::DOMEvents:isPropagationStopped>} = false;
              $_->{<Q::DOMEvents:isImmediatePropagationStopped>} = false;
            }
  @Method:
     @@Name:  isPropagationStopped
     @@Description:
       @@@lang:en
       @@@@:
         Return whether the <M::Event.stopPropagation> method has 
         been called.
     @@Return:
        @@@Type:
           DOMMain:boolean
        @@@InCase:
           @@@@Value:  true
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The event propagation has been stopped in the current group.
        @@@InCase:
           @@@@Value:  false
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@GetProp:
            DOMEvents:isPropagationStopped
  @Method:
     @@Name:  isImmediatePropagationStopped
     @@Description:
       @@@lang:en
       @@@@:
         Return whether the method <M::Event.stopImmediatePropagation> 
         has been called for this event.
       \
         {NOTE:: It is intended that this method is used by the DOM 
                 implementation, not by the DOM application.
       \
         }
     @@Return:
        @@@Type:
           DOMMain:boolean
        @@@InCase:
           @@@@Value:  true
           @@@@Description:
             @@@@@lang:en
             @@@@@@:
               The event propagation has been stopped immediately 
               in the current group.
        @@@InCase:
           @@@@Value:  false
        @@@Def:
          @@@@ContentType:
            lang:dis
          @@@@GetProp:
            DOMEvents:isImmediatePropagationStopped
  @ReMethod:
    @@Name:isCustom
    @@Description:
      @@@lang:en
      @@@@:
        Return whether the object implements the <IF::CustomEvent> interface.
    @@Return:
      @@@Type:
        DOMMain:boolean
      @@@PerlDef:
        @@@@@:$r=true;
      @@@ImplNote:
        @@@@lang:en
        @@@@@:
          This method must returns <DOM::true>.
    @@SpecLevel:3
    @@Level:3
    @@For:
      ManakaiDOM:DOM3
    @@L3:
##IF:CustomEvent

## DOMEvents.dis ends here

