Module:
  @QName:
    MDOM:DOMFeature
  @FullName:
    @@lang: en
    @@@: DOM Feature
  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2004/dom/feature#
  
  @Description:
    @@lang:en
    @@@:
      The manakai <Module::MDOM:DOMFeature> module provides interfaces 
      and classes to obtain DOM implementations.  They might also
      be useful for any other frameworks which is friendly for
      DOM application developers.

      The <Class::ImplementationRegistry> object
      is the bootstrap for the DOM implementations; DOM
      applications can ask to return DOM implementations
      which support the desired feature.  This mechanism is
      basically defined in the <CITE::DOM Level 3 Core> specification
      and this module defines a Perl binding for it.

      The <IF::MinimumImplementation> interface defines
      the minimum interface that should be implemented by
      all DOM implementations and other implementations
      that is intended to be accessible via 
      the manakai <Class::ImplementationRegistry>
      object.  The interface contains methods to obtain
      an object which implements particular feature so
      that rich implementations which implement more than
      one interfaces offer their feature to applications 
      in the common manner.  This interface is manakai
      specific but it is a subset of the DOM Level 3
      <IF::DOMCore:DOMImplementation::ManakaiDOM:ManakaiDOM3>
      interface.

  @DISCore:author: DISCore|Wakaba
  @License:
     license:Perl+MPL
  @Date:
    @@@:
      $Date: 2005/09/26 14:37:35 $
    @@ContentType:
      dis:Date.RCS
  
  @Require:
    @@Module:
      @@@Name: DISIDL
      @@@QName:
        DISlib:DISIDL
      @@@WithFor:
        ManakaiDOM:all
    @@Module:
      @@@Name: DISPerl
      @@@QName:
        DISlib:DISPerl
      @@@WithFor:
        ManakaiDOM:all
    @@Module:
      @@@Name: DOMException
      @@@QName:
        UtilError:DOMException
      @@@WithFor:
        ManakaiDOM:all
    @@Module:
      @@@Name: ManakaiNode
      @@@QName:
        Util:ManakaiNode
      @@@WithFor:
        ManakaiDOM:Perl
    @@Module:
      @@@Name: DOMFeature
      @@@WithFor:
        ManakaiDOM:ManakaiDOM
    @@Module:
      @@@Name: DOMFeature
      @@@WithFor:
        ManakaiDOM:ManakaiDOM3
    @@Module:
      @@@Name: DOMFeature
      @@@WithFor:
        ManakaiDOM:ManakaiDOMLatest
  @DefaultFor:
    ManakaiDOM:ManakaiDOMLatest

Namespace:
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @dis2pm:
    http://suika.fam.cx/~wakaba/archive/2004/11/8/dis2pm#
  @DISlib:
    http://suika.fam.cx/~wakaba/archive/2004/dis/
  @DOMCore:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
  @DOMEvents:
    http://suika.fam.cx/~wakaba/archive/2004/dom/events#
  @DOMFeature:
    http://suika.fam.cx/~wakaba/archive/2004/dom/feature#
  @DOMLS:
    http://suika.fam.cx/~wakaba/archive/2004/dom/ls#
  @DOMMain:
    http://suika.fam.cx/~wakaba/archive/2004/dom/main#
  @DOMMetaImpl:
    http://suika.fam.cx/~wakaba/archive/2004/dom/meta#
  @DOMXML:
    http://suika.fam.cx/~wakaba/archive/2004/dom/xml#
  @f:
    http://suika.fam.cx/~wakaba/archive/2004/dom/feature#
  @infoset:
    http://www.w3.org/2001/04/infoset#
  @kwd:
    http://suika.fam.cx/~wakaba/archive/2005/rfc2119/
  @lang:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @MDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.
  @MDOMX:
    http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @mn:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#
  @owl:
    http://www.w3.org/2002/07/owl#
  @Perl:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#Perl--
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#
  @Util:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/
  @UtilError:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/
  @xml:
    http://www.w3.org/XML/1998/namespace
  @xmlns:
    http://www.w3.org/2000/xmlns/

ResourceDef:
  @QName:
    MDOM:
  @rdf:type:
    dis:ModuleGroup
  @FullName:
    @@lang:en
    @@@:
      The manakai DOM modules
  @DISPerl:packageName:
    @@@:
      Message::DOM::
    @@For: ManakaiDOM|ManakaiDOM
    @@ManakaiDOM:moduleSuffix:
      @@@@: Level3
      @@@For: ManakaiDOM|ManakaiDOM3 !ManakaiDOM|ManakaiDOMLatest
    @@ManakaiDOM:moduleSuffix:
      @@@@: Level2
      @@@For: ManakaiDOM|ManakaiDOM2 !ManakaiDOM|ManakaiDOM3
    @@ManakaiDOM:moduleSuffix:
      @@@@: Level1
      @@@For: ManakaiDOM|ManakaiDOM1 !ManakaiDOM|ManakaiDOM2
  @DISPerl:interfacePackageName:
    @@@:
      Message::DOM::IFLatest::
    @@For: ManakaiDOM|ManakaiDOMLatest
  @DISPerl:interfacePackageName:
    @@@:
      Message::DOM::IFLevel3::
    @@For: ManakaiDOM|ManakaiDOM3 !ManakaiDOM|ManakaiDOMLatest
  @DISPerl:interfacePackageName:
    @@@:
      Message::DOM::IFLevel2::
    @@For: ManakaiDOM|ManakaiDOM2 !ManakaiDOM|ManakaiDOM3
  @DISPerl:interfacePackageName:
    @@@:
      Message::DOM::IFLevel1::
    @@For: ManakaiDOM|ManakaiDOM1 !ManakaiDOM|ManakaiDOM2
  @DISPerl:interfacePackageName:
    @@@:
      Message::DOM::IF::
    @@For: ManakaiDOM|ManakaiDOM !ManakaiDOM|ManakaiDOM1
  @ImplNote:
    @@lang:en
    @@@:
      This resource is also defined in <Module::MDOM|DOMMain>
      module for <Q::ManakaiDOM|ManakaiDOM1> and <Q::ManakaiDOM|ManakaiDOM2>.

## -- "For" definitions

## For the Document Object Model

ForDef:
  @QName:
    ManakaiDOM:DOM
  @FullName:
    @@lang:en
    @@@: For DOM
ForDef:
  @QName:
    ManakaiDOM:DOM1
  @FullName:
    @@lang:en
    @@@: For DOM Level 1
  @ISA:
    ManakaiDOM:DOM
ForDef:
  @QName:
    ManakaiDOM:DOM2
  @FullName:
    @@lang:en
    @@@: For DOM Level 2
  @ISA:
    ManakaiDOM:DOM1
ForDef:
  @QName:
    ManakaiDOM:DOM3
  @FullName:
    @@lang:en
    @@@: For DOM Level 3
  @ISA:
    ManakaiDOM:DOM2
ForDef:
  @QName:
    ManakaiDOM:DOMLatest
  @FullName:
    @@lang:en
    @@@: For the latest level of DOM
  @ISA:
    ManakaiDOM:DOM3

ForDef:
  @QName: 
    ManakaiDOM:DOMHTMLFeature
  @FullName:
    @@lang:en
    @@@: For DOM HTML feature, any version
  @ISA:
    ManakaiDOM:DOM

ForDef:
  @QName: 
    ManakaiDOM:DOMXMLFeature
  @FullName:
    @@lang:en
    @@@: For DOM XML feature, any version
  @ISA:
    ManakaiDOM:DOM

ForDef:
  @QName: ManakaiDOM|DOMXMLFeatureXML11
  @FullName:
    @@lang:en
    @@@: For DOM XML feature, any version, with XML 1.1 support
  @ISA: ManakaiDOM|DOMXMLFeature

ForDef:
  @QName:
    ManakaiDOM:DOMEventsFeature
  @FullName:
    @@lang:en
    @@@:  For DOM Events feature, any version
  @ISA:
    ManakaiDOM:DOM

## For the manakai DOM implementation

ForDef:
  @QName:
    ManakaiDOM:ManakaiDOM
  @FullName:
    @@lang:en
    @@@: For the manakai DOM implementation
  @Implement:
    ManakaiDOM:DOM
  @ISA:
    ManakaiDOM:Perl
ForDef:
  @QName:
    ManakaiDOM:ManakaiDOM1
  @FullName:
    @@lang:en
    @@@: For the manakai DOM Level 1 implementation
  @Implement:
    ManakaiDOM:DOM1
  @Implement: 
    ManakaiDOM:DOMXMLFeature
  @Implement: 
    ManakaiDOM:DOMHTMLFeature
  @Implement:
    ManakaiDOM:DOMEventsFeature
  @ISA:
    ManakaiDOM:ManakaiDOM
ForDef:
  @QName:
    ManakaiDOM:ManakaiDOM2
  @FullName:
    @@lang:en
    @@@: For the manakai DOM Level 2 implementation
  @Implement:
    ManakaiDOM:DOM2
  @ISA:
    ManakaiDOM:ManakaiDOM1
ForDef:
  @QName:
    ManakaiDOM:ManakaiDOM3
  @FullName:
    @@lang:en
    @@@: For the manakai DOM Level 3 implementation
  @Implement:
    ManakaiDOM:DOM3
  @ISA:
    ManakaiDOM:ManakaiDOM2
  @ISA: ManakaiDOM|DOMXMLFeatureXML11
ForDef:
  @QName:
    ManakaiDOM:ManakaiDOMLatest
  @FullName:
    @@lang:en
    @@@: For the manakai implementation of the latest level of DOM
  @Implement:
    ManakaiDOM:DOMLatest
  @ISA:
    ManakaiDOM:ManakaiDOM3

## -- The DOM "feature" system

StringDataTypeDef:
  @QName: FeatureNameString
  @FullName:
    @@lang:en
    @@@: DOM feature name
  @Description:
    @@lang:en
    @@@:
      A <DFN::feature name> identifies a <DFN::feature> with
      its version.

      <EM::Syntax>.  The syntax for the feature names are
      not well-defined.  In DOM Level 1, the only feature names
      are <Feature::HTML> and <Feature::XML>.  In DOM Level 2,
      it is extended to any XML 1.0 <CODE::Name> but later
      the restriction is removed in the errata document.  In 
      DOM Level 3 there is no explicit restriction although
      the usage of <CHAR::PLUS SIGN> implies the first character
      of the actual feature name should not be a <CHAR::PLUS SIGN>
      and the <CODE::features> parameter in various methods
      implies the feature name cannot contain the space character
      and it must be distingulishable from feature version numbers.

      <EM::Case-sensitivility>.  The feature names are 
      case-sensitive.

      <EM::Preceeding <CHAR::PLUS SIGN> rule>.  In some context
      (not all), a feature name can be preceeded by a
      <CHAR::PLUS SIGN>.  It means that the feature may not
      be <EM::directly> accessible but it may be accessible
      in some manner, e.g. by binding-specific cast mechanism
      or by <M::GetFeature.getFeature> method.

      <EM::Naming convention>.  In DOM Level 2 the reversed
      Internet domain name like Java package names was encouraged.
      (This recommendation has been removed in the errata.)
      The current recommended way to assume featrue name
      uniqueness is using URI.

      {NOTE:: For example, SVG 1.1, which is based on DOM Level 2,
              defines feature names in reversed Internet domain
              name syntax.  SVG 1.2, which is based on DOM Level 3,
              deprecates old feature names and defines URI-syntax
              feature names.
      }

  @InputProcessor:
    @@PerlDef:
      $INPUT = lc $INPUT;

ResourceDef:
  @QName: 
    ManakaiDOM:ManakaiDOMFeatureName
  @AliasFor: FeatureNameString
  @For: ManakaiDOM|DOM1

ElementTypeBinding:
  @Name: InputProcessor
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:InputProcessor

StringDataTypeDef:
  @QName: FeatureVersionString
  @FullName:
    @@lang:en
    @@@: DOM feature version
  @Description:
    @@lang:en
    @@@: 
      A DOM feature version number. 
      \
      In most contexts, an empty string and the <DOM::null> value are 
      also valid values.  Both values indicate that any version of 
      that feature is acceptable.

  @InputProcessor:
    @@PerlDef:
      $INPUT = '' unless defined $INPUT;

ResourceDef:
  @QName: 
    ManakaiDOM:ManakaiDOMFeatureVersion
  @AliasFor: FeatureVersionString
  @For: ManakaiDOM|DOM1

StringDataTypeDef:
  @QName: FeaturesString
  @For:
    ManakaiDOM:DOM3
  @FullName:
    @@lang:en
    @@@: 
      DOM <CODE::features>
  @Description:
    @@lang:en
    @@@:
      A list of zero or more pairs of a <TYPE::ManakaiDOM:ManakaiDOMFeature> 
      and an optional <TYPE::ManakaiDOM:ManakaiDOMFeatureVersion>, 
      separated by white space.
  @enDesc:
    @@For:
      ManakaiDOM:ManakaiDOM
    @@@:
      In the manakai DOM implementation, method parameters and attributes 
      whose actual datatype is <CODE::features> also accept a reference 
      to hash whose key is a feature name and value is either
      a feature version string or an empty string.  Don't forget to quote 
      version number when its fraction part is <CODE::0> (e.g. 
      quote <FeatureVer::2.0> like <Perl::'2.0'>).      
  @InputProcessor:
    @@PerlDef:
      if (CORE::defined $INPUT) {
        if (CORE::ref ($INPUT) eq 'HASH') {
          my $new = {};
          for my $fname (keys %{$INPUT}) {
            if (CORE::ref ($INPUT->{$fname}) eq 'HASH') {
              my $lfname = lc $fname;
              for my $fver (keys %{$INPUT->{$fname}}) {
                $new->{$lfname}->{$fver} = $INPUT->{$fname}->{$fver};
              }
            } else {
              $new->{lc $fname} = {(CORE::defined $INPUT->{$fname}
                                      ? $INPUT->{$fname} : '') => 1};
            }
          }
          $INPUT = $new;
        } else {
          my @f = split /\s+/, $INPUT;
          $INPUT = {};
          while (@f) {
            my $name = lc shift @f;
            if (@f and $f[0] =~ /^[\d\.]+$/) {
              $INPUT->{$name}->{shift @f} = 1;
            } else {
              $INPUT->{$name}->{''} = 1;
            }
          }
        }
      } else {
        $INPUT = {};
      }

    @@ImplNote:
      @@@lang:en
      @@@@:
        In current specifications of DOM, order of features are not 
        significant and treatement for dupulication of a feature name 
        is not specified.  
        If <P::features> in future levels of DOM does not 
        have this characteristic, this and some other implementation 
        must be revisited for that levels. 
        \
        This input normalizer creates a copy of feature list even if 
        it is given as a hash reference; it means that <QUOTE::breaking> 
        any parameter does not affect the input source. 

  @ResourceDef:
    @@QName:
      DOMMain:stringifyFeatures
    @@rdf:type:
      dis2pm:BlockCode
    @@Description:
      @@@lang:en
      @@@@:
        Converts a manakai internal hash representation of <P::features> 
        (<PerlVar::$IN>) to a DOM standard string representation of it 
        (<PerlVar::$OUT>). 
        \
        Note that whether input is valid feature name-value pairs is 
        not checked; bad input will produce bad output.
    @@PerlDef:
      my @out;
      for my $fname (keys %{$IN}) {
        for my $fver (keys %{$IN->{$fname}}) {
          push @out, $fname . ' ' . $fver . ' ' if $IN->{$fname}->{$fver};
        }
      }
      $OUT = join ' ', @out;

ResourceDef:
  @QName: 
    ManakaiDOM:ManakaiDOMFeatures
  @For: ManakaiDOM|DOM3
  @AliasFor: FeaturesString

ResourceDef:
  @QName: Feature
  @FullName:
    @@lang:en
    @@@: DOM feature
  @rdf:type:
    rdfs:Class
  @rdfs:subClassOf:
    rdfs:Class::ManakaiDOM:all
  @For: =ManakaiDOM|all

ResourceDef:
  @QName:
    DOMMain:DOMFeature
  @For: =ManakaiDOM|all
  @AliasFor: Feature

## -- The feature system (manakai)

ElementTypeBinding:
  @Name: FeatureDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: Feature
    @@For: =ManakaiDOM|all

ElementTypeBinding:
  @Name: FeatureVerDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: Feature

ElementTypeBinding:
  @Name: featureQName
  @ElementType:
    f:name
  @ShadowContent:
    @@ContentType: DISCore|QName

PropDef:
  @QName: DOMFeature|name
  @FullName:
    @@lang:en
    @@@: Feature name
  @rdfs:domain: DOMFeature|Feature
  @dataType: DISCore|QName
  @multipleProperties: DISCore|UnorderedList

PropDef:
  @QName: version
  @FullName:
    @@lang:en
    @@@: Feature version
  @Description:
    @@lang:en
    @@@:
      A version number of a feature to define.
  @rdfs:domain: Feature
  @dataType: DISCore|String
  @multipleProperties: DISCore|UnorderedList

ResourceDef:
  @QName:
    dis:Version
  @AliasFor: version
  @For: =ManakaiDOM|all

PropDef:
  @QName: provides
  @Description:
    @@lang:en
    @@@:
      The subject resource intends to provide a part 
      of the object feature. 
  @rdfs:domain: Feature
  @dataType: dis|TypeQName
  @multipleProperties: DISCore|UnorderedList

ResourceDef:
  @QName: DOMMetaImpl|provideFeature
  @AliasFor: provides
  @For: =ManakaiDOM|all

PropDef:
  @QName: through
  @Description:
    @@lang:en
    @@@:
      The feature is provided through the object class. 
      \
      If this attribute is missing from a <Q::provideFeature>
      element and its parent is a <Q::ManakaiDOM:Class> definition,
      then that class with the current <QUOTE::for> is
      the <Q::providedThrough> class.
  @rdfs:domain:
    ManakaiDOM:Class
  @dataType: dis|TFQNames
  @multipleProperties: DISCore|UnorderedList

ResourceDef:
  @QName: DOMMetaImpl|providedThrough
  @AliasFor: through
  @For: =ManakaiDOM|all

PropDef:
  @QName: implements
  @Description:
    @@lang:en
    @@@:
      A subject resource implements a object feature. 
  @rdfs:range: Feature
  @dataType: 
    dis:TypeQName
  @multipleProperties: DISCore|UnorderedList

ResourceDef:
  @QName:
    DOMMain:implementFeature
  @AliasFor: implements
  @For: =ManakaiDOM|all

PropDef:
  @QName: instanceOf
  @Description:
    @@lang:en
    @@@:
      The subject feature is an instance of the object feature set.
  @rdfs:range: Feature
  @rdfs:domain: Feature
  @dataType: dis|TypeQName
  @multipleProperties: DISCore|UnorderedList

ResourceDef:
  @QName: DOMMetaImpl|instanceFeatureOf
  @AliasFor: instanceOf
  @For: =ManakaiDOM|all

PropDef:
  @QName: extends
  @Description:
    @@lang:en
    @@@:
      The subject feature extends the object feature.
  @rdfs:range: Feature
  @rdfs:domain: Feature
  @dataType: dis|TypeQName
  @multipleProperties: DISCore|UnorderedList

ResourceDef:
  @QName: DOMMetaImpl|extendFeature
  @AliasFor: extends
  @For: =ManakaiDOM|all

PropDef:
  @QName: requires
  @Description:
    @@lang:en
    @@@:
      A subject resource requires a object feature. 
  @rdfs:range: Feature
  @dataType:
    dis:TypeQName
  @multipleProperties: DISCore|UnorderedList

ResourceDef:
  @QName: 
    DOMMain:requireFeature
  @AliasFor: requires
  @For: =ManakaiDOM|all

FeatureDef:
  @QName: min
  @FeatureVerDef:
    @@featureQName: ManakaiDOM|Minimum
    @@Version: 3.0
    @@QName: min30
    @@Description:
      @@@lang:en
      @@@@:
        Minimum DOM implementation, level 3.
    @@DOMMetaImpl:instanceFeatureOf: min

## -- Roles

ResourceDef:
  @QName: DOMMetaImpl|ImplementationSourceForManakaiDOMImplementationRegistry
  @rdf:type:
    DISLang:Role
  @ForCheck:
    =ManakaiDOM:all
  @Description:
    @@lang:en
    @@@:
      If a class plays this <QUOTE::role>, then it must implement
      the <IF::DOMCore:DOMImplementationSource> interface with
      its two methods statically callable (i.e. they can be 
      called without any instance of the class).  Any class
      playing this <QUOTE::role> will be contacted when 
      the <M::ImplementationRegistry.getDOMImplementationList>
      method is called.

ResourceDef:
  @QName: DOMMetaImpl|ManakaiDOMImplementationSourceRole
  @rdf:type:
    DISLang:Role
  @ForCheck:
    =ManakaiDOM:all
  @rdfs:subClassOf:
    DOMMetaImpl|ImplementationSourceForManakaiDOMImplementationRegistry
  @Description:
    @@lang:en
    @@@:
      If a class plays this <QUOTE::role>, then it must implement
      the <IF::DOMCore:DOMImplementationSource> interface with
      its two methods statically callable (i.e. they can be 
      called without any instance of the class).  Any class
      playing this <QUOTE::role> will be contacted when 
      the <M::ImplementationRegistry.getDOMImplementationList>
      method is called.
      \
      {NOTE:: Whether the class implements the 
              <IF::DOMCore:ManakaiDOMImplementationSource> interface
              or not is another problem.
      \
      }

ResourceDef:
  @QName: DOMMetaImpl|ImplementationForManakaiDOMImplementationSource
  @rdf:type:
    DISLang:Role
  @ForCheck:
    =ManakaiDOM:all
  @Description:
    @@lang:en
    @@@:
      The <QUOTE::role> that instances of the class is available via
      the <IF::DOMCore:DOMImplementationSource> interface 
      implemented by the <Class::DOMCore:ManakaiDOMImplementationSource>
      objects.

ResourceDef:
  @QName: DOMMetaImpl|ImplementationCompatibleWithManakaiDOMMinimumImplementation
  @rdf:type:
    DISLang:Role
  @ForCheck:
    =ManakaiDOM:all
  @Description:
    @@lang:en
    @@@:
      The <QUOTE::role> that the class is compatible with the class
      <Class::ManakaiDOMMinimumImplementation> so that 
      any instance of the class compatible with it is castable 
      to the class via the <M::ManakaiDOMMinimumImplementation
      .getFeature> method.

ResourceDef:
  @QName: DOMMetaImpl|ManakaiAnyImplementationRole
  @rdf:type:
    DISLang:Role
  @ForCheck:
    =ManakaiDOM:all
  @rdfs:subClassOf: 
    DOMMetaImpl|ImplementationCompatibleWithManakaiDOMMinimumImplementation
  @Description:
    @@lang:en
    @@@:
      Any class that plays this <QUOTE::role> might be accessible 
      via <M::ManakaiDOMMinimumImplementation
            ::ManakaiDOM:ManakaiDOMLatest.getFeature>.
      \
      {NOTE:: The class don't have to implement the 
              <IF::DOMMinimumImplementation
                 ::ManakaiDOM:ManakaiDOMLatest> interface.
      \
      }

ResourceDef:
  @QName: DOMMetaImpl|ManakaiDOMImplementationRole
  @rdf:type:
    DISLang:Role
  @ForCheck:
    =ManakaiDOM:all
  @rdfs:subClassOf: DOMMetaImpl|ImplementationForManakaiDOMImplementationSource
  @rdfs:subClassOf: DOMMetaImpl|ManakaiAnyImplementationRole
  @Description:
    @@lang:en
    @@@:
      Any class that plays this <QUOTE::role> might be accessible
      via <Class::DOMCore:ManakaiDOMImplementationSource
                ::ManakaiDOM:ManakaiDOMLatest>
      or <M::DOMMetaImpl:ManakaiDOMMinimumImplementation
           ::ManakaiDOM:ManakaiDOMLatest.getFeature>.
      \
      {NOTE:: The class that plays this <QUOTE::role> must implement the
              <IF::DOMMetaImpl:ManakaiDOMMinimumImplementation
                 ::ManakaiDOM:ManakaiDOMLatest> interface.
      \
      }

PropDef:
  @QName:
    dis:Role
  @Description:
    @@lang:en
    @@@:
      A role of the subject class in the DOM system.  It identifies 
      what kind of classes should be provided as <QUOTE::alternative>s 
      via, for example, <M::DOMCore:DOMImplementation.getFeature>. 
      \
      {P:: Currently, its values includes: 
      \
        - <CODE::DOMEvents:ManakaiDOMEvent::ManakaiDOM:ManakaiDOMLatest>::: 
            Classes that should be available via 
            <M::DOMEvents:ManakaiDOMDocumentEvent.createEvent>.
      \
        - <CODE::DOMCore:DOMImplementation::ManakaiDOM:ManakaiDOM>::: 
            Classes that might be available via <Class::ImplementationRegistry>, 
            <IF::DOMCore:DOMImplementationSource> or 
            <M::DOMCore:DOMImplementation.getFeature>. 
      \
        - <CODE::DOMCore:DOMImplementationSource::ManakaiDOM:ManakaiDOM>:::
            Classes that should be known to 
            <Class::ImplementationRegistry>.
      \
        - <CODE::DOMCore:Node::ManakaiDOM:ManakaiDOM>::: 
            Classes that might be available via <M::DOMCore:Node.getFeature> 
            or any <IF::Node> returning method and attributes.
      \
      }
      \
      {NOTE:: <Q::dis:Role> is deprecated in favor of <Q::DISLang:role>;
              <Q::dis:Role> is retained here for compatibility 
              with old <CODE::cdis2pm> utility.
      \
      }
  @rdfs:domain:
    ManakaiDOM:Class
  @rdfs:range:
    ManakaiDOM:IF
  @dataType: dis|TFQNames
  @multipleProperties: DISCore|UnorderedList

PropDef:
  @QName:
    dis:compat
  @Description:
    @@lang:en
    @@@:
      The internal data structure (and so on) of a subject resource is 
      compatible with that of object resource. 
      \
      This property is described as a child element of 
      <Q::dis:Role> property element because of historical reason. 
      \
      {P:: Currently used its values are:
         \
         - <CODE::DOMCore:ManakaiDOMImplementation::ManakaiDOM:ManakaiDOMLatest>::: 
             An class that should be available via 
             <M::DOMCore:ManakaiDOMImplementation.getFeature>. 
         \
         - <CODE::DOMCore:ManakaiDOMImplementationSource::ManakaiDOM:ManakaiDOMLatest>:::
             An class that is able to handle as same manner 
             as <M::DOMCore:ManakaiDOMImplementationSource> by 
             <Class::ImplementationRegistry>.
         \
         - <CODE::DOMCore:ManakaiDOMNode::ManakaiDOM:ManakaiDOMLatest>:::
             An class that should be available via 
             <M::DOMCore:ManakaiDOMNode.getFeature>.
         \
      }
      \
      {NOTE:: <Q::dis:compat> is deprecated in favor of <Q::DISLang:role>;
              <Q::dis:compat> is retained here for compatibility 
              with old <CODE::cdis2pm> utility.
      \
      }
  @rdfs:domain:
    ManakaiDOM:Class
  @rdfs:range:
    ManakaiDOM:Class
  @dataType: dis|TFQNames
  @multipleProperties: DISCore|UnorderedList

## -- The bootstrap object

ResourceDef:
  @QName: ImplementationRegistryVar
  @rdf:type:
    DISPerl:ScalarVariable
  @DISPerl:variableName:
    Message::DOM::ImplementationRegistry
  @DefaultValue:
    @@@:
      <ClassName::ImplementationRegistry::ManakaiDOM:ManakaiDOMLatest>
    @@ContentType:
      lang:Perl
  @Type: DISLang|String||ManakaiDOM|all
  @For:
    ManakaiDOM:ManakaiDOMLatest

ResourceDef:
  @QName: DEBUG
  @rdf:type: DISPerl|ScalarVariable
  @DISPerl:variableName:
    Message::DOM::DOMFeature::DEBUG
  @Type: DISPerl|Boolean||ManakaiDOM|all
  @For: ManakaiDOM|ManakaiDOMLatest
  @enDesc:
    The variable <Perl::$Message::DOM::DOMFeature::DEBUG> controls
    whether <M::ManakaiImplementationSource.getImplementation>
    should print debug message to the standard error output or not.
    If the variable is set to <DOM::true>, the process to find
    an implementation is shown so application developers can
    known what module should be loaded or what class is actually in use.
  @ForCheck: !ManakaiDOM|all

ElementTypeBinding:
  @Name: enDesc
  @ElementType:
    dis:Description
  @ShadowContent:
    @@lang:en

## -- The implementation registry object

ResourceDef:
  @QName: ImplementationRegistry
  @rdf:type: ManakaiDOM|Class

  @For: ManakaiDOM|DOM3
  @Implement: ImplementationSource||ManakaiDOM|ManakaiDOM3
  @Implement:
    @@@: ImplementationSource||ManakaiDOM|ManakaiDOMLatest
    @@For: ManakaiDOM|ManakaiDOMLatest

  @Description:
    @@lang:en
    @@@:
      A binding dependent bootstrap for <IF::MinimumImplementation> objects.
  @Description:
    @@For:
      ManakaiDOM:ManakaiDOM
    @@lang:en
    @@@:
      A bootstrap class/object from which DOM implementations can be 
      retrieved.  For the manakai
      <Class::ImplementationRegistry> 
      implementation, DOM applications can access the registry both 
      via class methods and via object methods.  That is, applications 
      are free, but need not to instantiate a 
      <Class::ImplementationRegistry> object to get 
      DOM implementations. 
      \
      {NOTE:: Authors of DOM applications will usually want to access 
              the registry by the means of class methods (i.e. no 
              instance objects), since most applications don't 
              require more than one implementations.
      \
      }

  @Method:
     @@Name:  getImplementation
     @@ManakaiDOM:isStatic: 1
     @@Description:
       @@@lang:en
       @@@@:
         Seeks and returns the first implementation that implements 
         desired features. 
     @@Param:
        @@@Name:  features
        @@@Type:  DISLang|String||ManakaiDOM|all
        @@@actualType: FeaturesString
        @@@Description:
          @@@@lang:en
          @@@@@: 
            A list of desired features that must be implemented.
     @@Return:
       @@@Type: MinimumImplementation
       @@@enDesc:
         The first implementation that has the desired features.
         The object returned by this method may not implement
         the <IF::DOMCore:DOMImplementation> interface.
       @@@enDesc:
         @@@@For: ManakaiDOM|ManakaiDOM
         @@@@@:
           {NOTE:: The object returned by this method might not
                   be a manakai object.
           }
       @@@InCase:
         @@@@Value:
           @@@@@is-null:1
         @@@@Description:
           @@@@@lang:en
           @@@@@@: 
             No implementation implementing the desired features is found.
       @@@PerlDef:
           __CODE{DOMMain:stringifyFeatures:: $IN => $features,
                                              $OUT => $features}__;
           __DEEP{
             C: for my $class (
               keys %Message::DOM::ManakaiDOMImplementationRegistry::SourceClass
             ) {
               if ($class->isa (<IFName::ImplementationSource>)) {
                 $r = $class-><M::ImplementationSource
                               .getImplementation> ($features);
               } else {
                 $r = $class-><M::ImplementationSource
                               .getDOMImplementation> ($features);
               }
               last C if defined $r;
             }
           }__;
      @@@ImplNote:
        @@@@lang:en
        @@@@@:
          Converting <P::features> into a string is necessary since 
          a <IF::DOMCore:DOMImplementationSource> might not be part 
          of manakai so that it does not support the hash representation. 

  @Method:
     @@Name:  getDOMImplementation
     @@ManakaiDOM:isStatic: 1
     @@Description:
       @@@lang:en
       @@@@:
         Seeks and returns the first implementation that implements 
         desired features. 
     @@Param:
        @@@Name:  features
        @@@Type:  DISLang|String||ManakaiDOM|all
        @@@actualType: FeaturesString
        @@@Description:
          @@@@lang:en
          @@@@@: 
            A list of desired features that must be implemented.
     @@Return:
       @@@Type: MinimumImplementation
       @@@enDesc:
         The first DOM implementation that has the desired features.
         The object returned by this method <kwd:MUST> implement
         the <IF::DOMCore:DOMImplementation> interface defined
         in DOM Level 3 and it <kwd:MUST> has the feature
         <Feature::Core> version <FeatureVer::3.0>.
       @@@enDesc:
         @@@@For: ManakaiDOM|ManakaiDOM
         @@@@@:
           {NOTE:: The object returned by this method might not
                   be a manakai object.
           }
       @@@InCase:
         @@@@Value:
           @@@@@is-null:1
         @@@@Description:
           @@@@@lang:en
           @@@@@@: 
             No implementation implementing the desired features is found.
       @@@PerlDef:
           $features->{core}->{'3.0'} = true;
           __CODE{DOMMain:stringifyFeatures:: $IN => $features,
                                              $OUT => $features}__;
           __DEEP{
             C: for my $class (
               keys %Message::DOM::ManakaiDOMImplementationRegistry::SourceClass
             ) {
               $r = $class-><M::ImplementationSource
                               .getDOMImplementation> ($features);
               last C if defined $r;
             }
           }__;
      @@@ImplNote:
        @@@@lang:en
        @@@@@:
          Converting <P::features> into a string is necessary since 
          a <IF::DOMCore:DOMImplementationSource> might not be part 
          of manakai so that it does not support the hash representation. 

  @Method:
     @@Name:  getImplementationList
     @@ManakaiDOM:isStatic: 1
     @@Description:
       @@@lang:en
       @@@@:
         Returns a list of all the implementations that implement 
         desired features.
     @@Param:
        @@@Name:  features
        @@@Type:  DISLang|String||ManakaiDOM|all
        @@@actualType: FeaturesString
        @@@Description:
          @@@@lang:en
          @@@@@: A list of desired features that must be implemented.
     @@Return:
       @@@Type:  ImplementationList
       @@@actualType: ManakaiImplementationList
       @@@Description:
         @@@@lang:en
         @@@@@: 
           A list of implementations that support the desired features. 
           The object returned by this method might not implement
           the <IF::DOMCore:DOMImplementation> interface.

           {NOTE:: Since implementation sources reports the same
                   implementation, the list <kwd:MAY> contain an implementation
                   more than one times.
           }
       @@@enDesc:
         @@@@For: ManakaiDOM|ManakaiDOM
         @@@@@:
           {NOTE:: Although the list returned by this method itself
                   is a manakai object, each item in the list might
                   not a manakai object.
           }
       @@@PerlDef:
           __CODE{DOMMain:stringifyFeatures:: $IN => $features,
                                              $OUT => $features}__;
           __DEEP{
             $r = <Class::ManakaiImplementationList>->new;
             for my $class (
               keys %Message::DOM::ManakaiDOMImplementationRegistry::SourceClass
             ) {
               if ($class->isa (<IFName::ImplementationSource>)) {
                 $r-><M::ImplementationList.appendItems>
                         ($class-><M::ImplementationSource
                                       .getImplementationList> ($features));
               } else {
                 $r-><M::ImplementationList.appendItems>
                         ($class-><M::ImplementationSource
                                       .getDOMImplementationList> ($features));
               }
             }
           }__;

  @Method:
     @@Name:  getDOMImplementationList
     @@ManakaiDOM:isStatic: 1
     @@Description:
       @@@lang:en
       @@@@:
         Returns a list of all the DOM implementations that implement 
         desired features.
     @@Param:
        @@@Name:  features
        @@@Type:  DISLang|String||ManakaiDOM|all
        @@@actualType: FeaturesString
        @@@Description:
          @@@@lang:en
          @@@@@: A list of desired features that must be implemented.
     @@Return:
       @@@Type:  ImplementationList
       @@@actualType: ManakaiImplementationList
       @@@Description:
         @@@@lang:en
         @@@@@: 
           A list of DOM implementations that support the desired features. 
           The object returned by this method <kwd:MUST> implement
           the <IF::DOMCore:DOMImplementation> interface defined
           in DOM Level 3 and it <kwd:MUST> has the feature
           <Feature::Core> version <FeatureVer::3.0>.

           {NOTE:: Since implementation sources reports the same
                   implementation, the list <kwd:MAY> contain an implementation
                   more than one times.
           }
       @@@enDesc:
         @@@@For: ManakaiDOM|ManakaiDOM
         @@@@@:
           {NOTE:: Although the list returned by this method itself
                   is a manakai object, each item in the list might
                   not a manakai object.
           }
       @@@PerlDef:
           $features->{core}->{'3.0'} = true;
           __CODE{DOMMain:stringifyFeatures:: $IN => $features,
                                              $OUT => $features}__;
           __DEEP{
             $r = <Class::ManakaiImplementationList>->new;
             for my $class (
               keys %Message::DOM::ManakaiDOMImplementationRegistry::SourceClass
             ) {
               $r-><M::ImplementationList.appendItems>
                         ($class-><M::ImplementationSource
                                       .getDOMImplementationList> ($features));
             }
           }__;
##ImplementationRegistry

## -- DOM implementation list & source modeled from DOM Level 3 Core module

ElementTypeBinding:
  @Name: minIFClsDef
  @ElementType: 
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@: dis|MultipleResource
      @@@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass
    @@resourceFor: ManakaiDOM|ForIF
    @@resourceFor:
      @@@@: ManakaiDOM|ForClass
      @@@ForCheck: ManakaiDOM|ManakaiDOM !=ManakaiDOM|ManakaiDOM
    @@For: ManakaiDOM|DOM3
    @@For: =ManakaiDOM|ManakaiDOM

    @@rdf:type:
      @@@@: DISLang|Interface
      @@@ForCheck: ManakaiDOM|ForIF

    @@rdf:type:
      @@@@: DISLang|Class
      @@@ForCheck: ManakaiDOM|ForClass
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOM||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOM3||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM3
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOMLatest||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOMLatest

    @@DOMMain:implementFeature: min30

minIFClsDef:
  @IFQName: ImplementationList
  @ClsQName: ManakaiImplementationList

  @enDesc:
    An ordered collection of objects which implement the
    <IF::MinimumImplementation> interface.

    {NOTE:: How this collection is implemented is unspecified.
    }

    {NOTE:: This collection is <EM::not> <QUOTE::live>.
    }
  @enDesc:
    @@@:
      In the Perl binding, the <IF::ImplementationList> objects
      might be handled as if they are arrays.
  
  @Method:
     @@Name:  item
     @@Description:
       @@@lang:en
       @@@@: 
         Returns the <P::index>th item in this collection.
     @@Param:
        @@@Name:  index
        @@@Type:  
          DOMMain:unsigned-long::ManakaiDOM:all
        @@@Description:
          @@@@lang:en
          @@@@@: 
            An index of the item to retrieve in this collection.
     @@Return:
        @@@Type: MinimumImplementation
        @@@Description:
          @@@@lang:en
          @@@@@: 
            The implementation at the <P::index>th position in
            the collection.
        @@@InCase:
          @@@@Value: 
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              There is no <P::index>th implementation in the collection.
        @@@PerlCDef:
          if (not defined $index or
              $index < 0 or
              $index > $#$self) {
            $r = null;
          } else {
            $r = $self->[$index];
          }
  @Attr:
     @@Name:  length
     @@Description:
       @@@lang:en
       @@@@:  
         The number of implementation objects in the collection.
     @@Get:
        @@@Type:  
          DOMMain:unsigned-long::ManakaiDOM:all
        @@@PerlCDef:
            $r = @$self;

  @Method:
    @@Operator:
      @@@@: DISPerl|NewMethod
      @@@ContentType: dis|TypeQName
    @@ManakaiDOM:isStatic:1
    @@ManakaiDOM:isForInternal:1
    @@ForCheck: ManakaiDOM|ForClass
    @@enDesc:
      Creates a new <IF::ImplementationList> object and returns it.
    @@Return:
      @@@Type: ImplementationList
      @@@actualType: ManakaiImplementationList
      @@@enDesc: The newly created list.
      @@@PerlDef:
          $r = bless [], ref $self ? ref $self : $self;
  @Method:
    @@Name: appendItems
    @@enDesc:
      Appends all the items in a list to the last of the collection.
    @@Param:
      @@@Name: list
      @@@Type: ImplementationList
      @@@enDesc:
        A list of implementations.
      @@@enDesc:
        @@@@For: ManakaiDOM|Perl
        @@@@@:
          In the Perl binding, the parameter value <kwd:MAY> be 
          a <IF::MinimumImplementation> object.
    @@Return:
      @@@PerlCDef:
        if ($list->isa (<IFName::ImplementationList>)) {
          push @$self, @$list;
        } else {
          push @$self, $list;
        }
##ImplementationList

minIFClsDef:
  @IFQName: ImplementationSource
  @ClsQName: ManakaiImplementationSource
  
  @DISLang:role: DOMMetaImpl|ManakaiDOMImplementationSourceRole

  @enDesc:
    The objects implementing <IF::ImplementationSource> interface provides 
    access to available implementations.  The 
    <Class::ImplementationRegistry> object is a special case
    of the instance of this interface.

  @Method:
     @@Name:  getImplementation
     @@Description:
        @@@lang:en
        @@@@: 
          Returns the first implementation that support specific 
          features.
     @@Param:
        @@@Name:  features
        @@@Type: DISLang|String||ManakaiDOM|all
        @@@actualType: FeaturesString
        @@@Description:
          @@@@lang:en
          @@@@@:
            A string that specifies which features and versions are 
            required.
     @@Return:
        @@@Type:MinimumImplementation
        @@@Description:
          @@@@lang:en
          @@@@@: 
            The first implementation that support the desired 
            features and versions.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              This source has no implementation that supports the 
              desired features and versions.
        @@@PerlCDef:
            my $debug = $Message::DOM::DOMFeature::DEBUG
                      ? sub ($@) { print STDERR (('  ' x shift), @_) }
                      : sub ($@) {};
            CLS: for my $class (grep {
              $Message::DOM::ManakaiDOMImplementationSource::SourceClass{$_}
            } keys %Message::DOM::ManakaiDOMImplementationSource::SourceClass) {
              $debug->(1, qq<Class "$class"...\n>);
              __CODE{makeClassISAList:: $CLASS => $class}__;
              for my $fname (keys %$features) {
                my $fkey = $fname;
                my $plus = $fname =~ s/^\+// ? true : false;
                $debug->(2, qq<Feature "$fname">, ($plus?'+':''), qq<,\n>);
                FVER: for my $fver (grep {$features->{$fkey}->{$_}}
                                       keys %{$features->{$fkey}}) {
                  $debug->(3, qq<version "$fver"...\n>);
                  for my $cls ($class, @{$Message::DOM::ClassISA{$class}}) {
                    if ($Message::DOM::ImplFeature{$class}->{$fname}->{$fver} ||=
                           ## (Caching)
                        $Message::DOM::ImplFeature{$cls}->{$fname}->{$fver}) {
                      $debug->(4, qq<found in "$cls"\n>);
                      next FVER; # Feature/version found
                    }
                  }

                  if ($plus) {
                    if ($Message::DOM::ManakaiDOMImplementation::CompatClass{
                          $class}) {
                      my %compat_cls;
                      for my $cls (grep {
                        $Message::DOM::ManakaiDOMImplementation::CompatClass{
                        $_}
                      } keys
                      %Message::DOM::ManakaiDOMImplementation::CompatClass) {
                        next if $compat_cls{$cls};
                        __CODE{makeClassISAList:: $CLASS => $cls}__;
                        for my $c (@{$Message::DOM::ClassISA{$cls}}) {
                          $compat_cls{$c} = true;
                        }                 
                      }
                      for my $cls (keys %compat_cls) {
                        if ($Message::DOM::ImplFeature{$cls}
                              ->{$fname}->{$fver}) {
                          $debug->(4, qq<found+ in "$cls"\n>);
                          next FVER; # +Feature/ver found
                        }
                      }
                    }
                  }
                  $debug->(2, qq<not found\n>);
                  next CLS; # Not found
                } # FVER
              } # FNAME

              ## Class found
              $r = $class->_new;
              last CLS;    ## NOTE: Method name directly written
            } # CLS

  @Method:
     @@Name:  getDOMImplementation
     @@Description:
        @@@lang:en
        @@@@: 
          Returns the first DOM implementation that support specific 
          features.
     @@Param:
        @@@Name:  features
        @@@Type: DISLang|String||ManakaiDOM|all
        @@@actualType: FeaturesString
        @@@Description:
          @@@@lang:en
          @@@@@:
            A string that specifies which features and versions are 
            required.
     @@Return:
        @@@Type:MinimumImplementation
        @@@Description:
          @@@@lang:en
          @@@@@: 
            The first DOM implementation that support the desired 
            features and versions.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              This source has no DOM implementation that supports the 
              desired features and versions.
        @@@PerlCDef:
          $features->{'core'}->{'3.0'} = true;
          __DEEP{
            $r = $self-><M::ImplementationSource.getImplementation> ($features);
          }__;

  @Method:
     @@Name:  getImplementationList
     @@Description:
       @@@lang:en
       @@@@:
         Returns a list of implementations that support the specified 
         features and versions.
     @@Param:
        @@@Name:  features
        @@@Type: DISLang|String||ManakaiDOM|all
        @@@actualType: FeaturesString
        @@@Description:
          @@@@lang:en
          @@@@@:
            A string that specifies which features and versions are required.
     @@Return:
        @@@Type:  ImplementationList
        @@@actualType: ManakaiImplementationList
        @@@Description:
          @@@@lang:en
          @@@@@:
            A list of implementations that support the desired 
            features and versions.
        @@@PerlCDef:
            $r = <ClassName::ManakaiImplementationList>->new;
            CLS: for my $class (grep {
              $Message::DOM::ManakaiDOMImplementationSource::SourceClass{$_}
            } keys %Message::DOM::ManakaiDOMImplementationSource::SourceClass) {
              __CODE{makeClassISAList:: $CLASS => $class}__;
              for my $fname (keys %$features) {
                my $fkey = $fname;
                my $plus = $fname =~ s/^\+// ? true : false;
                FVER: for my $fver (grep {$features->{$fkey}->{$_}}
                                       keys %{$features->{$fkey}}) {
                  for my $cls ($class, @{$Message::DOM::ClassISA{$class}}) {
                    if ($Message::DOM::ImplFeature{$class}->{$fname}->{$fver} ||=
                           ## (Caching)
                        $Message::DOM::ImplFeature{$cls}->{$fname}->{$fver}) {
                      next FVER; # Feature/version found
                    }
                  }

                  if ($plus) {
                    if ($Message::DOM::ManakaiDOMImplementation::CompatClass{
                          $class}) {
                      my %compat_cls;
                      for my $cls (grep {
                        $Message::DOM::ManakaiDOMImplementation::CompatClass{
                        $_}
                      } keys
                      %Message::DOM::ManakaiDOMImplementation::CompatClass) {
                        next if $compat_cls{$cls};
                        __CODE{makeClassISAList:: $CLASS => $cls}__;
                        for my $c (@{$Message::DOM::ClassISA{$cls}}) {
                          $compat_cls{$c} = true;
                        }                 
                      }
                      for my $cls (keys %compat_cls) {
                        if ($Message::DOM::ImplFeature{$cls}
                              ->{$fname}->{$fver}) {
                          next FVER; # +Feature/ver found
                        }
                      }
                    }
                  }
                  next CLS; # Not found
                } # FVER
              } # FNAME

              ## Class found
              push @$r, $class->_new;
              last CLS;                 ## NOTE: Method name directly written
            } # CLS

  @Method:
     @@Name:  getDOMImplementationList
     @@Description:
       @@@lang:en
       @@@@:
         Returns a list of DOM implementations that support the specified 
         features and versions.
     @@Param:
        @@@Name:  features
        @@@Type: DISLang|String||ManakaiDOM|all
        @@@actualType: FeaturesString
        @@@Description:
          @@@@lang:en
          @@@@@:
            A string that specifies which features and versions are required.
     @@Return:
        @@@Type:  ImplementationList
        @@@actualType: ManakaiImplementationList
        @@@Description:
          @@@@lang:en
          @@@@@:
            A list of DOM implementations that support the desired 
            features and versions.
        @@@PerlCDef:
          __DEEP{
            $features->{core}->{'3.0'} = true;
            $r = $self-><M::ImplementationSource
                           .getImplementationList> ($features);
          }__;
##ImplementationSource

ResourceDef:
  @QName: makeClassISAList
  @rdf:type:
    dis2pm:BlockCode
  @enDesc:
    Makes the list of <QUOTE::is-a> classes of a class.
  @PerlDef:
    unless ($Message::DOM::ClassISA{$CLASS}) {
      no strict 'refs';
      my %__class;
      my @__chk = ($CLASS);
      while (my $__chk = shift @__chk) {
        $__class{$__chk} = true;
        for my $__isa (@{$__chk . '::ISA'}) {
          if ($__isa !~ /::IF(?:Level.|Latest)?::/ and 
              not $__class{$__isa}) {
            push @__chk, $__isa;
          }
        }
      }
      $Message::DOM::ClassISA{$CLASS} = [keys %__class];
    }
  @For: ManakaiDOM|ManakaiDOM3

## -- Simplified DOMImplementation interface

minIFClsDef:
  @IFQName: MinimumImplementation
  @ClsQName: ManakaiMinimumImplementation

  @Description:
    @@lang:en
    @@@:
      The <IF::MinimumImplementation> interface 
      is a subset of the DOM Level 3 <IF::DOMCore:DOMImplementation>
      interface.  This interface provides only two methods:
      <M::GetFeature.hasFeature> (DOM Level 1) and
      <M::GetFeature.getFeature> (DOM Level 3).

  @ISA:
    @@@:
      ManakaiNode:ManakaiNodeRef::ManakaiDOM:Perl
    @@ForCheck:
      ManakaiDOM:ManakaiDOM ManakaiDOM:ForClass

  @Implement: GetFeature
  @ISA:
    @@@@: GetFeature
    @@@ForCheck: ManakaiDOM|ForIF

  @DISLang:role: DOMMetaImpl|ManakaiDOMImplementationRole

  @DOMMetaImpl:provideFeature: min30
  
  @Method:
    @@Name:  hasFeature
    @@ForCheck: ManakaiDOM|ForClass
    @@Description:
      @@@lang:en
      @@@@:
         Tests whether this implementation supports a specific 
         feature and version or not.
    @@Param:
      @@@Name:  feature
      @@@Type: DISLang|String||ManakaiDOM|all
      @@@actualType: FeatureNameString
      @@@Description:
        @@@@lang:en
        @@@@@: 
          The name of the feature to test, with or without 
          <CHAR::PLUS SIGN> prefix.
    @@Param:
      @@@Name:  version
      @@@Type: DISLang|String||ManakaiDOM|all
      @@@actualType: FeatureVersionString
      @@@Description:
        @@@@lang:en
        @@@@@:
          The version number of the feature to test. 
    @@Return:
      @@@Type:  
        DOMMain:boolean::ManakaiDOM:all
      @@@Description:
        @@@@lang:en
        @@@@@: 
          Whether the feature and version is implemented or not.
      @@@InCase:
        @@@@Value: 
          @@@@@@:1
          @@@@@ContentType: DISCore|Boolean
        @@@@Description:
          @@@@@lang:en
          @@@@@@: 
            The <P::feature> is implemented in the specified <P::version>.
      @@@InCase:
        @@@@Value: 
          @@@@@@:0
          @@@@@ContentType: DISCore|Boolean
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The feature is not implemented.
        @@@PerlCDef:
            my $plus = $feature =~ s/^\+// ? 1 : 0;
            my $class = ref $self;
            __CODE{makeClassISAList:: $CLASS => $class}__;
            if (defined $Message::DOM::ImplFeature{$class}
                                ->{$feature}->{$version}) {
              $r = $Message::DOM::ImplFeature{$class}
                                ->{$feature}->{$version};
            } elsif ($plus) {
              CLASS: for my $class (grep {
                $Message::DOM::ManakaiDOMImplementation::CompatClass{$_}
              } keys %Message::DOM::ManakaiDOMImplementation::CompatClass) {
                for my $cls ($class, @{$Message::DOM::ClassISA{$class}}) {
                  if ($Message::DOM::ImplFeature{$class}
                                   ->{$feature}->{$version}) {
                    $r = true;
                    last CLASS;
                  }
                }
              }
            }

  @Method:
     @@Name:  getFeature
     @@ForCheck: ManakaiDOM|ForClass
     @@Description:
        @@@lang:en
        @@@@:
          Returns a specialized object that implements the specialized 
          interfaces of the specified feature and version.
     @@Param:
        @@@Name:  feature
        @@@Type: DISLang|String||ManakaiDOM|all
        @@@actualType: FeatureNameString
        @@@Description:
          @@@@lang:en
          @@@@@:
            A feature name to request.
     @@Param:
        @@@Name:  version
        @@@Type: DISLang|String||ManakaiDOM|all
        @@@actualType: FeatureVersionString
        @@@Description:
          @@@@lang:en
          @@@@@:
            A feature version number to request.
     @@Return:
        @@@Type: DOMMain|Object||ManakaiDOM|all
        @@@Description:
          @@@@lang:en
          @@@@@:
            An object that implements the specialized APIs of the 
            <P::feature> and <P::version>.  It might or might not 
            implements the <IF::MinimumImplementation> interface. 
            In addition, the object might or might not part of 
            manakai. 

            If the object implements the <IF::MinimumImplementation>
            interface or the <IF::DOMCore:DOMImplementation>, 
            it must delegate to the primary core <IF::MinimumImplementation> 
            and must not result incosistent with the primary core 
            <IF::MinimumImplementation> such as
            <M::GetFeature.hasFeature>, 
            <M::GetFeature.getFeature>, etc.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@enDesc:
            There is no object available that implements interfaces 
            associated with the <P::feature> and <P::version>. 
        @@@PerlCDef:
            $feature =~ s/^\+//;
            CLASS: for my $class (grep {
              $Message::DOM::ManakaiDOMImplementation::CompatClass{$_}
            } keys %Message::DOM::ManakaiDOMImplementation::CompatClass) {
              __CODE{makeClassISAList:: $CLASS => $class}__;
              for my $cls ($class, @{$Message::DOM::ClassISA{$class}}) {
                if ($Message::DOM::ImplFeature{$class}->{$feature}->{$version}) {
                  __CODE{ManakaiNode|getNewReference||ManakaiDOM|Perl::
                    $object => {$self->{<H::mn:node>}},
                    $ref => $r,
                    $class => $class,
                  }__;
                  last CLASS;
                }
              }
            }

  @Method:
    @@Name:new
    @@ManakaiDOM:isForInternal:1
    @@ForCheck: ManakaiDOM|ForClass
    @@enDesc:
      Constructs a new instance of <IF::ManakaiMinimumImplementation>
      and returns it.

    @@Return:
      @@@Type: ManakaiMinimumImplementation
      @@@Description:
        @@@@lang:en
        @@@@@:
          The newly created implementation object.
      @@@PerlDef:
          my $node = <ClassM::ManakaiNode:ManakaiNodeStem::ManakaiDOM:Perl.new>
                         ($self);
          __CODE{ManakaiNode|getNewReference||ManakaiDOM|Perl::
            $object => $node,
            $ref => $r,
            $class => $self,
          }__;
          $node->{<H::ManakaiDOM:implID>} = $node->{<H::mn:nodeID>};
##MinimumImplementation

PropDef:
  @QName: ManakaiDOM|implID
  @enDesc:
    The identifier of an implementation.
  @Type: DISPerl|String
  @ManakaiNode:stemName: implid
  @rdfs:domain: DOMFeature|MinimumImplementation||ManakaiDOM|ManakaiDOM

ResourceDef:
  @QName: DOMMetaImpl|ManakaiDOMMinimumImplementation
  @For: ManakaiDOM|ManakaiDOM3
  @AliasFor: ManakaiMinimumImplementation
  @ImplNote:
    @@lang:en
    @@@:
      This historical alias will be removed.

ResourceDef:
  @QName: DOMMetaImpl|ManakaiDOMMinimumImplementationIF
  @For: ManakaiDOM|ManakaiDOM3
  @AliasFor: MinimumImplementation

ResourceDef:
  @For: ManakaiDOM|DOM3
  @For: =ManakaiDOM|ManakaiDOM
  @rdf:type:
    @@@: dis|MultipleResource
    @@ForCheck: !ManakaiDOM|ForClass !ManakaiDOM|ForIF
  @resourceFor: ManakaiDOM|ForIF
  @resourceFor:
    @@@: ManakaiDOM|ForClass
    @@For: ManakaiDOM|ManakaiDOM3

  @rdf:type:
    @@@: DISLang|Interface
    @@ForCheck: ManakaiDOM|ForIF
  @IFQName: GetFeature

  @rdf:type:
    @@@: DISLang|Class
    @@ForCheck: ManakaiDOM|ForClass
  @ClsQName: ManakaiHasFeatureByGetFeature

  @enDesc:
    The <IF::GetFeature> interface provides the <M::.hasFeature>
    and <M::.getFeature> methods to test or to retrieve an object with
    specified feature.

  @enDesc:
    @@ForCheck: ManakaiDOM|ForClass
    @@@:
      The class <Class::ManakaiHasFeatureByGetFeature> provides
      a method, <M::.hasFeature>, which is implemented by
      calling the <M::.getFeature> method and testing if 
      the method returns non-<DOM::null> value or not.
      A class that only implements the <M::GetFeature.getFeature>
      method can claim that it is implementing the <IF::GetFeature>
      interface by inheriting the <Class::ManakaiHasFeatureByGetFeauture>
      class.

  @Method:
    @@Name:  hasFeature
    @@Description:
      @@@lang:en
      @@@@:
         Tests whether this object supports a specific 
         feature and version or not.
    @@Param:
      @@@Name:  feature
      @@@Type: DISLang|String||ManakaiDOM|all
      @@@actualType: FeatureNameString
      @@@Description:
        @@@@lang:en
        @@@@@: 
          The name of the feature to test, with or without 
          <CHAR::PLUS SIGN> prefix.
    @@Param:
      @@@Name:  version
      @@@Type: DISLang|String||ManakaiDOM|all
      @@@actualType: FeatureVersionString
      @@@Description:
        @@@@lang:en
        @@@@@:
          The version number of the feature to test. 
    @@Return:
      @@@Type:  
        DOMMain:boolean::ManakaiDOM:all
      @@@Description:
        @@@@lang:en
        @@@@@: 
          Whether the feature and version is implemented or not.
      @@@InCase:
        @@@@Value:
          @@@@@@:1
          @@@@@ContentType: DISCore|Boolean
        @@@@Description:
          @@@@@lang:en
          @@@@@@: 
            The <P::feature> is implemented in the specified <P::version>.
      @@@InCase:
        @@@@Value:
          @@@@@@:0
          @@@@@ContentType: DISCore|Boolean
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The feature is not implemented.
        @@@PerlCDef:
          __DEEP{
            $r = defined $self-><M::GetFeature.getFeature> ($feature, $version)
                 ? true : false;
          }__;

  @Method:
    @@ForCheck: ManakaiDOM|ForIF
     @@Name:  getFeature
     @@Description:
        @@@lang:en
        @@@@:
          Returns a specialized object that implements the specialized 
          interfaces of the specified feature and version.
     @@Param:
        @@@Name:  feature
        @@@Type: DISLang|String||ManakaiDOM|all
        @@@actualType: FeatureNameString
        @@@Description:
          @@@@lang:en
          @@@@@:
            A feature name to request.
     @@Param:
        @@@Name:  version
        @@@Type: DISLang|String||ManakaiDOM|all
        @@@actualType: FeatureVersionString
        @@@Description:
          @@@@lang:en
          @@@@@:
            A feature version number to request.
     @@Return:
        @@@Type: DOMMain|Object||ManakaiDOM|all
        @@@Description:
          @@@@lang:en
          @@@@@:
            An object that implements the specialized APIs of the 
            <P::feature> and <P::version>.  It might or might not 
            implements the <IF::GetFeature> interface, although
            such object is encouraged to implement the interface. 

            If the object implements the <IF::GetFeature> interface,
            it must delegate to the primary core <IF::GetFeature> 
            and must not result incosistent with the primary core 
            <IF::GetFeature> such as
            <M::GetFeature.hasFeature>, 
            <M::GetFeature.getFeature>, etc.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@@: 
            There is no object available that implements interfaces 
            associated with the <P::feature> and <P::version>. 
##GetFeature

PropDef:
  @QName:
    DOMCore:implementation
  @Description:
    @@lang:en
    @@@:
      The implementation object.

ElementTypeBinding:
  @Name: PerlDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:Perl

ElementTypeBinding:
  @Name: PerlCDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:Perl
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: PropDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      rdf:Property
    @@For: =ManakaiDOM|all

ElementTypeBinding:
  @Name: Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Attribute
    @@ForCheck:
      ManakaiDOM:DOM !=ManakaiDOM:ManakaiDOM

ElementTypeBinding:
  @Name: Get
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|AttributeGet

ElementTypeBinding:
  @Name: Set
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|AttributeSet

ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Method
    @@ForCheck:
      ManakaiDOM:DOM !=ManakaiDOM:ManakaiDOM

ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|MethodParameter

ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|MethodReturn

ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase

ElementTypeBinding:
  @Name: StringDataTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:DataType
    @@ForCheck: ManakaiDOM|DOM
    @@rdfs:subClassOf: DISLang|String||ManakaiDOM|all

ElementTypeBinding:
  @Name: IFQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck:
      ManakaiDOM:ForIF

ElementTypeBinding:
  @Name: ClsQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck:
      ManakaiDOM:ForClass

