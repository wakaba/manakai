Module:
  @QName:
    MDOM:DOMFeature
  @FullName:
    @@lang: en
    @@@: DOM Feature
  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2004/dom/feature#
  @idl:prefix: manakai.suika.fam.cx
  @idl:moduleName: mi
  
  @Description:
    @@lang:en
    @@@:
      The manakai <Module::MDOM:DOMFeature> module provides interfaces 
      and classes to obtain DOM implementations.  They might also
      be useful for any other frameworks which is friendly for
      DOM application developers.

      The <Class::ImplementationRegistry> object
      is the bootstrap for the DOM implementations; DOM
      applications can ask to return DOM implementations
      which support the desired feature.  This mechanism is
      basically defined in the <CITE::DOM Level 3 Core> specification
      and this module defines a Perl binding for it.

      The <IF::MinimumImplementation> interface defines
      the minimum interface that should be implemented by
      all DOM implementations and other implementations
      that is intended to be accessible via 
      the manakai <Class::ImplementationRegistry>
      object.  The interface contains methods to obtain
      an object which implements particular feature so
      that rich implementations which implement more than
      one interfaces offer their feature to applications 
      in the common manner.  This interface is manakai
      specific but it is a subset of the DOM Level 3
      <IF::DOMCore:DOMImplementation::ManakaiDOM:ManakaiDOM3>
      interface.

  @DISCore:author: DISCore|Wakaba
  @License:
     license:Perl+MPL
  @Date:
    @@@:
      $Date: 2006/12/02 12:46:21 $
    @@ContentType:
      dis:Date.RCS
  
  @Require:
    @@Module:
      @@@QName: DISlib|DISIDL
      @@@WithFor: ManakaiDOM|all
      @@@ImplNote:
        @@@@lang:en
        @@@@@:
          <Module::DISlib|DISPerl>, <Module::DISlib|Java>,
          <Module::DISlib|ECMAScript> is also referenced.
    @@Module:
      @@@QName:
        UtilError:DOMException
      @@@WithFor:
        ManakaiDOM:all
    @@Module:
      @@@QName: Util|Grove
      @@@WithFor: ManakaiDOM|all
    @@Module:
      @@@WithFor:
        ManakaiDOM:ManakaiDOM
    @@Module:
      @@@WithFor:
        ManakaiDOM:ManakaiDOM3
    @@Module:
      @@@WithFor:
        ManakaiDOM:ManakaiDOMLatest
    @@Module:
      @@@QName: DISlib|Test
      @@@WithFor: ManakaiDOM|all
    @@Module:
      @@@QName: MDOM|DOMCore
      @@@WithFor: ManakaiDOM|ManakaiDOMLatest
  @DefaultFor:
    ManakaiDOM:ManakaiDOMLatest

Namespace:
  @c:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
  @def:
    http://suika.fam.cx/~wakaba/archive/2004/dom/feature#spec.
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @DISlib:
    http://suika.fam.cx/~wakaba/archive/2004/dis/
  @doc:
    http://suika.fam.cx/~wakaba/archive/2004/dis/Document#
  @domcommon:
    http://suika.fam.cx/~wakaba/archive/2006/dom/common/
  @domes:
    http://suika.fam.cx/~wakaba/archive/2006/dom/ecmascript/
  @DOMEvents:
    http://suika.fam.cx/~wakaba/archive/2004/dom/events#
  @domidl:
    http://suika.fam.cx/~wakaba/archive/2006/dom/idl/ 
  @domjava:
    http://suika.fam.cx/~wakaba/archive/2006/dom/java/
  @DOMMain:
    http://suika.fam.cx/~wakaba/archive/2004/dom/main#
  @DOMMetaImpl:
    http://suika.fam.cx/~wakaba/archive/2004/dom/meta#
  @domperl:
    http://suika.fam.cx/~wakaba/archive/2006/dom/perl/
  @dx:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#
  @f:
    http://suika.fam.cx/~wakaba/archive/2004/dom/feature#
  @idl:
    http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#
  @kwd:
    http://suika.fam.cx/~wakaba/archive/2005/rfc2119/
  @lang:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @MDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.
  @MDOMX:
    http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @mg:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Grove/
  @p:
    http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#
  @str:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/DOMString/
  @test:
    http://suika.fam.cx/~wakaba/archive/2004/dis/Test#
  @ty:
    http://suika.fam.cx/~wakaba/archive/2005/7/tutorial#
  @Util:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/
  @UtilError:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/

ResourceDef:
  @QName:
    MDOM:
  @rdf:type:
    dis:ModuleGroup
  @FullName:
    @@lang:en
    @@@:
      The manakai DOM modules
  @DISPerl:packageName:
    @@@:
      Message::DOM::
    @@For: ManakaiDOM|ManakaiDOM
    @@ManakaiDOM:moduleSuffix:
      @@@@: Level3
      @@@For: ManakaiDOM|ManakaiDOM3 !ManakaiDOM|ManakaiDOMLatest
    @@ManakaiDOM:moduleSuffix:
      @@@@: Level2
      @@@For: ManakaiDOM|ManakaiDOM2 !ManakaiDOM|ManakaiDOM3
    @@ManakaiDOM:moduleSuffix:
      @@@@: Level1
      @@@For: ManakaiDOM|ManakaiDOM1 !ManakaiDOM|ManakaiDOM2
  @DISPerl:interfacePackageName:
    @@@:
      Message::DOM::IFLatest::
    @@For: ManakaiDOM|ManakaiDOMLatest
  @DISPerl:interfacePackageName:
    @@@:
      Message::DOM::IFLevel3::
    @@For: ManakaiDOM|ManakaiDOM3 !ManakaiDOM|ManakaiDOMLatest
  @DISPerl:interfacePackageName:
    @@@:
      Message::DOM::IFLevel2::
    @@For: ManakaiDOM|ManakaiDOM2 !ManakaiDOM|ManakaiDOM3
  @DISPerl:interfacePackageName:
    @@@:
      Message::DOM::IFLevel1::
    @@For: ManakaiDOM|ManakaiDOM1 !ManakaiDOM|ManakaiDOM2
  @DISPerl:interfacePackageName:
    @@@:
      Message::DOM::IF::
    @@For: ManakaiDOM|ManakaiDOM !ManakaiDOM|ManakaiDOM1
  @ImplNote:
    @@lang:en
    @@@:
      This resource is also defined in <Module::MDOM|DOMMain>
      module for <Q::ManakaiDOM|ManakaiDOM1> and <Q::ManakaiDOM|ManakaiDOM2>.

## -- "For" definitions

## For the Document Object Model

ForDef:
  @QName:
    ManakaiDOM:DOM
  @FullName:
    @@lang:en
    @@@: For DOM
ForDef:
  @QName:
    ManakaiDOM:DOM1
  @FullName:
    @@lang:en
    @@@: For DOM Level 1
  @ISA:
    ManakaiDOM:DOM
ForDef:
  @QName:
    ManakaiDOM:DOM2
  @FullName:
    @@lang:en
    @@@: For DOM Level 2
  @ISA:
    ManakaiDOM:DOM1
ForDef:
  @QName:
    ManakaiDOM:DOM3
  @FullName:
    @@lang:en
    @@@: For DOM Level 3
  @ISA:
    ManakaiDOM:DOM2
ForDef:
  @QName:
    ManakaiDOM:DOMLatest
  @FullName:
    @@lang:en
    @@@: For the latest level of DOM
  @ISA:
    ManakaiDOM:DOM3

## For the manakai DOM implementation

ForDef:
  @QName:
    ManakaiDOM:ManakaiDOM
  @FullName:
    @@lang:en
    @@@: For the manakai DOM implementation
  @Implement:
    ManakaiDOM:DOM
  @ISA:
    ManakaiDOM:Perl
ForDef:
  @QName:
    ManakaiDOM:ManakaiDOM1
  @FullName:
    @@lang:en
    @@@: For the manakai DOM Level 1 implementation
  @Implement:
    ManakaiDOM:DOM1
  @ISA:
    ManakaiDOM:ManakaiDOM
ForDef:
  @QName:
    ManakaiDOM:ManakaiDOM2
  @FullName:
    @@lang:en
    @@@: For the manakai DOM Level 2 implementation
  @Implement:
    ManakaiDOM:DOM2
  @ISA:
    ManakaiDOM:ManakaiDOM1
ForDef:
  @QName:
    ManakaiDOM:ManakaiDOM3
  @FullName:
    @@lang:en
    @@@: For the manakai DOM Level 3 implementation
  @Implement:
    ManakaiDOM:DOM3
  @ISA:
    ManakaiDOM:ManakaiDOM2
ForDef:
  @QName:
    ManakaiDOM:ManakaiDOMLatest
  @FullName:
    @@lang:en
    @@@: For the manakai implementation of the latest level of DOM
  @Implement:
    ManakaiDOM:DOMLatest
  @ISA:
    ManakaiDOM:ManakaiDOM3

## --- The Document Object Model Comcepts

DOMConceptDef:
  @QName: domcommon|DOM
  @enFN: Document Object Model (DOM)
  @enDesc:
    The Document Object Model (DOM).

      {NOTE::
        The <Q::domcommon|DOM> resource stand for the DOM
        model rather than (an instance of) <Q::domocommon|Tree>.
      }

ResourceTypeDef:
  @QName: domcommon|Binding
  @enFN: DOM binding
  @enDesc:
    A <Q::domcommon|Binding> is a binding of
    the <Q::domcommon|DOM> for a programming
    language or environment.

DOMConceptDef:
  @QName: domjava|Binding
  @enFN: DOM Java binding
  @enDesc:
    The <Q::domjava|Binding> is a <Q::domcommon|Binding>
    for the Java programming language.
  @DISCore:resourceType: domcommon|Binding

DOMConceptDef:
  @QName: domes|Binding
  @enFN: DOM ECMAScript binding
  @enDesc:
    The <Q::domes|Binding> is a <Q::domcommon|Binding>
    for the ECMAScript programming language.
  @DISCore:resourceType: domcommon|Binding

DOMConceptDef:
  @QName: domidl|Binding
  @enFN: DOM IDL binding
  @enDesc:
    The <Q::domidl|Binding> is a (pseudo-)<Q::domcommon|Binding>
    for the IDL used in DOM specification.
  @DISCore:resourceType: domcommon|Binding

DOMConceptDef:
  @QName: domperl|Binding
  @enFN: manakai's Perl binding of DOM
  @enDesc:
    The <Q::domperl|Binding> is a <Q::domcommon|Binding>
    for the Perl programming language defined for manakai.
  @DISCore:resourceType: domcommon|Binding

ResourceTypeDef:
  @QName: domcommon|Tree
  @enFN: tree
  @enDesc:
    A <Q::domcommon|Tree> is a document tree in <Q::domcommon|DOM>.

ResourceTypeDef:
  @QName: domcommon|Object
  @enFN: object
  @enDesc:
    A <Q::domcommon|Object> is an object.

      {ISSUE::
        <Q::DISLang|Object> and <Q::DISLang|Value>;
        objects implementing DOM interfaces and objects not implementing
        any DOM interface...
      }
  @subsetOf: DISLang|AnyObject

ResourceTypeDef:
  @QName: domcommon|Interface
  @enFN: DOM interface
  @enDesc:
    A <Q::domcommon|Interface> is an <Q::DISLang|Interface>
    intended to be implemented by <Q::domcommon|DOM> objects.
  @subsetOf: DISLang|Interface

ResourceTypeDef:
  @QName: domperl|Interface
  @enFN: Perl interface
  @enDesc:
    A <Q::domperl|Interface> is a <Q::p|Package>
    with a set of rules that any <Q::domperl|Class> 
    that <Q::domperl|implements> the <Q::domperl|Interface>
    <kwd:MUST> satisfy.
  @subsetOf: domcommon|Interface
  @subsetOf: p|Package

RPropDef:
  @QName: domcommon|extends
  @enFN: extends
  @enDesc:
    The <Q::domcommon|extends> property states that
    the subject <Q::domcommon|Interface> is an
    extension to the object <Q::domcommon|Interface>.
  @subsetOf: DISLang|formallyExtends

RPropDef:
  @QName: domidl|extends
  @enFN: extends
  @subsetOf: domcommon|extends
  @subsetOf: idl|extends
  @dataType: DISCore|TFPQNames
  @multipleProperties: DISCore|OrderedList

RPropDef:
  @QName: domperl|extends
  @enFN: extends
  @subsetOf: domcommon|extends
  @subsetOf: p|ISA
  @dataType: DISCore|TFPQNames
  @multipleProperties: DISCore|OrderedList

RPropDef:
  @QName: domcommon|implementedByObjectsOf
  @enFN: is implemented by objects implementing
  @enDesc:
    The <Q::domcommon|implementedByObjectsOf>
    property states that the subject <Q::domcommon|Interface>,
    if supported, must be implemented by any
    objects implementing the object <Q::domcommon|Interface>.
  @subsetOf: DISLang|informallyExtends

RPropDef:
  @QName: domperl|implementedByObjectsOf
  @enFN: is implemented by objects implementing
  @subsetOf: domcommon|implementedByObjectsOf
  @subsetOf: p|revISA
  @dataType: DISCore|TFPQNames
  @multipleProperties: DISCore|OrderedList

ResourceTypeDef:
  @QName: domperl|Class
  @enFN: Perl class
  @enDesc:
    A <Q::domperl|Class> is a <Q::p|Package> that
    <Q::domperl|implements> zero or more <Q::domperl|Interface>s.
  @subsetOf: DISLang|Class
  @subsetOf: p|Package

RPropDef:
  @QName: domperl|implements
  @enFN: implements
  @enDesc:
    The <Q::domperl|implements> property states that
    the subject <Q::domperl|Class> satisfies requirements
    imposed by the object <Q::domperl|Interface>.
  @subsetOf: DISLang|formallyExtends
  @dataType: DISCore|TFPQNames
  @multipleProperties: DISCore|OrderedList

RPropDef:
  @QName: domperl|classExtends
  @enFN: extends
  @subsetOf: p|ISA
  @dataType: DISCore|TFPQNames
  @multipleProperties: DISCore|OrderedList

RPropDef:
  @QName: domperl|classImplementedByObjectsOf
  @enFN: is implemented by objects implementing
  @subsetOf: p|revISA
  @dataType: DISCore|TFPQNames
  @multipleProperties: DISCore|OrderedList

ElementTypeBinding:
  @Name: enFN
  @ElementType:
    dis:FullName
  @ShadowContent:
    @@lang:en

ElementTypeBinding:
  @Name: DOMConceptDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: DISCore|Resource
    @@ForCheck: =ManakaiDOM|all

ElementTypeBinding:
  @Name: ResourceTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: DISCore|ResourceType
    @@subsetOf: DISCore|Resource
    @@ForCheck: =ManakaiDOM|all

## -- The DOM "feature" system

StringDataTypeDef:
  @QName: FeatureNameString
  @FullName:
    @@lang:en
    @@@: DOM feature name

  @enTitle: Feature Names

  @enDesc:
    Features are identified by pairs of <DFN::feature name>s (which
    is often referred simply as <QUOTE::features>) and
    feature versions.

    {ps::
      {ty:caption::Syntax
      }

      The syntax of feature names, that is, what kind of character
      sequences can be feature names, is not well-defined.

      In DOM Level 1 First Edition <bibref::DOM1FE>, which has introduced
      features, the only legal feature names are <Feature::HTML>
      and <Feature::XML>.

      In DOM Level 1 Second Edition on September, 2000 <bibref::DOM1SE>
      and DOM Level 2 Core Recommendation on November, 2000 <bibref::DOM2Core>,
      feature names are defined as XML <CODE::Name>s <bibref::XML10FE>.

      In DOM Level 3 <bibref::DOM3Core>, there is no explicit restriction
      defined on feature names, although the <CHAR::PLUS SIGN> rule
      described below prevents the use of <CHAR::PLUS SIGN> as the 
      first character of a feature name and the <CODE::features>
      parameters imply that white space characters must not 
      be used in feature names and feature names must be
      distingulishable from feature version numbers.

      {P:: The DOM Level 3 Minimum Implementation enforces the restrictions that:

        - The first character of feature names <kwd:MUST-NOT> be
          a <CHAR::PLUS SIGN>.  Feature names <kwd:SHOULD-NOT>
          contain one or more <CHAR::PLUS SIGN> characters.
        
        - The first character of feature names <kwd:MUST-NOT> be
          one from <CHAR::DIGIT ZERO>, <CHAR::DIGIT ONE>, 
          <CHAR::DIGIT TWO>, <CHAR::DIGIT THREE>, <CHAR::DIGIT FOUR>,
          <CHAR::DIGIT FIVE>, <CHAR::DIGIT SIX>, <CHAR::DIGIT SEVEN>,
          <CHAR::DIGIT EIGHT>, or <CHAR::DIGIT NINE>.

        - Feature names <kwd:MUST-NOT> contain white space characters
          such as <CHAR::SPACE> and <CHAR::HORIZONTAL TAB>.

        - A feature name defined outside W3C DOM specifications
          <kwd:SHOULD> be a URI <bibref::URI>.
      }
    }

    {ps::
      {ty:caption::Case-sensitivility
      }

      Feature names are case-insensitive <bibref::DOM1FE> <bibref::DOM1SE>
      <bibref::DOM2Core> <bibref::DOM3Core>.
    }

    {ps::
      {ty:caption::Nameing convention
      }
      
      In DOM Level 1 Second Edition on September, 2000 <bibref::DOM1SE> and
      DOM Level 2 Core Recommendation on November, 2000 <bibref::DOM2Core>,
      it was encouraged that feature names referring to features
      defined outside the DOM specifications should be made unique
      by <EM::reversed Internet domain name>.

      This suggestion was removed by DOM Level 2 Errata <bibref::DOM2Errata>.
      So, while DOM Level 2 and DOM Level 3 <bibref::DOM3Core> ask
      feature names being unique, the way to ensure the uniqueness
      is remain undefined.

      The DOM Level 3 Minimum Implementation specification recommends
      that URIs <bibref::URI> <kwd:SHOULD> be used for feature names.

      {NOTE:: For example, SVG 1.1, which is built on DOM Level 2,
              defined feature names as reversed Internet domain
              names.  SVG 1.2, which is built on DOM Level 3,
              deprecates SVG 1.1 feature names and defines URI
              feature names instead.
      }
    }

    {ps::
      {ty:caption::<CHAR::PLUS SIGN> Prepended to Feature Name
      }

      Some contexts allows a <CHAR::PLUS SIGN> prepended to
      any feature name.  It means that the feature may not directly
      castable but would be accessible in some manner, e.g.
      by binding-specific cast mechanism
      or by <M::GetFeature.getFeature> method.
      Some contexts simple ignores the first <CHAR::PLUS SIGN>.
      <bibref::DOM3Core>  Since this rule is introduced in 
      DOM Level 3, pre-Level 3 implementations might not 
      ignore the character even if it would be ignored in Level 3
      implementations.
    }

  @InputProcessor:
    @@PerlDef:
      $INPUT = lc $INPUT;

ResourceDef:
  @QName: 
    ManakaiDOM:ManakaiDOMFeatureName
  @AliasFor: FeatureNameString
  @For: ManakaiDOM|DOM1

ElementTypeBinding:
  @Name: InputProcessor
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:InputProcessor

StringDataTypeDef:
  @QName: FeatureVersionString
  @FullName:
    @@lang:en
    @@@: DOM feature version

  @enTitle: Feature Version Numbers

  @enDesc:
    <DFN::Feature version> identifies a version of the feature.

    {ps::
      {ty:caption::Syntax
      }

      Syntax of the feature version numbers are not well-defined.

      In DOM Level 1 <bibref::DOM1FE> <bibref::DOM1SE>, the
      only legal version number string was <FeatureVer::1.0>.
      
      In DOM Level 2 <bibref::DOM2Core>, the only legal version
      number strings were <FeatureVer::1.0> and <FeatureVer::2.0>.

      In DOM Level 3 <bibref::DOM3Core>, there is no explicit
      syntactical restriction on feature version numbers.

      The DOM Level 3 Minimum Implementation defines the 
      feature version numbers as one or more digits followed
      by a <CHAR::FULL STOP> followed by one or more digits,
      where a digit is a character from <CHAR::DIGIT ZERO>, <CHAR::DIGIT ONE>,
      <CHAR::DIGIT TWO>, <CHAR::DIGIT THREE>, <CHAR::DIGIT FOUR>,
      <CHAR::DIGIT FIVE>, <CHAR::DIGIT SIX>, <CHAR::DIGIT SEVEN>,
      <CHAR::DIGIT EIGHT>, or <CHAR::DIGIT NINE>.  The first
      character of the string or the first character just after
      the <CHAR::FULL STOP> <kwd:SHOULD-NOT> be a <CHAR::DIGIT ZERO>
      unless the character following it is a <CHAR::FULL STOP>
      or the character is the last character in the string.

      Some contexts where a feature version is expected also
      allow an empty string or <DOM::null>.  These values
      reference any version of the feature.  For example,
      method <M::GetFeature.hasFeature> with feature <Feature::Core>
      and version of <DOM::null> would return <DOM::true>
      if it has support for one or more of versions <FeatureVer::2.0>,
      <FeatureVer::3.0>, or any other version.  <bibref::DOM1FE>
      <bibref::DOM1SE> <bibref::DOM2Core> <bibref::DOM3Core>
    }

  @InputProcessor:
    @@PerlDef:
      $INPUT = '' unless defined $INPUT;

ResourceDef:
  @QName: 
    ManakaiDOM:ManakaiDOMFeatureVersion
  @AliasFor: FeatureVersionString
  @For: ManakaiDOM|DOM1

StringDataTypeDef:
  @QName: FeaturesString
  @For:
    ManakaiDOM:DOM3
  @FullName:
    @@lang:en
    @@@: 
      DOM <CODE::features>

  @enTitle:
    <CODE::features>

  @enDesc:
    Some methods takes a parameter known as <DFN::<CODE::features>>,
    which expects a list of zero or more features.

    {ps::
       {ty:caption::Syntax
       }

       A <CODE::features> string is a space-separeted list
       in which each feature is specified by its name optionally
       followed by a space and a version number.  A <CHAR::PLUS SIGN>
       may be prepended to a feature name.  <bibref::DOM3Core>

       What is a <QUOTE::space> is unclear.  In DOM Level 3
       Minimum Implementation, it <kwd:MUST> be a <CHAR::SPACE>.
       Implementations <kwd:MAY> accept any other <QUOTE::white space>
       characters either.  Implementations <kwd:MAY> choose also to
       simple ignore more than one white space characters or leading or trailing
       white space characters.

       In DOM Level 3 Minimum Implementation, the order in which
       features are specified is not significant.  A feature name
       <kwd:MAY> be specified more than once, with or without
       <CHAR::PLUS SIGN> and with or without any version numbers.
    }

    {ps::
      {ty:caption::<CODE::features> as Hash Reference
      }

      In Perl binding, applications can specify a reference to
      a hash where the <CODE::featuers>-list string is expected.
      Keys are considered as feature names and values are
      as their versions.  Values might be empty strings or <DOM::null>s.
      Implementations which receives such <CODE::features> values
      <kwd:MUST-NOT> modify hashs.

        {NOTE:: In this way, applications cannot specify
                a feature with more than one different versions
                at once.
        }

        {NOTE:: Perl application developers are advised not to
                forget to quote version number in source code
                when its fraction part is <CODE::0>.  For example,
                version <FeatureVer::2.0> must be quoted as
                <Perl::'2.0'> in Perl source code.
        }
    }

  @InputProcessor:
    @@PerlDef:
      __CODE{featuresParamToFeaturesHash::
        $INPUT => $INPUT,
        $RESULT => $INPUT,
      }__;

  @ResourceDef:
    @@QName: featuresParamToFeaturesHash
    @@rdf:type: DISPerl|BlockCode
    @@enDesc:
      Converts a value given as a <CODE::features> parameter (<Perl::$INPUT>)
      into a features hash (<Perl::$RESULT>).
    @@PerlDef:
      if (CORE::defined $INPUT) {
        if (CORE::ref ($INPUT) eq 'HASH') {
          my $__new = {};
          for my $__fname (keys %{$INPUT}) {
            if (CORE::ref ($INPUT->{$__fname}) eq 'HASH') {
              my $__lfname = lc $__fname;
              for my $__fver (keys %{$INPUT->{$__fname}}) {
                $__new->{$__lfname}->{$__fver} = $INPUT->{$__fname}->{$__fver};
              }
            } elsif (CORE::ref ($INPUT->{$__fname}) eq 'ARRAY') {
              my $__lfname = lc $__fname;
              for my $__fver (@{$INPUT->{$__fname}}) {
                $__new->{$__lfname}->{$__fver} = true;
              }
            } else {
              $__new->{lc $__fname} = {(CORE::defined $INPUT->{$__fname}
                                      ? $INPUT->{$__fname} : '') => true};
            }
          }
          $RESULT = $__new;
        } else {
          my @__f = split /\s+/, $INPUT;
          my $__new = {};
          while (@__f) {
            my $__name = lc shift @__f;
            if (@__f and $__f[0] =~ /^[\d\.]+$/) {
              $__new->{$__name}->{shift @__f} = 1;
            } else {
              $__new->{$__name}->{''} = 1;
            }
          }
          $RESULT = $__new;
        }
      } else {
        $RESULT = {};
      }

    @@TestC:
      @@@QName: featuresParamToFeaturesHash.featureVersionsAsArray.test
      @@@PerlDef:
        my $in = {feature1 => [qw/1.0 2.0/]};
        my $out;

        __CODE{featuresParamToFeaturesHash:: $INPUT => $in, $RESULT => $out}__;

        $test->assert_not_null ($out);
        $test->assert_not_null ($out->{feature1});
        $test->assert_true ($out->{feature1}->{'1.0'});
        $test->assert_true ($out->{feature1}->{'2.0'});

    @@ImplNote:
      @@@lang:en
      @@@@:
        In current specifications of DOM, order of features are not 
        significant and treatement for dupulication of a feature name 
        is not specified.  
        If <P::features> in future levels of DOM does not 
        have this characteristic, this and some other implementation 
        must be revisited for that levels. 
        \
        This input normalizer creates a copy of feature list even if 
        it is given as a hash reference; it means that <QUOTE::breaking> 
        any parameter does not affect the input source. 

      {NOTE:: Feature <Feature::HTML> versions <FeatureVer::2.0>
              and <FeatureVer::5.0> are not compatible;
              it would be a use case for one feature name with
              multiple version numbers.
      }

  @ResourceDef:
    @@QName:
      DOMMain:stringifyFeatures
    @@rdf:type: DISPerl|BlockCode
    @@Description:
      @@@lang:en
      @@@@:
        Converts a manakai internal hash representation of <P::features> 
        (<PerlVar::$IN>) to a DOM standard string representation of it 
        (<PerlVar::$OUT>). 
        \
        Note that whether input is valid feature name-value pairs is 
        not checked; bad input will produce bad output.
    @@PerlDef:
      my @out;
      for my $fname (sort {$a cmp $b} keys %{$IN}) {
        for my $fver (sort {$a cmp $b} keys %{$IN->{$fname}}) {
          push @out, $fname;
          push @out, $fver if length $fver;
        }
      }
      $OUT = join ' ', @out;

    @@TestC:
      @@@PerlDef:
        my $in = {
          core => {"3.0" => true, "1.0" => true},
          xml => {"" => true},
        };
        my $out;

        __CODE{DOMMain|stringifyFeatures::
          $IN => $in,
          $OUT => $out,
        }__;

        $test->assert_string
                 (actual_value => $out,
                  expected_value => "core 1.0 core 3.0 xml");

ElementTypeBinding:
  @Name: Test
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: test|StandaloneTest
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: TestC
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: test|StandaloneTest

ResourceDef:
  @QName: Feature
  @FullName:
    @@lang:en
    @@@: DOM feature
  @rdf:type:
    rdfs:Class
  @rdfs:subClassOf:
    rdfs:Class::ManakaiDOM:all
  @For: =ManakaiDOM|all

## -- The feature system (manakai)

PropDef:
  @QName: f|name
  @FullName:
    @@lang:en
    @@@: Feature name
  @rdfs:domain: f|Feature
  @dataType: DISCore|QName
  @multipleProperties: DISCore|UnorderedList

PropDef:
  @QName: f|version
  @FullName:
    @@lang:en
    @@@: Feature version
  @Description:
    @@lang:en
    @@@:
      A version number of a feature to define.
  @rdfs:domain: Feature
  @dataType: DISCore|String
  @multipleProperties: DISCore|UnorderedList

ResourceDef:
  @QName:
    dis:Version
  @AliasFor: version
  @For: =ManakaiDOM|all

PropDef:
  @QName: provides
  @Description:
    @@lang:en
    @@@:
      The subject resource intends to provide a part 
      of the object feature. 
  @rdfs:domain: Feature
  @dataType: dis|TypeQName
  @multipleProperties: DISCore|UnorderedList

PropDef:
  @QName: through
  @Description:
    @@lang:en
    @@@:
      The feature is provided through the object class. 
      \
      If this attribute is missing from a <Q::provideFeature>
      element and its parent is a <Q::ManakaiDOM:Class> definition,
      then that class with the current <QUOTE::for> is
      the <Q::providedThrough> class.
  @rdfs:domain:
    ManakaiDOM:Class
  @dataType: dis|TFQNames
  @multipleProperties: DISCore|UnorderedList

PropDef:
  @QName: implements
  @Description:
    @@lang:en
    @@@:
      A subject resource implements a object feature. 
  @rdfs:range: Feature
  @dataType: 
    dis:TypeQName
  @multipleProperties: DISCore|UnorderedList

ResourceDef:
  @QName:
    DOMMain:implementFeature
  @AliasFor: implements
  @For: =ManakaiDOM|all

PropDef:
  @QName: instanceOf
  @Description:
    @@lang:en
    @@@:
      The subject feature is an instance of the object feature set.
  @rdfs:range: Feature
  @rdfs:domain: Feature
  @dataType: dis|TypeQName
  @multipleProperties: DISCore|UnorderedList

PropDef:
  @QName: extends
  @Description:
    @@lang:en
    @@@:
      The subject feature extends the object feature.
  @rdfs:range: Feature
  @rdfs:domain: Feature
  @dataType: dis|TypeQName
  @multipleProperties: DISCore|UnorderedList

PropDef:
  @QName: requires
  @Description:
    @@lang:en
    @@@:
      A subject resource requires a object feature. 
  @rdfs:range: Feature
  @dataType:
    dis:TypeQName
  @multipleProperties: DISCore|UnorderedList

## -- Roles

ResourceDef:
  @QName: DOMMetaImpl|ImplementationSourceForManakaiDOMImplementationRegistry
  @rdf:type:
    DISLang:Role
  @ForCheck:
    =ManakaiDOM:all
  @Description:
    @@lang:en
    @@@:
      If a class plays this <QUOTE::role>, then it must implement
      the <IF::DOMCore:DOMImplementationSource> interface with
      its two methods statically callable (i.e. they can be 
      called without any instance of the class).  Any class
      playing this <QUOTE::role> will be contacted when 
      the <M::ImplementationRegistry.getDOMImplementationList>
      method is called.

ResourceDef:
  @QName: DOMMetaImpl|ManakaiDOMImplementationSourceRole
  @rdf:type:
    DISLang:Role
  @ForCheck:
    =ManakaiDOM:all
  @rdfs:subClassOf:
    DOMMetaImpl|ImplementationSourceForManakaiDOMImplementationRegistry
  @Description:
    @@lang:en
    @@@:
      If a class plays this <QUOTE::role>, then it must implement
      the <IF::DOMCore:DOMImplementationSource> interface with
      its two methods statically callable (i.e. they can be 
      called without any instance of the class).  Any class
      playing this <QUOTE::role> will be contacted when 
      the <M::ImplementationRegistry.getDOMImplementationList>
      method is called.
      \
      {NOTE:: Whether the class implements the 
              <IF::DOMCore:ManakaiDOMImplementationSource> interface
              or not is another problem.
      \
      }

ResourceDef:
  @QName: DOMMetaImpl|ImplementationForManakaiDOMImplementationSource
  @rdf:type:
    DISLang:Role
  @ForCheck:
    =ManakaiDOM:all
  @Description:
    @@lang:en
    @@@:
      The <QUOTE::role> that instances of the class is available via
      the <IF::DOMCore:DOMImplementationSource> interface 
      implemented by the <Class::DOMCore:ManakaiDOMImplementationSource>
      objects.

ResourceDef:
  @QName: DOMMetaImpl|ImplementationCompatibleWithManakaiDOMMinimumImplementation
  @rdf:type:
    DISLang:Role
  @ForCheck:
    =ManakaiDOM:all
  @Description:
    @@lang:en
    @@@:
      The <QUOTE::role> that the class is compatible with the class
      <Class::ManakaiDOMMinimumImplementation> so that 
      any instance of the class compatible with it is castable 
      to the class via the <M::ManakaiDOMMinimumImplementation
      .getFeature> method.

ResourceDef:
  @QName: DOMMetaImpl|ManakaiAnyImplementationRole
  @rdf:type:
    DISLang:Role
  @ForCheck:
    =ManakaiDOM:all
  @rdfs:subClassOf: 
    DOMMetaImpl|ImplementationCompatibleWithManakaiDOMMinimumImplementation
  @Description:
    @@lang:en
    @@@:
      Any class that plays this <QUOTE::role> might be accessible 
      via <M::ManakaiDOMMinimumImplementation
            ::ManakaiDOM:ManakaiDOMLatest.getFeature>.
      \
      {NOTE:: The class don't have to implement the 
              <IF::DOMMinimumImplementation
                 ::ManakaiDOM:ManakaiDOMLatest> interface.
      \
      }

ResourceDef:
  @QName: f|ManakaiMinimumImplementationCompatible
  @rdf:type:
    DISLang:Role
  @ForCheck:
    =ManakaiDOM:all
  @rdfs:subClassOf: DOMMetaImpl|ImplementationForManakaiDOMImplementationSource
  @rdfs:subClassOf: DOMMetaImpl|ManakaiAnyImplementationRole
  @Description:
    @@lang:en
    @@@:
      Any class that plays this <QUOTE::role> might be accessible
      via <Class::DOMCore:ManakaiDOMImplementationSource
                ::ManakaiDOM:ManakaiDOMLatest>
      or <M::DOMMetaImpl:ManakaiDOMMinimumImplementation
           ::ManakaiDOM:ManakaiDOMLatest.getFeature>.
      \
      {NOTE:: The class that plays this <QUOTE::role> must implement the
              <IF::DOMMetaImpl:ManakaiDOMMinimumImplementation
                 ::ManakaiDOM:ManakaiDOMLatest> interface.
      \
      }

PropDef:
  @QName:
    dis:Role
  @Description:
    @@lang:en
    @@@:
      A role of the subject class in the DOM system.  It identifies 
      what kind of classes should be provided as <QUOTE::alternative>s 
      via, for example, <M::DOMCore:DOMImplementation.getFeature>. 
      \
      {P:: Currently, its values includes: 
      \
        - <CODE::DOMEvents:ManakaiDOMEvent::ManakaiDOM:ManakaiDOMLatest>::: 
            Classes that should be available via 
            <M::DOMEvents:ManakaiDOMDocumentEvent.createEvent>.
      \
        - <CODE::DOMCore:DOMImplementation::ManakaiDOM:ManakaiDOM>::: 
            Classes that might be available via <Class::ImplementationRegistry>, 
            <IF::DOMCore:DOMImplementationSource> or 
            <M::DOMCore:DOMImplementation.getFeature>. 
      \
        - <CODE::DOMCore:DOMImplementationSource::ManakaiDOM:ManakaiDOM>:::
            Classes that should be known to 
            <Class::ImplementationRegistry>.
      \
        - <CODE::DOMCore:Node::ManakaiDOM:ManakaiDOM>::: 
            Classes that might be available via <M::DOMCore:Node.getFeature> 
            or any <IF::Node> returning method and attributes.
      \
      }
      \
      {NOTE:: <Q::dis:Role> is deprecated in favor of <Q::DISLang:role>;
              <Q::dis:Role> is retained here for compatibility 
              with old <CODE::cdis2pm> utility.
      \
      }
  @rdfs:domain:
    ManakaiDOM:Class
  @rdfs:range:
    ManakaiDOM:IF
  @dataType: dis|TFQNames
  @multipleProperties: DISCore|UnorderedList

PropDef:
  @QName:
    dis:compat
  @Description:
    @@lang:en
    @@@:
      The internal data structure (and so on) of a subject resource is 
      compatible with that of object resource. 
      \
      This property is described as a child element of 
      <Q::dis:Role> property element because of historical reason. 
      \
      {P:: Currently used its values are:
         \
         - <CODE::DOMCore:ManakaiDOMImplementation::ManakaiDOM:ManakaiDOMLatest>::: 
             An class that should be available via 
             <M::DOMCore:ManakaiDOMImplementation.getFeature>. 
         \
         - <CODE::DOMCore:ManakaiDOMImplementationSource::ManakaiDOM:ManakaiDOMLatest>:::
             An class that is able to handle as same manner 
             as <M::DOMCore:ManakaiDOMImplementationSource> by 
             <Class::ImplementationRegistry>.
         \
         - <CODE::DOMCore:ManakaiDOMNode::ManakaiDOM:ManakaiDOMLatest>:::
             An class that should be available via 
             <M::DOMCore:ManakaiDOMNode.getFeature>.
         \
      }
      \
      {NOTE:: <Q::dis:compat> is deprecated in favor of <Q::DISLang:role>;
              <Q::dis:compat> is retained here for compatibility 
              with old <CODE::cdis2pm> utility.
      \
      }
  @rdfs:domain:
    ManakaiDOM:Class
  @rdfs:range:
    ManakaiDOM:Class
  @dataType: dis|TFQNames
  @multipleProperties: DISCore|UnorderedList

ElementTypeBinding:
  @Name: enDesc
  @ElementType:
    dis:Description
  @ShadowContent:
    @@lang:en

## -- The Minimum Implementation Specification


ElementTypeBinding:
  @Name: Doc
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@ForCheck: !ManakaiDOM|all
    @@rdf:type: doc|Documentation

ElementTypeBinding:
  @Name: enContent
  @ElementType:
    doc:content
  @ShadowContent:
    @@lang:en
    @@ForCheck: !ManakaiDOM|all

ElementTypeBinding:
  @Name: enTitle
  @ElementType:
    doc:title
  @ShadowContent:
    @@lang:en
    @@ForCheck: !ManakaiDOM|all

Doc:
  @QName: def|PerlTypes
  @enTitle: Basic Data Types
  @enContent:
    For Perl, IDL types <TYPE^^DISCore|QName::idl|long>,
    <TYPE^^DISCore|QName::idl|unsignedLong>,
    <TYPE^^DISCore|QName::idl|unsignedLongLong>,
    <TYPE^^DISCore|QName::idl|short>, and
    <TYPE^^DISCore|QName::idl|unsignedShort> are bound to number value.
    This does not means that a parameter value whose type is e.g. 
    <TYPE^^DISCore|QName::idl|unsignedLong> must be a Perl scalar value whose
    internal representation has number value.  Rather,
    it should be interpreted as the value would be 
    evaluated in the number context.  For example, the
    value obtained from a string literal <Perl::"123">
    in the source code is a valid value of
    <TYPE^^DISCore|QName::idl|unsignedLong>
    parameter.  Similary, IDL type <TYPE^^DISCore|QName::idl|boolean>
    is expected to be evaluated in the Boolean context.

    IDL type <TYPE^^DISCore|QName::idl|any> is corresponding to any scalar value
    in Perl.  IDL type <TYPE^^DISCore|QName::idl|Object> is bound to object.

    The <DOM::null> value is bound to <Perl::undef>.

Doc:
  @QName: def|PerlMethods
  @enTitle: Methods and Attributes in Perl Binding
  @enContent:
    In Perl, DOM methods and attributes are implemented
    as methods.  Read-only attributes are methods with no
    parameter in Perl.  Read-write attributes are methods
    with one parameter.  If the parameter is specified, then
    an attribute value is set to the value.  Otherwise, 
    the method returns the attribute value.  Note that the
    parameter value might be <DOM::null> and it is different
    from not specifying the parameter.

    A parameter of any method is <DFN::optional> if 
    either <DOM::null> or Boolean <DOM::false> is a possible value
    for the parameter and any other parameters following it, if any,
    is all optional.  Applications don't have to specify
    optional parameters if their values are <DOM::null> or <DOM::false>.

Doc:
  @QName: def|PerlExceptions
  @enTitle: Exceptions
  @enContent:
    Some methods and attributes might throw exceptions.  In Perl,
    throwing an exception is done by the function <Perl::die>.
    To improve compatibility among implementations, the
    <Class::dx:Error||ManakaiDOM|Perl> module <kwd:SHOULD>
    be employed as a basis of exception throwing mechanism.

Doc:
  @QName: def|MIStringPerl
  @enTitle:
    The <TYPE::MIString> Type
  @enContent:
    The <TYPE::MIString> type is bound to Perl string value and
    expected to be evaluated in the string context.  A <TYPE::MIString>
    value <kwd:MUST> be interpreted as a sequence of characters rather than
    a sequence of bytes or octets.  If it is represented
    internally as a byte string, i.e. the utf8 flag turned off,
    it <kwd:MUST> be interpreted as a ISO/IEC 8859-1 <bibref::ISO8859-1> string.

ResourceDef:
  @For: ManakaiDOM|DOM3
  @For: =ManakaiDOM|ManakaiDOM
  @rdf:type:
    @@@: dis|MultipleResource
    @@ForCheck: !ManakaiDOM|ForClass !ManakaiDOM|ForIF
  @resourceFor: ManakaiDOM|ForIF
  @resourceFor:
    @@@: ManakaiDOM|ForClass
    @@For: ManakaiDOM|ManakaiDOM3

  @rdf:type:
    @@@: DISLang|Interface
    @@ForCheck: ManakaiDOM|ForIF
    @@For: ManakaiDOM|ManakaiDOM
  @IFQName: GetFeature

  @rdf:type:
    @@@: DISLang|Class
    @@ForCheck: ManakaiDOM|ForClass
  @ClsQName: ManakaiHasFeatureByGetFeature

  @Implement: GetFeature

  @enDesc:
    The <IF::GetFeature> interface provides the <M::.hasFeature>
    and <M::.getFeature> methods to test or to retrieve an object with
    specified feature.

  @enDesc:
    @@ForCheck: ManakaiDOM|ForClass
    @@@:
      The class <Class::ManakaiHasFeatureByGetFeature> provides
      a method, <M::.hasFeature>, which is implemented by
      calling the <M::.getFeature> method and testing if 
      the method returns non-<DOM::null> value or not.
      A class that only implements the <M::GetFeature.getFeature>
      method can claim that it is implementing the <IF::GetFeature>
      interface by inheriting the <Class::ManakaiHasFeatureByGetFeauture>
      class.

  @Test:
    @@QName: HasFeatureByGetFeature.interfaces.test
    @@PerlDef:
      my $hfgf = <ClassName::ManakaiHasFeatureByGetFeature>;

      $test->id ('GetFeature');
      $test->assert_isa ($hfgf, <IFName::GetFeature>);

      $test->id ('GetFeature.hasFeature');
      $test->assert_true ($hfgf->can ('has_feature'));

  @Method:
    @@Name:  hasFeature
    @@Description:
      @@@lang:en
      @@@@:
         Tests whether this object supports a specific 
         feature and version or not.
    @@Param:
      @@@Name:  feature
      @@@Type: str|DOMString
      @@@actualType: FeatureNameString
      @@@Description:
        @@@@lang:en
        @@@@@: 
          The name of the feature to test, with or without 
          <CHAR::PLUS SIGN> prefix.
    @@Param:
      @@@Name:  version
      @@@Type: str|DOMString
      @@@actualType: FeatureVersionString
      @@@Description:
        @@@@lang:en
        @@@@@:
          The version number of the feature to test. 
      @@@InCase:
        @@@@Value:
          @@@@@is-null:1
        @@@@enDesc: Any version of the feature.
    @@Return:
      @@@Type:  
        DOMMain:boolean::ManakaiDOM:all
      @@@Description:
        @@@@lang:en
        @@@@@: 
          Whether the feature and version is implemented or not.
      @@@InCase:
        @@@@Value:
          @@@@@@:1
          @@@@@ContentType: DISCore|Boolean
        @@@@Description:
          @@@@@lang:en
          @@@@@@: 
            The <P::feature> is implemented in the specified <P::version>.
      @@@InCase:
        @@@@Value:
          @@@@@@:0
          @@@@@ContentType: DISCore|Boolean
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The feature is not implemented.
        @@@PerlCDef:
          __DEEP{
            my $gf = $self-><M::GetFeature.getFeature> ($feature, $version);
            if ($feature =~ /^\+/) {
              $r = defined $gf;
            } else {
              $r = ref $gf eq ref $self;
            }
          }__;

  @Method:
    @@ForCheck: ManakaiDOM|ForIF
     @@Name:  getFeature
     @@Description:
        @@@lang:en
        @@@@:
          Returns a specialized object that implements the specialized 
          interfaces of the specified feature and version.
     @@Param:
        @@@Name:  feature
        @@@Type: str|DOMString
        @@@actualType: FeatureNameString
        @@@Description:
          @@@@lang:en
          @@@@@:
            A feature name to request.
     @@Param:
        @@@Name:  version
        @@@Type: str|DOMString
        @@@actualType: FeatureVersionString
        @@@Description:
          @@@@lang:en
          @@@@@:
            A feature version number to request.
      @@@InCase:
        @@@@Value:
          @@@@@is-null:1
        @@@@enDesc: Any version of the feature.
     @@Return:
        @@@Type: DOMMain|Object||ManakaiDOM|all
        @@@Description:
          @@@@lang:en
          @@@@@:
            An object that implements the specialized APIs of the 
            <P::feature> and <P::version>.  It might or might not 
            implements the <IF::GetFeature> interface, although
            such object is encouraged to implement the interface. 

            If the object implements the <IF::GetFeature> interface,
            it must delegate to the primary core <IF::GetFeature> 
            and must not result incosistent with the primary core 
            <IF::GetFeature> such as
            <M::GetFeature.hasFeature>, 
            <M::GetFeature.getFeature>, etc.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@@: 
            There is no object available that implements interfaces 
            associated with the <P::feature> and <P::version>. 

  @CODE:
    @@QName: f|getFeatureImpl
    @@enDesc:
      The implementation template of the <CODE::getFeature> method.

      - <Perl::$self>::: The object.

      - <Perl::$feature>::: Normalized feature name with 
                            no <CHAR::PLUS SIGN> prefix.

      - <Perl::$version>::: Normalized feature version.

      - <Perl::$base_class>::: The Perl package name of the class the
                               specialized class <kwd:MUST> be 
                               compatible with.

      - <Perl::$r>::: The return value.
    @@PerlDef:
      if ($Message::Util::AutoLoad::Registry::Feature->{$feature}->{$version}) {
        $r = $self;
      }
##GetFeature

ElementTypeBinding:
  @Name: CODE
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: DISPerl|BlockCode
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: IntPropDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: DISCore|Property
    @@For: =ManakaiDOM|all

IntPropDef:
  @QName: f|revImplementation
  @enDesc:
    Reversed <Q::f|implementation>
  @Type: HASH
  @mg:nodeStemKey: lpmi

IntPropDef:
  @QName: f|implementation
  @enDesc:
    Associated implementation
  @Type: HASH
  @mg:nodeStemKey: impl

ElementTypeBinding:
  @Name: PerlDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:Perl

ElementTypeBinding:
  @Name: PerlCDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:Perl
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: disDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType: lang|dis

ElementTypeBinding:
  @Name: PropDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: DISCore|Property
    @@For: =ManakaiDOM|all

ElementTypeBinding:
  @Name: RPropDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: DISSource|ResourceProperty
    @@For: =ManakaiDOM|all

ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@DISCore:resourceType: DISLang|Method
    @@ForCheck: ManakaiDOM|DOM !=ManakaiDOM|ManakaiDOM

ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|MethodParameter

ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|MethodReturn

ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase

ElementTypeBinding:
  @Name: StringDataTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|DataType
    @@rdfs:subClassOf:
      @@@@: str|DOMString
      @@@For: ManakaiDOM|DOM
    @@For: ManakaiDOM|DOM

ElementTypeBinding:
  @Name: IFQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck:
      ManakaiDOM:ForIF

ElementTypeBinding:
  @Name: ClsQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck:
      ManakaiDOM:ForClass
