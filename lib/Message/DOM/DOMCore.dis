Module:
  @QName:
    MDOM:DOMCore
  @AppName:
    @@@:  dom
    @@prefix:  w3c.org
    @@ContentType:
      lang:IDL-DOM
    @@For:
      ManakaiDOM:IDL
  @AppName:
    @@@: org.w3c.dom
    @@ContentType:
      lang:Java
    @@ForCheck:
      ManakaiDOM:ForIF
    @@For:
      ManakaiDOM:Java
  @FullName:
    @@lang:en
    @@@: DOM Core Module
  @Spec:
    @@DOM3:
      http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-BBACDC08
  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
  
  @Description:
    @@lang:en
    @@@:
      The <DFN::DOM Core Module> is a fundemental module defined in 
      DOM Core specifications.  The Core Module provides basic 
      tree structure model and operations for HTML/XML document. 
      Interfaces in this module, as defined 
      in those specifications, must be fully implemented by all 
      conforming DOM implementations.
  
  @DISCore:author: DISCore|Wakaba
  @License:
     license:Perl+MPL
  @Date:
    @@@:
      $Date: 2006/02/09 10:23:19 $
    @@ContentType:
      dis:Date.RCS

  @DefaultFor:
    ManakaiDOM:ManakaiDOMLatest
  
  @Require:
    @@Module:
      @@@QName: MDOM|DOMMain
    @@Module:
      @@@WithFor: ManakaiDOM|ManakaiDOM
    @@Module:
      @@@WithFor: ManakaiDOM|ManakaiDOM1
    @@Module:
      @@@WithFor: ManakaiDOM|ManakaiDOM2
    @@Module:
      @@@WithFor: ManakaiDOM|ManakaiDOM3
    @@Module:
      @@@WithFor: ManakaiDOM|ManakaiDOMLatest
    @@Module:
      @@@QName: MDOM|Tree
    @@Module:
      @@@QName: MDOM|XDoctype
      @@@WithFor: ManakaiDOM|ManakaiDOMLatest

Namespace:
  @c:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
  @d:
    http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @DOMCore:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
  @DOMEvents:
    http://suika.fam.cx/~wakaba/archive/2004/dom/events#
  @DOMLS:
    http://suika.fam.cx/~wakaba/archive/2004/dom/ls#
  @DOMMain:
    http://suika.fam.cx/~wakaba/archive/2004/dom/main#
  @DOMMetaImpl:
    http://suika.fam.cx/~wakaba/archive/2004/dom/meta#
  @dx:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#
  @dxm:
    http://suika.fam.cx/~wakaba/archive/2004/dis/XML#
  @ecore:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/
  @f:
    http://suika.fam.cx/~wakaba/archive/2004/dom/feature#
  @html5:
    http://www.w3.org/1999/xhtml
  @idl:
    http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#
  @f:
    http://suika.fam.cx/~wakaba/archive/2004/dom/feature#
  @infoset:
    http://www.w3.org/2001/04/infoset#
  @kwd:
    http://suika.fam.cx/~wakaba/archive/2005/rfc2119/
  @lang:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @ManakaiDOMCore:
    http://suika.fam.cx/~wakaba/archive/2004/mdom-core#
  @ManakaiDOMEvents:
    http://suika.fam.cx/~wakaba/archive/2004/mdom-ev#
  @ManakaiDOMHTML:
    http://suika.fam.cx/~wakaba/archive/2004/mdom/html#
  @ManakaiDOMLS:
    http://suika.fam.cx/~wakaba/archive/2004/mdom-ls#
  @MDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.
  @MDOMX:
    http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @mn:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#
  @t:
    http://suika.fam.cx/~wakaba/archive/2004/dom/tree#
  @test:
    http://suika.fam.cx/~wakaba/archive/2004/dis/Test#
  @x:
    http://suika.fam.cx/~wakaba/archive/2004/dom/xml#
  @xml:
    http://www.w3.org/XML/1998/namespace
  @xml-dtd:
    http://www.w3.org/TR/REC-xml
  @xmlns:
    http://www.w3.org/2000/xmlns/

ElementTypeBinding:
  @Name: Test
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: test|StandaloneTest
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: L3Test
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: test|StandaloneTest
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|DOM3

ElementTypeBinding:
  @Name: raises
  @ElementType:
    dx:raises

ElementTypeBinding:
  @Name: IFDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:IF

ElementTypeBinding:
  @Name: L1
  @ElementType:
    DOMMain:implementFeature
  @ShadowContent:
    @@@: CoreFeature10
    @@For:
      ManakaiDOM:DOM1
  @ShadowSibling:
    @@DOMMain:implementFeature:
      @@@@: CoreFeature20
      @@@For: 
        ManakaiDOM:DOM2
    @@DOMMain:implementFeature:
      @@@@: CoreFeature30
      @@@For: 
        ManakaiDOM:DOM3
    @@DOMMain:implementFeature:
      @@@@: 
        DOMXML:XMLFeature10
      @@@For:
        ManakaiDOM:DOM1 ManakaiDOM:DOMXMLFeature
    @@DOMMain:implementFeature:
      @@@@: 
        DOMXML:XMLFeature20
      @@@For:
        ManakaiDOM:DOM2 ManakaiDOM:DOMXMLFeature
    @@DOMMain:implementFeature:
      @@@@: 
        DOMXML:XMLFeature30
      @@@For:
        ManakaiDOM:DOM3 ManakaiDOM:DOMXMLFeature
    @@DOMMain:implementFeature:
      @@@@: 
        DOMXML:XMLVersionFeature10
      @@@For:
        ManakaiDOM:DOM3 ManakaiDOM:DOMXMLFeature
    @@DOMMain:implementFeature:
      @@@@: 
        DOMXML:XMLVersionFeature11
      @@@For:
        ManakaiDOM:DOM3 ManakaiDOM:DOMXMLFeature

ElementTypeBinding:
  @Name: L3
  @ElementType:
    DOMMain:implementFeature
  @ShadowContent:
    @@@: CoreFeature30
    @@For:
      ManakaiDOM:DOM3
  @ShadowSibling:
    @@DOMMain:implementFeature:
      @@@@: 
        DOMXML:XMLFeature30
      @@@For:
        ManakaiDOM:DOM3 ManakaiDOM:DOMXMLFeature
    @@DOMMain:implementFeature:
      @@@@: 
        DOMXML:XMLVersionFeature10
      @@@For:
        ManakaiDOM:DOM3 ManakaiDOM:DOMXMLFeature
    @@DOMMain:implementFeature:
      @@@@: 
        DOMXML:XMLVersionFeature11
      @@@For:
        ManakaiDOM:DOM3 ManakaiDOM:DOMXMLFeature

ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Method
    @@ForCheck: !=ManakaiDOM|ManakaiDOM

ElementTypeBinding:
  @Name: IntMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Method
    @@ForCheck:
      ManakaiDOM:ManakaiDOM !=ManakaiDOM:ManakaiDOM ManakaiDOM|ForClass
    @@ManakaiDOM:isForInternal: 1

ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|MethodParameter

ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|MethodReturn

ElementTypeBinding:
  @Name: Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Attribute
    @@ForCheck: !=ManakaiDOM|ManakaiDOM

ElementTypeBinding:
  @Name: IntAttr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Attribute
    @@ForCheck: ManakaiDOM|ForClass
    @@ManakaiDOM:isForInternal: 1

ElementTypeBinding:
  @Name: Get
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|AttributeGet

ElementTypeBinding:
  @Name: Set
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|AttributeSet

ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase

ElementTypeBinding:
  @Name: nullCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase
    @@Value:
      @@@is-null:1

ElementTypeBinding:
  @Name: ConstGroup
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|ConstGroup
    @@ForCheck: ManakaiDOM|ForIF !=ManakaiDOM|ManakaiDOM

ElementTypeBinding:
  @Name: Const
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Const

ElementTypeBinding:
  @Name: XConst
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: dx|ErrorCode

ElementTypeBinding:
  @Name: XParam
  @ElementType:
    ecore:hasParameter

ElementTypeBinding:
  @Name: SubTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: dx|ErrorSubCode
    @@For: ManakaiDOM|ManakaiDOM

ElementTypeBinding:
  @Name: PerlDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:Perl
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: disDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:dis
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: PerlDefC
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:Perl

ElementTypeBinding:
  @Name: XML2Feature
  @ElementType:
    dis:ImplNote
  @ShadowContent:
    @@ImplNote:
      @@@lang:en
      @@@@:
        The <CITE::DOM Level 2 Core> specification said that HTML-only 
        DOM Level 2 implementations does not need to implement this member. 
        The DOM Level 2 Errata withdraws it and it requires HTML-only 
        DOM implementations throw a <X::DOMException.NOT_SUPPORTED_ERR>. 

## -- Features

ElementTypeBinding:
  @Name: FeatureDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: f|Feature
    @@For: =ManakaiDOM|all

ElementTypeBinding:
  @Name: FeatureVerDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: f|Feature

ElementTypeBinding:
  @Name: featureName
  @ElementType:
    f:name
  @ShadowContent:
    @@ContentType: DISCore|String

ElementTypeBinding:
  @Name: featureQName
  @ElementType:
    f:name
  @ShadowContent:
    @@ContentType: DISCore|QName

FeatureDef:
  @featureName: Core
  @QName: CoreFeature
  @FeatureVerDef:
    @@QName: CoreFeature10
    @@Version: 1.0
    @@f:instanceOf: CoreFeature
    @@Description:
      @@@lang:en
      @@@@:
        The DOM Core Module (Fundemental Interface), Level 1. 
        \
        {NOTE:: Although some DOM implementations returns <DOM::true> for 
                <M::DOMImplementations.hasFeature> with <Feature::Core> and 
                <FeatureVer::1.0>, this behaviour is not defined by 
                any level of W3C DOM Specification.  DOM applications 
                should not expect DOM Level 1 Core implementation 
                would return <DOM::true> to that method call. 
          \
        }
  @FeatureVerDef:
    @@QName: CoreFeature20
    @@Version: 2.0
    @@f:instanceOf: CoreFeature
    @@f:extends: CoreFeature10
    @@Spec:
      @@@DOM3:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-BBACDC08
    @@Description:
      @@@lang:en
      @@@@: The DOM Core Module, Level 2.
  @FeatureVerDef:
    @@QName: CoreFeature30
    @@Version: 3.0
    @@f:instanceOf: CoreFeature
    @@f:extends: CoreFeature20
    @@Spec:
      @@@DOM3:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-BBACDC08
    @@Description:
      @@@lang:en
      @@@@: The DOM Core Module, Level 3.

## -- Exception

ElementTypeBinding:
  @Name:enMufDef
  @ElementType:
    ecore:defaultMessage
  @ShadowContent:
    @@lang:en
    @@ContentType:
      lang:muf

ElementTypeBinding:
  @Name:XParamParamName
  @ElementType:
    ecore:hasParameter
  @ShadowContent:
    @@ForCheck:
      ManakaiDOM:ManakaiDOM
    @@QName:
      MDOMX:param-name

ResourceDef:
  @rdf:type:
    @@@: dis|MultipleResource
    @@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass
  @resourceFor: ManakaiDOM|ForIF
  @resourceFor:
    @@@: ManakaiDOM|ForClass
    @@ForCheck: ManakaiDOM|ManakaiDOM !=ManakaiDOM|ManakaiDOM
  @For: ManakaiDOM|DOM1
  @For: =ManakaiDOM|ManakaiDOM

  @rdf:type:
    @@@: dx|Interface
    @@ForCheck: ManakaiDOM|ForIF

  @rdf:type:
    @@@: dx|Class
    @@ForCheck: ManakaiDOM|ForClass

  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOM||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM
  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOM1||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM1
  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOM2||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM2
  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOM3||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM3
  @Implement:
    @@@: ||ManakaiDOM|ManakaiDOMLatest||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOMLatest
  @dx:implementedBy:
    @@@: ||ManakaiDOM|ManakaiDOM1||ManakaiDOM|ForClass
    @@ForCheck: ManakaiDOM|ForIF ManakaiDOM|ManakaiDOM1 !ManakaiDOM|ManakaiDOM2
  @dx:implementedBy:
    @@@: ||ManakaiDOM|ManakaiDOM2||ManakaiDOM|ForClass
    @@ForCheck: ManakaiDOM|ForIF ManakaiDOM|ManakaiDOM2 !ManakaiDOM|ManakaiDOM3
  @dx:implementedBy:
    @@@: ||ManakaiDOM|ManakaiDOM2||ManakaiDOM|ForClass
    @@ForCheck:
      ManakaiDOM|ForIF ManakaiDOM|ManakaiDOM3
      !ManakaiDOM|ManakaiDOMLatest
  @dx:implementedBy:
    @@@: ||ManakaiDOM|ManakaiDOMLatest||ManakaiDOM|ForClass
    @@ForCheck: ManakaiDOM|ForIF ManakaiDOM|ManakaiDOMLatest

  @f:implements:
    @@@: CoreFeature10
    @@For: ManakaiDOM|DOM1
  @f:implements:
    @@@: CoreFeature20
    @@For: ManakaiDOM|DOM2
  @f:implements:
    @@@: CoreFeature30
    @@For: ManakaiDOM|DOM3

  @f:implements:
    @@@: DOMXML|XMLFeature10
    @@For: ManakaiDOM|DOM1 ManakaiDOM|DOMXMLFeature
  @f:implements:
    @@@: DOMXML|XMLFeature20
    @@For: ManakaiDOM|DOM2 ManakaiDOM|DOMXMLFeature
  @f:implements:
    @@@: DOMXML|XMLFeature30
    @@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeature
  @f:implements:
    @@@: DOMXML|XMLVersionFeature10
    @@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeature
  @f:implements:
    @@@: DOMXML|XMLVersionFeature11
    @@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeatureXML11

  @ISA:
    @@@: dx|Exception||ManakaiDOM|Perl
    @@ForCheck: ManakaiDOM|ForClass
  @ISA:
    @@@: ManakaiDOM|ManakaiDOMObject
    @@ForCheck: ManakaiDOM|ForClass

  @IFQName: DOMException
  @ClsQName: ManakaiDOMException

  @Description:
    @@lang:en
    @@@:
      Exceptions common to the DOM modules.
  @Attr:
     @@Name:  code
     @@Get:
       @@@Type: idl|unsignedShort||ManakaiDOM|all
       @@@actualType: ExceptionCode
       @@@Description:
         @@@@lang:en
         @@@@@: 
           The error code of this object. 
     @@ForCheck: ManakaiDOM|ForIF

  @ResourceDef:
    @@rdf:type: DISLang|ConstGroup
    @@ForCheck: ManakaiDOM|ForIF !=ManakaiDOM|ManakaiDOM

    @@QName: ExceptionCode

     @@Description:
       @@@lang:en
       @@@@: Integers indicating the type of error generated.
     @@rdfs:subClassOf: idl|unsignedShort||ManakaiDOM|all
     @@Type: idl|unsignedShort||ManakaiDOM|all
     @@XConst:
        @@@Name:  INDEX_SIZE_ERR
        @@@intValue:  1
        @@@Description:
          @@@@lang:en
          @@@@@: 
            The specified index or size value is less than or greater 
            than the allowed value. 
        @@@enMufDef:
              The index or size%t (
                name => {<Q::MDOMX:param-name>},
                prefix => {, as specified by the parameter "}, suffix => {",}); 
              is negative or greater than the allowed value.
        @@@XParamParamName:
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              The name of parameter to which invalid value is specified.
       @@@XParam:
         @@@@QName:index
         @@@@Description:
           @@@@@lang:en
           @@@@@@: The specified index or size. 
       @@@SubTypeDef:
         @@@@QName: NEGATIVE_INDEX_ERR
         @@@@Description:
           @@@@@lang:en
           @@@@@@:
             The specified index or size is negative. 
         @@@@enMufDef:
           The specified index or size (%p (
             name => {<Q::MDOMX:param-name>},
             prefix => {"},
             suffix => {" = },
           );%p (
             name => {<Q::DOMCore:index>},
           );) is negative. 
       @@@SubTypeDef:
         @@@@QName: OUT_OF_UPPER_BOUND_ERR
         @@@@Description:
           @@@@@lang:en
           @@@@@@:
             The specified index or size is greater than an upper bound. 
         @@@@enMufDef:
           The specified index or size (%p (
             name => {<Q::MDOMX:param-name>},
             prefix => {"},
             suffix => {" = },
           );%p (
             name => {<Q::DOMCore:index>},
           );) is greater than an upper bound. 
     @@XConst:
        @@@Name:  DOMSTRING_SIZE_ERR
        @@@intValue:  2
        @@@Description:
          @@@@lang:en
          @@@@@: 
            The specified range of text does not fit into a 
            <TYPE::DOMMain:DOMString>.
        @@@Description:
          @@@@lang:en
          @@@@@:
            This exception code is so defined for languages in which 
            a string is only able to contain limited number of characters 
            that the manakai DOM implementation never raises this 
            kind of exception. 
          @@@@For:
            ManakaiDOM:ManakaiDOM
     @@XConst:
        @@@Name:  HIERARCHY_REQUEST_ERR
        @@@intValue:  3
        @@@Description:
          @@@@lang:en
          @@@@@:
            An attempt is made to insert a node somewhere it does not belong.
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:HIERARCHY_ANCESTOR_OR_SELF
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              An attempt is made to insert a node that is one of 
              ancestor of this node or that is this node itself.
          @@@@XParam:
            @@@@@QName:
              MDOMX:param-name
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@: The name of the parameter that specifies the node.
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:HIERARCHY_BAD_TYPE
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              An attempt is made to insert a node whose type is not allowed.
          @@@@XParam:
            @@@@@QName: c|nodeType
            @@@@@Type:
              ManakaiDOM:ManakaiDOMURI
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@: The type of the node being tried to insert.
          @@@@XParam:
            @@@@@QName:
              MDOMX:param-name
            @@@@@Type:
              DOMMain:DOMParameterName
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@:
                The name of the parameter that specifies the node.
        @@@SubTypeDef:
          @@@@QName:
            ManakaiDOMHTML:MDOM_NOT_CAPTION
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The given element is not of type <HE::caption>. 
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_SECOND_DOC_ELEMENT
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              An attempt is made to insert a second document element node.
          @@@@XParam:
            @@@@@QName:
              MDOMX:param-name
            @@@@@Type:
              DOMMain:DOMMethodParameterName
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@:
                The name of the parameter the node is specified.
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_SECOND_DOCTYPE
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              An attempt is made to insert a second document type node.
          @@@@XParam:
            @@@@@QName:
              MDOMX:param-name
            @@@@@Type:
              DOMMain:DOMMethodParameterName
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@:
                The name of the parameter the node is specified.
     @@XConst:
        @@@Name:  WRONG_DOCUMENT_ERR
        @@@Type:  
          DOMMain:unsigned-short||ManakaiDOM|all
        @@@intValue:  4
        @@@Description:
          @@@@lang:en
          @@@@@:
            A node is used in a different document than the one
            that created it.
        @@@SubTypeDef:
          @@@@QName: MDOMX_DOCTYPE_ALREADY_USED
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              A specified document type node has already been 
              used as part of a different document tree.
        @@@SubTypeDef:
          @@@@QName: MDOMX_EXTERNAL_NODE
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              A specified node was created from a different DOM implementation.
      @@@SubTypeDef:
        @@@@QName: c|DIFFERENT_DOCUMENT_ERR
        @@@@enDesc:
          A node is used in a different than the one that created it.
        @@@@ecore:hasParameter: MDOMX|param-name
        @@@@ecore:hasParameter:
          @@@@@@: c|node
          @@@@@enDesc:
            A node that belongs to another document.
      @@@enImplNote:
        <X::DOMException.WRONG_DOCUMENT_ERR> is actually not mandated --
        see www-dom discussion on December 2005.
     @@XConst:
        @@@Name:  INVALID_CHARACTER_ERR
        @@@Type:  
          DOMMain:unsigned-short||ManakaiDOM|all
        @@@intValue:  5
        @@@Description:
          @@@@lang:en
          @@@@@: An invalid or illegal character is specified.
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_BAD_NAME
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The specified name is not a SGML or XML <XML::Name>.
          @@@@enMufDef:
            The name%p (name => {<Q::DOMCore:name>}, prefix => { "}, 
            suffix => {"}); is illegal%p (name => {<Q::infoset:version>}, 
            prefix => { according to XML });
          @@@@XParam:
            @@@@@QName:
              DOMCore:name
            @@@@@Type:
              DOMMain:ManakaiDOMXMLName
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@: 
                The <XML::Name> specified.
          @@@@XParam:
            @@@@@QName:
              infoset:version
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@: The version of XML.
     @@XConst:
        @@@Name:  NO_DATA_ALLOWED_ERR
        @@@intValue:  6
        @@@Description:
          @@@@lang:en
          @@@@@: Data is specified for a node that does not support data.
        @@@ImplNote:
          @@@@lang:en
          @@@@@: How is this exception code used?
     @@XConst:
        @@@QName:  NO_MODIFICATION_ALLOWED_ERR
        @@@intValue:  7
        @@@Description:
          @@@@lang:en
          @@@@@:
            An attempt is made to modify an object where 
            modifications are not allowed. 
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:NOMOD_ATTR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              One of attribute nodes is read-only. 
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:NOMOD_CHILD
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              One of child nodes is read-only. 
        @@@SubTypeDef:
          @@@@QName:NOMOD_DESCENDANT_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              One of descendant nodes (including attribute nodes 
              or its descendants) is read-only. 
        @@@SubTypeDef:
          @@@@QName:NOMOD_NAMEDNODEMAP_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              An attempt is made to modify an uneditable <IF::NamedNodeMap>. 
        @@@SubTypeDef:
          @@@@QName:NOMOD_NODELIST_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              An attempt is made to modify an uneditable <IF::NodeList>. 
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:NOMOD_PARENT
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The parent node of this node is read-only.
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:NOMOD_SRC_PARENT
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The parent node of the source node is read-only.
          @@@@XParam:
            @@@@@QName:
              MDOMX:param-name
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@: The parameter by which the source node is specified.
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:NOMOD_THIS
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              This node is read-only so that it is impossible to edit. 
          @@@@enMufDef:
            This node is read-only
        @@@@ecore:hasParameter: 
          @@@@@@: c|node
          @@@@@enDesc:
            The read-only node.
      @@@SubTypeDef:
        @@@@QName: c|OWNER_DEFINITION_READ_ONLY_ERR
        @@@@enDesc:
          The owner definition node to which a node is attached
          is read-only.
        @@@@enMufDef:
          The owner of the node is read-only
        @@@@ecore:hasParameter: MDOMX|param-name
      @@@SubTypeDef:
        @@@@QName: c|LIST_READ_ONLY_ERR
        @@@@enDesc:
          The list is read-only.
        @@@@enMufDef:
          The list is read-only
     @@XConst:
        @@@Name:  NOT_FOUND_ERR
        @@@intValue:  8
        @@@Description:
          @@@@lang:en
          @@@@@:
            An attempt is made to refer a node in a context where 
            it does not exist.
       @@@SubTypeDef:
         @@@@QName: NOT_ATTR_ERR
         @@@@Description:
           @@@@@lang:en
           @@@@@@:
             The specified node is not an attribute node attached 
             to the target node. 
         @@@@enMufDef:
           The specified node is not an attribute of this node
        @@@@ecore:hasParameter: MDOMX|param-name
        @@@@ecore:hasParameter:
          @@@@@@: c|node
          @@@@@enDesc:
            The attribute node.
       @@@SubTypeDef:
         @@@@QName: NOT_CHILD_ERR
         @@@@Description:
           @@@@@lang:en
           @@@@@@:
             The specified node is not a child node of the target node. 
         @@@@enMufDef:
           The specified node is not a direct child of this node
      @@@SubTypeDef:
        @@@@QName: c|NO_NAMED_NODE_ERR
        @@@@enDesc:
          If there is no node with the specified name.
        @@@@ecore:hasParameter: MDOMX|param-name
        @@@@ecore:hasParameter:
          @@@@@@: c|name
          @@@@@enDesc:
            The specified node name.
      @@@SubTypeDef:
        @@@@QName: c|NO_NAMED_NODE_NS_ERR
        @@@@enDesc:
          If there is no node with the specified name.
        @@@@ecore:hasParameter: MDOMX|param-name
        @@@@ecore:hasParameter:
          @@@@@@: infoset|namespaceName
          @@@@@enDesc:
            The specified namespace URI, possibly <DOM::null>.
        @@@@ecore:hasParameter:
          @@@@@@: infoset|localName
          @@@@@enDesc:
            The specified local name, if available.
        @@@@ecore:hasParameter:
          @@@@@@: c|name
          @@@@@enDesc:
            The specified name, if available.
        @@@@For: ManakaiDOM|DOM2
     @@XConst:
        @@@Name:  NOT_SUPPORTED_ERR
        @@@intValue:  9
        @@@Description:
          @@@@lang:en
          @@@@@:
            The DOM implementation does not support the type of object requested.
        @@@SubTypeDef:
          @@@@QName: FEATURE_NOT_SUPPORTED_ERR
          @@@@enDesc:
            One or more of the requested features or their versions
            are not supported by the implementation.
          @@@@XParam:
            @@@@@QName: features
            @@@@@enDesc:
              The features or the combination of the features
              that are not supported.
          @@@@enMufDef:
            %p (name => {<Q::DOMCore:features>}, prefix => {"},
            suffix => {": });Unsupported features requested
        @@@SubTypeDef:
          @@@@QName:
            ManakaiDOMEvents:FOREIGN_EVENT_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The event object was created by other DOM implementation and 
              it does not support the <IF::DOMEvents:CustomEvent> interface. 
          @@@@enMufDef:
            This is not a supported event object; use createEvent method 
            or implement the CustomEvent interface
          @@@@For:
            ManakaiDOM:DOMEventsFeature
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_DOC_NOSUPPORT_XML
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The document does not support the <DOM::XML> feature.
          @@@@ImplNote:
            @@@@@lang:en
            @@@@@@:
              XML-specific operations were specified as HTML-only 
              DOM implementations does not have to implement them 
              in the DOM Level 2 Specification.  The DOM Level 2 
              Errata and the DOM Level 3 Specification define as 
              the DOM implementation raise an exception of code 
              <X::DOMException.NOT_SUPPORTED_ERR>.
           \
              This DOM implementation throws the exception in 
              both levels.
          @@@@enMufDef:
            The document is not an XML document while the operation 
            is for XML documents 
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_DOC_NOSUPPORT_XMLNS
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              This document does not support XML Namespaces.
          @@@@enMufDef:
            The document is not a namespaced XML document while the 
            operation is for XML Namespace documents 
        @@@SubTypeDef:
          @@@@QName:
            ManakaiDOMEvents:MDOM_IMPL_NOSUPPORT_EVENT
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The DOM implementation is unable to create an event of 
              the requested type. 
          @@@@XParam:
            @@@@@QName:
              DOMEvents:createEventType
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@: The type of event requested. 
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_IMPL_NOSUPPORT_SCHEMA
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The DOM implementation does not support the schema language.
          @@@@XParam:
            @@@@@QName:
              DOMCore:schemaType
            @@@@@Type:
              ManakaiDOM:ManakaiDOMNamespaceURI
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@:
                The absolute URI representing the schema language requested.
          @@@@enMufDef:
              The schema language specified %p (prefix => {<},
              suffix => {>}, name => {<Q::DOMCore:schemaType>}); 
              is not supported
        @@@SubTypeDef:
          @@@@QName:
            ManakaiDOMHTML:MDOMHTML_IMPL_NOSUPPORT_SET_SELECT_LENGTH
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The DOM implementation does not support setting 
              <A::DOMHTML:HTMLSelectElement.length>.
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_IMPL_NOSUPPORT_XML
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The DOM implementation does not support the <DOM::XML> feature.
          @@@@enMufDef:
            This operation requires the support for the XML documents
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_IMPL_NOSUPPORT_XMLNS
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The DOM implementation does not support the <DOM::XML> feature 
              and the language exposed through the <IF::Document> 
              object does not support XML Namespaces.
          @@@@enMufDef:
            This operation requires the support for the XML Namespaces 
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_IMPL_NOSUPPORT_XMLVER
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The DOM implementation does not support the XML 
              version specified.
          @@@@XParam:
            @@@@@QName:
              infoset:version
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@: The XML version
          @@@@enMufDef:
            XML version%p (name => {<Q::infoset:version>}, 
            prefix => { "}, suffix => {"}); is not supported
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_NODE_NOSUPPORT_XMLNS
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The node does not support XML Namespaces.  The node 
              might have been created by the DOM Level 1 methods or
              instantiated from the markup language that does not 
              support XML Namespaces.
          @@@@XParam:
            @@@@@QName:
              MDOMX:param-name
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@:
                The name of the parameter that provides the node 
                that does not support XML Namespaces.
          @@@@enMufDef:
            The node does not support XML Namespaces while the operation 
            requires the node to support namespaces; the node is not 
            of an XML document or the node has been created by DOM 
            Level 1 method
        @@@SubTypeDef:
          @@@@QName:
            ManakaiDOMLS:MDOMLS_IMPL_NOSUPPORT_MODE
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The DOM implementation does not support the requested mode.
          @@@@XParam: 
            @@@@@QName:
              DOMLS:mode
            @@@@@Type: idl|unsignedShort||ManakaiDOM|all
            #  DOMLS:DOMImplementationLSMode
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@: The requested mode.
          @@@@enMufDef:
              The requested mode "%p (name => {<Q::DOMLS:mode>});" 
              is not supported

       @@@SubTypeDef:
         @@@@QName: 
           MDOMX:MDOM_IMPL_BY_APP
         @@@@Type: 
           DOMMain:unsigned-short::ManakaiDOM:all
         @@@@intValue: 4
         @@@@enDesc:
           A method or attribute is not implemented; it is expected
           that a DOM application implements it.
       @@@SubTypeDef:
         @@@@QName: CLONE_NODE_TYPE_NOT_SUPPORTED_ERR
         @@@@enDesc:
           The implementation does not support cloning of nodes
           of the type.
         @@@@XParam:
           @@@@@@: DOMCore|node
           @@@@@enDesc:
             The node that is attempted to clone.
       @@@SubTypeDef:
         @@@@QName: ADOPT_NODE_TYPE_NOT_SUPPORTED_ERR
         @@@@For: ManakaiDOM|DOM3
         @@@@enDesc:
           The implementation does not support adopting of nodes
           of the type.
         @@@@XParam:
           @@@@@@: DOMCore|node
           @@@@@enDesc:
             The node that is attempted to adopt.
         @@@@XParam:
           @@@@@@: MDOMX|param-name
           @@@@@enDesc:
             The name of the parameter to which the node is
             specified directly or indirectly.
       @@@SubTypeDef:
         @@@@QName: c|RENAME_NODE_TYPE_NOT_SUPPORTED_ERR
         @@@@For: ManakaiDOM|DOM3
         @@@@enDesc:
           The implementation does not support renaming of nodes
           of the type.
         @@@@XParam:
           @@@@@@: DOMCore|node
           @@@@@enDesc:
             The node that is attempted to rename.
         @@@@XParam:
           @@@@@@: MDOMX|param-name
           @@@@@enDesc:
             The name of the parameter to which the node is
             specified directly or indirectly.
       @@@SubTypeDef:
         @@@@QName: c|RENAME_DOCUMENT_ELEMENT_NOT_SUPPORTED_ERR
         @@@@For: ManakaiDOM|DOM3
         @@@@enDesc:
           The implementation does not support renaming of the document element.
         @@@@XParam:
           @@@@@@: DOMCore|node
           @@@@@enDesc:
             The node that is attempted to rename.
         @@@@XParam:
           @@@@@@: MDOMX|param-name
           @@@@@enDesc:
             The name of the parameter to which the node is
             specified directly or indirectly.
       @@@SubTypeDef:
         @@@@QName: NOT_RECOGNIZED_CONFIG_PARAM_ERR
         @@@@For: ManakaiDOM|DOM3
         @@@@enDesc:
           The implementation does not recognize the parameter name.
         @@@@XParam:
           @@@@@@: MDOMX|param-name
           @@@@@enDesc:
             The name of the method parameter where the configuration
             parameter name is specified.
         @@@@XParam:
           @@@@@@: DOMCore|domConfigurationParameterName
           @@@@@enDesc:
             The name of the configuration parameter.
         @@@@enMufDef:
           Parameter "%p (name => {<Q::DOMCore:domConfigurationParameterName>});"
           is not supported
       @@@SubTypeDef:
         @@@@QName: NOT_SUPPORTED_CONFIG_VALUE_ERR
         @@@@For: ManakaiDOM|DOM3
         @@@@enDesc:
           The implementation recognizes the parameter name but
           it does not support the value.
         @@@@XParam:
           @@@@@@: MDOMX|param-name
           @@@@@enDesc:
             The name of the method parameter where the configuration
             parameter value is specified.
         @@@@XParam:
           @@@@@@: DOMCore|domConfigurationParameterName
           @@@@@enDesc:
             The name of the configuration parameter.
         @@@@XParam:
           @@@@@@: DOMCore|domConfigurationParameterValue
           @@@@@enDesc:
             The value of the specified value.
         @@@@enMufDef:
           Parameter "%p (name => {<Q::DOMCore:domConfigurationParameterName>}
           );": Value "%p (name => {<Q::DOMCore:domConfigurationParameterValue>}
           );" is not supported

     @@XConst:
      @@@QName: c|INUSE_ATTRIBUTE_ERR
        @@@Type:  
          DOMMain:unsigned-short::ManakaiDOM:all
        @@@intValue:  10
        @@@Description:
          @@@@lang:en
          @@@@@: 
            An attempt is made to add an attribute that is already inuse 
            elsewhere.
       @@@enMufDef:
         The attribure node is already in use elsewhere
      @@@SubTypeDef:
        @@@@QName: c|INUSE_DEFINITION_ERR
        @@@@enDesc:
          If an attempt is made to add a definition that is already
          in use elsewhere.
        @@@@ecore:hasParameter: MDOMX|param-name
        @@@@ecore:hasParameter:
          @@@@@@: c|node
          @@@@@enDesc:
            The node that is in use.

     @@XConst:
        @@@Name:  INVALID_STATE_ERR
        @@@intValue:  11
        @@@Level[list]:  2
        @@@SpecLevel: 2
        @@@For:
          ManakaiDOM:DOM2
        @@@Description:
          @@@@lang:en
          @@@@@:
            An attempt is made to use an object that is not (or no longer) 
            usable.
        @@@SubTypeDef:
          @@@@QName:
            ManakaiDOMLS:MDOMLS_BUSY
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The parser is busy.
     @@XConst:
        @@@Name:  SYNTAX_ERR
        @@@intValue:  12
        @@@Level[list]:  2
        @@@SpecLevel: 2
        @@@For:
          ManakaiDOM:DOM2
        @@@Description:
          @@@@lang:en
          @@@@@: An invalid or illegal string is specified.
        @@@SubTypeDef:
          @@@@QName:
            ManakaiDOMHTML:MDOMHTML_BAD_COOKIE
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The specifieid value does not adhere to RFC 2965 
              cookie value syntax.
     @@XConst:
        @@@Name:  INVALID_MODIFICATION_ERR
        @@@intValue:  13
        @@@Level[list]:  2
        @@@SpecLevel: 2
        @@@For:
          ManakaiDOM:DOM2
        @@@Description:
          @@@@lang:en
          @@@@@: An attempt is made to modify the type of underlying object.
     @@XConst:
        @@@Name:  NAMESPACE_ERR
        @@@intValue:  14
        @@@SpecLevel: 2
        @@@Level[list]:  2
        @@@For:
          ManakaiDOM:DOM2
        @@@Description:
          @@@@lang:en
          @@@@@:
            An attempt is made to create or change an object in 
            a way that is incorrect with regard to namespaces.
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_NS_BAD_NCNAME
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The specified <CODE::NCName> is illegal according to 
              the XML version in use.
          @@@@enMufDef:
            The NCName%p (name => {<Q::infoset:name>}, prefix => { "},
            suffix => {"}); is illegal%p (name => {<Q::infoset:version>}, 
            prefix => { according to the XML });
          @@@@XParam:
            @@@@@QName:
              infoset:name
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@:
                The <CODE::NCName> specified.
          @@@@XParam:
            @@@@@QName:
              infoset:version
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@:
                The version of XML according to which the name is illegal. 
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_NS_MALFORMED_QNAME
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The specified qualified name is malformed according 
              to the XML version in use.
          @@@@XParam:
            @@@@@QName:
              DOMCore:qualifiedName
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@: The qualified name specified.
          @@@@XParam:
            @@@@@QName:
              infoset:version
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@:
                The version of XML used to check the name. 
          @@@@enMufDef:
            The QName%p (name => {<Q::DOMCore:qualifiedName>}, prefix => { "}, 
            suffix => {"}); is illegal%p (name => {<Q::infoset:version>}, 
            prefix => { according to XML });
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_NS_NOPREFIX_WITH_NON_NULL_URI
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              There is no namespace prefix but there is a 
              non-namespace URI specified.
          @@@@XParam:
            @@@@@QName:
              infoset:namespaceName
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@:
                The namespace URI. 
          @@@@XParam:
            @@@@@QName:
              DOMCore:qualifiedName
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@:
                The qualified name. 
          @@@@enMufDef:
            %p (name => {<Q::DOMCore:qualifiedName>}, prefix => {QName "}, 
            suffix => {": });
            A non-null namespace prefix is required for a non-null 
            namespace URI%p (name => {<Q::infoset:namespaceName>},
            prefix => { <}, suffix => {>});
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_NS_NULL_QNAME_WITH_NON_NULL_URI
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The qualified name specified is not <DOM::null> but 
              the namespace URI that is not <DOM::null> is specified.
          @@@@XParam:
            @@@@@QName:
              infoset:namespaceName
            @@@@@Type:
              ManakaiDOM:ManakaiDOMNamespaceURI
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@: The namespace URI specified.
          @@@@XParam:
            @@@@@QName:
              DOMCore:qualifiedName
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@:
                The qualified name. 
          @@@@enMufDef:
            %p (name => {<Q::DOMCore:qualifiedName>}, prefix => {QName "}, 
            suffix => {": });
            A non-null namespace prefix is required for a non-null 
            namespace URI%p (name => {<Q::infoset:namespaceName>},
            prefix => { <}, suffix => {>});
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_NS_OTHER_WITH_XML_URI
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The namespace prefix specified is not equal to <XML::xml> 
              while the namespace URI is 
              <URI::http://www.w3.org/XML/1998/namespace>.
          @@@@enMufDef:
            The namespace prefix for namespace URI 
            <http://www.w3.org/XML/1998/namespace> must be a "xml"%p
            (name => {<Q::infoset:prefix>}, prefix => {, not "}, 
             suffix => {"});
          @@@@XParam:
            @@@@@QName:
              infoset:prefix
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@: The namespace prefix.
          @@@@XParam:
            @@@@@QName:
              DOMCore:qualifiedName
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@: The qualified name.
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_NS_OTHER_WITH_XMLNS_URI
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The namespace prefix specified is not equal to <XML::xmlns> 
              while the namespace URI is 
              <URI::http://www.w3.org/2000/xmlns/>.
          @@@@enMufDef:
            The namespace prefix for namespace URI 
            <http://www.w3.org/2000/xmlns/> must be a "xmlns"%p
            (name => {<Q::infoset:prefix>}, prefix => {, not "}, 
             suffix => {"});
          @@@@XParam:
            @@@@@QName:
              infoset:prefix
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@: The namespace prefix.
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_NS_PREFIX_WITH_NULL_URI
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The namespace prefix is specified but the namespace URI 
              is <DOM::null>.
          @@@@XParam:
            @@@@@QName:
              infoset:prefix
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@: The namespace prefix specified.
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_NS_QNAME_IS_XMLNS
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The qualified name specified equals to <XA::xmlns>.
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_NS_XML_WITH_OTHER_URI
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The namespace prefix specified is <XML::xml> and 
              the namespace URI is other than 
              <URI::http://www.w3.org/XML/1998/namespace>.
          @@@@XParam:
            @@@@@QName:
              infoset:namespaceName
            @@@@@Type:
              ManakaiDOM:ManakaiDOMNamespaceURI
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@: The namespace URI.
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_NS_XMLNS_WITH_OTHER_URI
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The namespace prefix specified is <XML::xmlns> and 
              the namespace URI is other than 
              <URI::http://www.w3.org/2000/xmlns>.
          @@@@XParam:
            @@@@@QName:
              infoset:namespaceName
            @@@@@Type:
              ManakaiDOM:ManakaiDOMNamespaceURI
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@: The namespace URI.
        @@@SubTypeDef:
          @@@@QName:
            MDOMX:MDOM_NS_XMLNSQ_WITH_OTHER_URI
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The qualified name is <XML::xmlns> and 
              the namespace URI is other than 
              <URI::http://www.w3.org/2000/xmlns>.
          @@@@XParam:
            @@@@@QName:
              infoset:namespaceName
            @@@@@Type:
              ManakaiDOM:ManakaiDOMNamespaceURI
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@: The namespace URI.
       @@@SubTypeDef:
         @@@@QName:
           MDOMX:MDOM_NS_XMLNS_XMLNS
         @@@@Description:
           @@@@@lang:en
           @@@@@@:
             The qualified name is <XA::xmlns:xmlns>.  It is prohibited 
             by the XML Namespace Specifications.
        @@@SubTypeDef:
          @@@@QName: MDOMX_HTML_NSURI
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              An attempt is made to set a namespace URI to 
              an HTML node. 
          @@@@For:
            ManakaiDOM:DOMHTMLFeature
      @@@SubTypeDef:
        @@@@QName: c|NO_NS_NAMEDNODEMAP_ERR
        @@@@enDesc:
          If an attempt is made to modify a <IF::t|NamedNodeMap>
          via namespace-aware method and the map does not support
          XML namespaces.
     @@XConst:
        @@@Name:  INVALID_ACCESS_ERR
        @@@intValue:  15
        @@@Level[list]:  2
        @@@SpecLevel: 2
        @@@Description:
          @@@@lang:en
          @@@@@:
            A parameter or an operation is not supported by the 
            underlying object.
     @@XConst:
        @@@Name:  VALIDATION_ERR
        @@@intValue:  16
        @@@Level[list]:  3
        @@@SpecLevel:3
        @@@For:
          ManakaiDOM:DOM3
        @@@Description:
          @@@@lang:en
          @@@@@:
            An attempt is made to modify an object where the modification 
            would make the Node invalid with respect to partial validity.

     @@XConst:
        @@@Name:  TYPE_MISMATCH_ERR
        @@@intValue:  17
        @@@Level[list]:  3
        @@@SpecLevel:3
        @@@For:
          ManakaiDOM:DOM3
        @@@Description:
          @@@@lang:en
          @@@@@:
            The type of an object is incompatible with the expected 
            type of the parameter associated to the object.
       @@@SubTypeDef:
         @@@@QName: INCOMPATIBLE_CONFIG_VALUE_ERR
         @@@@enDesc:
           The type of the specified value is incompatible 
           with the type of the configuration parameter.
         @@@@XParam:
           @@@@@@: MDOMX|param-name
           @@@@@enDesc:
             The name of the method parameter where the value is specified.
         @@@@XParam:
           @@@@@@: DOMCore|domConfigurationParameterName
           @@@@@enDesc:
             The name of the configuration parameter.

ElementTypeBinding:
  @Name: enImplNote
  @ElementType:
    dis:ImplNote
  @ShadowContent:
    @@lang:en

ElementTypeBinding:
  @Name: XParamDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: ecore|Parameter
    @@For: =ManakaiDOM|all

XParamDef:
  @QName: DOMCore|node
  @enDesc:
    The node with which an error occurred.
  @Type: DOMCore|Node||ManakaiDOM|ManakaiDOM

PropDef:
  @QName: features
  @enDesc:
    Lists of features.
  @Type: ManakaiDOM|ManakaiDOMFeatures

ElementTypeBinding:
  @Name: IFCls1Def
  @ElementType: 
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@: dis|MultipleResource
      @@@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass
    @@resourceFor: ManakaiDOM|ForIF
    @@resourceFor:
      @@@@: ManakaiDOM|ForClass
      @@@ForCheck: ManakaiDOM|ManakaiDOM !=ManakaiDOM|ManakaiDOM
    @@For: ManakaiDOM|DOM1
    @@For: =ManakaiDOM|ManakaiDOM

    @@rdf:type:
      @@@@: DISLang|Interface
      @@@ForCheck: ManakaiDOM|ForIF

    @@rdf:type:
      @@@@: DISLang|Class
      @@@ForCheck: ManakaiDOM|ForClass
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOM||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOM1||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM1
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOM2||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM2
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOM3||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM3
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOMLatest||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOMLatest

    @@f:implements:
      @@@@: DISLang|CoreFeature10
      @@@For: ManakaiDOM|DOM1
    @@f:implements:
      @@@@: DISLang|CoreFeature20
      @@@For: ManakaiDOM|DOM2
    @@f:implements:
      @@@@: DISLang|CoreFeature30
      @@@For: ManakaiDOM|DOM3
    @@f:implements:
      @@@@: DOMXML|XMLFeature10
      @@@For: ManakaiDOM|DOM1 ManakaiDOM|DOMXMLFeature
    @@f:implements:
      @@@@: DOMXML|XMLFeature20
      @@@For: ManakaiDOM|DOM2 ManakaiDOM|DOMXMLFeature
    @@f:implements:
      @@@@: DOMXML|XMLFeature30
      @@@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeature
    @@f:implements:
      @@@@: DOMXML|XMLVersionFeature10
      @@@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeature
    @@f:implements:
      @@@@: DOMXML|XMLVersionFeature11
      @@@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeatureXML11

ElementTypeBinding:
  @Name: IFCls3Def
  @ElementType: 
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@: dis|MultipleResource
      @@@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass
    @@resourceFor: ManakaiDOM|ForIF
    @@resourceFor:
      @@@@: ManakaiDOM|ForClass
      @@@ForCheck: ManakaiDOM|ManakaiDOM !=ManakaiDOM|ManakaiDOM
    @@For: ManakaiDOM|DOM3
    @@For: =ManakaiDOM|ManakaiDOM

    @@rdf:type:
      @@@@: DISLang|Interface
      @@@ForCheck: ManakaiDOM|ForIF

    @@rdf:type:
      @@@@: DISLang|Class
      @@@ForCheck: ManakaiDOM|ForClass
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOM||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOM3||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM3
    @@Implement:
      @@@@: ||ManakaiDOM|ManakaiDOMLatest||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOMLatest

    @@f:implements:
      @@@@: c|CoreFeature30
      @@@For: ManakaiDOM|DOM3
    @@f:implements:
      @@@@: x|XMLFeature30
      @@@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeature
    @@f:implements:
      @@@@: x|XMLVersionFeature10
      @@@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeature
    @@f:implements:
      @@@@: x|XMLVersionFeature11
      @@@For: ManakaiDOM|DOM3 ManakaiDOM|DOMXMLFeatureXML11

ElementTypeBinding:
  @Name: IFQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

IFCls3Def:
  @IFQName: DOMImplementationList
  @ClsQName: ManakaiDOMImplementationList

  @ClsISA: f|ManakaiImplementationList
  @ClsISA: ManakaiDOM|ManakaiDOMObject

  @enDesc:
    The <IF::DOMImplementationList> interface provides the 
    abstraction of an ordered collection of DOM implementations.

    {NOTE:: How this collection is implemented is not defined nor
            constrained.
    }
    
    <EM::Identification of items>.  The items in the collection are
    accessible via an integral index, starting from <DOM::0>.
  @enDesc:
    @@ForCheck: ManakaiDOM|ManakaiDOM
    @@@:
      In the manakai implelemntation, the collection is implemented
      by Perl array reference; the array is <EM::not> <QUOTE::live>.

  @Attr:
    @@Name: length
    @@Type: DOMMain|unsigned-long||ManakaiDOM|all
    @@enDesc:
      The number of items in the collection.
    @@Get:
    @@ForCheck: !ManakaiDOM|ForClass

  @Method:
    @@Name: item
    @@enDesc:
      Returns the <P::index>th item in the collection.
    @@Type: DOMImplementation
    @@Param:
      @@@Name:index
      @@@Type:DOMMain|unsigned-long||ManakaiDOM|all
      @@@enDesc: Index in the collection.
    @@ForCheck: !ManakaiDOM|ForClass
    @@Return:
      @@@enDesc:
        The <IF::DOMImplementation> object at the <P::index>th
        position in the collection.
      @@@nullCase:
        @@@@enDesc:
          If the <P::index> is greater than or equal to
          the number of items in the collection.

  @Method:
    @@Operator:
      @@@@: DISPerl|NewMethod
      @@@ContentType: dis|TypeQName
    @@enDesc:
      Creates a new instance of the <Class::ManakaiDOMImplementationList>
      object and returns it.
    @@Type: ManakaiDOMImplementationList
    @@ManakaiDOM:isStatic:1
    @@ManakaiDOM:isForInternal:1
    @@Return:
      @@@enDesc: The newly created list.
      @@@PerlDef:
        __DEEP{
          $r = bless $self->SUPER::new,
                     <ClassName::ManakaiDOMImplementationList>;
        }__;
##DOMImplementationList

IFCls3Def:
  @IFQName: DOMImplementationSource
  @ClsQName: ManakaiDOMImplementationSource

  @ClsISA: f|ManakaiImplementationSource
  @ClsISA: ManakaiDOM|ManakaiDOMObject

  @enDesc:
    The <IF::DOMImplementationSource> interface permits a DOM
    implementator to supply one or more DOM implementations,
    based upon requested features and versions.

    Each implemented <IF::DOMImplementationSource> object
    is listed in the binding-specific list of available sources
    so that its <IF::DOMImplementation> objects are made available
    from the <Class::DOMMain:DOMImplementationRegistry> object.

  @Method:
    @@Name: getDOMImplementation
    @@ForCheck: !ManakaiDOM|ForClass
    @@enDesc:
      Returns the first DOM implementation that supports the specified
      features.
    @@Param:
      @@@Name: features
      @@@Type: DOMMain|DOMString
      @@@actualType: DOMFeature|FeaturesString
      @@@enDesc:
        A space-separeted list in which features and versions
        are specified.
    @@Return:
      @@@Type: DOMImplementation
      @@@enDesc:
        The first DOM implementation that supports the desired
        features.  It is the first item of the list returned
        by the <M::DOMImplementationSource.getDOMImplementationList> method.
      @@@nullCase:
        @@@@enDesc:
          The source has no DOM implementation that supports the 
          desired features.

  @Method:
    @@Name: getDOMImplementationList
    @@enDesc:
      Returns a list of DOM implementations that supports the 
      specified features and versions.
    @@Param:
      @@@Name: features
      @@@Type: DOMMain|DOMString
      @@@actualType: DOMFeature|FeaturesString
      @@@enDesc:
        A space-separeted list in which features and versions
        are specified.
    @@Return:
      @@@Type: DOMImplementationList
      @@@actualType: ManakaiDOMImplementationList
      @@@enDesc:
        A list of DOM implementations that support the desired features.
      @@@PerlDef:     
        __DEEP{      ## NOTE: Method name is directly written.
          $r = bless $self->SUPER::get_dom_implementation_list ($features),
                     <ClassName::ManakaiDOMImplementationList>;
        }__;
##DOMImplementationSource

ElementTypeBinding:
  @Name: IFISA
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsISA
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

IFCls3Def:
  @IFQName: DOMStringList
  @ClsQName: ManakaiDOMStringList

  @ClsISA: ManakaiDOM|ManakaiDOMObject

  @AppISA:
    Tie::Array

  @enDesc:
    Objects implementing the <IF::DOMStringList> interface are
    used to represent ordered collection of <TYPE::DOMMain|DOMString>
    values.

    {NOTE:: How this collection is implemented is neither defined nor
            constrained.
    }

    The items in the <IF::DOMStringList> are accessible via an
    ordinal index, starting from <CODE::0>.

  @enDesc:
    @@For: ManakaiDOM|ManakaiDOM
    @@ddid:perl
    @@@:
      In the manakai implementation, a <IF::DOMStringList> object
      can be dereferenced as if it is a reference to the array
      containing all items in the list.

  @enDesc:
    @@ForCheck: ManakaiDOM|ForClass ManakaiDOM|ManakaiDOM
    @@ddid:exists
    @@@:
      In the current implementation, each item value can be
      <DOM::null> that is different from an empty string.  In
      addition, an item can be <EM::not exist> state.

      The <EM::not exist> state is different from <DOM::null>.
      In various operations defined in DOM, however, it is
      assumed that there is as if a <DOM::null> value for
      each <EM::not exist> slot, if an item slot whose index
      greater than it <EM::exists>.

  @ResourceDef:
    @@ForCheck: ManakaiDOM|ForClass
    @@QName: newDOMStringListForTest
    @@rdf:type: DISPerl|BlockCode
    @@PerlDef:
      $list = bless {
        <H::mn:node> => {
          $key => [],
        },
        <H::c|key> => $key,
      }, <ClassName::ManakaiDOMStringList>;

  @Method:
     @@Name:  item
    @@Operator:
      @@@@: FETCH
      @@@ContentType: DISPerl|Perl
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMStringList-item
     @@Description:
       @@@lang:en
       @@@@: 
         Returns a <TYPE::DOMMain:DOMString> object in this collection.
     @@Param:
        @@@Name:  index
        @@@Type:  
          DOMMain:unsigned-long||ManakaiDOM|all
        @@@Description:
          @@@@lang:en
          @@@@@: 
            The index of the object to retrieve in this collection.
     @@Return:
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:
            The <TYPE::DOMMain:DOMString> object at the <P::index>th 
            position in this collection.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Either the specified <P::index> is negative or greater 
              than or equal to the number of <TYPE::DOMMain:DOMString> 
              objects in this collection.
        @@@PerlDef:
          if (not defined $index or
              $index < 0 or
              $index > $#{$self->{<H::mn:node>}->{$self->{<H::c|key>}}}) {
            $r = null;
          } else {
            $r = $self->{<H::mn:node>}->{$self->{<H::c|key>}}->[$index];
          }

  @IntMethod:
    @@Operator:
      @@@@: STORE
      @@@ContentType: DISPerl|Perl
    @@Param:
      @@@Name: index
      @@@Type: idl|unsignedLong||ManakaiDOM|all
    @@Param:
      @@@Name: value
      @@@Type: DOMString
    @@Return:
      @@@Type: DOMString
      @@@enDesc:
        The old value.
      @@@nullCase:
        @@@@enDesc:
          No old value or <DOM::null> is the old value.
      @@@dx:raises:
        @@@@@: c|LIST_READ_ONLY_ERR
        @@@@enDesc:
          If the list is read-only.
      @@@PerlDef:
        if ($self->{<H::mn:node>}->{<H::c|read-only>}) {
          __EXCEPTION{c|LIST_READ_ONLY_ERR::
          }__;
        }
 
        my $array = $self->{<H::mn:node>}->{$self->{<H::c|key>}};
        $r = $array->[$index] if defined wantarray;
        $array->[$index] = $value;

  @IntMethod:
    @@Operator:
      @@@@: DELETE
      @@@ContentType: DISPerl|Perl
    @@Param:
      @@@Name: index
      @@@Type: idl|unsignedLong||ManakaiDOM|all
    @@Return:
      @@@Type: DOMString
      @@@enDesc:
        The old value.
      @@@nullCase:
        @@@@enDesc:
          No old value or <DOM::null> is the old value.
      @@@dx:raises:
        @@@@@: c|LIST_READ_ONLY_ERR
        @@@@enDesc:
          If the list is read-only.
      @@@PerlDef:
        if ($self->{<H::mn:node>}->{<H::c|read-only>}) {
          __EXCEPTION{c|LIST_READ_ONLY_ERR::
          }__;
        }
 
        my $array = $self->{<H::mn:node>}->{$self->{<H::c|key>}};
        $r = $array->[$index] if defined wantarray;
        CORE::delete $array->[$index];

  @IntMethod:
    @@Operator:
      @@@@: EXISTS
      @@@ContentType: DISPerl|Perl
    @@Param:
      @@@Name: index
      @@@Type: idl|unsignedLong||ManakaiDOM|all
    @@Return:
      @@@Type: idl|boolean||ManakaiDOM|all
      @@@PerlDef:
        $r = CORE::exists $self->{<H::mn:node>}
                               ->{$self->{<H::c|key>}}->[$index];
          
  @Attr:
     @@Name:  length
    @@Operator:
      @@@@: FETCHSIZE
      @@@ContentType: DISPerl|Perl
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMStringList-length
     @@Description:
       @@@lang:en
       @@@@: 
         The number of <TYPE::DOMMain:DOMString> object in this collection.
     @@Get:
        @@@Type:  
          DOMMain:unsigned-long||ManakaiDOM|all
        @@@Description:
          @@@@lang:en
          @@@@@: 
            The number of strings in this collection.
        @@@PerlDef:
          $r = @{$self->{<H::mn:node>}->{$self->{<H::c|key>}}};

  @Method:
     @@Name:  contains
     @@Spec:
       @@@DOM3: 
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMStringList-contains
     @@Description:
       @@@lang:en
       @@@@: 
         Tests whether a string is an item of this collection or not.
     @@Param:
        @@@Name:  str
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: 
            A string to look for.
     @@Return:
        @@@Type:  
          DOMMain:boolean::ManakaiDOM:all
        @@@Description:
          @@@@lang:en
          @@@@@: 
            Whether the <P::str> is part of this collection or not.
        @@@TrueCase:
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              The <P::str> has been found in this collection.
        @@@FalseCase:
          @@@@Description:
            @@@@@lang:en
            @@@@@@:  
              The <P::str> has not been found in this collection.
        @@@PerlDef:
          CHK: {
            __DEEP{
              for (@{$self->{<H::mn:node>}->{$self->{<H::c|key>}}}) {
                if ($str eq $_) {
                  $r = true;
                  last CHK;
                }
              }
            }__;
          }

  @IntMethod:
    @@Operator:
      @@@@: TIEARRAY
      @@@ContentType: DISPerl|Perl
    @@Param:
      @@@Name: list
      @@@Type: DOMStringList
    @@Return:
      @@@Type: DOMStringList
      @@@PerlDef: $r = $list

  @IntMethod:
    @@Operator:
      @@@@: @{}
      @@@ContentType: DISPerl|Perl
    @@Return:
      @@@Type: DISPerl|ARRAY||ManakaiDOM|all
      @@@PerlDef:
        tie my @list, ref $self, $self;
        $r = \@list;

  @IntMethod:
    @@Operator:
      @@@@: DESTROY
      @@@ContentType: DISPerl|Perl
    @@Description:
      @@@lang:en
      @@@@:
        Redefines destructor for the class
        <Class::ManakaiNode|ManakaiNodeRef||ManakaiDOM|Perl>,
        since the <PerlModule::Tie::Array> also has its own empty destructor. 
    @@Return:
      @@@disDef:
        @@@@DISPerl:cloneCode:
          ManakaiNode|ManakaiNodeRef||ManakaiDOM|Perl.destroy

  @Test:
    @@QName: ManakaiDOMStringList.methods.test
    @@PerlDef:
      my $list;
      __CODE{newDOMStringListForTest::
        $key => 'a',
      }__;

      ## length (0)
      $test->assert_equals (0 + @$list, 0);
      $test->assert_equals ($list-><AG::DOMStringList.length>, 0);

      ## PUSH
      push @$list, 'String1';

      ## length (1)
      $test->assert_equals (0 + @$list, 1);
      $test->assert_equals ($list-><AG::DOMStringList.length>, 1);

      ## FETCH
      $test->assert_string (actual_value => $list->[0],
                            expected_value => 'String1');
      $test->assert_string (actual_value => $list->{<H::mn:node>}->{a}->[0],
                            expected_value => 'String1');

      ## item
      $test->assert_string (actual_value => $list-><M::DOMStringList.item> (0),
                            expected_value => 'String1');

      ## PUSH
      push @$list, 'String2';

      ## length (2)
      $test->assert_equals (0 + @$list, 2);
      $test->assert_equals ($list-><AG::DOMStringList.length>, 2);

      ## FETCH
      $test->assert_string (actual_value => $list->[1],
                            expected_value => 'String2');
      $test->assert_string (actual_value => $list->[0],
                            expected_value => 'String1');
    
      ## EXISTS
      $test->assert_true (exists $list->[0]);
      $test->assert_true (exists $list->[1]);
      $test->assert_false (exists $list->[2]);
      $test->assert_false (exists $list->[3]);

      ## DELETE
      delete $list->[0];
    
      ## FETCHSIZE
      $test->assert_equals (0 + @$list, 2);

      ## EXISTS
      $test->assert_false (exists $list->[0]);
      $test->assert_true (exists $list->[1]);

      ## FETCH
      $test->assert_string (actual_value => $list->[1],
                            expected_value => 'String2');
  
      ## STORE
      $list->[0] = 'String3';

      ## FETCH
      $test->assert_string (actual_value => $list->[0],
                            expected_value => 'String3');
 
      ## STORE
      $list->[1] = 'String4';
      $test->assert_string (actual_value => $list->[1],
                            expected_value => 'String4');
      $list->[2] = 'String5';
      $test->assert_string (actual_value => $list->[2],
                            expected_value => 'String5');
      $test->assert_equals (0 + @$list, 3);

      ## contains
      $test->assert_true ($list-><M::DOMStringList.contains> ('String4'));
      $test->assert_true ($list-><M::DOMStringList.contains> ('String5'));
      $test->assert_true ($list-><M::DOMStringList.contains> ('String3'));

      ## DELETE
      delete $list->[2];
      $test->assert_false (exists $list->[2]);
      $test->assert_equals (0 + @$list, 2);

      ## Don't invoke |DESTROY| method
      bless $list, 'dummy';
##DOMStringList

PropDef:
  @QName: c|key
  @enDesc:
    Hash key for <IF::DOMStringList>.

IFCls3Def:
  @IFQName: NameList
  @ClsQName: ManakaiDOMNameList

  @ClsISA: ManakaiDOM|ManakaiDOMObject

  @enDesc:
    Objects implementing <IF::NameList> interface are used to
    represent ordered collections of parallel pairs of name
    and namespace values (which could be <DOM::null> values).

    {NOTE:: How this collection is implemented is neither defined
            nor constrained. 
    }

    The items in the <IF::NameList> are accessible via an
    ordinal index, starting from <CODE::0>.

  @enDesc:
    @@For: ManakaiDOM|ManakaiDOM
    @@@:
      In the manakai implementation, <IF::NameList> can be
      dereferenced as if it is an array reference, in which each item
      is a reference to array whose item <Perl::0> is the namespace
      URI and whose item <Perl::1> is the name.

  @Method:
     @@Name:  getName
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#NameList-getName
     @@Description:
        @@@lang:en
        @@@@: 
          Returns a name item in this collection.
     @@Param:
        @@@Name:  index
        @@@Type:  
          DOMMain:unsigned-long||ManakaiDOM|all
        @@@Description:
          @@@@lang:en
          @@@@@: 
            An index of item to retrieve in this collection.
     @@Return:
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:
            The name value at the <P::index>th position in this collection.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Either there is no name for the specified <P::index> or 
              the <P::index> is out of range.
        @@@PerlDef:
          if (not defined $index or
              $index < 0 or
              $index > $#$self) {
            $r = null;
          } else {
            $r = $self->[$index]->[1];
          }          
  @Method:
     @@Name:  getNamespaceURI
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#NameList-getNamespaceURI
     @@Description:
       @@@lang:en
       @@@@:
         Returns a namespace URI item in this collection.
     @@Param:
        @@@Name:  index
        @@@Type:  
          DOMMain:unsigned-long||ManakaiDOM|all
        @@@Description:
          @@@@lang:en
          @@@@@: 
            An index of item to retrieve in this collection.
     @@Return:
        @@@Type:
          DOMMain:DOMString
        @@@dis:actualType:
          ManakaiDOM:ManakaiDOMNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@:
            The namespace URI at the <P::index>th position in this collection.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Either there is no namespace URI for the specified <P::index> 
              or the <P::index> is out of range.
        @@@PerlDef:
          if (not defined $index or
              $index < 0 or
              $index > $#$self) {
            $r = null;
          } else {
            $r = $self->[$index]->[0];
          }          
  @Attr:
     @@Name:  length
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#NameList-length
     @@Description:
       @@@lang:en
       @@@@:
         The number of pairs in this collection.
     @@Get:
        @@@Type:  
          DOMMain:unsigned-long||ManakaiDOM|all
        @@@Description:
          @@@@lang:en
          @@@@@: 
            The number of name and namespace URI pairs.
        @@@PerlDef:
          $r = @$self;
  @Method:
     @@Name:  contains
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#NameList-contains
     @@Description:
       @@@lang:en
       @@@@: 
         Tests whether a name is one of items in this collection.
     @@ImplNote:
       @@@lang:en
       @@@@:
         Is namespace URIs ignored in this matching?
     @@Param:
        @@@Name:  str
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: 
            A name to look for.
     @@Return:
        @@@Type:  
          DOMMain:boolean||ManakaiDOM|all
        @@@TrueCase:
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The name <P::str> has been found in this collection.
        @@@FalseCase:
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The name <P::str> has not been found in this collection.
        @@@PerlDef:
          CHK: {
            if (defined $str) {
              for my $item (@$self) {
                if (defined $item->[1] and $str eq $item->[1]) {
                  $r = true;
                  last CHK;
                }
              }
            } else { # not defined $str
              for my $item (@$self) {
                if (not defined $item->[1]) {
                  $r = true;
                  last CHK;
                }
              }
            } # $str defined?
          } # CHK
    @@NSVersion: .containsNS
  @Method:
     @@Name:  containsNS
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#NameList-containsNS
     @@NoNSVersion: .contains
     @@Description:
       @@@lang:en
       @@@@: 
         Tests if a pair of namespace URI and name is part of this collection.
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:
          DOMMain:DOMString
        @@@dis:actualType:
          ManakaiDOM:ManakaiDOMNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@: 
            A namespace URI to look for.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The namespace of name to look for is <DOM::null>.
          @@@@For:
            ManakaiDOM:ManakaiDOM
     @@Param:
        @@@Name:  name
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: 
            A name to look for.
     @@Return:
        @@@Type:  
          DOMMain:boolean||ManakaiDOM|all
        @@@TrueCase:
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The pair has been found in this collection.
        @@@FalseCase:
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The pair has not been found in this collection.
        @@@PerlDef:
          CHKLN: {
            CHKNS: {
              if (defined $namespaceURI) {
                for my $item (@$self) {
                  if (defined $item->[0] and $namespaceURI eq $item->[0]) {
                    last CHKNS;
                  }
                }
              } else { # not defined namespaceURI
                for my $item (@$self) {
                  if (not defined $item->[0]) {
                    last CHKNS;
                  }
                }
              } # namespaceURI defined?

              ## namespaceURI does not match
              last CHKLN;
            } # CHKNS

            if (defined $name) {
              for my $item (@$self) {
                if (defined $item->[1] and $name eq $item->[1]) {
                  $r = true;
                  last CHKLN;
                }
              }
            } else { # not defined namespaceURI
              for my $item (@$self) {
                if (not defined $item->[1]) {
                  $r = true;
                  last CHKLN;
                }
              }
            } # name defined?
          } # CHKLN
##NameList

IFCls1Def:
  @IFQName: DOMImplementation
  @ClsQName: ManakaiDOMImplementation

  @enDesc:
    The <IF::DOMImplementation> interface provides a number
    of methods for performing operations that are independent
    of any particular instance of the document object model.

  @ClsISA:
    @@@: t|ManakaiDOMImplementationDocument
    @@For: ManakaiDOM|ManakaiDOM2

  @ClsISA:
    @@@: f|ManakaiMinimumImplementation
    @@For: ManakaiDOM|ManakaiDOM3
  @ClsISA:
    @@@: f|ManakaiMinimumImplementation||ManakaiDOM|ManakaiDOMLatest
    @@For: !ManakaiDOM|ManakaiDOM3

  @ClsISA: ManakaiDOM|ManakaiDOMObject

  @DISLang:role:
    @@@:
      DOMMetaImpl:ManakaiDOMImplementationRole

  @DOMMetaImpl:provideFeature:
    @@@: CoreFeature10
    @@ForCheck:
      ManakaiDOM:DOM1
  @DOMMetaImpl:provideFeature:
    @@@: CoreFeature20
    @@ForCheck:
      ManakaiDOM:DOM2
  @DOMMetaImpl:provideFeature:
    @@@: CoreFeature30
    @@ForCheck:
      ManakaiDOM:DOM3
  @DOMMetaImpl:provideFeature:
    @@@: DOMXML|XMLFeature10
    @@ForCheck:
      ManakaiDOM:DOM1 ManakaiDOM|DOMXMLFeature
  @DOMMetaImpl:provideFeature:
    @@@: DOMXML|XMLFeature20
    @@ForCheck:
      ManakaiDOM:DOM2 ManakaiDOM|DOMXMLFeature
  @DOMMetaImpl:provideFeature:
    @@@: DOMXML|XMLFeature30
    @@ForCheck:
      ManakaiDOM:DOM3 ManakaiDOM|DOMXMLFeature
  @DOMMetaImpl:provideFeature:
    @@@: DOMXML|XMLVersionFeature10
    @@ForCheck:
      ManakaiDOM:DOM3 ManakaiDOM|DOMXMLFeature
  @DOMMetaImpl:provideFeature:
    @@@: DOMXML|XMLVersionFeature11
    @@ForCheck:
      ManakaiDOM:DOM3 ManakaiDOM|DOMXMLFeatureXML11

  @Method:
    @@ForCheck: !ManakaiDOM|ForClass
     @@Name:  hasFeature
     @@Description:
       @@@lang:en
       @@@@:
         Tests whether this DOM implementation supports a specific 
         feature and version or not.
     @@L1:
     @@Param:
        @@@Name:  feature
        @@@Type:
          DOMMain:DOMString
        @@@actualType: DOMFeature|FeatureNameString
        @@@Description:
          @@@@lang:en
          @@@@@: 
            A name of feature to test, with an optional <CHAR::PLUS SIGN>
            prefix.
        
        @@@ImplNote:
          @@@@lang:en
          @@@@@: Move to DOMMain
        @@@InCase:
          @@@@Value: HTML
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The DOM HTML feature.
              This is one of the allowed values in DOM Level 1 First Edition.
        @@@InCase:
          @@@@Value: XML
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The DOM XML feature.
              This is one of the allowed values in DOM Level 1 First Edition.
        @@@InCase:
          @@@@Label:
            @@@@@@:
              XML 1.0 <CODE::Name>
            @@@@@lang:en
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Only an XML 1.0 Name is allowed in DOM Level 1 Second Edition 
              and DOM Level 2.
        @@@InCase:
          @@@@Label:
            @@@@@@: Reversed Internet domain name
            @@@@@lang:en
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              DOM Level 1 First Edition and DOM Level 2 specifications 
              says that the feature name defined outside the DOM specifications 
              should use the reversed Internet domain name to avoid 
              possible confliction.
            \
              This recommendation is withdrawn by the Errata of the DOM Level 2 
              Specifications.
        @@@InCase:
          @@@@Label:
            @@@@@lang:en
            @@@@@@:
              Feature name preceeded by a <CODE::PLUS SIGN>
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The specified feature may not be directly castable
              but would be available through the method "getFeature".
     @@Param:
        @@@Name:  version
        @@@Type:
          DOMMain:DOMString
        @@@actualType:
          ManakaiDOM:ManakaiDOMFeatureVersion
        @@@Description:
          @@@@lang:en
          @@@@@:
            Version number of feature to test.

        @@@ImplNote:
          @@@@lang:en
          @@@@@: Move to DOMMain
        @@@InCase:
          @@@@Value: 1.0
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              DOM Level 1.
              This is the only allowed value in DOM Level 1 and
              one of allowed values in DOM Level 2.
        @@@InCase:
          @@@@Value: 2.0
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              DOM Level 2.
              This is one of allowed values in DOM Level 2.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              No particular version is specified.
              \
              It is implied that this value is allowed in DOM 
              Level 1 and Level 2.  DOM Level 2 Errata and DOM 
              Level 3 explicitly allow this value specified.
        @@@InCase:
          @@@@Value: \
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              No particular version is specified.
              \
              This value is allowed in DOM Level 2 Errata and 
              DOM Level 3.
     @@Return:
        @@@Type:  
          DOMMain:boolean||ManakaiDOM|all
        @@@Description:
          @@@@lang:en
          @@@@@: 
            Whether the feature and version is implemented or not.
        @@@TrueCase:
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The feature is implemented in the specified version.
        @@@FalseCase:
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The feature is not implemented.

  @Method:
    @@ForCheck: !ManakaiDOM|ForClass
     @@Name:  createDocumentType
     @@Description:
       @@@lang:en
       @@@@:
         Creates and returns an empty <IF::DOMXML:DocumentType> node.
     @@DOMMain:isNamespaceAware:1
     @@XML2Feature:
     @@Param:
        @@@Name:  qualifiedName
        @@@Type:  
          DOMMain:DOMString
        @@@actualType:
          @@@@@:
            DOMMain:ManakaiDOMXML11QName
          @@@@For: ManakaiDOM|ManakaiDOMLatest
        @@@actualType:
          @@@@@: DOMMain|ManakaiDOMXML10QName
          @@@@For: !ManakaiDOM|ManakaiDOMLatest
        @@@Description:
          @@@@lang:en
          @@@@@: The qualified name of the document type to be created.
        @@@Description:
          @@@@lang:en
          @@@@@:
            {NOTE:: DOM levels 2 and 3 requires DOM implementations to 
                    test whether a <P::qualifiedName> is a valid XML 1.0
                    Name or not.  The manakai DOM implementation
                    for the <QUOTE::latest> level tests against both XML 1.0 
                    and XML 1.1; if it is invalid against XML 1.1, an exception 
                    is thrown; otherwise, the node created is marked as 
                    an XML 1.1 document type node.
             \
            }
          @@@@For:
            ManakaiDOM:ManakaiDOMLatest
     @@Param:
        @@@Name:  publicId
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The external subset public identifier.
     @@Param:
        @@@Name:  systemId
        @@@Type:  
          DOMMain:DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The external subset system identifier.
     @@For:
       ManakaiDOM:DOM2
     @@Return:
        @@@Type:  
          DOMXML:DocumentType
        @@@actualType:
          DOMXML:ManakaiDOMDocumentType
        @@@Description:
          @@@@lang:en
          @@@@@:
            A newly created <IF::DOMXML:DocumentType> node.
        @@@ImplNote:
          @@@@lang:en
          @@@@@:
            The <A::Node.ownerDocument> attribute is set to <DOM::null>.
        @@@raises:
          @@@@@: DOMException.INVALID_CHARACTER_ERR
          @@@@enDesc:
            @@@@@@:
              The <P::qualifiedName> is not an XML 1.0 <CODE::Name>.
            @@@@@For:
              !ManakaiDOM:ManakaiDOMLatest
          @@@@enDesc:
            @@@@@@:
              The <P::qualifiedName> is not an XML 1.1 <CODE::Name>.
            @@@@@For:
              ManakaiDOM:ManakaiDOMLatest
        @@@raises:
          @@@@@: MDOMX|MDOM_NS_MALFORMED_QNAME
          @@@@enDesc:
            The <P::qualifiedName> is malformed.
        @@@raises:
          @@@@@:
            MDOMX:MDOM_IMPL_NOSUPPORT_XMLNS
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The DOM implementation does not support the <DOM::XML> feature and 
              the language exposed through the <IF::Document> does not support 
              XML Namespaces.

  @Method:
    @@ForCheck: !ManakaiDOM|ForClass
     @@Name:  createDocument
     @@Description:
       @@@lang:en
       @@@@:
         Creates a new <IF::Document> object, with a document element.
     @@Description:
       @@@lang:en
       @@@@:
         {NOTE:: Either if the <P::doctype> is an XML 1.1 node 
                 or if the <P::qualifiedName> is a valid XML Namespace 1.1 
                 QName but is not a valid XML Namespace 1.0 QName,
                 then the XML version of the document to be created 
                 is <XML::1.1>; otherwise, it is <XML::1.0>.
          \
          }
       @@@For:
         ManakaiDOM:ManakaiDOMLatest
     @@Description:
       @@@lang:en
       @@@@:
         The manakai <M::DOMImplementation.createDocument> method always 
         creates an XML <IF::Document>, i.e. a <IF::Document> that supports 
         the <Feature::XML> feature. 
       @@@For:
         ManakaiDOM:ManakaiDOM
     @@XML2Feature:
     @@ImplNote:
       @@@lang:en
       @@@@:
         In DOM Level 1, there is no standardized way to create 
         a <IF::Document> object. 
     @@DOMMain:isNamespaceAware:1
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:
          DOMMain:DOMString
        @@@actualType:
          ManakaiDOM:ManakaiDOMNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@: 
            The namespace URI of the document element to create.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              The document element to create has no namespace.
     @@Param:
        @@@Name:  qualifiedName
        @@@Type:  
          DOMMain:DOMString
        @@@actualType:
          @@@@@:
            DOMMain:ManakaiDOMXML11QName
          @@@@ForCheck:
            ManakaiDOM:ManakaiDOMLatest
          @@@@ManakaiDOM:noInputNormalize:1
        @@@actualType:
          @@@@@:
            DOMMain:ManakaiDOMXML10QName
          @@@@ForCheck:
            ManakaiDOM:ManakaiDOMLatest
          @@@@ManakaiDOM:noInputNormalize:1
        @@@Description:
          @@@@lang:en
          @@@@@: The qualified name of the document element to create.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: Document element is not created.
     @@Param:
        @@@Name:  doctype
        @@@Type:  
          DOMXML:DocumentType
        @@@actualType:
          DOMXML:ManakaiDOMDocumentType
        @@@Description:
          @@@@lang:en
          @@@@@:
            The document type of the document to create.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The document to create does not have any <IF::DOMXML:DocumentType> 
              node. 
        @@@ImplNote:
          @@@@lang:en
          @@@@@:
            The <A::Node.ownerDocument> of the <P::doctype> is set to 
            the document being created. 
     @@Return:
        @@@Type:  Document
        @@@actualType: ManakaiDOMDocument
        @@@Description:
          @@@@lang:en
          @@@@@:
            A newly created <IF::Document> object. 
            \
            {NOTE:: The object returned by this method may be a 
                    specialized <IF::Document> object based on the 
                    <P::doctype> given.  For example, a <IF::Document> 
                    object might also implement the <IF::DOMHTML:HTMLDocument> 
                    interface. 
            \
            }
        @@@raises:
          @@@@@: DOMException.INVALID_CHARACTER_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The specified qualified name is not an XML 1.0 <CODE::Name>.
            @@@@@For:
              !ManakaiDOM:ManakaiDOMLatest
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The specified qualified name is not an XML 1.1 <CODE::Name>.
            @@@@@For:
              ManakaiDOM:ManakaiDOMLatest
          @@@@ImplNote:
            @@@@@lang:en
            @@@@@@:
              The <CITE::DOM Level 2 Core> specification does not
              explicitly defines the version of the XML for 
              <CODE::Name>s, but the definition for
              <X::DOMException.INVALID_CHARACTER_ERR> references
              the <CITE::XML 1.0> specification.

              The <CITE::DOM Level 3 Core> specification references
              the <CITE::XML 1.0> specification for the <CODE::Name>
              definition.
        @@@raises:
          @@@@@: DOMException.NAMESPACE_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Either the "qualifiedName" is malformed, the "qualifiedName" 
              has a prefix and the "namespaceURI" is "null", the 
              "qualifiedName" is "null" and the "namespaceURI" is 
              different from "null", the "qualifiedName" has 
              a prefix that is "xml" and the "namespaceURI" is 
              different from "http://www.w3.org/XML/1998/namespace" or
              the DOM implementation does not support the "XML" feature 
              but a non-null "namespaceURI" is provided.
         @@@ImplNote:
           @@@@lang:en
           @@@@@:
              In addition, it is possible to raise an exception 
              either if the "qualifiedName" has a prefix that is 
              "xmlns" and the "namespaceURI" is different from 
              "http://www.w3.org/2000/xmlns/", if the "namespaceURI" 
              is "http://www.w3.org/XML/1998/namespace" and the 
              "qualifiedName" has a prefix is different from "xml" or 
              if the "namespaceURI" is "http://www.w3.org/2000/xmlns/" 
              and the "qualifiedName" has a prefix is different from "xmlns".
              But this DOM implementation only report a warning on 
              these cases since the specification does not mention 
              to raise any exception.
        @@@raises:
          @@@@@: MDOMX_DOCTYPE_ALREADY_USED
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The <P::doctype> has already been used with a different 
              document.
        @@@raises:
          @@@@@: MDOMX_EXTERNAL_NODE
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The <P::doctype> was created from a different DOM implementation.
        @@@raises:
          @@@@@:
            MDOMX:MDOM_IMPL_NOSUPPORT_XMLNS
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The DOM implementation does not support the <DOM::XML> feature and 
              the language exposed through the <IF::Document> does not support 
              XML Namespaces.
            @@@@@ImplNote:
              @@@@@@lang:en
              @@@@@@@:
                DOM Level 2 Core described that this method creates 
                a <QUOTE::XML <IF::Document> object> and that 
                HTML-only implementations need not implement it. 
                DOM Level 2 Errata and DOM Level 3 Core describes that 
                such implementations should return a 
                <X::DOMException.NOT_SUPPORTED_ERR>.  In addition, 
                DOM Level 3 Core specifies this method to create 
                a <QUOTE::DOM <IF::Document> object>. Note also that 
                DOM Level 3 Core explicitly allows non-<Feature::XML> 
                document node to be created.
     @@For:
       ManakaiDOM:DOM2
        
  @Method:
    @@ForCheck: !ManakaiDOM|ForClass
     @@Name:  getFeature
     @@Description:
        @@@lang:en
        @@@@:
          Returns a specialized object that implements the specialized 
          interfaces of the specified feature and version.
     @@Param:
        @@@Name:  feature
        @@@Type:
          DOMMain:DOMString
        @@@actualType: FeatureNameString
        @@@Description:
          @@@@lang:en
          @@@@@:
            A feature name to request.

        ## TODO: Move to DOMMain
        @@@InCase: 
          @@@@Label: 
            @@@@@@:
              Feature name preceeded by a <CHAR::PLUS SIGN>
            @@@@@lang:en
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The <CHAR::PLUS SIGN> is ignored.
     @@Param:
        @@@Name:  version
        @@@Type:
          DOMMain:DOMString
        @@@actualType:
          ManakaiDOM:ManakaiDOMFeatureVersion
        @@@Description:
          @@@@lang:en
          @@@@@:
            A feature version number to request.
     @@SpecLevel:3
     @@Level[list]:  3
     @@L3:
     @@For:
       ManakaiDOM:DOM3
     @@Return:
        @@@Type:  
          DOMMain:DOMObject
        @@@Description:
          @@@@lang:en
          @@@@@:
            An object that implements the specialized APIs of the 
            <P::feature> and <P::version>.  It might or might not 
            implements the <IF::DOMImplementation> interface. 
        @@@Description:
          @@@@lang:en
          @@@@@:
            In addition, the object might or might not part of 
            manakai. 
          @@@@For:
            ManakaiDOM:ManakaiDOM
        @@@ImplNote:
          @@@@lang:en
          @@@@@:
            If the object implements the <IF::DOMImplementation> interface, 
            it must delegate to the primary core <IF::DOMImplementation> 
            and must not result incosistent with the primary core 
            <IF::DOMImplementation> such as <M::DOMImplementation.hasFeature>, 
            <M::DOMImplementation.getFeature>, etc.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@@: 
            There is no object available that implements interfaces 
            associated with the <P::feature> and <P::version>. 
##DOMImplementation

PropDef:
  @QName: dis|DOM3
  @ImplNote: Temporary.

ElementTypeBinding:
  @Name: actualType
  @ElementType:
    dis:actualType
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: TrueCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase
    @@Value:
      @@@@: 1
      @@@ContentType: DISCore|Boolean
    @@Type: idl|boolean||ManakaiDOM|all

ElementTypeBinding:
  @Name: FalseCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase
    @@Value:
      @@@@: 0
      @@@ContentType: DISCore|Boolean
    @@Type: idl|boolean||ManakaiDOM|all

ElementTypeBinding:
  @Name: intValue
  @ElementType:
    dis:Value
  @ShadowContent:
    @@ContentType: DISCore|Integer

ElementTypeBinding:
  @Name: enDesc
  @ElementType:
    dis:Description
  @ShadowContent:
    @@lang:en

IFCls3Def:
  @IFQName: c|TypeInfo
  @ClsQName: c|ManakaiDOMDTDTypeInfo

  @ClsISA: ManakaiDOM|ManakaiDOMObject

  @enDesc:
    The <IF::TypeInfo> interface represents a type referenced from
    <IF::t|Element> or <IF::t|Attr> nodes, specified in the schemas
    associated with the document.  The type is a pair of a namespace URI
    and name properties, and depends on the document's schema.

  @enDesc:
    @@ddid: xml10-dtd
    @@@:
      {P:: If the document's schema is an XML 1.0 DTD:
  
        - If the type is referenced from an <IF::t|Attr> node and
          there is a declaration for the attribute, 
          <A::TypeInfo.typeNamespace> is 
          <URI::http://www.w3.org/TR/REC-xml> and <A::TypeInfo.typeName>
          is <InfoProp::attribute type> property value.

        - If the type is referenced from an <IF::t|Attr> node and
          there is no declaration for the attribute,
          <A::TypeInfo.typeNamespace> and <A::TypeInfo.typeName>
          are <DOM::null>.

        - If the type is referenced from an <IF::Element> node,
          <A::TypeInfo.typeNamespace> and <A::TypeInfo.typeName>
          are <DOM::null>.

      }
  @enImplNote:
    @@ddid: xml11-dtd
    @@@:
      XML 1.1 DTD??  Name character sets differ in XML 1.0 and 1.1
      so namespace URI should be changed?
  @enDesc:
    @@ddid: xml-schema10
    @@@:
      {P:: If the document's schema is in XML Schema 1.0, the values
           are computed from PSVI properties as:

           - If <InfoProp::validity> property exists <EM::and> is
             <CODE::valud> or <CODE::notKnown>::: <A::TypeInfo.typeNamespace>
             is <XSCompProp::target namespace> and <A::TypeInfo.typeName>
             is <XSCompProp::name> of the declared type if available,
             or <DOM::null>.  Since XML Schema 1.0 does not require
             exposing the declared type, DOM implementation might choose
             not to provide type information if validity is not valid.

           {LI:: If <InfoProp::validity> property exists and is <CODE::valid>:::

              {OLI:: If <InfoProp::member type definition> exists:::

                {OLI:: If <XSCompProp::name> is not absent:::
                    <A::TypeInfo.typeNamespace> is <XSCompProp::target namespace>
                    and <A::TypeInfo.typeName> is <XSCompProp::name>
                    of the <InfoItem::member type definition>.
                }

                {OLI:: Otherwise::: <A::TypeInfo.typeNamespace> and
                       <A::typeInfo.typeName> is the namespace and local
                       name of the corresponding anonymous type name.
                }

              }

              {OLI:: If <InfoProp::type definition> exists:::

                {OLI:: If <XSCompProp::name> is not absent:::
                    <A::TypeInfo.typeNamespace> is <XSCompProp::target namespace>
                    and <A::TypeInfo.typeName> is <XSCompProp::name>
                    of the <InfoItem::type definition>.
                }

                {OLI:: Otherwise::: <A::TypeInfo.typeNamespace> and
                       <A::typeInfo.typeName> is the namespace and local
                       name of the corresponding anonymous type name.
                }

              }

              {OLI:: If <InfoProp::member type definition anonymous> exists:::

                {OLI:: If it is false:::
                    <A::TypeInfo.typeNamespace> is <InfoProp::member
                    type definition namespace>
                    and <A::TypeInfo.typeName> is <InfoProp::member
                    type definition name>.
                }

                {OLI:: Otherwise::: <A::TypeInfo.typeNamespace> and
                       <A::typeInfo.typeName> is the namespace and local
                       name of the corresponding anonymous type name.
                }

              }

              {OLI:: If <InfoProp::type definition anonymous> exists:::

                {OLI:: If it is false:::
                    <A::TypeInfo.typeNamespace> is <InfoProp::type
                    definition namespace> and <A::TypeInfo.typeName>
                    is <InfoProp::type definition name>.
                }

                {OLI:: Otherwise::: <A::TypeInfo.typeNamespace> and
                       <A::typeInfo.typeName> is the namespace and local
                       name of the corresponding anonymous type name.
                }

              }

           }

      }
  @enImplNote:
    @@ddid: other-lang
    @@@:
      Other schema languages are outside of the scope of the W3C.

  @ResourceDef:
    @@ForCheck: ManakaiDOM|ForClass
    @@QName: c|createDTDTypeInfo
    @@enDesc:
      Returns a <IF::TypeInfo> object for an XML DTD type.
    @@rdf:type: DISPerl|BlockCode
    @@PerlDef:
      my $v = $type || 0;
      $result = bless \$v, <ClassName::c|ManakaiDOMDTDTypeInfo>;

  @Attr:
    @@Name: typeName
    @@enDesc:
      The name of the type declared for the associated element or attribute.
    @@Type: DOMString
    @@Get:
      @@@nullCase:
        @@@@enDesc:
          If the type is unknown.
      @@@PerlDef:
        $r = {
          <C::ATDef.CDATA_ATTR> => 'CDATA',
          <C::ATDef.ID_ATTR> => 'ID',
          <C::ATDef.IDREF_ATTR> => 'IDREF',
          <C::ATDef.IDREFS_ATTR> => 'IDREFS',
          <C::ATDef.ENTITY_ATTR> => 'ENTITY',
          <C::ATDef.ENTITIES_ATTR> => 'ENTITIES',
          <C::ATDef.NMTOKEN_ATTR> => 'NMTOKEN',
          <C::ATDef.NMTOKENS_ATTR> => 'NMTOKENS',
          <C::ATDef.NOTATION_ATTR> => 'NOTATION',
          <C::ATDef.ENUMERATION_ATTR> => 'ENUMERATION',
        }->{$$self};
       
  @Attr:
    @@Name: typeNamespace
    @@enDesc:
      The namespace of the type declared for the associated element or
      attribute.
    @@Type: DOMString
    @@Get:
      @@@nullCase:
        @@@@enDesc:
          If the type is unknown or if no namespace information is available.
      @@@enImplNote:
        Is it namespace <EM::URI>?
      @@@PerlDef:
        $r = <Q::xml-dtd:> if {
          <C::ATDef.CDATA_ATTR> => true,
          <C::ATDef.ID_ATTR> => true,
          <C::ATDef.IDREF_ATTR> => true,
          <C::ATDef.IDREFS_ATTR> => true,
          <C::ATDef.ENTITY_ATTR> => true,
          <C::ATDef.ENTITIES_ATTR> => true,
          <C::ATDef.NMTOKEN_ATTR> => true,
          <C::ATDef.NMTOKENS_ATTR> => true,
          <C::ATDef.NOTATION_ATTR> => true,
          <C::ATDef.ENUMERATION_ATTR> => true,
        }->{$$self};

  @ConstGroup:
    @@QName: DerivationMethods

    @@enDesc:
      These are the available values for the <P::derivationMethod>
      parameter of the <M::TypeInfo.isDerivedFrom> method.  It is
      a set of possible types of derivation and the values represent
      bit positions.  If a bit in the <P::derivationMethod> parameter
      is set to <CODE::1>, the corresponding type if derivation will
      be taken into account when evaluating the derivation between
      the reference type definition and the other type definition.
      When using the <M::TypeInfo.isDerivedFrom> method, combining
      all of them in the <P::derivationMethod> parameter is equivalent
      to invoking the method for each of them separately
      and combining the results with the <CODE::or> boolean function.
      DOM Level 3 Core specification only defines the type of
      derivation for XML Schema.
    @@enImplNote:
      Any type derives from <Q::xsd:anyType>.  (Can any bit be used 
      to test it?)

    @@rdfs:subClassOf: idl|unsignedLong||ManakaiDOM|all
    @@Type: idl|unsignedLong||ManakaiDOM|all
    @@IsBitMask:1

    @@Const:
      @@@Name: DERIVATION_RESTRICTION
      @@@intValue: 1
      @@@enDesc:
        The derivation by <CODE::restriction>.

        In XML Schema 1.0, the reference type definition is derived
        from the other type definition if the other type definition
        is the same as the reference type definition, or if the other
        type definition can be reached recursively following the
        <XSCompName::base type definition> property from the reference
        type definition, and all the <CODE::derivation method>s involved
        are <CODE::restriction>.

        Note that any simple type derives from <Q::xsd:anySimpleType>
        by restriction.
    @@Const:
      @@@Name: DERIVATION_EXTENSION
      @@@intValue: 2
      @@@enDesc:
        The derivation by <CODE::extension>.

        In XML Schema 1.0, the reference type definition
        is derived by <CODE::extension> from the other type definition if
        the other type definition can be reached recursively following
        the <XSCompProp::base type definition> property from
        the reference type definition, and at least one of the <CODE::derivation
        method>s involved is an <CODE::extension>.
    @@Const:
      @@@Name: DERIVATION_UNION
      @@@intValue: 4
      @@@enDesc:
        The derivation by <CODE::union>.

        In XML Schema 1.0, the reference type definition is derived by
        <CODE::union> from the other type definition if there exists two
        type definitions <VAR::T1> and <VAR::T2> such that the reference
        type definition is derived from <VAR::T1> by
        <C::TypeInfo.DERIVATION_RESTRICTION> or
        <C::TypeInfo.DERIVATION_EXTENSION>, <VAR::T2> is derived from
        the other type definition by <C::TypeInfo.DERIVATION_RESTRICTION>,
        <VAR::T1> has <XSCompProp::variety> <CODE::union>, and one of
        the <XSCompProp::member type definition> is <VAR::T2>.
        Note that <VAR::T1>
        could be the same as the reference type definition, and
        <VAR::T2> could be the same as the other type definition.
    @@Const:
      @@@Name: DERIVATION_LIST
      @@@intValue: 8
      @@@enDesc:
        The derivation by <CODE::list>.
   
        In XML Schema 1.0, the reference type definition is derived by
        <CODE::list> from the other type definition if there exists two type
        definitions <VAR::T1> and <VAR::T2> such that the reference type
        definition is derived from <VAR::T1> by
        <C::TypeInfo.DERIVATION_RESTRICTION> or
        <C::TypeInfo.DERIVATION_EXTENSION>, <VAR::T2> is derived from
        the other type definition by <C::TypeInfo.DERIVATION_RESTRICTION>,
        <VAR::T1> has <XSCompProp::variety> <CODE::list>, and <VAR::T2>
        is the <XSCompProp::item type definition>.  Note that <VAR::T1>
        could be the same as the reference type definition, and
        <VAR::T2> could be the same as the other type definition.

  @Method:
    @@Name: isDerivedFrom
    @@enDesc:
      Returns whether there is a derivation between the type
      (<DFN::the reference type definition>) and <DFN::the other type
      definition>.
    @@Param:
      @@@Name: typeNamespaceArg
      @@@Type: DOMString
      @@@enDesc:
        The namespace of the other type definition.
      @@@enImplNote:
        Can't it be <DOM::null>?
    @@Param:
      @@@Name: typeNameArg
      @@@Type: DOMString
      @@@enDesc:
        The name of the other type definition.
    @@Param:
      @@@Name: derivationMethod
      @@@Type: idl|unsignedLong||ManakaiDOM|all
      @@@dis:actualType: DerivationMethods
      @@@enDesc:
        The type of derivation and conditions applied between two
        types.
    @@Return:
      @@@Type: idl|boolean||ManakaiDOM|all
      @@@TrueCase:
        @@@@enDesc:
          If the document's schema language is XML Schema and
          the reference type definition is derived from the other
          type definition according to the <P::derivationMethod> parameter.

          If the document's schema language is XML Schema,
          the value of the <P::derivationMethod> parameter is <CODE::0>,
          and the other type definition can be reached by recursing any
          combination of <XSCompProp::base type definition>, 
          <XSCompProp::item type definition>, or <XSCompProp::member
          type definitions> properties.
      @@@FalseCase:
        @@@@enDesc:
          If the document's schema language is DTD or no schema
          is associated with the document.

          If the document's schema language is XML Schema and
          it does not meet the condition to return <DOM::true>.
      @@@PerlDef:\
        @@@@enImplNote:
          <DOM::false>.

  @IntMethod:
    @@Operator:
      @@@@: eq
      @@@ContentType: DISPerl|Perl
    @@enDesc:
      For manakai's Perl binding, a <IF::TypeInfo> is equal (<Perl::eq>)
      to another <IF::TypeInfo> if and only if their 
      <A::TypeInfo.typeNamespace> and <A::TypeInfo.typeName> is literally
      equals respectively.
    @@Param:
      @@@Name: t
      @@@Type: TypeInfo
    @@Return:
      @@@Type: idl|boolean||ManakaiDOM|all
      @@@PerlDef:
        __DEEP{
          if (UNIVERSAL::isa ($t, <IFName::TypeInfo>)) {
            my $ln1 = $self-><AG::TypeInfo.typeName>;
            my $ln2 = $t-><AG::TypeInfo.typeName>;
            if ((defined $ln1 and defined $ln2 and $ln1 eq $ln2) or
                (not defined $ln1 or not defined $ln2)) {
              my $ns1 = $self-><AG::TypeInfo.typeNamespace>;
              my $ns2 = $t-><AG::TypeInfo.typeNamespace>;
              if ((defined $ns1 and defined $ns2 and $ns1 eq $ns2) or
                  (not defined $ns1 and not defined $ns2)) {
                $r = true;
              }
            }
          }
       }__;
    @@L3Test:
      @@@QName: DTDTypeInfo.==.test
      @@@PerlDef:
        $test->id ('cdata.cdata');
        my $t1;
        __CODE{c|createDTDTypeInfo::
          $result => $t1,
          $type => {<C::ATDef.CDATA_ATTR>},
        }__;
        my $t2;
        __CODE{c|createDTDTypeInfo::
          $result => $t2,
          $type => {<C::ATDef.CDATA_ATTR>},
        }__;
        $test->assert_equals ($t1, $t2);

        $test->id ('cdata.unknown');
        __CODE{c|createDTDTypeInfo::
          $result => $t2,
          $type => {<C::ATDef.UNKNOWN_ATTR>},
        }__;
        $test->assert_not_equals ($t1, $t2);

        $test->id ('cdata.no-type');
        __CODE{c|createDTDTypeInfo::
          $result => $t2,
          $type => {<C::ATDef.NO_TYPE_ATTR>},
        }__;
        $test->assert_not_equals ($t1, $t2);

        $test->id ('cdata.id');
        __CODE{c|createDTDTypeInfo::
          $result => $t2,
          $type => {<C::ATDef.ID_ATTR>},
        }__;
        $test->assert_not_equals ($t1, $t2);

        $test->id ('unknown.unknown');
        __CODE{c|createDTDTypeInfo::
          $result => $t1,
          $type => {<C::ATDef.UNKNOWN_ATTR>},
        }__;
        __CODE{c|createDTDTypeInfo::
          $result => $t2,
          $type => {<C::ATDef.UNKNOWN_ATTR>},
        }__;
        $test->assert_equals ($t1, $t2);

        $test->id ('unknown.no-type');
        __CODE{c|createDTDTypeInfo::
          $result => $t2,
          $type => {<C::ATDef.NO_TYPE_ATTR>},
        }__;
        $test->assert_equals ($t1, $t2);

        $test->id ('unknown.no-type-info');
        $t2 = 100;
        $test->assert_not_equals ($t1, $t2);
##TypeInfo

ResourceDef:
  @QName: ATDef
  @For: ManakaiDOM|ManakaiDOMLatest
  @AliasFor: d|AttributeDefinition
ResourceDef:
  @QName: ATDef
  @For: ManakaiDOM|ManakaiDOM3 !ManakaiDOM|ManakaiDOMLatest
  @AliasFor: d|AttributeDefinition||ManakaiDOM|ManakaiDOMLatest

IFCls3Def:
  @IFQName: UserDataHandler
  @ClsQName: ManakaiDOMUserDataHandler

  @enDesc:
    A <IF::UserDataHandler> is a handler that gets called when the
    node the object is associated to is being cloned, imported,
    or renamed.  It can be used by the application to implement various
    behaviors regarding the user data associated to the DOM nodes.

  @enDesc:
    @@ForCheck: ManakaiDOM|Perl
    @@ddid: perl
    @@@:
      For manakai's Perl binding, a <Perl::CODE> reference 
      can be set as if it is a <IF::UserDataHandler> to any
      method parameter whose type is defined as <IF::UserDataHandler>.
      When the <M::UserDataHandler.handle> method would be invoked,
      the <Perl::CODE> reference itself is executed as if it is a 
      subroutine implementing the method.

        {NOTE:: The DOM implementation might <Perl::bless> such 
                <Perl::CODE> reference with appropriate class name
                when the reference is given to a method.
        }

      Any <IF::UserDataHandler> object <kwd:MUST> be <DOM::true>
      when it is evaluated in Boolean context.

  @enDesc:
    @@ForCheck: ManakaiDOM|ForClass
    @@ddid: class
    @@@:
      If a <Perl::CODE> reference is used as a <IF::UserDataHandler>,
      the reference will be <Perl::bless>ed to the class
      <Class::ManakaiDOMUserDataHandler>.

  @ResourceDef:
    @@rdf:type: DISLang|InputProcessor
    @@rdf:type: DISLang|OutputProcessor
    @@PerlDefC:
      $INPUT = bless $INPUT, <ClassName::ManakaiDOMUserDataHandler>
        if ref $INPUT eq 'CODE';

  @ConstGroup:
    @@QName:  OperationType

    @@rdfs:subClassOf: idl|unsignedShort||ManakaiDOM|all
    @@Type: idl|unsignedShort||ManakaiDOM|all

    @@enDesc:
      An <Q::OperationType> value is an integer indicating the
      type of operation being performed on a node.

    @@Const:
      @@@Name: NODE_CLONED
      @@@intValue: 1
      @@@enDesc:
        The node is cloned.
      @@@enImplNote:
        <M::t|Node.cloneNode>.

    @@Const:
      @@@Name: NODE_IMPORTED
      @@@intValue: 2
      @@@enDesc:
        The node is imported.
      @@@enImplNote:
        <M::t|Document.importNode>.

    @@Const:
      @@@Name: NODE_DELETED
      @@@intValue: 3
      @@@enDesc:
        The node is deleted.
      
          {NOTE:: This may not be supported or may not be reliable
                  in certain environments, such as Java, where
                  the implementation has no real control over when
                  objects are actually deleted.
          }
      @@@enDesc:
        @@@@ddid: manakai
        @@@@For: ManakaiDOM|ManakaiDOM
        @@@@@:
          In manakai implementation, when a user data handler
          with type <C::OperationType.NODE_DELETE> is invoked
          is undefined, as when Perl's <Perl::DESTROY> method is invoked.

    @@Const:
      @@@Name: NODE_RENAMED
      @@@intValue: 4
      @@@enDesc:
        The node is renamed.
      @@@enImplNote:
        <M::t|Document.renameNode>.

    @@Const:
      @@@Name: NODE_ADOPTED
      @@@intValue: 5
      @@@enDesc:
        The node is adopted to the document.
      @@@enImplNote:
        <M::t|Document.adoptNode>.

  @Method:
    @@Name: handle
    @@enDesc:
      The <M::UserDataHandler.handle> method is called whenever
      the node for which the handler is registered is imported or cloned.

      DOM applications must not raise exceptions in a <IF::UserDataHandler>.
      The effect of throwing exceptions from the handler is implementation
      dependent.

    @@Param:
      @@@Name: operation
      @@@Type: idl|unsignedShort||ManakaiDOM|all
      @@@dis:actualType: OperationType
      @@@enDesc:
        The type of operation that is being performed on the node.
    @@Param:
      @@@Name: key
      @@@Type: DOMMain|DOMString
      @@@enDesc:
        The key for which the handler is being called.
    @@Param:
      @@@Name: data
      @@@Type: DOMMain|DOMUserData
      @@@enDesc:
        The data for which the handler is being called.
    @@Param:
      @@@Name: src
      @@@Type: t|Node
      @@@enDesc:
        The node to which the <P::operation> is being performed.
      @@@nullCase:
        @@@@enDesc:
          The handler is called when the node is being deleted.
    @@Param:
      @@@Name: dst
      @@@Type: t|Node
      @@@enDesc:
        The node newly created.
      @@@nullCase:
        @@@@enDesc:
          No node is newly created.
    @@Return:
      @@@PerlDef:
        goto &$self;
##UserDataHandler

IFCls3Def:
  @IFQName: DOMError
  @ClsQName: ManakaiDOMError

  @Implement: ecore|MUErrorInterface
  @ClsISA: ecore|MUError||ManakaiDOM|Perl
  @ClsISA: ManakaiDOM|ManakaiDOMObject

  @enDesc:
    The <IF::DOMError> interface describes an error.

    {NOTE:: A <IF::DOMError> object might be reused by the implementation
            across multiple calls on <M::DOMErrorHandler.handleError>
            method.
    }

  @ConstGroup:
    @@QName: ErrorSeverity
  
    @@rdfs:subClassOf: idl|unsignedShort||ManakaiDOM|all
    @@Type: idl|unsignedShort||ManakaiDOM|all

    @@enDesc:
      An integer indicating the severity of the error.

    @@Const:
      @@@QName: SEVERITY_WARNING
      @@@intValue:1
      @@@enDesc:
        The severity is <EM::warning>.  A warning will not cause
        the processing to stop, unless <M::DOMErrorHandler.handleError>
        returns <DOM::false>.
    @@Const:
      @@@QName: SEVERITY_ERROR
      @@@intValue:2
      @@@enDesc:
        The severity is <EM::error>.  An error might not cause
        the processing to stop if the error can be recovered,
        unless <M::DOMErrorHandler.handleError> returns <DOM::false>.
    @@Const:
      @@@QName: SEVERITY_FATAL_ERROR
      @@@intValue:3
      @@@enDesc:
        The severity is <EM::fatal error>.  A fatal error will
        cause the normal processing to stop.  The return value
        of <M::DOMErrorHandler.handleError> is ignored unless 
        the implementation chooses to continue, in which case
        the behavior becomes undefined.

  @Attr:
    @@Name: severity
    @@enDesc:
      The severity of the error from <TYPE::ErrorSeverity>.
    @@Get:
      @@@Type: idl|unsignedShort||ManakaiDOM|all
      @@@dis:actualType: ErrorSeverity
      @@@PerlDef:
        $r = $self->{-def}->{<H::DOMCore:severity>};

  @Attr:
    @@Name: message
    @@enDesc:
      An implementation specific string describing the error that occurred.
    @@enDesc:
      @@@ddid: manakai
      @@@ForCheck: ManakaiDOM|ManakaiDOM
      @@@enDesc:
        In manakai the <A::DOMError.message> is written in the
        <LANG::i-default> language and is equals to the attribute
        <A::ecore|Error||ManakaiDOM|Perl.text>.
    @@Type: DOMMain|DOMString
    @@Get:
      @@@PerlDef:
        goto &{$self->can ('text')};

  @Method:
    @@ForCheck: ManakaiDOM|ForClass
    @@Operator: DISPerl|AsStringMethod
    @@Return:
      @@@Type: DOMMain|DOMString
      @@@PerlDef:
        __DEEP{
          my $loc = $self-><AG::DOMError.location>;
          my $uri = $loc-><AG::DOMLocator.uri>;
          my $l = $loc-><AG::DOMLocator.lineNumber>;
          my $c = $loc-><AG::DOMLocator.columnNumber>;
          $r .= '<' . $uri . '> ' if defined $uri;
          $r .= 'Line ' . $l . ' ' if $l >= 0;
          $r .= 'Column ' . $c . ' ' if $c >= 0;
          $r .= ': ' if length $r;
          $r .= $self->SUPER::stringify;
        }__;

  @Attr:
    @@Name: type
    @@enDesc:
      A string indicating which related data is expected in 
      <A::DOMError.relatedData>.
    @@Type: DOMMain|DOMString
    @@dis:actualType: DOMErrorTypeName
    @@Get:
      @@@PerlDef:
        $r = $self->{-def}->{<H::DOMCore|errorType>};

  @Attr:
    @@Name: relatedException
    @@enDesc:
      The related platform dependent exception, if any.

      An example would be an <CODE::IOException> or 
      <CODE::SecurityException> when using the <IF::DOMLS:LSParser>. 
    @@Get:
      @@@nullCase:
        @@@@ForCheck: ManakaiDOM|ManakaiDOM
        @@@@enDesc:
          No related exception.
      @@@Type: DOMMain|DOMObject
      @@@PerlDef:
        $r = $self->{<H::DOMCore:relatedException>};

  @Attr:
    @@Name: relatedData
    @@enDesc:
      The related <A::DOMError.type> dependent data, if any.

      The attribute will contain the closest node to where
      the error occurred.  If the implementation is unable to
      determine the node where the error occurs, it will
      contain the <IF::Document> node.
    @@Get:
      @@@Type: DOMMain|DOMObject
      @@@nullCase:
        @@@@ForCheck: ManakaiDOM|ManakaiDOM
        @@@@@: No related data.
      @@@PerlDef:
        $r = $self->{<H::DOMCore:relatedData>};

  @Attr:
    @@Name: location
    @@enDesc:
      The location of the error.
    @@Type: DOMLocator
    @@Get:
      @@@PerlDef:
        $r = $self->{<H::DOMCore:location>} || {};
  
  @IntAttr:
    @@Operator: ecore|ErrorDefMethod
    @@Get:
      @@@Type: DISPerl|HASH
      @@@PerlDef:
        $r = \%Message::DOM::DOMCore::ManakaiDOMError::Def;

  @IntAttr:
    @@DISPerl:methodName: _FORMATTER_PACKAGE_
    @@Get:
      @@@Type: DOMMain|DOMString
      @@@PerlDef:
        $r = $self->{<H::ecore|def>}->{<H::ecore|textFormatter>};
##DOMError

ResourceDef:
  @QName: c|ERROR
  @For: =ManakaiDOM|all
  @enDesc:
    Reports a <IF::DOMError||ManakaiDOM|ManakaiDOM>.
  @rdf:type: DISPerl|BlockElementType
  @dataType: DISPerl|XWSpecification

SPropDef:
  @QName: DOMCore|reports
  @enDesc:
    A method or attribute might report an error.
  @rdfs:domain: DISCore|AnyDefContainer
  @rdfs:range: DOMCore|DOMErrorType||ManakaiDOM|ManakaiDOM
  @multipleProperties: DISCore|UnorderedList
  @dataType: DISCore|TFQNames

SPropDef:
  @QName: c|erred
  @enDesc:
    An error should be reported in the test code.
  @multipleProperties: DISCore|OrderedList
  @dataType: lang|tdterr

SPropDef:
  @QName: severity
  @Description:
    @@lang:en
    @@@: The severity of an error.
  @dataType: DISCore|TFQNames
  @multipleProperties: DISCore|Single
  @rdfs:range: DOMCore|ErrorSeverity||ManakaiDOM|ManakaiDOM
  @ecore:propKey: sev

SPropDef:
  @QName: relatedData
  @Description:
    @@lang:en
    @@@: A related data.
  @multipleProperties: DISCore|Single
  @rdfs:range: DOMMain|DOMObject||ManakaiDOM|ManakaiDOM
  @ecore:propKey: rdata

PropDef:
  @QName: DOMCore|relatedException
  @ecore:propKey: relx

PropDef:
  @QName: DOMCore|location
  @ecore:propKey: loc

ElementTypeBinding:
  @Name: ErrDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DOMCore|DOMErrorType
    @@For: ManakaiDOM|DOM3
    @@ecore:textFormatter: ecore|MUErrorFormatter||ManakaiDOM|Perl

ElementTypeBinding:
  @Name: errname
  @ElementType:
    c:errorType
  @ShadowContent:
    @@ContentType: DISCore|String

ResourceTypeDef:
  @QName: DOMCore|DOMErrorType
  @enDesc:
    A <Q::DOMErrorType> is an error type for
    <IF::DOMError||ManakaiDOM|ManakaiDOM>.
  @rdfs:subClassOf: ecore|AnyErrorCode

StringDataTypeDef:
  @QName: DOMCore|DOMErrorTypeName
  @enDesc:
    The name of an error.

SPropDef:
  @QName: DOMCore|errorType
  @enDesc:
    The error type name as in <A::DOMError||ManakaiDOM|ManakaiDOMLatest.type>.
  @rdfs:domain: DOMCore|DOMErrorType
  @rdfs:subPropertyOf: dis|AppName
  @dataType: DISCore|QName
  @multipleProperties: DISCore|Single
  @ecore:propKey: t

ErrDef:
  @QName: check-character-normalization-failure
  @errname: check-character-normalization-failure
  @enDesc:
    If the <cfg::check-character-normalization> configuration parameter
    is set to <DOM::true> and a sequence of characters is encountered
    that fails normalization checking.  <SRC::DOM Level 3 Core>
    <SRC::DOM Level 3 LS>
  @c:severity: DOMCore|SEVERITY_ERROR

ErrDef:
  @QName: cdata-sections-splitted
  @errname: cdata-sections-splitted
  @enDesc:
    If the <cfg::split-cdata-sections> configuration parameter
    is set to <DOM::true> and a <XML::CDATA> section is split.
  @c:severity: DOMCore|SEVERITY_WARNING
  @c:relatedData:
    @@enDesc:
      The first <IF::DOMXML:CDATASection> node in document order
      resulting from the split.

ErrDef:
  @QName: wf-invalid-character-in-node-name
  @errname: wf-invalid-character-in-node-name
  @enDesc:
    If the <cfg::well-formed> configuration parameter is set to 
    <DOM::true> and a <A::Node.nodeName> contains invalid character
    according to its node type.

    Or, in <IF::DOMLS|LSSerializer>, if a character that cannot 
    be represented in the output character encoding is occurred
    within markup.
  @c:severity: DOMCore|SEVERITY_ERROR

ErrDef:
  @QName: wf-invalid-character
  @errname: wf-invalid-character
  @enDesc:
    If the <cfg::well-formed> configuration parameter is set to
    <DOM::true> and the text content inside <IF::Attr>, <IF::Element>,
    <IF::Comment>, <IF::Text>, or <IF::DOMXML:CDATASection> node
    or the data inside <IF::DOMXML:ProcessingInstruction> node contains
    invalid characters.

    Or, in <IF::DOMLS:LSSerializer>, if the <cfg::split-cdata-sections>
    parameter is set to <DOM::false> and a <IF::DOMXML:CDATASection>
    node contains characters that cannot be represented in the
    specified output encoding.  This error is not recoverable.
  @DOMCore:severity: DOMCore|SEVERITY_ERROR

ResourceDef:
  @For: =ManakaiDOM|all
  @rdf:type: rdfs|Resource
  @QName: DOMCore|TextNode
  @dxm:nodeTypeName: x

ResourceDef:
  @For: =ManakaiDOM|all
  @rdf:type: rdfs|Resource
  @QName: DOMCore|DocumentFragmentNode
  @dxm:nodeTypeName: f

IFCls3Def:
  @IFQName: DOMErrorHandler
  @ClsQName: ManakaiDOMErrorHandler

  @enDesc:
    The <IF::DOMErrorHandler> is a callback interface that the DOM
    implementation can call when reporting errors that happens
    while processing (e.g. parsing an XML entity or validating a 
    document).

    A <IF::DOMErrorHandler> object can be attached to a <IF::Document>
    using the <cfg::error-handler> parameter on the <A::Document.domConfig>
    object.  DOM applications can create their own 
    <IF::DOMErrorHandler> objects to process reported errors.

    If more than one error need to be reported during an operation,
    the sequence and numbers of the errors passed to the error
    handler are implementation dependent <SRC::<CITE::DOM Level 3 Core>>.

    Mutations to the document from within an error handler
    will result in implementation dependent behavior.

  @enDesc:
    @@ddid: perl
    @@ForCheck: ManakaiDOM|ManakaiDOM
    @@@:
      For manakai's Perl binding, any parameter that accepts
      a <IF::DOMErrorHandler> would also accept a Perl code
      reference (subroutine reference).  The code reference
      will be blessed as a <IF::DOMErrorHandler> whose
      <M::DOMErrorHandler.handleError> method call would
      invoke the code.

  @ResourceDef:
    @@rdf:type: DISLang|InputProcessor
    @@rdf:type: DISLang|OutputProcessor
    @@PerlDefC:
      $INPUT = bless $INPUT, <ClassName::ManakaiDOMErrorHandler>
        if ref $INPUT eq 'CODE';

  @Method:
    @@Name: handleError
    @@enDesc:
      Handles an error.  DOM implementation calls when an
      error occurs.
    @@Param:
      @@@Name: error
      @@@Type: DOMError
      @@@enDesc:
        The error object that describes the error.
        
        {NOTE:: This object may be reused by the implementation across multiple
                calls to the <M::DOMErrorHandler.handleError> method.
        }
    @@Return:
      @@@Type: idl|boolean||ManakaiDOM|all
      @@@enDesc:
        Whether the processing should be continued or not.
         
        If an exception is thrown from the method, it is considered
        to be equivalent of returning <DOM::true>.
      @@@TrueCase:
        @@@@enDesc:
          The processing may continue depending on <A::DOMError.severity>.
      @@@FalseCase:
        @@@@enDesc:
          The implementation should stop the current processing when
          possible.
      @@@PerlDef:
        goto &$self;
##DOMErrorHandler

IFCls3Def:
  @IFQName: DOMLocator
  @ClsQName: ManakaiDOMLocator

  @enDesc:
    The <IF::DOMLocator> interface describes a location (e.g.
    where an error occurred).

  @Attr:
    @@Name: lineNumber
    @@enDesc:
      The line number the locator is pointing to.
    @@Type: idl|long||ManakaiDOM|all
    @@Get:
      @@@InCase:
        @@@@intValue: -1
        @@@@enDesc:
          There is no line number available.
      @@@enImplNote:
              <QUOTE::Column> in the DOM 3 Specification should be 
              <QUOTE::line>?  Or is this description correct?
      @@@enImplNote:
        @@@@ddid: origin
        @@@@@: Zero-origin or one-origin?
      @@@PerlDef:
        $r = defined $self->{line_number} ? $self->{line_number} : -1;

  @Attr:
    @@Name: columnNumber
    @@enDesc:
      The column number the locator is pointing to.
    @@Type: idl|long||ManakaiDOM|all
    @@Get:
      @@@InCase:
        @@@@intValue: -1
        @@@@enDesc:
          There is no column number available.
      @@@enImplNote:
        @@@@ddid: origin
        @@@@@: Zero-origin or one-origin?
      @@@PerlDef:
        $r = defined $self->{column_number} ? $self->{column_number} : -1;

  @Attr:
    @@Name: byteOffset
    @@enDesc:
      The byte ofset into the input source the locator is pointin to.
    @@Type: idl|long||ManakaiDOM|all
    @@Get:
      @@@InCase:
        @@@@intValue: -1
        @@@@enDesc:
          There is no byte offset available.
      @@@PerlDef:
        $r = defined $self->{byte_offset} ? $self->{byte_offset} : -1;

  @Attr:
    @@Name: utf16_offset
    @@plMName: utf16_offset
    @@enDesc:
      The UTF-16 offset into the input source the locator is pointing
      to.
    @@enImplNote:
      The manakai binding has decided that the method name is 
      <Perl::utf16_offset> rather than <Perl::utf_16_offset>,
      since the later is ugly and there is <Perl::utf8> pragma in Perl.
    @@Type: idl|long||ManakaiDOM|all
    @@Get:
      @@@InCase;
        @@@@intValue: -1
        @@@@enDesc:
          There is no UTF-16 offset available.
      @@@PerlDef:
        $r = defined $self->{utf16_offset} ? $self->{utf16_offset} : -1;

  @Attr:
    @@Name: utf32Offset
    @@plMName: utf32_offset
    @@enDesc:
      The UTF-32 offset into the input source the locator is pointing
      to.

        {NOTE:: This attribute is a manakai extension.
        }
    @@For: ManakaiDOM|ManakaiDOM
    @@Type: idl|long||ManakaiDOM|all
    @@Get:
      @@@InCase;
        @@@@intValue: -1
        @@@@enDesc:
          There is no UTF-32 offset available.
      @@@PerlDef:
        $r = defined $self->{utf32_offset} ? $self->{utf32_offset} : -1;

  @Attr:
    @@Name: relatedNode
    @@enDesc:
      The node the locator is pointing to.
    @@Type: Node
    @@Get:
      @@@nullCase:
        @@@@enDesc:
          The is no node available.
      @@@PerlDef:
        $r = $self->{related_node};

  @Attr:
    @@Name: uri
    @@enDesc:
      The URI the locator is pointing to.
    @@Type: DOMMain|DOMString
    @@dis:actualType: ManakaiDOM|ManakaiDOMURI
    @@Get:
      @@@nullCase:
        @@@@enDesc:
          No URI is available.
      @@@enImplNote:
        Is fragment identifier allowed?
      @@@PerlDef:
        $r = $self->{uri};

  @ResourceDef:
    @@rdf:type: DISLang|InputProcessor
    @@rdf:type: DISLang|OutputProcessor
    @@PerlDefC:
      $INPUT = bless $INPUT, <ClassName::ManakaiDOMLocator>
        if ref $INPUT eq 'HASH';
##DOMLocator

ElementTypeBinding:
  @Name: plMName
  @ElementType:
    DISPerl:methodName
  @ShadowContent:
    @@For: ManakaiDOM|Perl

IFCls3Def:
  @IFQName: DOMConfiguration
  @ClsQName: ManakaiDOMConfiguration
  
  @ClsISA: ManakaiDOM|ManakaiDOMObject

  @enDesc:
    The <IF::DOMConfiguration> interface represents the configuration
    of a document and maintains a table of recognized parameters.
    Using the configuration, it is possible to change behavior 
    of methods such as <M::Document.normalizeDocument>.

  @enDesc:
    @@ddid:es
    @@For: ManakaiDOM|ECMAScript
    @@@:
      In addition of having <IF::DOMConfiguration> parameters exposed
      to applications using methods in the interface,  those
      parameters are also exposed as ECMAScript properties on
      the <IF::DOMConfiguration> object.  The name of a parameter
      is converted into a property name using a camel-case
      convention: the <CHAR::HYPHEN-MINUS> character is removed and
      the following character is being replaced by its uppercase
      equivalent.

  @enDesc:
    @@ddid:perl
    @@For: ManakaiDOM|ManakaiDOM
    @@@:
      For manakai's Perl binding, a <IF::DOMConfiguration> object
      can be dereferenced as if it is a reference to the hash
      which consists of all pairs of parameter names and values.
      In addition, applications can access values by hash keys
      in camel-case convention as in ECMAScript binding.

  @ResourceDef:
    @@QName: DOMCore|getConfigObject
    @@rdf:type: DISPerl|BlockCode
    @@ForCheck: ManakaiDOM|ForClass
    @@enDesc:
      Creates a new instance of the <IF::DOMConfiguration> interface
      based on a underlying object <P::$target> (e.g. a <IF::Document>).
    @@PerlDef:
      $result = bless [$target, $targetHash, $targetType],
                      <ClassName::ManakaiDOMConfiguration>;

  @IntMethod:
    @@Operator:
      @@@@: TIEHASH
      @@@ContentType: DISPerl|Perl
    @@ManakaiDOM:isStatic:1
    @@rdf:type: DISPerl|Constructor
    @@enDesc:
      Returns a reference through which the <IF::DOMConfiguration>
      object will be accessed.
    @@Param:
      @@@Name: domConfig
      @@@Type: DOMConfiguration
      @@@enDesc:
        The <IF::DOMConfiguration> object tied to a hash.
    @@Return:
      $r = $domConfig;

  @Method:
    @@Name: setParameter
    @@enDesc:
      Sets the value of a parameter.
    @@Param:
      @@@Name: name
      @@@Type: DOMMain|DOMString
      @@@dis:actualType: DOMConfigurationParameterName
      @@@enDesc:
        The name of the parameter to set.
    @@Param:
      @@@Name: value
      @@@Type: DOMMain|DOMUserData
      @@@enDesc:
        The new value of the parameter.

        While the type of the <P::value> parameter is defined as 
        <TYPE::DOMMain|DOMUserData>, the object type must match
        the type defined by the definition of the parameter.
      @@@nullCase:
        @@@@enDesc:
          Unsets the parameter.
    @@Return:
      @@@raises:
        @@@@@: NOT_RECOGNIZED_CONFIG_PARAM_ERR
        @@@@enDesc:
          The parameter <P::name> is not recognized.
      @@@raises:
        @@@@@: NOT_SUPPORTED_CONFIG_VALUE_ERR
        @@@@enDesc:
          The parameter <P::name> is recognized but the
          requested <P::value> cannot be set.
      @@@raises:
        @@@@@: INCOMPATIBLE_CONFIG_VALUE_ERR
        @@@@enDesc:
          The <P::value> type for the parameter is 
          incompatible with the expected value type.
      @@@PerlDef:
        my $p = $Message::DOM::DOMCore::ManakaiDOMConfiguration{$self->[2]}
                ->{$name};
        unless (defined $p) {
          __EXCEPTION{NOT_RECOGNIZED_CONFIG_PARAM_ERR::
            MDOMX:param-name => 'name',
            DOMCore:domConfigurationParameterName => {$name},
          }__;
        }
        if (defined $value) {
          if (defined $p->{setter}) {
            __DEEP{
              $p->{setter}->($self, $name => $value);
            }__;
          } elsif ($p->{type} eq 'object') {
            unless (UNIVERSAL::isa ($value, $p->{otype})) {
              __EXCEPTION{INCOMPATIBLE_CONFIG_VALUE_ERR::
                MDOMX:param-name => 'value',
                DOMCore:domConfigurationParameterName => {$name},
                DOMCore:domConfigurationParameterValue => {$value},
              }__;
            }
            $self->[1]->{$p->{iname}} = $value;
          } elsif ($p->{type} eq 'string') {
            $self->[1]->{$p->{iname}} = '' . $value;
          } else {  ## boolean
            my $v = $value ? true : false;
            unless ($p->{vsupport}->[$v]) {
              __EXCEPTION{NOT_SUPPORTED_CONFIG_VALUE_ERR::
                MDOMX:param-name => 'value',
                DOMCore:domConfigurationParameterName => {$name},
                DOMCore:domConfigurationParameterValue => {$value},
              }__;
            }
            $self->[1]->{$p->{iname}} = $v;
          }
          for (keys %{$p->{setparam}}) {
            $self->[1]->{$_} = $p->{setparam}->{$_};
            ## NOTE: Setting setter-defined parameters are not supported.
            ##       In addition, parameter value set here might not be
            ##       supported by the implementation.
          }
        } else { # unset
          if (defined $p->{unsetter}) {
            __DEEP{
              $p->{unsetter}->($self, $name);
            }__;
          } elsif (defined $p->{setter}) {
            __DEEP{
              $p->{setter}->($self, $name => null);
            }__;
          } else {
            CORE::delete $self->[1]->{$p->{iname}};
            for (keys %{$p->{setparam}}) {
              $self->[1]->{$_} = $p->{setparam}->{$_};
            }
          }
        }

  @IntMethod:
    @@Operator:
      @@@@: STORE
      @@@ContentType: DISPerl|Perl
    @@enDesc:
      This method will be triggered every time an item in the tied
      hash is set.
    @@Param:
      @@@Name: key
      @@@Type: DOMString
      @@@enDesc:
        The key of the value to set.  It must be either a
        parameter name or its camel-case variant in ECMAScript binding.
    @@Param:
      @@@Name: value
      @@@Type: DOMMain|DOMUserData
      @@@enDesc:
        The value to put.
      @@@nullCase:
        @@@@enDesc:
          The parameter value is unset.
    @@Return:
      @@@raises:
        @@@@@: NOT_RECOGNIZED_CONFIG_PARAM_ERR
        @@@@enDesc:
          The <P::key> is not a recognizable parameter name.
      @@@raises:
        @@@@@: NOT_SUPPORTED_CONFIG_VALUE_ERR
        @@@@enDesc:
          The parameter <P::key> is recognized but the
          requested <P::value> cannot be set.
      @@@raises:
        @@@@@: INCOMPATIBLE_CONFIG_VALUE_ERR
        @@@@enDesc:
          The <P::value> type for the parameter is
          incompatible with the expected value type.
      @@@PerlDef:
        my $p = $Message::DOM::DOMCore::ManakaiDOMConfiguration{$self->[2]}
                ->{lc $key};
        __DEEP{
          if (defined $p) {
            $self-><M::DOMConfiguration.setParameter> ($key => $value);
          } else {
            $key =~ s/([A-Z])/'-'.lc $1/ge;
            $self-><M::DOMConfiguration.setParameter> ($key => $value);
          }
        }__;

  @IntMethod:
    @@Operator:
      @@@@: DELETE
      @@@ContentType: DISPerl|Perl
    @@enDesc:
      This method will be triggered every time an item in the tied
      hash is removed.  It unsets the parameter value to the default.
    @@Param:
      @@@Name: key
      @@@Type: DOMString
      @@@enDesc:
        The key of the value to unset.  It must be either a
        parameter name or its camel-case variant in ECMAScript binding.
    @@Return:
      @@@Type: DOMString
      @@@raises:
        @@@@@: NOT_RECOGNIZED_CONFIG_PARAM_ERR
        @@@@enDesc:
          The <P::key> is not a recognizable parameter name.
      @@@PerlDef:
        my $p = $Message::DOM::DOMCore::ManakaiDOMConfiguration{$self->[2]}
                ->{lc $key};
        __DEEP{
          unless (defined $p) {
            $key =~ s/([A-Z])/'-'.lc $1/ge;
          }
          if (defined wantarray) {
            $r = $self-><M::DOMConfiguration.getParameter> ($key);
          }
          $self-><M::DOMConfiguration.setParameter> ($key => null);
        }__;

  @IntMethod:
    @@Operator:
      @@@@: CLEAR
      @@@ContentType: DISPerl|Perl
    @@enDesc:
      This method will be triggered when the whole hash is to be cleared.
      It resets all configurations.
    @@Return:
      @@@PerlDef:
        __DEEP{
          for (keys %{
            $Message::DOM::DOMCore::ManakaiDOMConfiguration{$self->[2]}
          }) {
            $self-><M::DOMConfiguration.setParameter> ($_ => null);
          }
        }__;

  @Method:
    @@Name: getParameter
    @@enDesc:
      Returns the value of a parameter, if known.
    @@Param:
      @@@Name: name
      @@@Type: DOMMain|DOMString
      @@@dis:actualType: DOMConfigurationParameterName
      @@@enDesc:
        The name of the parameter.
    @@Return:
      @@@Type: DOMMain|DOMUserData
      @@@enDesc:
        The current object associated with the specified parameter.
      @@@nullCase:
        @@@@enDesc:
          No object has been associated or the parameter
          is not supported.
      @@@raises:
        @@@@@: NOT_RECOGNIZED_CONFIG_PARAM_ERR
        @@@@enDesc:
          The parameter <P::name> is not recognized.
      @@@PerlDef:
        my $p = $Message::DOM::DOMCore::ManakaiDOMConfiguration{$self->[2]}
                ->{$name};
        unless (defined $p) {
          __EXCEPTION{NOT_RECOGNIZED_CONFIG_PARAM_ERR::
            MDOMX:param-name => 'name',
            DOMCore:domConfigurationParameterName => {$name},
          }__;
        }
        __DEEP{
          $r = defined $p->{getter} ? $p->{getter}->($self, $name) :
               exists $self->[1]->{$p->{iname}} ? $self->[1]->{$p->{iname}} :
               defined $p->{get_default} ? $p->{get_default}->($self, $name) :
               $p->{default};
        }__;

  @IntMethod:
    @@Operator:
      @@@@: FETCH
      @@@ContentType: DISPerl|Perl
    @@enDesc:
      This method will be triggered every time an item in the tied
      hash is read.
    @@Param:
      @@@Name: key
      @@@Type: DOMString
      @@@enDesc:
        The key of the value to fetch.  It must be either a
        parameter name or its camel-case variant in ECMAScript binding.
    @@Return:
      @@@Type: DOMMain|DOMUserData
      @@@enDesc:
        The value <M::DOMConfiguration.getParameter> would return.
      @@@raises:
        @@@@@: NOT_RECOGNIZED_CONFIG_PARAM_ERR
        @@@@enDesc:
          The <P::key> is not a recognizable parameter name.
      @@@PerlDef:
        my $p = $Message::DOM::DOMCore::ManakaiDOMConfiguration{$self->[2]}
                ->{lc $key};
        __DEEP{
          if (defined $p) {
            $r = $self-><M::DOMConfiguration.getParameter> ($key);
          } else {
            $key =~ s/([A-Z])/'-'.lc $1/ge;
            $r = $self-><M::DOMConfiguration.getParameter> ($key);
          }
        }__;

  @Method:
    @@Name: canSetParameter
    @@enDesc:
      Checks whether setting a parameter to a specific value is supported
      or not.  The current value of the parameter itself is <EM::not> changed.
    @@Param:
      @@@Name: name
      @@@Type: DOMMain|DOMString
      @@@dis:actualType: DOMConfigurationParameterName
      @@@enDesc:
        The name of the parameter to check.
    @@Param:
      @@@Name: value
      @@@Type: DOMMain|DOMUserData
      @@@enDesc:
        The object to set.
      @@@nullCase:
        @@@@enDesc:
          <DOM::true> would be returned.
    @@Return:
      @@@Type: idl|boolean||ManakaiDOM|all
      @@@TrueCase:
        @@@@enDesc:
          The parameter could not be successfully set to the specified
          <P::value>.
      @@@FalseCase:
        @@@@enDesc:
          The parameter is not recognized or the requested value is
          not supported.
      @@@PerlDef:
        my $p = $Message::DOM::DOMCore::ManakaiDOMConfiguration{$self->[2]}
                ->{$name};
        if (defined $p) {  ## Recognized
          if (defined $value) {
            if (defined $p->{checker}) {
              __DEEP{
                $r = $p->{checker}->($self, $name => $value);
              }__;
            } elsif ($p->{type} eq 'object') {
              $r = true if UNIVERSAL::isa ($value, $p->{otype});
            } elsif ($p->{type} eq 'boolean') {
              $r = $p->{vsupport}->[$value ? true : false];
            } else { ## string
              $r = true;
            }
          } else {
            $r = true;
          }
        }

  @IntMethod:
    @@Operator:
      @@@@: EXISTS
      @@@ContentType: DISPerl|Perl
    @@enDesc:
      This method will be triggered when the user uses the
      <Perl::exists> function on the hash.  It returns <DOM::true>
      if the implementation recognizes the parameter name.
    @@Param:
      @@@Name: key
      @@@Type: DOMString
      @@@enDesc:
        The key.  It must be either a
        parameter name or its camel-case variant in ECMAScript binding.
    @@Return:
      @@@Type: idl|boolean||ManakaiDOM|all
      @@@PerlDef:
        my $p = $Message::DOM::DOMCore::ManakaiDOMConfiguration{$self->[2]}
                ->{lc $key};
        if (defined $Message::DOM::DOMCore::ManakaiDOMConfiguration{$self->[2]}
                    ->{lc $key}) {
          $r = true;
        } else {
          $key =~ s/([A-Z])/'-'.lc $1/ge;
          $r = true
            if $Message::DOM::DOMCore::ManakaiDOMConfiguration{$self->[2]}
                    ->{$key};
        }

  @Attr:
    @@Name: parameterNames
    @@enDesc:
      The list of the parameters supported by the <IF::DOMConfiguration>
      object and for which at least one value can be set by the application.
 
      {NOTE:: This list can also contain parameter names defined
              outside the W3C DOM specifications.
      }
    @@Get:
      @@@Type: DOMStringList
      @@@enDesc:
        The list of parameter names.
      @@@enDesc:
        @@@@ddid:order
        @@@@@:
          The order of the parameter names are undefined.
        @@@@ForCheck: ManakaiDOM|ManakaiDOM
      @@@PerlDef:
        $r = bless [
          keys %{$Message::DOM::DOMCore::ManakaiDOMConfiguration{$self->[2]}}
        ], <ClassName::ManakaiDOMStringList>;

  @IntMethod:
    @@Operator:
      @@@@: FIRSTKEY
      @@@ContentType: DISPerl|Perl
    @@Return:
      @@@Type: DOMString
      @@@PerlDef:
        my $a = keys %{
          $Message::DOM::DOMCore::ManakaiDOMConfiguration{$self->[2]}
        };  # reset
        $r = each %{
          $Message::DOM::DOMCore::ManakaiDOMConfiguration{$self->[2]}
        };

  @IntMethod:
    @@Operator:
      @@@@: NEXTKEY
      @@@ContentType: DISPerl|Perl
    @@Param:
      @@@Name: lastKey
      @@@Type: DOMString
    @@Return:
      @@@Type: DOMString
      @@@PerlDef:
        $r = each %{
          $Message::DOM::DOMCore::ManakaiDOMConfiguration{$self->[2]}
        };
##DOMConfiguration

ElementTypeBinding:
  @Name: StringDataTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|DataType
    @@rdfs:subClassOf: DOMMain|DOMString
    @@ForCheck: ManakaiDOM|ManakaiDOM !=ManakaiDOM|ManakaiDOM

StringDataTypeDef:
  @QName: DOMConfigurationParameterName
  @FullName:
    @@lang:en
    @@@:
      parameter name in <IF::DOMConfiguration>
  @For: ManakaiDOM|DOM3
  @enDesc:
    The parameter names used by the <IF::DOMConfiguration> object.
    They are case-insensitive.

    To avoid possible conflicts, as a convention, names referring to
    parameters defined outside the DOM specification should be
    made unique.  Because parameters are exposed as properties in the
    ECMAScript language binding, names are recommended to follow the
    <CSECTION::5.16 Identifiers> or latest version of <CITE::The Unicode
    Standard> with the addition of the character <CHAR::HYPHEN-MINUS>
    but it is not enforced by the DOM implementation.
    <SRC::DOM Level 3 Core>
  @ResourceDef:
    @@rdf:type: DISLang|InputProcessor
    @@PerlDefC:
      $INPUT = lc $INPUT;


PropDef:
  @QName: hasFeature
  @Description:
    @@lang:en
    @@@:
      For <IF::Document> nodes: what features the subject node has. 
      \
      Whether a document supports a feature or not is different from 
      whether a node implementation supports a feature or not; for 
      example, an <Feature::XML>-aware node implementation might be 
      instantiated for a pure (non-XML) HTML node object. 
      \
      {P:: Whether a document supports the <Feature::HTML> feature or not 
           is significant for:
        \
        - <A::Node.baseURI>.
        \
      }
      \
      {P:: Whether a document supports the <Feature::XML> feature or not 
           is significant for:
        \
        - <A::Document.xmlVersion>, 
        \
        - <A::Document.xmlEncoding>, 
        \
        - <M::Document.createAttributeNS> and 
        \
        - <M::Document.createElementNS>.
        \
       }
  @nodeProp: hf

ElementTypeBinding:
  @Name: cfgname
  @ElementType:
    DOMCore:domConfigurationParameterName
  @ShadowContent:
    @@ContentType: DISCore|String

boolCParam:
  @QName: canonical-form
  @cfgname: canonical-form
  @nodeProp: canon
  @IsSupportRequired:1
  @resourceFor: ForDocument
  @DOMCore:targetType: c|Document
  @TrueCase:
    @@enDesc:
        Canonicalizes the document according to the rules specified in
        the <CITE::XML Canonicalization Version 1.0> specification.

        {NOTE:: The effect of this value is limited to what can be
                represented in the DOM; in particular, there is no
                way to specify the order of the attributes in the DOM.
        }

    @@SetParam:
      @@@@: entities
      @@@boolValue:0
    @@SetParam:
      @@@@: normalize-characters
      @@@boolValue:0
    @@SetParam:
      @@@@: cdata-sections
      @@@boolValue:0
    @@SetParam:
      @@@@: namespaces
      @@@boolValue:1
    @@SetParam:
      @@@@: namespace-declarations
      @@@boolValue:1
    @@SetParam:
      @@@@: well-formed
      @@@boolValue:1
    @@SetParam:
      @@@@: element-content-whitespace
      @@@boolValue:1
  @FalseCase:
    @@IsSupportRequired:1
    @@IsDefault:1
    @@enDesc:
      Does not canonicalize the document.

boolCParam:
  @QName: c|cdata-sections
  @cfgname: cdata-sections
  @nodeProp: pcdsect
  @IsSupportRequired:1
  @c:targetType: c|Document
  @TrueCase:
    @@IsSupportRequired:1
    @@IsDefault: 1
    @@enDesc:
      Keeps <IF::DOMXML:CDATASection> nodes in the document.
    @@SetParam:
      @@@@: canonical-form
      @@@boolValue:0
  @FalseCase:
    @@IsSupportRequired:1
    @@enDesc:
      Transforms <IF::DOMXML:CDATASection> nodes in the document
      into <IF::Text> nodes.  The new <IF::Text> node is then
      combined with any adjacent <IF::Text> node.

boolCParam:
  @QName: check-character-normalization
  @cfgname: check-character-normalization
  @nodeProp: charnormc
  @IsSupportRequired:1
  @DOMCore:targetType: DOMCore|Document
  @TrueCase:
    @@enDesc:
      Checks if the characters in the document are fully normalized
      <SRC::XML 1.1 Appendix B>.

      When a sequence of characters is encountered that fails normalization
      checking, an error with the <A::DOMError.type> equals to
      <ERR::check-character-normalization-failure> is issued.
  @FalseCase:
    @@IsSupportRequired:1
    @@IsDefault:1
    @@enDesc:
      Does not check if characters in document are normalized.

boolCParam:
  @QName: comments
  @cfgname: comments
  @nodeProp: pcom
  @IsSupportRequired:1
  @DOMCore:targetType: DOMCore|Document
  @TrueCase:
    @@IsSupportRequired:1
    @@IsDefault:1
    @@enDesc:
      Keeps <IF::Comment> nodes in the document.
  @FalseCase:
    @@IsSupportRequired:1
    @@enDesc:
      Discards <IF::Comment> nodes in the document.

boolCParam:
  @QName: datatype-normalization
  @cfgname: datatype-normalization
  @nodeProp: tnorm
  @IsSupportRequired:1
  @DOMCore:targetType: DOMCore|Document
  @TrueCase:
    @@enDesc:
      Exposes schema normalized values in the tree.

      Since this parameter requires to have schema information,
      the <cfg::validate> parameter will also be set to <DOM::true>.
      Having this parameter activated when <cfg::validate> is <DOM::false>
      has no effect and no schema normalization will happen.

      {NOTE:: Since an XML document contains the result of the XML processing,
              this parameter does not apply to attribute value
              normalization <SRC::XML 1.0, XML 1.1> and is only
              meant for schema languages other than DTD.
      }
    @@enImplNote:
      So, tokenization-and-serialization based on <InfoProp::attribute type>
      will not happen.
    @@SetParam:
      @@@@: validate
      @@@boolValue:1
  @FalseCase:
    @@IsSupportRequired:1
    @@IsDefault:1
    @@enDesc:
      Does not perform schema normalization on the tree.

boolCParam:
  @QName: element-content-whitespace
  @cfgname: element-content-whitespace
  @nodeProp: pecws
  @DOMCore:targetType: DOMCore|Document
  @IsSupportRequired:1
  @TrueCase:
    @@IsSupportRequired:1
    @@IsDefault:1
    @@enDesc:
      Keeps all white space characters in the document.
  @FalseCase:
    @@enDesc:
      Discards all <IF::Text> nodes that contain white space
      in element content, i.e. whose <A::Text.isElementContentWhitespace>
      is <DOM::true>.
    @@SetParam:
      @@@@: canonical-form
      @@@boolValue:0

boolCParam:
  @QName: c|entities
  @cfgname: entities
  @nodeProp: pent
  @c:targetType: c|Document
  @IsSupportRequired:1
  @TrueCase:
    @@IsSupportRequired:1
    @@IsDefault: 1
    @@enDesc:
      Keeps <IF::DOMXML:EntityReference> nodes in the document.
    @@SetParam:
      @@@@: canonical-form
      @@@boolValue:0
  @FalseCase:
    @@IsSupportRequired:1
    @@enDesc:
      Removes all <IF::DOMXML:EntityReference> nodes from the documents,
      putting the entity expansions directly in their place.  <IF::Text>
      nodes are normalized as defined in <M::Node.normalize>.
      Only unexpanded entity references are kept in the document.

      {NOTE:: This parameter does not affect <IF::DOMXML:Entity> nodes.
      }

CParam:
  @QName: error-handler
  @cfgname: error-handler
  @nodeProp: onerr
  @Type: DOMCore|DOMErrorHandler
  @DOMCore:targetType: DOMCore|Document
  @IsSupportRequired:1
  @enDesc:
    This parameter contains a <IF::DOMErrorHandler> object.  If
    an error is encountered in the document, the implementation
    will call back the <IF::DOMErrorHandler> registered to the
    document using this parameter.

    {NOTE:: The implementation may provide a default <IF::DOMErrorHandler>
            object.
    }

    When a <IF::DOMErrorHandler> is called, the
    <A::DOMError.relatedData> attribute will contain the closest
    node to where the error occurred.  If the implementation is 
    unable to determine the node where the error occurs, then
    <A::DOMError.relatedData> will contain the <IF::Document> node.
    Mutations to the document from within an error handler
    will result in implementation dependent behavior.

  @enImplNote:
    {html5:p:: This parameter is used in:

        - <M::Document.normalizeDocument>::: If errors occurs, such as an 
          attempt to update a read-only node or a <A::Node.nodeName> 
          contains an invalid character.  This method might report 
          fatal errors.

    }

  @Method:
    @@rdf:type: DOMCore|DOMConfigurationParameterDefaultGetter
    @@Param:
      @@@Name: name
      @@@Type: DOMMain|DOMString
      @@@dis:actualType: DOMConfigurationParameterName
      @@@enDesc: The parameter name.
    @@Return:
      @@@Type: DOMErrorHandler
      @@@enDesc:
        An error handler that returns <DOM::true> (to advise the process
        to continue) if and only if the <A::DOMError.severity>
        is not <C::DOMError.SEVERITY_FATAL_ERROR>.
      @@@PerlDefC:
        $r = sub {
          my (undef, $err) = @_;
          CORE::warn $err;
          return ($err-><AG::DOMError.severity> !=
                  <C::DOMError.SEVERITY_FATAL_ERROR>);
        };
  @Method:
    @@rdf:type: DOMCore|DOMConfigurationParameterSetter
    @@Param:
      @@@Name: name
      @@@Type: DOMMain|DOMString
      @@@dis:actualType: DOMConfigurationParameterName
      @@@enDesc: The parameter name.
    @@Param:
      @@@Name: value
      @@@Type: DOMMain|DOMUserData
      @@@dis:actualType: DOMErrorHandler
      @@@enDesc: The new value.
    @@Return:
      @@@Type: idl|void||ManakaiDOM|all
      @@@PerlDefC:
        $self->[1]->{<H::DOMCore:error-handler>} = $value;
    @@enImplNote:
      Implied input processor converts non-blessed code references
      into a <IF::DOMErrorHandler> object.
  @Method:
    @@rdf:type: DOMCore|DOMConfigurationParameterChecker
    @@Param:
      @@@Name: name
      @@@Type: DOMMain|DOMString
      @@@dis:actualType: DOMConfigurationParameterName
      @@@enDesc: The parameter name.
    @@Param:
      @@@Name: value
      @@@Type: DOMMain|DOMUserData
      @@@dis:actualType: DOMErrorHandler
      @@@enDesc: The new value.
    @@Return:
      @@@Type: idl|boolean||ManakaiDOM|all
      @@@PerlDefC:
        $r = UNIVERSAL::isa ($value, <IFName::DOMErrorHandler>);
    @@enImplNote:
      Implied input processor converts non-blessed code references
      into a <IF::DOMErrorHandler> object.

boolCParam:
  @QName: infoset
  @cfgname: infoset
  @IsSupportRequired:1
  @DOMCore:targetType: DOMCore|Document
  @TrueCase:
    @@IsSupportRequired:1
    @@enDesc:
      Keeps the information defined in the <CITE::XML Information Set>
      in the document.
    @@SetParam:
      @@@@: validate-if-schema
      @@@boolValue:0
    @@SetParam:
      @@@@: entities
      @@@boolValue:0
    @@SetParam:
      @@@@: datatype-normalization
      @@@boolValue:0
    @@SetParam:
      @@@@: cdata-sections
      @@@boolValue:0
    @@SetParam:
      @@@@: namespace-declarations
      @@@boolValue:1
    @@SetParam:
      @@@@: well-formed
      @@@boolValue:1
    @@SetParam:
      @@@@: element-content-whitespace
      @@@boolValue:1
    @@SetParam:
      @@@@: comments
      @@@boolValue:1
    @@SetParam:
      @@@@: namespaces
      @@@boolValue:1
    @@enImplNote:
          <M::DOMConfiguration.getParameter> with this parameter 
          returns <DOM::true> iif <CODE::!<DOM::validate-if-schema> && 
          !<DOM::entities> && !<DOM::datatype-normalization> && 
          !<DOM::cdata-sections> && <DOM::namespace-declarations> && 
          <DOM::well-formed> && <DOM::element-content-whitespace> && 
          <DOM::comment> && <DOM::namespaces>>.
  @FalseCase:
    @@enDesc:
      Setting <cfg::infoset> parameter to <DOM::false> has no effect.
  @Method:
    @@rdf:type: DOMCore|DOMConfigurationParameterGetter
    @@Param:
      @@@Name: name
      @@@Type: DOMMain|DOMString
      @@@dis:actualType: DOMConfigurationParameterName
      @@@enDesc: The name of the parameter.
    @@Return:
      @@@Type: idl|boolean||ManakaiDOM|all
      @@@PerlDefC:
        __DEEP{
          $r = !$self-><M::DOMConfiguration.getParameter>
                                               ('validate-if-schema') &&
               !$self-><M::DOMConfiguration.getParameter>
                                               ('entities') &&
               !$self-><M::DOMConfiguration.getParameter>
                                               ('datatype-normalization') &&
               !$self-><M::DOMConfiguration.getParameter>
                                               ('cdata-sections') && 
                $self-><M::DOMConfiguration.getParameter>
                                               ('namespace-declarations') &&
                $self-><M::DOMConfiguration.getParameter>
                                               ('well-formed') &&
                $self-><M::DOMConfiguration.getParameter>
                                               ('element-content-whitespace') &&
                $self-><M::DOMConfiguration.getParameter>
                                               ('comment') && 
                $self-><M::DOMConfiguration.getParameter>
                                               ('namespaces');
        }__;
  @Method:
    @@rdf:type: DOMCore|DOMConfigurationParameterSetter
    @@Param:
      @@@Name: name
      @@@Type: DOMMain|DOMString
      @@@dis:actualType: DOMConfigurationParameterName
      @@@enDesc: The parameter name.
    @@Param:
      @@@Name: value
      @@@Type: DOMMain|DOMUserData
      @@@dis:actualType: idl|boolean||ManakaiDOM|all
      @@@enDesc: The new value.
    @@Return:
      @@@Type: idl|void||ManakaiDOM|all
      @@@PerlDefC:
        ## TODO: Warning
##infoset

boolCParam:
  @QName: namespaces
  @cfgname: namespaces
  @nodeProp: nsaware
  @IsSupportRequired:1
  @DOMCore:targetType: DOMCore|Document
  @TrueCase:
    @@IsSupportRequired:1
    @@IsDefault:1
    @@enDesc:
      Performes the namespace processing as defined in the
      <CSECTION::Namespace Normalization> section of
      <CITE::DOM Level 3 Core> specification for <IF::DOMCore|Document>
      or as defined in XML Namespaces 1.0 and XML Namespaces 1.1
      for <IF::DOMLS|LSParser>.
  @FalseCase:
    @@enDesc:
      Does not perform the namespace processing.

      {NOTE:: The parameter <cfg::namespace-declarations> has no effect.
      }
    @@SetParam:
      @@@@: canonical-form
      @@@boolValue:0

boolCParam:
  @QName: namespace-declarations
  @cfgname: namespace-declarations
  @nodeProp: pnsattr
  @IsSupportRequired:1
  @DOMCore:targetType: DOMCore|Document
  @enDesc:
    {NOTE:: This parameter has no effect if the parameter <cfg::namespace>
            is set to <DOM::false>.
    }
  @TrueCase:
    @@IsSupportRequired:1
    @@IsDefault:1
    @@enDesc:
      Includes namespace declaration attributes, specified or defaulted
      from the schema definition, in the document.
  @FalseCase:
    @@IsSupportRequired:1
    @@enDesc:
      Discards all namespace declaration attributes.

      {NOTE:: The namespace prefixes, i.e. <A::Node.prefix> values,
              are retained.
      }
    @@SetParam:
      @@@@: canonical-form
      @@@boolValue:0

boolCParam:
  @QName: c|normalize-characters
  @cfgname: normalize-characters
  @nodeProp: charnorm
  @IsSupportRequired:1
  @c:targetType: c|Document
  @TrueCase:
    @@IsSupportRequired:0
    @@enDesc:
      Fully normalizes characters in the document as defined
      in appendix B of the XML 1.1 specification.
    @@SetParam:
      @@@@: canonical-form
      @@@boolValue:0
  @FalseCase:
    @@IsSupportRequired: 1
    @@IsDefault:1
    @@enDesc:
      Does not perform character normalization.

CParam:
  @QName: schema-location
  @cfgname: schema-location
  @nodeProp: scloc
  @IsSupportRequired:0
  @Type: DOMMain|DOMString
  @dis:actualType: DOMMain|DOMURIs
  @DOMCore:targetType: DOMCore|Document
  @enDesc:
    The <cfg::schema-location> parameter value represents the
    schemas against which validation should occur, i.e. the
    current schema definitions.

    The value is a <TYPE::DOMMain:DOMString> containing a list
    of DOM URIs separated by white spaces (<CODE::S> in XML 1.0).

    The types of schemas referenced in the list must match the type
    specified with <cfg::schema-type>, otherwise the behavior of
    an implementation is undefined.

    The schemas specified using this paramter take precedence
    to the schema information specified in the document itself.
    For namespace aware schemas, if a schema specified using this
    parameter and a schema specified in the document instance
    in a schema document (e.g. using import mechanisms of
    schema languages) share the same target namespace, then
    the schema specified by the application using this parameter
    will be used.  If two schemas specified using this parameter
    share the same target namespace or both have no namespace, then
    the behavior is implementation dependent.

    This parameter is ignored unless the parameter <cfg::schema-type>
    is set.

    {NOTE:: It is strongly recommended in DOM Level 3 Core specification
            that <A::Document.documentURI> will be set so that an implementation
            can successfully resolve any external entities referenced.
    }
  @nullCase:
    @@IsSupportRequired:1
    @@IsDefault:1
    @@enDesc:
      No schema location has been provided.
    @@enImplNote:
      Not specfied in spec but this is default and required, isn't is?
  @Method:
    @@rdf:type: DOMCore|DOMConfigurationParameterGetter
    @@Param:
      @@@Name: name
      @@@Type: DOMMain|DOMString
      @@@dis:actualType: DOMConfigurationParameterName
      @@@enDesc: The name of the parameter.
    @@Return:
      @@@Type: DOMMain|DOMString
      @@@dis:actualType:
        @@@@@: DOMMain|DOMURIs
        @@@@ManakaiDOM:noInputNormalize:1
      @@@PerlDefC:
        my $v = $self->[1]->{<H::DOMCore:schema-location>};
        if (defined $v and @$v) {
          $r = join ' ', @$v;
        } else {
          $r = null;
        }
  @Method:
    @@rdf:type: DOMCore|DOMConfigurationParameterSetter
    @@Param:
      @@@Name: name
      @@@Type: DOMMain|DOMString
      @@@dis:actualType: DOMConfigurationParameterName
      @@@enDesc: The parameter name.
    @@Param:
      @@@Name: value
      @@@Type: DOMMain|DOMUserData
      @@@dis:actualType: DOMMain|DOMString
      @@@enDesc: The new value.
    @@Return:
      @@@Type: idl|void||ManakaiDOM|all
      @@@PerlDefC:
        $self->[1]->{<H::DOMCore:schema-location>} = $value;
##schema-location

CParam:
  @QName: schema-type
  @cfgname: schema-type
  @nodeProp: sctype
  @Type: DOMMain|DOMString
  @dis:actualType: DOMMain|ManakaiDOMSchemaType
  @IsSupportRequired:0
  @DOMCore:targetType: DOMCore|Document
  @enDesc:
    The <cfg::schema-type> parameter value is a <TYPE::DOMMain|DOMString>
    containing an absolute DOM URI.  It representsthe type of the
    schema language used to validate the document against.

    {NOTE:: No lexical checking is done on the absolute URI.
    }

  @nullCase:
    @@enDesc:
      No value is provided.

      {NOTE:: The implementation may provide a default value
              based on the schema languages supported and on
              the schema language used at load time.
      }

boolCParam:
  @QName: split-cdata-sections
  @cfgname: split-cdata-sections
  @nodeProp: splitcdsect
  @IsSupportRequired:1
  @DOMCore:targetType: DOMCore|Document
  @TrueCase:
    @@IsSupportRequired:1
    @@IsDefault:1
    @@enDesc:
      Splits <XML::CDATA> sections containing the <SGML::MSE> sequence,
      i.e. <XML::]]<gt>>.

      When a <XML::CDATA> section is split, a warning is issued with
      a <A::DOMError.type> equals to <err::cdata-sections-splitted>
      and <A::DOMError.relatedData> equals to the first
      <IF::DOMXML:CDATASection> node in document order resulting 
      from the split.
    @@enImplNote:
      What will be happen if a character that is unrepresentable
      in the serialized charset occurres?
  @FalseCase:
    @@IsSupportRequired:1
    @@enDesc:
      Signals an error if a <IF::DOMXML:CDATASection> containing an
      unrepresentable character.

boolCParam:
  @QName: validate
  @cfgname: validate
  @nodeProp: val
  @IsSupportRequired:1
  @DOMCore:targetType: DOMCore|Document
  @TrueCase:
    @@enDesc:
      Requires the validation against a schema of the document
      as it is being normalized as defined by XML 1.0.

      If validation errors are found or no schema was found, the
      error handler is notified.

      Schema normalized values will not be exposed according
      to the schema in use unless the parameter <cfg::datatype-normalization>
      is set to <DOM::true>.

      {html5::p:: This parameter will make...
 
        - Attribute nodes with <A::Attr.specified> equals to <DOM::false>;

        - The value of the <A::Text.isElementContentWhitespace> attribute
          for all <IF::Text> nodes;
  
        - The value of the <A::Attr.isId> attribute for all <IF::Attr> nodes; and

        - The value of the <A::Element.schemaTypeInfo> or 
          <A::Attr.schemaTypeInfo> attribute for all <IF::Element> and
          <IF::Attr> nodes

      ...being reevaluated.
 
      }
    @@SetParam:
      @@@@: validate-if-schema
      @@@boolValue:0
  @FalseCase:
    @@IsSupportRequired:1
    @@IsDefault:1
    @@enDesc:
      Does not accomplish schema processing.  
      Default attribute value information are kept.

      For the <IF::DOMConfiguration> object of a <IF::Document> node,
      it prevents the internal subset processing.  For the object
      of a <IF::DOMLS|LSParser>, the internal subset processing
      is always accomplished, even if the parameter is set to <DOM::false>.

      {NOTE:: Validation might still happen if <cfg::validate-if-schema>
              is set to <DOM::true>.
      }

boolCParam:
  @QName: validate-if-schema
  @cfgname: validate-if-schema
  @nodeProp: vals
  @IsSupportRequired:1
  @DOMCore:targetType: DOMCore|Document
  @TrueCase:
    @@enDesc:
      Enables validation only if a declaration for the document element
      can be found in a schema (independently of where it is found,
      i.e. XML Schema, DTD, or any other type or representation of schema).
      
      If validation is enabled, then this parameter has the same
      effect as the parameter <cfg::validate> set to <DOM::true>.

      For the <IF::DOMConfiguration> object of a <IF::Document> node,
      it prevents the internal subset processing.  For the object
      of a <IF::DOMLS|LSParser>, the internal subset processing
      is always accomplished, even if the parameter is set to <DOM::false>.
    @@SetParam:
      @@@@: validate
      @@@boolValue:0
  @FalseCase:
    @@IsSupportRequired:1
    @@IsDefault:1
    @@enDesc:
      No schema processing should be performed if the document has
      a schema, including internal subset processing.  Default attribute
      information are kept.

      {NOTE:: Validation would still happen if <cfg::validate> is <DOM::true>.
      }

boolCParam:
  @QName: well-formed
  @cfgname: well-formed
  @nodeProp: wf
  @IsSupportRequired:1
  @DOMCore:targetType: DOMCore|Document
  @TrueCase:
    @@IsSupportRequired:1
    @@IsDefault:1
    @@enDesc:
      Checks whether all nodes are well-formed according to
      the XML version in use in <A::Document.xmlVersion>.

         - If the attribute <A::Node.nameName> contains an invalid
           character according to its node type, the implementation
           generates a <IF::DOMError> of type 
           <err::wf-invalid-character-in-node-name>, with a
           <C::DOMError.SEVERITY_ERROR> severity.

         - If the text content inside <IF::Attr>, <IF::Element>,
           <IF::Comment>, <IF::Text>, or <IF::DOMXML:CDATASection>
           node contains an invalid character, the implementation
           generates a <IF::DOMError> of type <err::wf-invalid-character>,
           with a <C::DOMError.SEVERITY_ERROR> severity.

         - If the data inside <IF::DOMXML:ProcessingInstruction> node
           contains a invalid character, the implementation
           generates a <IF::DOMError> of type <err::wf-invalid-character>
           with a <C::DOMError.SEVERITY_ERROR> severity.
  @FalseCase:
    @@enDesc:
      Does not check for XML well-formedness.
    @@SetParam:
      @@@@: canonical-form
      @@@boolValue:0
##well-formed

enImplNote:
  @@:
    See <Module::MDOM:DOMLS> for <cfg::DOMLS:resource-resolver>
    parameter, which can be used on <IF::DOMConfiguration> objects
    attached to <IF::Document> nodes.
  @For: ManakaiDOM|DOM3

ResourceTypeDef:
  @QName: DOMCore|DOMConfigurationParameter
  @enDesc:
    A parameter used on <IF::DOMConfiguration::ManakaiDOM|ManakaiDOM> objects.

ResourceTypeDef:
  @QName: c|DOMConfigurationParameterApplication
  @enDesc:
    A copy of <Q::c|DOMConfigurationParameter> that only differs
    <Q::c|targetType> property.

SPropDef:
  @QName: c|domConfigurationParameter
  @enDesc:
    A reference to <Q::c|DOMConfigurationParameter>.
  @rdfs:domain: c|DOMConfigurationParameterApplication
  @rdfs:range: c|DOMConfigurationParameter
  @rdfs:subClassOf: DISCore|derivedFrom
  @dataType: DISCore|TFQNames
  @multipleProperties: DISCore|Single

SPropDef:
  @QName: DOMCore|domConfigurationParameterName
  @enDesc:
    A name of parameter used on methods pf <IF::DOMConfiguration::
    ManakaiDOM|ManakaiDOM> interface.
  @rdfs:domain: DOMCore|DOMConfigurationParameter
  @dataType: DISCore|QName
  @multipleProperties: DISCore|Single
  @rdfs:subPropertyOf: dis|AppName
  @rdf:type: ecore|Parameter

ElementTypeBinding:
  @Name: nodeProp
  @ElementType:
    DOMCore:nodeProp
  @ShadowContent:
    @@For: =ManakaiDOM|all

XParamDef:
  @QName: DOMCore|configurationParameterValue

SPropDef:
  @QName: dis|IsSupportRequired
  @enDesc:
    Whether a configuration parameter or its value must be 
    supported or not.
  @dataType: DISCore|Boolean
  @multipleProperties: DISCore|Single

SPropDef:
  @QName: DOMCore|isSupported
  @enDesc:
    Whether a configuration parmeter or its value is supported or not.
  @dataType: DISCore|Boolean
  @multipleProperties: DISCore|Single

  @enImplNote:
    {ISSUE:: Current implementation is not so good.
             For example, it cannot represent the situation that
             the implementation <html5:var::A> of <IF::DOMCore:Document
             ::ManakaiDOM|ManakaiDOMLatest> supports a 
             value while another implementation <html5:var::B>
             of the interface does not support the value.
    }

SPropDef:
  @QName: dis|IsDefault
  @enDesc:
    Whether the value is default or not.
  @dataType: DISCore|Boolean
  @multipleProperties: DISCore|Single
  @rdfs:domain: ManakaiDOM|InCase

SPropDef:
  @QName: DOMCore|targetType
  @enDesc:
    The type of objects for which the configuration parameter is defined.
  @dataType: DISCore|TFQNames
  @multipleProperties: DISCore|UnorderedList
  @rdfs:domain: DOMCore|DOMConfigurationParameter
  @rdfs:range: DISLang|Interface

SPropDef:
  @QName: dis|SetParam
  @enDesc:
    The parameter affected by the setting of the value.
  @dataType: DISCore|TFQNames
  @multipleProperties: DISCore|UnorderedList
  @rdfs:range: DOMCore|DOMConfigurationParameter

ResourceTypeDef:
  @QName: DOMCore|DOMConfigurationParameterGetter
  @rdfs:subClassOf: DISLang|AnyMethod

ResourceTypeDef:
  @QName: DOMCore|DOMConfigurationParameterSetter
  @rdfs:subClassOf: DISLang|AnyMethod

ResourceTypeDef:
  @QName: DOMCore|DOMConfigurationParameterUnsetter
  @rdfs:subClassOf: DISLang|AnyMethod

ResourceTypeDef:
  @QName: DOMCore|DOMConfigurationParameterChecker
  @rdfs:subClassOf: DISLang|AnyMethod

ResourceTypeDef:
  @QName: DOMCore|DOMConfigurationParameterDefaultGetter
  @rdfs:subClassOf: DISLang|AnyMethod

ElementTypeBinding:
  @Name: ResourceTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: rdfs|Class
    @@rdfs:subClassOf: DISLang|AnyParameter

ElementTypeBinding:
  @Name: CParam
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@: DOMCore|DOMConfigurationParameter
      @@@For: ManakaiDOM|DOM
    @@rdf:type:
      @@@@: DISCore|Property
      @@@For: =ManakaiDOM|all
    @@For: ManakaiDOM|DOM3
    @@For: =ManakaiDOM|all

ElementTypeBinding:
  @Name: boolCParam
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@: DOMCore|DOMConfigurationParameter
      @@@For: ManakaiDOM|DOM
    @@rdf:type:
      @@@@: DISCore|Property
      @@@For: =ManakaiDOM|all
    @@For: ManakaiDOM|DOM3
    @@For: =ManakaiDOM|all
    @@Type: idl|boolean||ManakaiDOM|all

ElementTypeBinding:
  @Name: boolCParams
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@: dis|MultipleResource
      @@@ForCheck: !ForParser !ForSerializer !ForDocument
    @@rdf:type:
      @@@@: DOMCore|DOMConfigurationParameter
      @@@ForCheck: ManakaiDOM|DOM ForDocumentOrParser
    @@rdf:type:
      @@@@: DOMCore|DOMConfigurationParameter
      @@@ForCheck: ManakaiDOM|DOM ForSerializer
    @@rdf:type:
      @@@@: DISCore|Property
      @@@ForCheck: =ManakaiDOM|all ForDocumentOrParser
    @@rdf:type:
      @@@@: DISCore|Property
      @@@ForCheck: =ManakaiDOM|all ForSerializer
    @@For: ManakaiDOM|DOM3
    @@For: =ManakaiDOM|all
    @@Type: idl|boolean||ManakaiDOM|all

ForDef:
  @QName: DOMCore|ForDocumentOrParser

ForDef:
  @QName: DOMCore|ForDocument
  @ISA: DOMCore|ForDocumentOrParser

ForDef:
  @QName: DOMCore|ForParser
  @ISA: DOMCore|ForDocumentOrParser

ForDef:
  @QName: DOMCore|ForSerializer

ElementTypeBinding:
  @Name: boolValue
  @ElementType:
    dis:Value
  @ShadowContent:
    @@ContentType: DISCore|Boolean

ElementTypeBinding:
  @Name: PropDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: rdf|Property
    @@For: =ManakaiDOM|all

ElementTypeBinding:
  @Name: RPropDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISSource|ResourceProperty
    @@For: =ManakaiDOM|all

ElementTypeBinding:
  @Name: SPropDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISSource|Property
    @@For: =ManakaiDOM|all
