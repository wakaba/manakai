Namespace:
  @DocTree:
    http://suika.fam.cx/~wakaba/archive/2004/9/10/dom#
  @DOMCore:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
  @infoset:
     http://www.w3.org/2001/04/infoset#
  @lang:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
     http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @DOM3Core:
     http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/
  @ManakaiDOMImplementationException:
     http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @MDOM_EXCEPTION:
     http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @TreeCore: \
  @xml:
    http://www.w3.org/XML/1998/namespace
  @xmlns:
    http://www.w3.org/2000/xmlns/
Module:
  @Name:  dom
    @@Prefix:  w3c.org
  @FullName:
    @@lang:en
    @@@: DOM Core Module
  @Spec:
    @@DOM3:
      http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-BBACDC08
  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
  @Package:
    @@Type:
      lang:Perl
    @@@: __CLASS{DOMCore}__
  
  @Description:
    @@lang:en
    @@@:
      Fundemental DOM interfaces that must be fully implemented by
      all conforming implementations of DOM.
  
  @License:
     license:Perl
  @Date.RCS:
     $Date: 2004/09/17 07:44:10 $

  @ConditionDef:
    @@Name: DOM1
  @ConditionDef:
    @@Name: DOM2
  @ConditionDef:
    @@Name: DOM3
  
  @Feature:
    @@Name: Core
    @@Version: 2.0
    @@Condition[list]:
      DOM2
      DOM3
    @@Spec:
      @@@DOM3:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-BBACDC08
    @@Description:
      @@@lang:en
      @@@@: DOM Core module, as defined by the DOM Level 2 Core specification.
  @Feature:
    @@Name: Core
    @@Version: 3.0
    @@Condition[list]:
      DOM3
    @@Spec:
      @@@DOM3:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-BBACDC08
    @@Description:
      @@@lang:en
      @@@@: DOM Core module, as defined by the DOM Level 3 Core specification.

Exception:
  @Name:  DOMException
  @Spec:
    @@DOM3:
      http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-17189187
  @Attr:
     @@Name:  code
     @@Get:
       @@@Type:  unsigned-short
       @@@Description:
         @@@@lang:en
         @@@@@: The error code from the constant value group ExceptionCode.
  @ConstGroup:
     @@Name:  ExceptionCode
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-258A00AF
     @@Description:
       @@@lang:en
       @@@@: Integers indicating the type of error generated.
     @@Const:
        @@@Name:  INDEX_SIZE_ERR
        @@@Type:  unsigned-short
        @@@Value:  1
        @@@Param:
          @@@@QName:
            ManakaiDOMImplementationException:param-name
          @@@@Description:
            @@@@@lang:en
            @@@@@@: Parameter to which inappropriate value specified.
        @@@Description:
          @@@@lang:en
          @@@@@: Index or size is negative, or greater than the allowed value.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              Index or size specified as parameter%t (
                name => {<Q:MDOM_EXCEPTION:param-name>},
                prefix => { "}, suffix => {"}); is negative, or 
              greater than the allowed value.
     @@Const:
        @@@Name:  DOMSTRING_SIZE_ERR
        @@@Type:  unsigned-short
        @@@Value:  2
        @@@Description:
          @@@@lang:en
          @@@@@: The specified range of text does not fit into a DOMString.
     @@Const:
        @@@Name:  HIERARCHY_REQUEST_ERR
        @@@Type:  unsigned-short
        @@@Value:  3
        @@@Description:
          @@@@lang:en
          @@@@@:
            An attempt is made to insert a node somewhere it does not belong.
     @@Const:
        @@@Name:  WRONG_DOCUMENT_ERR
        @@@Type:  unsigned-short
        @@@Value:  4
        @@@Description:
          @@@@lang:en
          @@@@@:
            A node is used in a different document than the one
            that created it.
     @@Const:
        @@@Name:  INVALID_CHARACTER_ERR
        @@@Type:  unsigned-short
        @@@Value:  5
        @@@Description:
          @@@@lang:en
          @@@@@: An invalid or illegal character is specified.
     @@Const:
        @@@Name:  NO_DATA_ALLOWED_ERR
        @@@Type:  unsigned-short
        @@@Value:  6
        @@@Description:
          @@@@lang:en
          @@@@@: Data is specified for a node that does not support data.
     @@Const:
        @@@Name:  NO_MODIFICATION_ALLOWED_ERR
        @@@Type:  unsigned-short
        @@@Value:  7
        @@@Description:
          @@@@lang:en
          @@@@@:
            An attempt is made to modify an object where 
            modifications are not allowed. 
     @@Const:
        @@@Name:  NOT_FOUND_ERR
        @@@Type:  unsigned-short
        @@@Value:  8
        @@@Description:
          @@@@lang:en
          @@@@@:
            An attempt is made to refer a node in a context where 
            it does not exist.
     @@Const:
        @@@Name:  NOT_SUPPORTED_ERR
        @@@Type:  unsigned-short
        @@@Value:  9
        @@@Param:
          @@@@QName:
            MDOM_EXCEPTION:if
          @@@@Type: DOMString
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The interface name.
        @@@Param:
          @@@@QName:
            MDOM_EXCEPTION:method
          @@@@Type: DOMString
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The method name.
        @@@Param:
          @@@@QName:
            MDOM_EXCEPTION:attr
          @@@@Type: DOMString
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The attribute name.
        @@@Param:
          @@@@QName:
            MDOM_EXCEPTION:on
          @@@@Type: DOMString
          @@@@Description:
            @@@@@lang:en
            @@@@@@: Type of the attribute procedure.
          @@@@InCase:
            @@@@@Value: get
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@: On getting.
          @@@@InCase:
            @@@@@Value: set
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@: On setting.
        @@@Description:
          @@@@lang:en
          @@@@@:
            The implementation does not support the type of object requested.
     @@Const:
        @@@Name:  INUSE_ATTRIBUTE_ERR
        @@@Type:  unsigned-short
        @@@Value:  10
        @@@Description:
          @@@@lang:en
          @@@@@: 
            An attempt is made to add an attribute that is already inuse 
            elsewhere.
     @@Const:
        @@@Name:  INVALID_STATE_ERR
        @@@Type:  unsigned-short
        @@@Value:  11
        @@@Level[list]:  2
        @@@SpecLevel: 2
        @@@Description:
          @@@@lang:en
          @@@@@:
            An attempt is made to use an object that is not (or no longer) 
            usable.
     @@Const:
        @@@Name:  SYNTAX_ERR
        @@@Type:  unsigned-short
        @@@Value:  12
        @@@Level[list]:  2
        @@@SpecLevel: 2
        @@@Description:
          @@@@lang:en
          @@@@@: An invalid or illegal string is specified.
     @@Const:
        @@@Name:  INVALID_MODIFICATION_ERR
        @@@Type:  unsigned-short
        @@@Value:  13
        @@@Level[list]:  2
        @@@SpecLevel: 2
        @@@Description:
          @@@@lang:en
          @@@@@: An attempt is made to modify the type of underlying object.
     @@Const:
        @@@Name:  NAMESPACE_ERR
        @@@Type:  unsigned-short
        @@@Value:  14
        @@@SpecLevel: 2
        @@@Level[list]:  2
        @@@Description:
          @@@@lang:en
          @@@@@:
            An attempt is made to create or change an object in 
            a way that is incorrect with regard to namespaces.
     @@Const:
        @@@Name:  INVALID_ACCESS_ERR
        @@@Type:  unsigned-short
        @@@Value:  15
        @@@Level[list]:  2
        @@@SpecLevel: 2
        @@@Description:
          @@@@lang:en
          @@@@@:
            A parameter or an operation is not supported by the 
            underlying object.
     @@Const:
        @@@Name:  VALIDATION_ERR
        @@@Type:  unsigned-short
        @@@Value:  16
        @@@Level[list]:  3
        @@@SpecLevel:3
        @@@Description:
          @@@@lang:en
          @@@@@:
            An attempt is made to modify an object where the modification 
            would make the Node invalid with respect to partial validity.

     @@Const:
        @@@Name:  TYPE_MISMATCH_ERR
        @@@Type:  unsigned-short
        @@@Value:  17
        @@@Level[list]:  3
        @@@SpecLevel:3
        @@@Description:
          @@@@lang:en
          @@@@@:
            The type of an object is incompatible with the expected 
            type of the parameter associated to the object.

IF:
  @Name:  DOMStringList
  @Level[list]:  3
  @SpecLevel:3
  @Spec:
    @@DOM3:
      http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMStringList
  @Description:
    @@lang:en
    @@@:
      An ordered collection of "DOMString" values.
  @ImplNote:
    @@lang:en
    @@@:
      How the collection is implemented is not defined by the 
      specification.
  @Method:
     @@Name:  item
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMStringList-item
     @@Description:
       @@@lang:en
       @@@@: Return a "DOMString" in the collection.
     @@Param:
        @@@Name:  index
        @@@Type:  unsigned-long
        @@@Description:
          @@@@lang:en
          @@@@@: Index into the collection.
        @@@InCase:
          @@@@Value: 0
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The first item.
        @@@InCase: 
          @@@@Label: "length" - 1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The last item.
     @@Return:
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:
            The "DOMString" at the "index"th position in the collection.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The specified "index" is negative or greater than or equal to 
              the number of "DOMString"s in the list.
        @@@Def:
          if (not defined $index or
              $index < 0 or
              $index > $#$self) {
            $r = null;
          } else {
            __INT__;
          }
        @@@IntDef:
          $r = $self->[$index];
  @Attr:
     @@Name:  length
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMStringList-length
     @@Description:
       @@@lang:en
       @@@@: 
         The number of "DOMString"s in the list.
     @@Get:
        @@@Type:  unsigned-long
        @@@Description:
          @@@@lang:en
          @@@@@: The number of "DOMString"s in the list.
        @@@Def:
          $r = @$self;
  @Method:
     @@Name:  contains
     @@Spec:
       @@@DOM3: 
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMStringList-contains
     @@Description:
       @@@lang:en
       @@@@: Test if a string is part of the list.
     @@Param:
        @@@Name:  str
        @@@Type:  DOMString
        @@@Description:
          @@@@labg:en
          @@@@@: The string to look for.
     @@Return:
        @@@Type:  boolean
        @@@Description:
          @@@@lang:en
          @@@@@: Whether the string is part of the list.
        @@@InCase:
          @@@@Value: true
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The string has been found.
        @@@InCase:
          @@@@Value: false
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The string has not been found.
        @@@Def:
          CHK: {
            __DEEP{
              for (@$self) {
                if ($str eq $_) {
                  $r = true;
                  last CHK;
                }
              }
            }__;
          }

IF:
  @Name:  NameList
  @Level[list]:  3
  @SpecLevel:3
  @Spec:
    @@DOM3:
      http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#NameList
  @Description:
    @@lang:en
    @@@:
      An ordered collection of parallel pairs of name and namespace values.
  @ImplNote:
    @@lang:en
    @@@: How this collection is implemented is not defined by the specification.
  @Method:
     @@Name:  getName
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#NameList-getName
     @@Description:
        @@@lang:en
        @@@@: Return the "index"th name item in the collection.
     @@Param:
        @@@Name:  index
        @@@Type:  unsigned-long
        @@@Description:
          @@@@lang:en
          @@@@@: The index into the collection.
        @@@InCase:
          @@@@Value: 0
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The first item.
        @@@InCase:
          @@@@Label: "length" - 1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The last item.
     @@Return:
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The name at the "index"th position in the "NameList".
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
            There is no name for the specified "index" or
            the "index" is out of range.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
          if (not defined $index or
              $index < 0 or
              $index > $#$self) {
            $r = null;
          } else {
            __INT__;
          }
        @@@IntDef:
          @@@@Type:
            lang:Perl
          @@@@@:
          $r = $self->[$index]->{name};
  @Method:
     @@Name:  getNamespaceURI
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#NameList-getNamespaceURI
     @@Description:
       @@@lang:en
       @@@@: Return the "index"th namespace URI item in the collection.
     @@Param:
        @@@Name:  index
        @@@Type:  unsigned-long
        @@@Description:
          @@@@lang:en
          @@@@@: The index into the collection.
        @@@InCase:
          @@@@Value: 0
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The first item.
        @@@InCase:
          @@@@Label: "length" - 1
          @@@@Description: 
            @@@@@lang:en
            @@@@@@: The last item.
     @@Return:
        @@@Type:
          ManakaiDOM:ManakaiDOMNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@: The namespace URI at the "index" position in the "NameList".
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
            There is no namespace URI for the specified "index" or 
            if the "index" is out of range.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
          if (not defined $index or
              $index < 0 or
              $index > $#$self) {
            $r = null;
          } else {
            __INT__;
          }
        @@@IntDef:
          @@@@Type:
            lang:Perl
          @@@@@:
          $r = $self->[$index]->{nsURI};
  @Attr:
     @@Name:  length
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#NameList-length
     @@Description:
       @@@lang:en
       @@@@: 
         The number of name and namespace URI pairs in the list.
     @@Get:
        @@@Type:  unsigned-long
        @@@Description:
          @@@@lang:en
          @@@@@: The number of pairs.
        @@@Def:
          $r = @$self;
  @Method:
     @@Name:  contains
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#NameList-contains
     @@Description:
       @@@lang:en
       @@@@: Test if a name is part of the collection.
     @@Param:
        @@@Name:  str
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The name to look for.
     @@Return:
        @@@Type:  boolean
        @@@InCase:
          @@@@Value: true
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The name has been found.
        @@@InCase:
          @@@@Value: false
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The name has not been found.
        @@@Def:
          $r = false;
          CHK: {
            __DEEP{
              for (@$self) {
                if ($str eq $_->{name}) {
                  $r = true;
                  last CHK;
                }
              }
            }__;
          }
  @Method:
     @@Name:  containsNS
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#NameList-containsNS
     @@Description:
       @@@lang:en
       @@@@: 
         Test if the pair of namespace URI and name is part of the collection.
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:
          ManakaiDOM:ManakaiDOMNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@: The namespace URI to look for.
     @@Param:
        @@@Name:  name
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The name to look for.
     @@Return:
        @@@Type:  boolean
        @@@InCase:
          @@@@Value: true
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The pair has been found.
        @@@InCase:
          @@@@Value: false
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The pair has not been found.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
          $r = false;
          CHK: {
            __DEEP{
              for (@$self) {
                if ($namespaceURI eq $_->{nsURI} and
                    $name eq $_->{name}) {
                  $r = true;
                  last CHK;
                }
              }
            }__;
          }

IF:
  @Name:  DOMImplementationList
  @Level[list]:  3
  @SpecLevel:3
  @Spec:
    @@DOM3:
      http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMImplementationList
  @Description:
    @@lang:en
    @@@: 
      An ordered collection of DOM implementations.
  @ImplNote:
    @@lang:en
    @@@:
      How this collection is implemented is not specified by the specification.
  @Method:
     @@Name:  item
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMImplementationList-item
     @@Description:
       @@@lang:en
       @@@@: Return the "index"th item in the collection.
     @@Param:
        @@@Name:  index
        @@@Type:  unsigned-long
        @@@Description:
          @@@@lang:en
          @@@@@: The index into the collection.
        @@@InCase:
          @@@@Value: 0
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The first item.
        @@@InCase:
          @@@@Label: "length" - 1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The last item.
     @@Return:
        @@@Type:  DOMImplementation
        @@@Description:
          @@@@lang:en
          @@@@@: 
            The "DOMImplementation" at the "index"th position in 
            the collection.
        @@@InCase:
          @@@@Value: null
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              There is no "DOMImplementation" for the specified "index", 
              or the "index" is out of range.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
          if (not defined $index or
              $index < 0 or
              $index > $#$self) {
            $r = null;
          } else {
            __INT__;
          }
        @@@IntDef:
          @@@@Type:
            lang:Perl
          @@@@@:
          $r = $self->[$index];
  @Attr:
     @@Name:  length
     @@Description:
       @@@lang:en
       @@@@: The number of "DOMImplementation"s in the list.
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMImplementationList-length
     @@Get:
        @@@Type:  unsigned-long
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            $r = @$self;
  @IntMethod:
    @@Name: new
    @@Description:
      @@@lang:en
      @@@@: Construct a new instance of the "DOMImplementationList".
    @@Return:
      @@@Type: DOMImplementationList
      @@@Description:
        @@@@lang:en
        @@@@@: The new instance constructed.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          $r = bless [], ref $self ? ref $self : $self;
  @IntMethod:
    @@Name: add
    @@Description:
      @@@lang: en
      @@@@: Add one or more "DOMImplementation"s to the list.
    @@Param:
      @@@Name: list
      @@@Type: DOMImplementationList
      @@@Description:
        @@@@lang:en
        @@@@@:
          A list of "DOMImplementation"s to be added.
      @@@InCase:
        @@@@Label:
          One or more "DOMImplementation"s and/or "DOMImplementationList"s
        @@@@Description:
           @@@@@lang:en
           @@@@@@:
             "DOMImplementation"s and/or lists of them to be added.
    @@Return:
      @@@Exception:
        @@@@Type:
          ManakaiDOM:ManakaiDOMImplementationException
        @@@@Name: MDOM_TYPE_MISMATCH_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            The parameter specified is neither a DOMImplementation object 
            or a DOMImplementationList object.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@auto-argument: 0
        @@@@@:
          my $self = shift;
          for (@_) {
            if ($_->isa ("__IIF{DOMImplementationList::}__")) {
              push @$self, @$_;
            } elsif ($_->isa ("__IIF{DOMImplementation::}__")) {
              push @$self, $_;
            } elsif ($_->isa ("__IF{DOMImplementationList}__")) {
              __DEEP{
                my $len = $_->length;
                for (my $i = 0; $i < $len; $i++) {
                  push @$self, $_->item ($i);
                }
              }__;
            } elsif ($_->isa ("__IF{DOMImplementation}__")) {
              push @$self, $_;
            } else {
              __EXCEPTION{ManakaiDOMImplementationException.
                          MDOM_TYPE_MISMATCH_ERR:
                <Q:ManakaiDOMImplementationException:param-name> => 'list',
                <Q:ManakaiDOMImplementationException:class> => ref $_,
              }__;
            }
          }

IF:
  @Name:  DOMImplementationSource
  @Level[list]:  3
  @SpecLevel:3
  @Description:
    @@lang:en
    @@@:
      This interface provides access to DOM implementations available.
  @Spec:
    @@DOM3:
      http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMImplementationSource
  @Method:
     @@Name:  getDOMImplementation
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-getDOMImpl
     @@Description:
        @@@lang:en
        @@@@: 
          Return the first DOM implementation that supports the specified 
          features and versions.
     @@Param:
        @@@Name:  features
        @@@Type:
          ManakaiDOM:ManakaiDOMFeatures
        @@@Description:
          @@@@lang:en
          @@@@@:
            A string that specifies which features and versions are 
            required.
     @@Return:
        @@@Type:  DOMImplementation
        @@@Description:
          @@@@lang:en
          @@@@@: 
            The first DOM implementation that support the desired 
            features and versions.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              This source has no DOM implementation that supports the 
              desired features and versions.
## TODO: Implement this.
  @Method:
     @@Name:  getDOMImplementationList
     @@Description:
       @@@lang:en
       @@@@:
         Return a list of DOM implementations that support the specified 
         features and versions.
     @@Return:
        @@@Type:  DOMImplementationList
        @@@Description:
          @@@@lang:en
          @@@@@:
            A list of DOM implementations that support the desired 
            features and versions.
## TODO: implement this
     @@Param:
        @@@Name:  features
        @@@Type:
          ManakaiDOM:ManakaiDOMFeatures
        @@@Description:
          @@@@lang:en
          @@@@@:
            A string that specifies which features and versions are required.

IF:
  @Name:  DOMImplementation
  @Spec:
    @@DOM3:
      http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-102161490
  @Description:
    @@lang:en
    @@@:
      This interface provides a number of methods for performing 
      operations that are independent of any particular instance 
      of the document object model.
  @Require:
    @@Module:
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@use:
          @@@@@@:
            Char::Class::XML
          @@@@@Import[list]:
            InXMLNameChar10
            InXML_NameStartChar10
            InXMLNCNameChar10
            InXML_NCNameStartChar10
    @@Condition[list]:
      DOM2
      DOM3
  @ISA:
    ManakaiDOM:ManakaiDOMNodeReference::
  @Method:
     @@Name:  hasFeature
     @@Spec:
       @@DOM3[list]:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-5CED94D7
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMFeatures
     @@Description:
       @@@lang:en
       @@@@:
         Test if the DOM implementation implements a specific feature 
         and version.
     @@Param:
        @@@Name:  feature
        @@@Type:
          ManakaiDOM:ManakaiDOMFeatureName
        @@@Description:
          @@@@lang:en
          @@@@@: The name of the feature to test.
        @@@InCase:
          @@@@Value: HTML
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The DOM HTML feature.
              This is one of the allowed values in DOM Level 1 First Edition.
        @@@InCase:
          @@@@Value: XML
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The DOM XML feature.
              This is one of the allowed values in DOM Level 1 First Edition.
        @@@InCase:
          @@@@Label: XML 1.0 Name
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Only an XML 1.0 Name is allowed in DOM Level 1 Second Edition 
              and DOM Level 2.
        @@@InCase:
          @@@@Label: Reversed Internet domain name
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              DOM Level 1 First Edition and DOM Level 2 specifications 
              says that the feature name defined outside the DOM specifications 
              should use the reversed Internet domain name to avoid 
              possible confliction.
            \
              This recommendation is withdrawn by the Errata of the DOM Level 2 
              Specifications.
        @@@InCase:
          @@@@Label:
            @@@@@lang:en
            @@@@@@:
              The feature name prepended by the PLUS SIGN ("+")
          @@@@Type: DOMString
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The specified feature may not be directly castable
              but would be available through the method "getFeature".
     @@Param:
        @@@Name:  version
        @@@Type:
          ManakaiDOM:ManakaiDOMFeatureVersion
        @@@Description:
          @@@@lang:en
          @@@@@:
            The version number of the feature to test.
        @@@IsOptional:1
        @@@InCase:
          @@@@Value: 1.0
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              DOM Level 1.
              This is the only allowed value in DOM Level 1 and
              one of allowed values in DOM Level 2.
        @@@InCase:
          @@@@Value: 2.0
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              DOM Level 2.
              This is one of allowed values in DOM Level 2.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              No particular version is specified.
              \
              It is implied that this value is allowed in DOM 
              Level 1 and Level 2.  DOM Level 2 Errata and DOM 
              Level 3 explicitly allow this value specified.
        @@@InCase:
          @@@@Value: \
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              No particular version is specified.
              \
              This value is allowed in DOM Level 2 Errata and 
              DOM Level 3.
     @@Return:
        @@@Type:  boolean
        @@@Description:
          @@@@lang:en
          @@@@@: Whether the feature is implemented or not.
        @@@InCase:
          @@@@Value: true
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The feature is implemented in the specified version.
        @@@InCase:
          @@@@Value: false
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The feature is not implemented.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            __CODE{CheckNull: s => feature}__;
## TODO: feature and version checking
            $feature = lc $feature;
            if (defined $version and $version ne '') {
              $r = $__PACKAGE{Global}__::FeatureImplemented{$feature}
                                                           ->{$version} ?
                   true : false;
            } else {
              for (keys %{$__PACKAGE{Global}__::FeatureImplemented{$feature}}) {
                if ($__PACKAGE{Global}__::FeatureImplemented{$feature}->{$_}) {
                  $r = true;
                  last;
                }
              }
            }
  @Method:
     @@Name:  createDocumentType
     @@Description:
       @@@lang:en
       @@@@:
         Create an empty "DocumentType" node.
     @@ImplNote:
       @@@lang:en
       @@@@: 
         HTML-only DOM Level 2 implementations do not need to implement 
         this method.
     @@Param:
        @@@Name:  qualifiedName
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The qualified name of the document type to be created.
     @@Param:
        @@@Name:  publicId
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The external subset public identifier.
     @@Param:
        @@@Name:  systemId
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The external subset system identifier.
     @@SpecLevel: 2
     @@Level[list]:  
        2
        3
     @@Return:
        @@@Type:  DocumentType
        @@@Description:
          @@@@lang:en
          @@@@@: A new "DocumentType" node.
        @@@ImplNote:
          @@@@lang:en
          @@@@@: The "ownerDocument" attribute is set to "null".
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: INVALID_CHARACTER_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              The "qualifiedName" is not an XML name 
              accoding to the XML 1.0 specification.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NAMESPACE_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The "qualifiedName" is malformed.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NOT_SUPPORTED_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The DOM implementation does not support the "XML" feature and 
              the language exposed through the "Document" does not support 
              XML Namespaces.
        @@@Exception:
          @@@@Type: ManakaiDOMImplementationException
          @@@@Name: PARAM_NULL_POINTER
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The "qualifiedName" is the "null" value.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            __CODE{CheckNull: s => qualifiedName}__;
            __CODE{CheckQName: version => 1.0,
                               qname => qualifiedName}__; # [DOM 2,3]
            ## If namespace not supported: # [DOM 3]
            #__EXCEPTION{
            #  DOMException.NOT_SUPPORTED_ERR:
            #    <Q:MDOM_EXCEPTION:subtype> 
            #       => <Q:MDOM_EXCEPTION:NS_NOT_SUPPORTED>,
            #}__;
            my ($prefix, $lname);
            if (($lname = $qualifiedName) =~ s/^([^:]+)://) {
              $prefix = $1;
            }
                        ## Condition sensitive
            my $node = __CLASS{DocumentType}__->__INT{newObject}__;
            $node->{<Q:infoset:prefix>} = $prefix;
            $node->{<Q:infoset:localName>} = $lname;
            $node->{<Q:infoset:publicIdentifier>} = $publicId;
            $node->{<Q:infoset:systemIdentifier>} = $systemId; 
            ## Note: No DOM Level 3 method/attribute provides access 
            ##       to the DOM implementation object when the "DocumentType" 
            ##       does not have the parent node (= owner "Document").
            $node->{<Q:DOMCore:implementation>} = $self;
            $node->{<Q:ManakaiDOM:implID>}
                        = $self->{<Q:TreeCore:node>}->{<Q:ManakaiDOM:implID>};
                 ## Condition sensitive
            $r = __CLASS{Node}__->__INT{getNodeReference}__ ($node);
  @Method:
     @@Name:  createDocument
     @@Description:
       @@@lang:en
       @@@@:
         Create a "Document" object of the specified type with its 
         document element.
     @@ImplNote:
       @@@lang:en
       @@@@: 
         The DOM Level 2 specification said that the HTML-only 
         implementations do not need to implement this method.
     @@ImplNote:
       @@@lang:en
       @@@@:
         Document creation is an operation specific to an 
         implementation in the DOM Level 1.
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:
          ManakaiDOM:ManakaiDOMNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@: The namespace URI of the document element to create.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The null namespace name.
        @@@InCase:
          @@@@Value: \
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Considered as a namespace URI in DOM Level 2 or 
              treated as the "null" value in DOM Level 3.
     @@Param:
        @@@Name:  qualifiedName
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The qualified name of the document element to create.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: Document element is not created.
     @@Param:
        @@@Name:  doctype
        @@@Type:  DocumentType
        @@@Description:
          @@@@lang:en
          @@@@@: The type of document to create.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The document to be created does not have the "DocumentType" 
              node.
        @@@ImplNote:
          @@@@lang:en
          @@@@@:
            "doctype"."ownerDocument" is set to the document being 
            created unless "doctype" is "null".
     @@SpecLevel:2
     @@Level[list]:
       2
       3
     @@Return:
        @@@Type:  Document
        @@@Description:
          @@@@lang:en
          @@@@@:
            A new Document object.
          \
            Note that the object returned may be a specialized "Document" 
            object based on the "doctype" given.  For example. it might 
            implement the "HTMLDocument" interface.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: INVALID_CHARACTER_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The specified qualified name is not an XML name 
              accoding to the XML 1.0 specification.
          @@@@ImplNote:
            @@@@@lang:en
            @@@@@@:
              DOM Level 3 specification defines to rely the XML 1.0 
              specification.  DOM Level 2 specification does not 
              explicitly defines but the definition for "INVALID_CHARACTER_ERR"
              refers the XML 1.0 specification.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NAMESPACE_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Either the "qualifiedName" is malformed, the "qualifiedName" 
              has a prefix and the "namespaceURI" is "null", the 
              "qualifiedName" is "null" and the "namespaceURI" is 
              different from "null", the "qualifiedName" has 
              a prefix that is "xml" and the "namespaceURI" is 
              different from "http://www.w3.org/XML/1998/namespace" or
              the DOM implementation does not support the "XML" feature 
              but a non-null "namespaceURI" is provided.
         @@@ImplNote:
           @@@@lang:en
           @@@@@:
              In addition, it is possible to raise an exception 
              either if the "qualifiedName" has a prefix that is 
              "xmlns" and the "namespaceURI" is different from 
              "http://www.w3.org/2000/xmlns/", if the "namespaceURI" 
              is "http://www.w3.org/XML/1998/namespace" and the 
              "qualifiedName" has a prefix is different from "xml" or 
              if the "namespaceURI" is "http://www.w3.org/2000/xmlns/" 
              and the "qualifiedName" has a prefix is different from "xmlns".
              But this DOM implementation only report a warning on 
              these cases since the specification does not mention 
              to raise any exception.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: WRONG_DOCUMENT_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The "doctype" has already been used with a different 
              document or was created from a different implementation.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NOT_SUPPORTED_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The DOM implementation does not support the "XML" feature 
              and the language exposed through the "Document" does 
              not support XML Namespaces.
        @@@Exception:
          @@@@Type: ManakaiDOMImplementationException
          @@@@Name: MDOM_TYPE_MISMATCH_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              The object specified to the "doctype" parameter is not a 
              "DocumentType".
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            my ($prefix, $lname);
            if (defined $qualifiedName) {     
              __CODE{CheckQName: version => 1.0,
                                 qname => qualifiedName}__; # [DOM 2,3]
              if (($lname = $qualifiedName) =~ s/^([^:]+)://) {
                $prefix = $1;
              }
              if (defined $namespaceURI) {    # ($uri, $qname, $doctype)
                ## If namespace not supported: # [DOM 3]
                #__EXCEPTION{
                ##  DOMException.NAMESPACE_ERR:
                #  DOMException.NOT_SUPPORTED_ERR:
                #    <Q:MDOM_EXCEPTION:subtype> 
                #       => <Q:MDOM_EXCEPTION:NS_NOT_SUPPORTED>,
                #}__;
              } else {                        # (null, $qname, $doctype)
                if ($prefix) {
                  __EXCEPTION{
                    DOMException.NAMESPACE_ERR:
                      <Q:MDOM_EXCEPTION:subtype>
                         => <Q:MDOM_EXCEPTION:NS_PREFIX_WITH_NULL_URI>,
                      <Q:infoset:prefix> => $prefix,
                  }__;                        # [DOM 2,3]
                }
              }
            } elsif (defined $namespaceURI) { # ($uri, null, $doctype)
              __EXCEPTION{
                DOMException.NAMESPACE_ERR:
                  <Q:MDOM_EXCEPTION:subtype>
                     => <Q:MDOM_EXCEPTION:NS_NULL_QNAME_NON_NULL_URI>,
                  <Q:infoset:namespaceName> => $namespaceURI,
              }__;                            # [DOM 3]
            }
            if (not $prefix) {
              if ($prefix eq 'xml' and 
                  (not $namespaceURI or
                   $namespaceURI ne q<http://www.w3.org/XML/1998/namespace>)) {
                __EXCEPTION{
                  DOMException.NAMESPACE_ERR:
                    <Q:MDOM_EXCEPTION:subtype>
                       => <Q:MDOM_EXCEPTION:NS_XML_WITH_OTHER_URI>,
                    <Q:infoset:namespaceName> => $namespaceURI,
                }__;                          # [DOM 2,3]
              } elsif ($prefix eq 'xmlns' and
                  (not $namespaceURI or
                   $namespaceURI ne q<http://www.w3.org/2000/xmlns/>)) {
                __WARNING{
                  ManakaiDOMImplementationWarning.MDOM_WARN_NAMESPACE_ERR:
                    <Q:MDOM_EXCEPTION:subtype>
                       => <Q:MDOM_EXCEPTION:NS_XMLNS_WITH_OTHER_URI>,
                    <Q:infoset:namespaceName> => $namespaceURI,
                }__;                          # DOM doesn't specify this
              }
            }
            if (defined $namespaceURI) {
              if ($namespaceURI eq q<http://www.w3.org/XML/1998/namespace> and
                  (not $prefix or $prefix ne 'xml')) {
                __WARNING{
                  ManakaiDOMImplementationWarning.MDOM_WARN_NAMESPACE_ERR:
                    <Q:MDOM_EXCEPTION:subtype>
                       => <Q:MDOM_EXCEPTION:NS_XML_URI_WITH_OTHER_PREFIX>,
                    <Q:infoset:prefix> => $prefix,
                }__;                          # DOM doesn't specify this
              } elsif ($namespaceURI eq q<http://www.w3.org/2000/xmlns/> and
                  (not $prefix or $prefix ne 'xmlns')) {
                __WARNING{
                  ManakaiDOMImplementationWarning.MDOM_WARN_NAMESPACE_ERR:
                    <Q:MDOM_EXCEPTION:subtype>
                       => <Q:MDOM_EXCEPTION:NS_XMLNS_URI_WITH_OTHER_PREFIX>,
                    <Q:infoset:prefix> => $prefix,
                }__;                          # DOM doesn't specify this
              }
            }
                       ## Condition sensitive
            my $node = __CLASS{Document}__->__INT{newObject}__; 
            $node->{<Q:DOMCore:implementation>} = $self;
            $node->{<Q:ManakaiDOM:implID>}
                = $self->{<Q:TreeCore:node>}->{<Q:ManakaiDOM:implID>};
            if ($doctype) {
              if (not $doctype->isa ('__IIF{DocumentType::}__')) {
                __EXCEPTION{
                  ManakaiDOMImplementationException.MDOM_TYPE_MISMATCH_ERR:
                    <Q:MDOM_EXCEPTION:param-name> => q<doctype>,
                    <Q:MDOM_EXCEPTION:class> => ref $doctype,
                }__;
              }
              my $doctypeNode = $doctype->{<Q:TreeCore:node>};
              if ($node->{<Q:TreeCore:treeID>} ne
                  $doctypeNode->{<Q:TreeCore:treeID>} or
                  $doctypeNode->{<Q:DOMCore:ownerDocument>} or
                  $doctypeNode->{<Q:ManakaiDOM:implID>} ne 
                    $node->{<Q:ManakaiDOM:implID>}) {
                __EXCEPTION{
                  DOMException.WRONG_DOCUMENT_ERR:
                }__;                          # [DOM 2,3]
              }
              $doctypeNode
                   ->__SUPER{ManakaiDOMNodeObject::}__::__INT{importTree}__
                                                                     ($node);
              $doctypeNode->{<Q:DOMCore:ownerDocument>} = $node;
              $doctypeNode->{<Q:infoset:parent>} = $node;
              push @{$node->{<Q:infoset:children>}}, $doctypeNode;
            }
            if ($lname) { ## Condition sensitive
              my $docEl = __CLASS{Element}__->__INT{new}__;
              my $docNode = $docEl->{<Q:TreeCore:node>};
              $node->__SUPER{ManakaiDOMNodeObject::}__->__INT{importTree}__
                                                        ($docNode);
              $docNode->{<Q:infoset:prefix>} = $prefix;
              $docNode->{<Q:infoset:namespaceName>} = $namespaceURI;
              $docNode->{<Q:infoset:localName>} = $lname;
              $docNode->{<Q:infoset:parent>} = $node;
              push @{$node->{<Q:infoset:children>}}, $docNode;
            }
                 ## Condition sensitive
            $r = __CLASS{Node}__::__INT{getNodeReference}__ ($node);
        
  @Method:
     @@Name:  getFeature
     @@Description:
        @@@lang:en
        @@@@: 
          Return a specialized object that implements the specialized 
          APIs of the specified feature and version.
     @@Param:
        @@@Name:  feature
        @@@Type:
          ManakaiDOM:ManakaiDOMFeatureName
        @@@Description:
          @@@@lang:en
          @@@@@:
            The name of the feature requested.
        @@@InCase: 
          @@@@Label: 
            The feature name prepended by the PLUS SIGN ("+")
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The PLUS SIGN is ignored.
     @@Param:
        @@@Name:  version
        @@@Type:
          ManakaiDOM:ManakaiDOMFeatureVersion
        @@@Description:
          @@@@lang:en
          @@@@@:
            The version number of the feature to test.
     @@SpecLevel:3
     @@Level[list]:  3
     @@Return:
        @@@Type:  DOMObject
        @@@Description:
          @@@@lang:en
          @@@@@:
            An object that implements the specialized APIs of the 
            specified feature and version.  That might or might not 
            implements the "DOMImplementation" interface.
        @@@InCase:
          @@@@Type: DOMImplementation
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              An object that implements both the specialized APIs 
              and the "DOMImplementation" interface.
          @@@@ImplNote:
            @@@@@lang:en
            @@@@@@:
              This kind of object must delegate to the primary core 
              "DOMImplementation" and not return results inconsistent 
              with the primary core "DOMImplementation" such as 
              "hasFeature", "getFeature", etc.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@@: 
            There is no object that implements interfaces associated 
            with the feature and version.
## TODO: implement this
    @@IntMethod:
      @@@Name: new
      @@@Description:
        @@@@lang:en
        @@@@@: Construct a new instance of the "DOMImplementation".
      @@@Return:
        @@@@Type: DOMImplementation
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The "DOMImplementation" created.
        @@@@Def:
          @@@@@Type:
            lang:Perl
          @@@@@@:
            my $node = __CLASS{ManakaiDOMNodeObject::}__->__INT{new}__;
            $r = $node->__SUPER{ManakaiDOMNodeObject::}__::__INT{newReference}__
                                                                   ($self);
            $node->{<Q:ManakaiDOM:implID>} = $node->{<Q:ManakaiDOM:implID>};

IF:
  @Name:  Node
  @Description:
    @@lang:en
    @@@:
      The primary datatype for the entire Document Object Model, 
      that represents a single node in the document tree.
  @ISA:
    ManakaiDOM:ManakaiDOMNodeReference::
  @ConstGroup:
     @@Name:  NodeType
     @@Description:
       @@@lang:en
       @@@@: An integer indicating which type of node this is.
     @@ImplNote:
       @@@lang:en
       @@@@: Codes <= 200 are reserved to W3C for possible future use.
     @@Const:
        @@@Name:  ELEMENT_NODE
        @@@Type:  unsigned-short
        @@@Value:  1
        @@@Description:
          @@@@lang:en
          @@@@@: The node is an "Element".
     @@Const:
        @@@Name:  ATTRIBUTE_NODE
        @@@Type:  unsigned-short
        @@@Value:  2
        @@@Description:
          @@@@lang:en
          @@@@@: The node is an "Attr".
     @@Const:
        @@@Name:  TEXT_NODE
        @@@Type:  unsigned-short
        @@@Value:  3
        @@@Description:
          @@@@lang:en
          @@@@@: The node is a "Text".
     @@Const:
        @@@Name:  CDATA_SECTION_NODE
        @@@Type:  unsigned-short
        @@@Value:  4
        @@@Description:
          @@@@lang:en
          @@@@@: The node is a "CDATASection".
     @@Const:
        @@@Name:  ENTITY_REFERENCE_NODE
        @@@Type:  unsigned-short
        @@@Value:  5
        @@@Description:
          @@@@lang:en
          @@@@@: The node is an "EntityReference".
     @@Const:
        @@@Name:  ENTITY_NODE
        @@@Type:  unsigned-short
        @@@Value:  6
        @@@Description:
          @@@@lang:en
          @@@@@: The node is an "Entity".
     @@Const:
        @@@Name:  PROCESSING_INSTRUCTION_NODE
        @@@Type:  unsigned-short
        @@@Value:  7
        @@@Description:
          @@@@lang:en
          @@@@@: The node is a "ProcessingInstruction".
     @@Const:
        @@@Name:  COMMENT_NODE
        @@@Type:  unsigned-short
        @@@Value:  8
        @@@Description:
          @@@@lang:en
          @@@@@: The node is a "Comment".
     @@Const:
        @@@Name:  DOCUMENT_NODE
        @@@Type:  unsigned-short
        @@@Value:  9
        @@@Description:
          @@@@lang:en
          @@@@@: The node is a "Document".
     @@Const:
        @@@Name:  DOCUMENT_TYPE_NODE
        @@@Type:  unsigned-short
        @@@Value:  10
        @@@Description:
          @@@@lang:en
          @@@@@: The node is a "DocumentType".
     @@Const:
        @@@Name:  DOCUMENT_FRAGMENT_NODE
        @@@Type:  unsigned-short
        @@@Value:  11
        @@@Description:
          @@@@lang:en
          @@@@@: The node is a "DocumentFragment".
     @@Const:
        @@@Name:  NOTATION_NODE
        @@@Type:  unsigned-short
        @@@Value:  12
        @@@Description:
          @@@@lang:en
          @@@@@: The node is a "Notation".
  @Attr:
     @@Name:  nodeName
     @@Description:
        @@@lang:en
        @@@@: The node name.
     @@Get:
        @@@Type:  DOMString
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@: $r = null;
     @@RedefinedBy: Attr
     @@RedefinedBy: CDATASection
     @@RedefinedBy: Comment
     @@RedefinedBy: Document
     @@RedefinedBy: DocumentFragment
     @@RedefinedBy: DocumentType
     @@RedefinedBy: Element
     @@RedefinedBy: Entity
     @@RedefinedBy: EntityReference
     @@RedefinedBy: Notation
     @@RedefinedBy: ProcessingInstruction
     @@RedefinedBy: Text
  @Attr:
     @@Name:  nodeValue
     @@Description:
       @@@lang:en
       @@@@: The value of this node.
     @@Get:
        @@@Type:  DOMString
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: DOMSTRING_SIZE_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              The attribute would return more characters than fit in 
              a DOMString variable on the implementation platform.
        @@@Def:
          @@@@Type: 
            lang:Perl
          @@@@@: $r = null;
     @@Set:
        @@@Type:  DOMString
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NO_MODIFICATION_ALLOWED_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              The node is read-only and the node is not defined to be "null".
        @@@Description:
          @@@@lang:en
          @@@@@:
            New node value.
            Note that setting this attribute has no effect if 
            the node value is defined to be "null".
        @@@Warning:
          @@@@Type: 
            ManakaiDOM:ManakaiDOMImplementationWarning
          @@@@Name: ATTR_SET_NO_EFFECT
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Setting this attribute has no effect since the node 
              value is defined to be "null".
        @@@ImplNote:
          @@@@lang:en
          @@@@@:
            Don't raise an exception even if the node is read-only when 
            the node value is defined to be "null".
        @@@Def: \
    @@RedefinedBy: Attr
    @@RedefinedBy: CharacterData
    @@RedefinedBy: ProcessingInstruction
  @Attr:
     @@Name:  nodeType
     @@Description:
       @@@lang:en
       @@@@: The type of this node.
     @@Get:
        @@@Type:  unsigned-short
        @@@Description:
          @@@@lang:en
          @@@@@: The code representing the type of the underlying object.
        @@@Def: \
     @@RedefinedBy: Attr
     @@RedefinedBy: CDATASection
     @@RedefinedBy: Comment
     @@RedefinedBy: Document
     @@RedefinedBy: DocumentFragment
     @@RedefinedBy: DocumentType
     @@RedefinedBy: Element
     @@RedefinedBy: Entity
     @@RedefinedBy: EntityReference
     @@RedefinedBy: Notation
     @@RedefinedBy: ProcessingInstruction
     @@RedefinedBy: Text
  @Attr:
     @@Name:  parentNode
     @@Description:
       @@@lang:en
       @@@@: The parent of this node.
     @@Get:
        @@@Type:  Node
        @@@Description:
          @@@@lang:en
          @@@@@: The parent node.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The node does not have a parent since its type is either 
              "Attr", "Document", "DocumentFragment", "Entity", 
              or "Notation", since it has just been created 
              and not yet added, or since it has been removed from the tree.
        @@@Def:
          @@@@Type:
            lang:dis
          @@@@GetPropNode:
            infoset:parent
  @Attr:
     @@Name:  childNodes
     @@Get:
        @@@Type:  NodeList
  @Attr:
     @@Name:  firstChild
     @@Description:
       @@@lang:en
       @@@@: The first child of this node.
     @@Get:
        @@@Type:  Node
        @@@Description:
          @@@@lang:en
          @@@@@: The first child node.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: There is no child node.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            $r = $self->{<Q:TreeCore:node>}->{<Q:infoset:children>}->[0];
                      ## Condition sensitive
            $r = $r ? __CLASS{Node}__->__INT{getNodeReference}__ ($r)
                    : null;
    @@Level[list]:
      1
      2
      3
    @@SpecLevel:1
  @Attr:
     @@Name:  lastChild
     @@Description:
        @@@lang:en
        @@@@: The last child of this node.
     @@Get:
        @@@Type:  Node
        @@@Description:
          @@@@lang:en
          @@@@@: The last child node.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: There is no child node.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            $r = $self->{<Q:TreeCore:node>}->{<Q:infoset:children>}->[-1];
                      ## Condition sensitive
            $r = $r ? __CLASS{Node}__->__INT{getNodeReference}__ ($r)
                    : null;
     @@Level[list]:
        1
        2
        3
     @@SpecLevel:1
  @Attr:
     @@Name:  previousSibling
     @@Description:
        @@@lang:en
        @@@@:
          The node immediately preceding this node.
     @@Get:
        @@@Type:  Node
        @@@Description:
          @@@@lang:en
          @@@@@: The node immediately preceding this node.
        @@@InCase:
          @@@@Value:
             @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: There is no such node.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            if (my $parent = $self->{<Q:TreeCore:node>}->{<Q:infoset:parent>}) {
              for (@{$parent->{<Q:infoset:children>}}) {
                if ($_->{<Q:TreeCore:nodeID>} eq
                         $self->{<Q:TreeCore:node>}->{<Q:TreeCore:nodeID>}) {
                  last;
                } else {
                  $r = $_;
                }
              }
            }
            if ($r) {
                   ## Condition sensitive
              $r = __CLASS{Node}__->__INT{getNodeReference}__ ($r);
            }
          @@@@ImplNote:
            @@@@@lang:en
            @@@@@@:
              This code will return incorrect answer if the infoset:children 
              of the infoset:parent does not have "this" node 
              (i.e. the tree is broken).
    @@Level[list]:
      1
      2
      3
    @@SpecLevel:1
  @Attr:
     @@Name:  nextSibling
     @@Description:
        @@@lang:en
        @@@@: The node immediately following this node.
     @@Get:
        @@@Type:  Node
        @@@Description:
          @@@@lang:en
          @@@@@: The node immediately following this node.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: There is no such node.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            if (my $parent = $self->{<Q:TreeCore:node>}->{<Q:infoset:parent>}) {
              my $next = 0;
              for (@{$parent->{<Q:infoset:children>}}) {
                if ($next) {
                       ## Condition sensitive
                  $r = __CLASS{Node}__->__INT{getNodeReference}__ ($_);
                  last;
                } elsif ($_->{<Q:TreeCore:nodeID>} eq
                         $self->{<Q:TreeCore:node>}->{<Q:TreeCore:nodeID>}) {
                  $next = 1;
                }
              }
            }
    @@Level[list]:
      1
      2
      3
    @@SpecLevel:1
  @Attr:
     @@Name:  attributes
     @@Get:
        @@@Type:  NamedNodeMap
  @Attr:
     @@Name:  ownerDocument
     @@Description:
       @@@lang:en
       @@@@:
         The "Document" object associated with this node.
     @@Get:
        @@@Type:  Document
        @@@Description:
          @@@@lang:en
          @@@@@: The "Document" object associated with this node.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The node is a "Document" or the node is a "DocumentType" 
              that is not used with any "Document" yet.
        @@@Def:
          @@@@Type:
            lang:dis
          @@@@GetPropNode:
            DOMCore:ownerDocument
     @@SpecLevel[list]:
        1
        2
     @@Level[list]:
        1
     @@ImplNote:
        @@@lang:en
        @@@@:
          The DOM Level 1 specification does not take the "DocumentType" 
          without any "Document" into account since DOM Level 1 
          does not have "createDocumentType" so that no "DocumentType" 
          object can be exist without its parent of the "Document".
  @Method:
     @@Name:  insertBefore
     @@Return:
        @@@Type:  Node
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  newChild
        @@@Type:  Node
     @@Param:
        @@@Name:  refChild
        @@@Type:  Node
     @@ModifiedLevel[list]:  3
  @Method:
     @@Name:  replaceChild
     @@Return:
        @@@Type:  Node
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  newChild
        @@@Type:  Node
     @@Param:
        @@@Name:  oldChild
        @@@Type:  Node
     @@ModifiedLevel[list]:  3
  @Method:
     @@Name:  removeChild
     @@Return:
        @@@Type:  Node
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  oldChild
        @@@Type:  Node
     @@ModifiedLevel[list]:  3
  @Method:
     @@Name:  appendChild
     @@Description:
       @@@lang:en
       @@@@:
         Add a node to the end of the list of children of this node.
     @@Param:
        @@@Name:  newChild
        @@@Type:  Node
        @@@Description:
          @@@@lang:en
          @@@@@:
            The node to add.  If it is already in the tree, 
            it is first removed.
        @@@InCase:
          @@@@Type: DocumentFragment
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The entire contents of the document fragment 
              are moved into the child list of this node. 
              The child list of the "newChild" is to be empty.
     @@Return:
        @@@Type:  Node
        @@@Description:
          @@@@lang:en
          @@@@@: The node added.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: HIERARCHY_REQUEST_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Either this node is of a type that does not allow 
              children of the type of the "newChild" node [DOM 1,2,3], 
              the node to add is one of ancestors of this node [DOM 1,2,3],
              the node to add is this node itself [DOM 3] or 
              this node is of type "Document" and the attemption 
              to append a second "DocumentType" or "Element" node 
              is made [DOM 3].
          @@@@ImplNote:
            @@@@@lang:en
            @@@@@@:
              Is this error raised if this node is of type "Document" and 
              it has an "Element" node but no "DocumentType" node then 
              the attemption to add a "DocumentType" is made?
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: WRONG_DOCUMENT_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The "newChild" node was created from a different document 
              than the one that created this node.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NO_MODIFICATION_ALLOWED_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Either this node is read-only [DOM 1,2,3] or
              the previous (current) parent 
              of the "newChild" node is read-only [DOM 3].
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NOT_SUPPORTED_ERR
          @@@@Level: 3
          @@@@SpecLevel:3
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The "newChild" node is a child of the "Document" node and 
              the DOM implementation does not support the removal of 
              the "DocumentType" or "Element" child node from the 
              "Document" node.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            my $node;
            my $newNode;
            CHKDOC: {
              if (ref $newChild and $newChild->isa ('__IIF{Node::}__')) {
                $node = $self->{<Q:TreeCore:node>};
                $newNode = $newChild->{<Q:TreeCore:node>};
                if ($node->{<Q:DOMCore:ownerDocument>}) {
                  if ($newNode->{<Q:DOMCore:ownerDocument>}) {
                    last CHKDOC if $node->{<Q:DOMCore:ownerDocument>}
                                        ->{<Q:TreeCore:nodeID>} eq
                                   $newNode->{<Q:DOMCore:ownerDocument>}
                                        ->{<Q:TreeCore:nodeID>};
                  }
                } else { ## I'm "Document" or "DocumentType" node.
                  if ($node->{<Q:DOMCore:nodeType>} eq <Q:infoset:Document>) {
                    last CHKDOC;
                  }
                }
              }
              __EXCEPTION{
                DOMException.WRONG_DOCUMENT_ERR:
                  <Q:MDOM_EXCEPTION:param-name> => 'newChild',
              }__;
            } # CHKDOC
            my $parentNode = $newNode->{<Q:infoset:parent>};
            if ($node->{<Q:DOMCore:read-only>}) {
              __EXCEPTION{
                DOMException.NO_MODIFICATION_ALLOWED_ERR:
                  <Q:MDOM_EXCEPTION:subtype> => <Q:MDOM_EXCEPTION:NOMOD_DEST>,
                  <Q:MDOM_EXCEPTION:param-name> => 'newChild',
              }__;
            } elsif ($parentNode and $parentNode->{<Q:DOMCore:read-only>}) {
              __EXCEPTION{
                DOMException.NO_MODIFICATION_ALLOWED_ERR:
                  <Q:MDOM_EXCEPTION:subtype> => <Q:MDOM_EXCEPTION:NOMOD_SRC>,
                  <Q:MDOM_EXCEPTION:param-name> => 'newChild',
              }__;
            }
            CHKTYPE: {
              if ({
                    <Q:infoset:Element> => 1,
                    <Q:DOMCore:DocumentFragment> => 1,
                    <Q:DOMCore:Entity> => 1,
                    <Q:DOMCore:EntityReference> => 1,
                  }->{$node->{<Q:DOMCore:nodeType>}}) {
                if ({
                      <Q:infoset:Element> => 1,
                      <Q:DOMCore:Text> => 1,
                      <Q:infoset:Comment> => 1,
                      <Q:infoset:ProcessingInstruction> => 1,
                      <Q:DOMCore:CDATASection> => 1,
                      <Q:DOMCore:EntityReference> => 1,
                    }->{$newNode->{<Q:DOMCore:nodeType>}}) {
                  last CHKTYPE;
                }
              } elsif ($node->{<Q:DOMCore:nodeType>} eq <Q:infoset:Document>) {
                if ({
                      <Q:infoset:Element> => 1,
                      <Q:infoset:DocumentTypeDeclaration> => 1,
                    }->{$newNode->{<Q:DOMCore:nodeType>}}) {
                  FOUND: {
                    for (@{$node->{<Q:infoset:children>}}) {
                      last FOUND if $_->{<Q:DOMCore:nodeType>} eq
                                    $newNode->{<Q:DOMCore:nodeType>};
                    }
                    last CHKTYPE;
                  }
                  __EXCEPTION{
                    DOMException.HIERARCHY_REQUEST_ERR:
                     <Q:MDOM_EXCEPTION:subtype>
                          => <Q:MDOM_EXCEPTION:HIERARCHY_TOO_MANY_NODES>,
                     <Q:DOMCore:nodeType> => $newNode->{<Q:DOMCore:nodeType>},
                     <Q:MDOM_EXCEPTION:param-name> => 'newChild',
                  }__;
                } elsif ({
                           <Q:infoset:Comment> => 1,
                           <Q:infoset:ProcessingInstruction> => 1,
                         }->{$newNode->{<Q:DOMCore:nodeType>}}) {
                  last CHKTYPE;
                }
              } elsif ($node->{<Q:DOMCore:nodeType>} eq <Q:infoset:Attribute>) {
                if ({
                      <Q:DOMCore:Text> => 1,
                      <Q:DOMCore:EntityReference> => 1,
                    }->{$newNode->{<Q:DOMCore:nodeType>}}) {
                  last CHKTYPE;
                }
              } # $node->{<Q:DOMCore:nodeType>}
              __EXCEPTION{
                DOMException.HIERARCHY_REQUEST_ERR:
                  <Q:MDOM_EXCEPTION:subtype>
                       => <Q:MDOM_EXCEPTION:HIERARCHY_BAD_TYPE>,
                  <Q:infoset:nodeType> => $newNode->{<Q:infoset:nodeType>},
                  <Q:MDOM_EXCEPTION:param-name> => 'newChild',
              }__;
            } # CHKTYPE
            if ($node->{<Q:TreeCore:treeID>} eq
                $newNode->{<Q:TreeCore:treeID>}) {
              my $n = $newNode;
              {
                if ($n->{<Q:TreeCore:nodeID>} eq $node->{<Q:TreeCore:nodeID>}) {
                  __EXCEPTION{
                    DOMException.HIERARCHY_REQUEST_ERR:
                      <Q:MDOM_EXCEPTION:subtype>
                           => <Q:MDOM_EXCEPTION:HIERARCHY_ANCESTOR_OR_SELF>,
                      <Q:MDOM_EXCEPTION:param-name> => 'newChild',
                  }__;
                }
                if ($n->{<Q:infoset:parent>}) {
                  $n = $n->{<Q:infoset:parent>};
                  redo;
                }
              }
            }
            if ($newNode->{<Q:DOMCore:nodeType>} eq
                <Q:DOMCore:DocumentFragment>) {
              my @newNode = @{$newNode->{<Q:infoset:children>}};
              $newNode->{<Q:infoset:children>} = [];
              for my $newNode (@newNode) {
                delete $newNode->{<Q:infoset:parent>};
                $node->__SUPER{ManakaiDOMNodeObject::}__::__INT{importTree}__
                                                                   ($newNode);
                $newNode->{<Q:infoset:parent>} = $node;
              }
              push @{$node->{<Q:infoset:children>}}, @newNode;
            } else {
              if ($parentNode) {
                for my $i (0..$#{$parentNode->{<Q:infoset:children>}}) {
                  if ($parentNode->{<Q:infoset:children>}->[$i]
                                 ->{<Q:TreeCore:nodeID>} eq
                      $newNode->{<Q:TreeCore:nodeID>}) {
                    delete $parentNode->{<Q:infoset:children>}->[$i];
                    last;
                  }
                }
                delete $newNode->{<Q:infoset:parent>};
              }
              $node->__SUPER{ManakaiDOMNodeObject::}__::__INT{importTree}__
                                                                 ($newNode);
              push @{$node->{<Q:infoset:children>}}, $newNode;
              $newNode->{<Q:infoset:parent>} = $node;
            } # $newNode->{<Q:DOMCore:nodeType>}
     @@Level[list]:
        1
        3
     @@SpecLevel[list]:
        1
        3
  @Method:
     @@Name:  hasChildNodes
     @@Description:
       @@@lang:en
       @@@@: Return whether this node has any children.
     @@Return:
        @@@Type:  boolean
        @@@InCase:
          @@@@Value: true
          @@@@Description:
            @@@@@lang:en
            @@@@@@: This node has any child nodes.
        @@@InCase:
          @@@@Value: false
          @@@@Description:
            @@@@@lang:en
            @@@@@@: This node does not have any child node.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            $r = @{$self->{<Q:TreeCore:node>}->{<Q:infoset:children>}}
                   ? true : false;
  @Method:
     @@Name:  cloneNode
     @@Return:
        @@@Type:  Node
     @@Param:
        @@@Name:  deep
        @@@Type:  boolean
  @Method:
     @@Name:  normalize
     @@Level[list]:
       1
       2
       3
     @@SpecLevel[list]:
       1
       2
       3
  @Method:
     @@Name:  isSupported
     @@Return:
        @@@Type:  boolean
     @@Param:
        @@@Name:  feature
        @@@Type:  DOMString
     @@Param:
        @@@Name:  version
        @@@Type:  DOMString
     @@Level[list]:  2
     @@SpecLevel:2
  @Attr:
     @@Name:  namespaceURI
     @@Description:
       @@@lang:en
       @@@@:
         The namespace URI of this node.
       \
         Note that this is not a computed value that is the result 
         of a namespace lookup based on an examination of the 
         namespace declarations in scope, but is merely the 
         namespace URI given at creation time.
     @@Get:
        @@@Type:
          ManakaiDOM:ManakaiDOMNamespaceURI
        @@@Description:
          @@@@lang:en
          @@@@@: The namespace URI.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The namespace URI is unspecified (the "null" namespace or 
              the attribute in a per-element-type partition),
              the type of the node is other than "ELEMENT_NODE" or 
              "ATTRIBUTE_NODE", or 
              the node is created with a DOM Level 1 methods.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@: $r = null;
     @@Level[list]:  2
     @@SpecLevel:2
     @@RedefinedBy: Element
     @@RedefinedBy: Attr
  @Attr:
     @@Name:  prefix
     @@Description:
       @@@lang:en
       @@@@: The namespace prefix of this node.
     @@Get:
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The namespace prefix.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Either the namespace prefix is unspecified, the node 
              is created with a DOM Level 1 method, or the type 
              of the node is other than "ELEMENT_NODE" and 
              "ATTRIBUTE_NODE".
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@: $r = null;
     @@Set:
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:
            The namespace prefix.
            Note that setting this attribute has no effect if 
            the namespace prefix is defined to be "null".
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The namespace prefix is unspecified.
        @@@InCase:
          @@@@Value: \
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The result is implementation dependent.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: INVALID_CHARACTER_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The specified prefix contains an illegal character 
              accoding to the XML version in use in the document.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NO_MODIFICATION_ALLOWED_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: This node is read-only.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NAMESPACE_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Either the specified prefix is malformed per the 
              XML Namespace specification, non-"null" prefix is 
              specified but the "namespaceURI" of this node is "null", 
              the specified prefix is "xml" and the "namespaceURI" 
              of this node is different from 
              "http://www.w3.org/XML/1998/namespace", if this 
              node is an attribute and the specified prefix is "xmlns" 
              and the "namespaceURI" of this node is different from 
              "http://www.w3.org/2000/xmlns/", or if this node is 
              an attribute and the "qualifiedName" of this node is 
              "xmlns".
        @@@ImplNote:
          @@@@lang:en
          @@@@@:
            Which of INVALID_CHAR_ERR and NAMESPACE_ERR should be 
            raisen in case the new prefix has a COLON (":") in 
            unclear.  In this implementation, the later is chosen 
            since it is related to the XML Namespace but not to the XML.
        @@@Warning:
          @@@@Type:
            ManakaiDOM:ManakaiDOMImplementationWarning
          @@@@Name: ATTR_SET_NO_EFFECT
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Setting this attribute has no effect.
        @@@Def: \
     @@Level[list]:  2
     @@SpecLevel:2
     @@RedefinedBy: Attr
     @@RedefinedBy: Element
  @Attr:
     @@Name:  localName
     @@Description:
       @@@lang:en
       @@@@: The local part of the qualified name of this node.
     @@Get:
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:
            The local name.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The type of the node is other than "ELEMENT_NODE" or 
              "ATTRIBUTE_NODE", or the node is created with a DOM Level 1 
              methods.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@: $r = null;
     @@Level[list]:  2
     @@SpecLevel:2
     @@RedefinedBy: Element
     @@RedefinedBy: Attr
  @Method:
     @@Name:  hasAttributes
     @@Return:
        @@@Type:  boolean
     @@Level[list]:  2
     @@SpecLevel:2
  @Attr:
     @@Name:  baseURI
     @@Get:
        @@@Type:  DOMString
     @@Level[list]:  3
     @@SpecLevel:3
     @@Spec:
       @@@DOM3:
         http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#baseURIs-Considerations
  @ConstGroup:
     @@Name:  DocumentPosition
     @@Description:
       @@@lang:en
       @@@@:
         A bitmask indicating the relative document position of a node 
         with respect to another node.
     @@Level: 3
     @@SpecLevel:3
     @@Const:
        @@@Name:  DOCUMENT_POSITION_DISCONNECTED
        @@@Type:  unsigned-short
        @@@Value:  0x01
        @@@Description:
          @@@@lang:en
          @@@@@:
            The two nodes are disconnected.  Order between disconnected nodes 
            is always implementation-specific.
     @@Const:
        @@@Name:  DOCUMENT_POSITION_PRECEDING
        @@@Type:  unsigned-short
        @@@Value:  0x02
        @@@Description:
          @@@@lang:en
          @@@@@:
            The node precedes the reference node.
     @@Const:
        @@@Name:  DOCUMENT_POSITION_FOLLOWING
        @@@Type:  unsigned-short
        @@@Value:  0x04
        @@@Description:
          @@@@lang:en
          @@@@@: The node fllows the reference node.
     @@Const:
        @@@Name:  DOCUMENT_POSITION_CONTAINS
        @@@Type:  unsigned-short
        @@@Value:  0x08
        @@@Description: 
          @@@@lang:en
          @@@@@:
            The node contains the reference node.  A node that 
            contains is always preceding, too.
     @@Const:
        @@@Name:  DOCUMENT_POSITION_CONTAINED_BY
        @@@Type:  unsigned-short
        @@@Value:  0x10
        @@@Description:
          @@@@lang:en
          @@@@@:
            The node is contained by the reference node. 
            A node that is contained is always following, too.
     @@Const:
        @@@Name:  DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC
        @@@Type:  unsigned-short
        @@@Value:  0x20
        @@@Description:
          @@@@lang:en
          @@@@@:
            The determination of preceding versus following is 
            implementation-specific.
  @Method:
     @@Name:  compareDocumentPosition
     @@Return:
        @@@Type:  unsigned-short
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  other
        @@@Type:  Node
     @@Level[list]:  3
     @@SpecLevel:3
  @Attr:
     @@Name:  textContent
     @@Get:
        @@@Type:  DOMString
        @@@Exception[list]:  DOMException
     @@Set:
        @@@Type:  DOMString
        @@@Exception[list]:  DOMException
     @@Level[list]:  3
     @@SpecLevel:3
  @Method:
     @@Name:  isSameNode
     @@Description:
        @@@lang:en
        @@@@:
          Return whether this node is the same node as the given one.
        \
          When two "Node" references are references to the same object, 
          even if through a proxy, the references may be used completely 
          interchangably, such that all attributes have the same values 
          and calling the same method on either reference always has 
          exactly same effect.
     @@Operator:
        @@@@: eq
        @@@Type:
          lang:Perl
     @@Param:
        @@@Name:  other
        @@@Type:  Node
        @@@Description:
          @@@@lang:en
          @@@@@: The node to test against.
     @@Return:
        @@@Type:  boolean
        @@@InCase:
          @@@@Value: true
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The two nodes are the same.
        @@@InCase:
          @@@@Value: false
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The two nodes are not same.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            if (ref $other and
                $other->isa ('__IIF{ManakaiDOMNodeReference::}__') and
                $other->{<Q:TreeCore:node>}->{<Q:TreeCore:nodeID>}
                  eq $self->{<Q:TreeCore:node>}->{<Q:TreeCore:nodeID>}) {
              $r = true;
            }
     @@Level[list]:  3
     @@SpecLevel:3
  @Method:
     @@Name:  lookupPrefix
     @@Return:
        @@@Type:  DOMString
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:
          ManakaiDOM:ManakaiDOMNamespaceURI
     @@Level[list]:  3
     @@SpecLevel:3
  @Method:
     @@Name:  isDefaultNamespace
     @@Return:
        @@@Type:  boolean
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:
          ManakaiDOM:ManakaiDOMNamespaceURI
     @@Level[list]:  3
     @@SpecLevel:3
  @Method:
     @@Name:  lookupNamespaceURI
     @@Return:
        @@@Type:
          ManakaiDOM:ManakaiDOMNamespaceURI
     @@Param:
        @@@Name:  prefix
        @@@Type:  DOMString
     @@Level[list]:  3
     @@SpecLevel:3
  @Method:
     @@Name:  isEqualNode
     @@Operator:
       @@@@: ==
       @@@Type:
          lang:Perl
     @@Return:
        @@@Type:  boolean
     @@Param:
        @@@Name:  arg
        @@@Type:  Node
     @@Level[list]:  3
     @@SpecLevel:3
  @Method:
     @@Name:  getFeature
     @@Return:
        @@@Type:  DOMObject
     @@Param:
        @@@Name:  feature
        @@@Type:  DOMString
     @@Param:
        @@@Name:  version
        @@@Type:  DOMString
     @@Level[list]:  3
     @@SpecLevel:3
  @Method:
     @@Name:  setUserData
     @@Return:
        @@@Type:  DOMUserData
     @@Param:
        @@@Name:  key
        @@@Type:  DOMString
     @@Param:
        @@@Name:  data
        @@@Type:  DOMUserData
     @@Param:
        @@@Name:  handler
        @@@Type:  UserDataHandler
     @@Level[list]:  3
     @@SpecLevel:3
  @Method:
     @@Name:  getUserData
     @@Return:
        @@@Type:  DOMUserData
     @@Param:
        @@@Name:  key
        @@@Type:  DOMString
     @@Level[list]:  3
     @@SpecLevel:3

  @IntMethod:
    @@Name: newObject
    @@Description:
      @@@lang:en
      @@@@: Construct an object for a new instance of the "Node".
    @@Return:
      @@@Type:
        ManakaiDOM:ManakaiDOMNodeObject
      @@@Description:
        @@@@lang:en
        @@@@@: The object for the "Node" to be created.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          my $node = $r = __CLASS{ManakaiDOMNodeObject::}__->__INT{new}__;
          push @{$node->{<Q:TreeCore:origin>}}, <Q:infoset:parent>;
          push @{$node->{<Q:TreeCore:subnode>}}, <Q:infoset:children>;
          push @{$node->{<Q:TreeCore:irefnode>}}, <Q:DOMCore:ownerDocument>;
          $node->{<Q:infoset:children>} = [];
          $node->{<Q:DOMCore:hasFeature>}->{XML} = true;
              ## More consideration required for the feature
       @@@ImplNote:
         @@@@lang:en
         @@@@@:
           Other properties required to be a legal "Node" object:
           DOMCore:nodeType.
         \
           Optional properties: infoset:localName, infoset:prefix,
           infoset:publicIdentifier, infoset:systemIdentifier,
           DOMCore:ownerDocument, infoset:namespaceName, DOMCore:name,
           DOMCore:read-only.

  @IntMethod:
    @@Name: getNodeReference
    @@Description:
      @@@lang:en
      @@@@:
        Create a new "Node" object blessed with the appropriate class.
      \
        To create a new "Document", use the internal method 
        "newByDocumentType" of the "Document" interface.
    @@Param:
      @@@Name: object
      @@@Type:
        ManakaiDOM:ManakaiDOMNodeObject
      @@@Description:
        @@@@lang:en
        @@@@@: The node object referred to.
    @@Return:
      @@@Type: Node
      @@@Description:
        @@@@lang:en
        @@@@@: The node reference.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          my $nt = $object->{<Q:DOMCore:nodeType>};
                        ## Condition sensitive
          my $class = q<__CLASS{Node}__>;
          if ($nt eq <Q:infoset:Element>) {
            ## TODO: Find class by namespace URI and local name
                       ## Condition sensitive
            $class = q<__CLASS{Element}__>;
          } elsif ($nt eq <Q:infoset:Attribute>) {
            ## TODO: Find class by namespace URI and local name
                       ## Condition sensitive
            $class = q<__CLASS{Attr}__>;
          } elsif ($nt eq <Q:DOMCore:Text>) {
                       ## Condition sensitive
            $class = q<__CLASS{Text}__>;
          } elsif ($nt eq <Q:infoset:Comment>) {
                       ## Condition sensitive
            $class = q<__CLASS{Comment}__>;
          } elsif ($nt eq <Q:infoset:Document>) {
            ## TODO: Find class by doctype
                       ## Condition sensitive
            $class = q<__CLASS{Document}__>;
          } elsif ($nt eq <Q:DOMCore:DocumentFragment>) {
                       ## Condition sensitive
            $class = q<__CLASS{DocumentFragment}__>;
          } elsif ($nt eq <Q:DOMCore:EntityReference>) {
                       ## Condition sensitive
            $class = q<__CLASS{EntityReference}__>;
          } elsif ($nt eq <Q:infoset:ProcessingInstruction>) {
            ## TODO: Find class by namespace URI and local name
                       ## Condition sensitive
            $class = q<__CLASS{ProcessingInstruction}__>;
          } elsif ($nt eq <Q:DOMCore:Entity>) {
                       ## Condition sensitive
            $class = q<__CLASS{Entity}__>;
          } elsif ($nt eq <Q:DOMCore:CDATASection>) {
                       ## Condition sensitive
            $class = q<__CLASS{CDATASection}__>;
          } elsif ($nt eq <Q:infoset:Notation>) {
                       ## Condition sensitive
            $class = q<__CLASS{Notation}__>;
          } else {
            __EXCEPTION{
              ManakaiDOMImplementationException.MDOM_DEBUG_BUG: 
                <Q:MDOM_EXCEPTION:values> => {
                  <Q:DOMCore:nodeType> => $nt,
                },
            }__;
          }
          $r = $object->__SUPER{ManakaiDOMNodeObject::}__::__INT{newReference}__
                                                                      ($class);
    @@Level[list]:
       1
       2
       3

## IF: Node

IF:
  @Name:  NodeList
  @Method:
     @@Name:  item
     @@Return:
        @@@Type:  Node
     @@Param:
        @@@Name:  index
        @@@Type:  unsigned-long
  @Attr:
     @@Name:  length
     @@Get:
        @@@Type:  unsigned-long
IF:
  @Name:  NamedNodeMap
  @Method:
     @@Name:  getNamedItem
     @@Return:
        @@@Type:  Node
     @@Param:
        @@@Name:  name
        @@@Type:  DOMString
  @Method:
     @@Name:  setNamedItem
     @@Return:
        @@@Type:  Node
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  arg
        @@@Type:  Node
  @Method:
     @@Name:  removeNamedItem
     @@Return:
        @@@Type:  Node
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  name
        @@@Type:  DOMString
  @Method:
     @@Name:  item
     @@Return:
        @@@Type:  Node
     @@Param:
        @@@Name:  index
        @@@Type:  unsigned-long
  @Attr:
     @@Name:  length
     @@Get:
        @@@Type:  unsigned-long
  @Method:
     @@Name:  getNamedItemNS
     @@Return:
        @@@Type:  Node
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:  DOMString
     @@Param:
        @@@Name:  localName
        @@@Type:  DOMString
     @@Level[list]:  2
     @@SpecLevel:2
  @Method:
     @@Name:  setNamedItemNS
     @@Return:
        @@@Type:  Node
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  arg
        @@@Type:  Node
     @@Level[list]:  2
     @@SpecLevel:2
  @Method:
     @@Name:  removeNamedItemNS
     @@Return:
        @@@Type:  Node
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:  DOMString
     @@Param:
        @@@Name:  localName
        @@@Type:  DOMString
     @@Level[list]:  2
     @@SpecLevel:2

IF:
  @Name:  CharacterData
  @ISA: Node
  @Attr:
     @@Name:  data
     @@Get:
        @@@Type:  DOMString
        @@@Exception[list]:  DOMException
  @@@Def: ##TBD
     @@Set:
        @@@Type:  DOMString
        @@@Exception[list]:  DOMException
  @Attr:
     @@Name:  length
     @@Get:
        @@@Type:  unsigned-long
  @Method:
     @@Name:  substringData
     @@Return:
        @@@Type:  DOMString
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  offset
        @@@Type:  unsigned-long
     @@Param:
        @@@Name:  count
        @@@Type:  unsigned-long
  @Method:
     @@Name:  appendData
     @@Param:
        @@@Name:  arg
        @@@Type:  DOMString
     @@Return:
        @@@Exception[list]:  DOMException
  @Method:
     @@Name:  insertData
     @@Param:
        @@@Name:  offset
        @@@Type:  unsigned-long
     @@Param:
        @@@Name:  arg
        @@@Type:  DOMString
     @@Return:
        @@@Exception[list]:  DOMException
  @Method:
     @@Name:  deleteData
     @@Param:
        @@@Name:  offset
        @@@Type:  unsigned-long
     @@Param:
        @@@Name:  count
        @@@Type:  unsigned-long
     @@Return:
        @@@Exception[list]:  DOMException
  @Method:
     @@Name:  replaceData
     @@Param:
        @@@Name:  offset
        @@@Type:  unsigned-long
     @@Param:
        @@@Name:  count
        @@@Type:  unsigned-long
     @@Param:
        @@@Name:  arg
        @@@Type:  DOMString
     @@Return:
        @@@Exception[list]:  DOMException
  @ReAttr:
     @@Name:  nodeValue
     @@Description:
       @@@lang:en
       @@@@: The value of this node.
     @@Get:
        @@@Type:  DOMString
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: DOMSTRING_SIZE_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              The node value, i.e. same as "data".
        @@@Def:
          @@@@Type: 
            lang:Perl
          @@@@@: __INT{{data}}__;
     @@Set:
        @@@Type:  DOMString
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NO_MODIFICATION_ALLOWED_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              The node is read-only.
        @@@Description:
          @@@@lang:en
          @@@@@:
            New node value.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
                           ## Condition sensitive
            __DEEP{ $self->__SUPER{CharacterData}__::data ($given) }__;
    @@Redefine: Node
    @@Level[list]:
      1
      2
      3
    @@SpecLevel:1

IF:
  @Name:  Attr
  @ISA:  Node
  @Require:
    @@Module:
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@use: 
          @@@@@@:
            Char::Class::XML
          @@@@@Import[list]:
            InXML_NameStartChar10
            InXMLNameChar10
            InXMLNameStartChar11
            InXMLNameChar11
      @@@Condition: DOM2
  @Attr:
     @@Name:  name
     @@Get:
        @@@Type:  DOMString
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            my $node = $self->{<Q:TreeCore:node>};
            if (defined $node->{<Q:infoset:localName>}) {
              $r = (defined $node->{<Q:infoset:prefix>} ?
                   $node->{<Q:infoset:prefix>} . ':' : '') . 
                   $node->{<Q:infoset:localName>};
            } else {
              $r = $node->{<Q:DOMCore:name>};
            }
  @Attr:
     @@Name:  specified
     @@Get:
        @@@Type:  boolean
  @Attr:
     @@Name:  value
     @@Get:
        @@@Type:  DOMString
  @@@Def:##TBD
     @@Set:
        @@@Type:  DOMString
        @@@Exception[list]:  DOMException
  @Attr:
     @@Name:  ownerElement
     @@Get:
        @@@Type:  Element
     @@Level[list]:  2
     @@SpecLevel:2
  @Attr:
     @@Name:  schemaTypeInfo
     @@Get:
        @@@Type:  TypeInfo
     @@Level[list]:  3
     @@SpecLevel:3
  @Attr:
     @@Name:  isId
     @@Get:
        @@@Type:  boolean
     @@Level[list]:  3
     @@SpecLevel:3
  
  @ReAttr:
    @@Name: attributes
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-84CF096
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-1841493061
    @@Get:
      @@@Type: NamedNodeMap
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          $r = null;
  @ReAttr:
     @@Name:  localName
     @@Description:
       @@@lang:en
       @@@@: The local part of the qualified name of this "Attr" node.
     @@Get:
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:
            The local name of the attribute.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The node is created with a DOM Level 1 methods.
        @@@Def:
          @@@@Type:
            lang:dis
          @@@@GetProp:
            infoset:localName
     @@Level[list]:  2
     @@SpecLevel:2
     @@Redefine: Node
  @Attr:
     @@Name:  namespaceURI
     @@Description:
       @@@lang:en
       @@@@:
         The namespace URI of this node.
     @@Get:
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The namespace URI.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The namespace URI is unspecified (the attribute in a 
              per-element-type partition) or 
              the node is created with a DOM Level 1 methods.
        @@@Def:
          @@@@Type:
            lang:dis
          @@@@GetProp:
            infoset:namespaceName
     @@Level[list]:  2
     @@SpecLevel:2
     @@Redefined: Node
  @ReAttr:
    @@Name: nodeName
    @@Description:
      @@@lang:en
      @@@@: The node name.
    @@Get:
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@:
          The attribute name.  It is same as the value of the "name" 
          attribute.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@: __INT{{name}}__;
    @@Redefine: Node
  @ReAttr:
    @@Name: nodeType
    @@Description:
      @@@lang:en
      @@@@: The type of this node.
    @@Get:
      @@@Type: unsigned-short
      @@@InCase:
        @@@@Label: ATTRIBUTE_NODE
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The node is an "Attr".
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@: $r = __SUPER{Node}__->ATTRIBUTE_NODE;
    @@Redefine: Node
  @ReAttr:
     @@Name:  nodeValue
     @@Description:
       @@@lang:en
       @@@@: The value of this node.
     @@Get:
        @@@Type:  DOMString
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: DOMSTRING_SIZE_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              The attribute value, i.e. same as "value".
        @@@Def:
          @@@@Type: 
            lang:Perl
          @@@@@: __INT{{value}}__;
     @@Set:
        @@@Type:  DOMString
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NO_MODIFICATION_ALLOWED_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: 
              The node is read-only.
        @@@Description:
          @@@@lang:en
          @@@@@:
            New node value.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
                           ## Condition sensitive
            __DEEP{ $self->__SUPER{Attr}__::name ($given) }__;
    @@Redefine: Node
    @@Level[list]:
        1
        2
        3
    @@SpecLevel:1
  @ReAttr:
     @@Name:  prefix
     @@Description:
       @@@lang:en
       @@@@: The namespace prefix of this node.
     @@Get:
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The namespace prefix.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Either the namespace prefix is unspecified or the node 
              is created with a DOM Level 1 method.
        @@@Def:
          @@@@Type:
            lang:dis
          @@@@GetProp:
            infoset:prefix
     @@Set:
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:
            The namespace prefix.
            Note that setting this attribute has no effect if 
            the namespace prefix is defined to be "null".
          \
            Note also that changing the prefix of an attribute that 
            is known to have a default value does not make a 
            new attribute with the default value and the original 
            prefix appear, since the "namespaceURI" and "localName" 
            do not change.  This is different from the defaulting 
            mechanism of the DTD, which is namespace-unaware.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The namespace prefix is unspecified.
        @@@InCase:
          @@@@Value: \
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The result is implementation dependent in DOM Level 3.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: INVALID_CHARACTER_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The specified prefix contains an illegal character 
              accoding to the XML version in use in the document.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NO_MODIFICATION_ALLOWED_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: This node is read-only.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NAMESPACE_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Either the specified prefix is malformed per the 
              XML Namespace specification, non-"null" prefix is 
              specified but the "namespaceURI" of this node is "null", 
              the specified prefix is "xml" and the "namespaceURI" 
              of this node is different from 
              "http://www.w3.org/XML/1998/namespace", the specified 
              prefix is "xmlns" and the "namespaceURI" of this node 
              is different from "http://www.w3.org/2000/xmlns/", or 
              the "qualifiedName" of this node is "xmlns".
        @@@ImplNote:
          @@@@lang:en
          @@@@@:
            Which of INVALID_CHAR_ERR and NAMESPACE_ERR should be 
            raisen in case the new prefix has a COLON (":") in 
            unclear.  In this implementation, the later is chosen 
            since it is related to the XML Namespace but not to the XML.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            my $node = $self->{<Q:TreeCore:node>};
            my $version = $node->{<Q:DOMCore:ownerDocument>}
                      ->__SUPER{Document::}__::__INT{getDocumentXMLVersion}__;
            if (not defined $version) {
              __WARNING{
                ManakaiDOMImplementationWarning.ATTR_SET_NO_EFFECT:
                  <Q:MDOM_EXCEPTION:subtype>
                              => <Q:MDOM_EXCEPTION:XML_NOT_SUPPORTED>,
              }__;
            } elsif (not defined $node->{<Q:infoset:localName>}) {
              __WARNING{
                ManakaiDOMImplementationWarning.ATTR_SET_NO_EFFECT:
                  <Q:MDOM_EXCEPTION:subtype>
                              => <Q:MDOM_EXCEPTION:NS_NOT_SUPPORTED>,
              }__;
            } elsif ($node->{<Q:DOMCore:read-only>}) {
              __WARNING{
                DOMException.NO_MODIFICATION_ALLOWED_ERR:
                  <Q:MDOM_EXCEPTION:subtype>
                              => <Q:MDOM_EXCEPTION:NODE_READ_ONLY>,
              }__;
            } elsif (not defined $node->{<Q:infoset:prefix>} and
                     $node->{<Q:infoset:localName>} and
                     $node->{<Q:infoset:localName>} eq 'xmlns') {
              __EXCEPTION{
                DOMException.NAMESPACE_ERR:
                  <Q:MDOM_EXCEPTION:subtype>
                       => <Q:MDOM_EXCEPTION:NS_QNAME_IS_XMLNS>,
              }__;
            } else {
              __CODE{CheckNCName: ncname => given, version => version,
                                  empty => warn3}__;
              if (not defined $given) {
                #
              } else {
                if (not defined $node->{<Q:infoset:namespaceName>}) {
                  __EXCEPTION{
                    DOMException.NAMESPACE_ERR:
                      <Q:MDOM_EXCEPTION:subtype>
                           => <Q:MDOM_EXCEPTION:NS_PREFIX_WITH_NULL_URI>,
                      <Q:MDOM_EXCEPTION:prefix> => $given,
                  }__;
                } elsif ($given eq 'xml' and
                         (not $node->{<Q:infoset:namespaceName>} or
                          $node->{<Q:infoset:namespaceName>} ne <Q:xml:>)) {
                  __EXCEPTION{
                    DOMException.NAMESPACE_ERR:
                      <Q:MDOM_EXCEPTION:subtype>
                           => <Q:MDOM_EXCEPTION:NS_XML_WITH_OTHER_URI>,
                      <Q:infoset:namespaceName>
                           => $node->{<Q:infoset:namespaceName>},
                  }__;
                } elsif ($given eq 'xmlns' and
                         (not $node->{<Q:infoset:namespaceName>} or
                          $node->{<Q:infoset:nanespaceName>} eq <Q:xmlns:>)) {
                  __EXCEPTION{
                    DOMException.NAMESPACE_ERR:
                      <Q:MDOM_EXCEPTION:subtype>
                           => <Q:MDOM_EXCEPTION:NS_XMLNS_WITH_OTHER_URI>,
                      <Q:infoset:namespaceName>
                           => $node->{<Q:infoset:namespaceName>},
                  }__;
                }
              }
              $node->{<Q:infoset:prefix>} = $given;
            }
     @@Level[list]:
       2
       3
     @@SpecLevel:2
     @@Redefine: Node

IF:
  @Name:  Element
  @ISA:  Node
  @Require:
    @@Module:
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@use: 
          @@@@@@:
            Char::Class::XML
          @@@@@Import[list]:
            InXML_NameStartChar10
            InXMLNameChar10
            InXMLNameStartChar11
            InXMLNameChar11
      @@@Condition: DOM2
  @Attr:
     @@Name:  tagName
     @@Get:
        @@@Type:  DOMString
        @@@Def:#TBD
  @Method:
     @@Name:  getAttribute
     @@Return:
        @@@Type:  DOMString
     @@Param:
        @@@Name:  name
        @@@Type:  DOMString
  @Method:
     @@Name:  setAttribute
     @@Param:
        @@@Name:  name
        @@@Type:  DOMString
     @@Param:
        @@@Name:  value
        @@@Type:  DOMString
     @@Return:
        @@@Exception[list]:  DOMException
  @Method:
     @@Name:  removeAttribute
     @@Param:
        @@@Name:  name
        @@@Type:  DOMString
     @@Return:
        @@@Exception[list]:  DOMException
  @Method:
     @@Name:  getAttributeNode
     @@Return:
        @@@Type:  Attr
     @@Param:
        @@@Name:  name
        @@@Type:  DOMString
  @Method:
     @@Name:  setAttributeNode
     @@Return:
        @@@Type:  Attr
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  newAttr
        @@@Type:  Attr
  @Method:
     @@Name:  removeAttributeNode
     @@Return:
        @@@Type:  Attr
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  oldAttr
        @@@Type:  Attr
  @Method:
     @@Name:  getElementsByTagName
     @@Return:
        @@@Type:  NodeList
     @@Param:
        @@@Name:  name
        @@@Type:  DOMString
  @Method:
     @@Name:  getAttributeNS
     @@Return:
        @@@Type:  DOMString
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:  DOMString
     @@Param:
        @@@Name:  localName
        @@@Type:  DOMString
     @@Level[list]:  2
     @@SpecLevel:2
  @Method:
     @@Name:  setAttributeNS
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:  DOMString
     @@Param:
        @@@Name:  qualifiedName
        @@@Type:  DOMString
     @@Param:
        @@@Name:  value
        @@@Type:  DOMString
     @@Return:
        @@@Exception[list]:  DOMException
     @@Level[list]:  2
     @@SpecLevel:2
  @Method:
     @@Name:  removeAttributeNS
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:  DOMString
     @@Param:
        @@@Name:  localName
        @@@Type:  DOMString
     @@Return:
        @@@Exception[list]:  DOMException
     @@Level[list]:  2
     @@SpecLevel:2
  @Method:
     @@Name:  getAttributeNodeNS
     @@Return:
        @@@Type:  Attr
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:  DOMString
     @@Param:
        @@@Name:  localName
        @@@Type:  DOMString
     @@Level[list]:  2
     @@SpecLevel:2
  @Method:
     @@Name:  setAttributeNodeNS
     @@Return:
        @@@Type:  Attr
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  newAttr
        @@@Type:  Attr
     @@Level[list]:  2
     @@SpecLevel:2
  @Method:
     @@Name:  getElementsByTagNameNS
     @@Return:
        @@@Type:  NodeList
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:  DOMString
     @@Param:
        @@@Name:  localName
        @@@Type:  DOMString
     @@Level[list]:  2
     @@SpecLevel:2
  @Method:
     @@Name:  hasAttribute
     @@Return:
        @@@Type:  boolean
     @@Param:
        @@@Name:  name
        @@@Type:  DOMString
     @@Level[list]:  2
     @@SpecLevel:2
  @Method:
     @@Name:  hasAttributeNS
     @@Return:
        @@@Type:  boolean
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:  DOMString
     @@Param:
        @@@Name:  localName
        @@@Type:  DOMString
     @@Level[list]:  2
     @@SpecLevel:2
  @Attr:
     @@Name:  schemaTypeInfo
     @@Get:
        @@@Type:  TypeInfo
     @@Level[list]:  3
     @@SpecLevel:3
  @Method:
     @@Name:  setIdAttribute
     @@Param:
        @@@Name:  name
        @@@Type:  DOMString
     @@Param:
        @@@Name:  isId
        @@@Type:  boolean
     @@Return:
        @@@Exception[list]:  DOMException
     @@Level[list]:  3
     @@SpecLevel:3
  @Method:
     @@Name:  setIdAttributeNS
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:  DOMString
     @@Param:
        @@@Name:  localName
        @@@Type:  DOMString
     @@Param:
        @@@Name:  isId
        @@@Type:  boolean
     @@Return:
        @@@Exception[list]:  DOMException
     @@Level[list]:  3
     @@SpecLevel:3
  @Method:
     @@Name:  setIdAttributeNode
     @@Param:
        @@@Name:  idAttr
        @@@Type:  Attr
     @@Param:
        @@@Name:  isId
        @@@Type:  boolean
     @@Return:
        @@@Exception[list]:  DOMException
     @@Level[list]:  3
     @@SpecLevel:3
  
  @ReAttr:
     @@Name:  localName
     @@Description:
       @@@lang:en
       @@@@: The local part of the qualified name of this "Element" node.
     @@Get:
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:
            The local name of the element type.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The node is created with a DOM Level 1 methods.
        @@@Def:
          @@@@Type:
            lang:dis
          @@@@GetProp:
            infoset:localName
     @@Level[list]:  2
     @@SpecLevel:2
     @@Redefine: Node
  @Attr:
     @@Name:  namespaceURI
     @@Description:
       @@@lang:en
       @@@@:
         The namespace URI of this node.
     @@Get:
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The namespace URI.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The namespace URI is unspecified (the "null" namespace) or 
              the node is created with a DOM Level 1 methods.
        @@@Def:
          @@@@Type:
            lang:dis
          @@@@GetProp:
            infoset:namespaceName
     @@Level[list]:  2
     @@SpecLevel:2
     @@Redefined: Node
  @ReAttr:
    @@Name: nodeName
    @@Description:
      @@@lang:en
      @@@@: The node name.
    @@Get:
      @@@Type: DOMString
      @@@Description:
        @@@@lang:en
        @@@@@: The element type name, i.e. same as "tagName" attribute.
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@: __INT{{tagName}}__;
    @@Redefine: Node
  @ReAttr:
    @@Name: nodeType
    @@Description:
      @@@lang:en
      @@@@: The type of this node.
    @@Get:
      @@@Type: unsigned-short
      @@@InCase:
        @@@@Label: ELEMENT_NODE
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The node is an "Element".
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@: $r = __SUPER{Node}__->ELEMENT_NODE;
    @@Redefine: Node
  @ReAttr:
     @@Name:  prefix
     @@Description:
       @@@lang:en
       @@@@: The namespace prefix of this node.
     @@Get:
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The namespace prefix.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Either the namespace prefix is unspecified or the node 
              is created with a DOM Level 1 method.
        @@@Def:
          @@@@Type:
            lang:dis
          @@@@GetProp:
            infoset:prefix
     @@Set:
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:
            The namespace prefix.
            Note that setting this attribute has no effect if 
            the namespace prefix is defined to be "null".
        @@@ImplNote:
          @@@@lang:en
          @@@@@:
            It is unclear whether the default attribute should be 
            added or deleted as the DTD declares.  The DOM Level 2 
            and 3 specifications mentions that changing of the 
            attribute name prefix does not make the default 
            attribute supplied, since the namespace URI does not change.
            This logic might be applied to the element node.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The namespace prefix is unspecified.
        @@@InCase:
          @@@@Value: \
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The result is implementation dependent in DOM Level 3.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: INVALID_CHARACTER_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The specified prefix contains an illegal character 
              accoding to the XML version in use in the document.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NO_MODIFICATION_ALLOWED_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: This node is read-only.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NAMESPACE_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Either the specified prefix is malformed per the 
              XML Namespace specification, non-"null" prefix is 
              specified but the "namespaceURI" of this node is "null" or 
              the specified prefix is "xml" and the "namespaceURI" 
              of this node is different from 
              "http://www.w3.org/XML/1998/namespace".
        @@@ImplNote:
          @@@@lang:en
          @@@@@:
            Which of INVALID_CHAR_ERR and NAMESPACE_ERR should be 
            raisen in case the new prefix has a COLON (":") in 
            unclear.  In this implementation, the later is chosen 
            since it is related to the XML Namespace but not to the XML.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            my $node = $self->{<Q:TreeCore:node>};
            my $version = $node->{<Q:DOMCore:ownerDocument>}
                      ->__SUPER{Document::}__::__INT{getDocumentXMLVersion}__;
            if (not defined $version) {
              __WARNING{
                ManakaiDOMImplementationWarning.ATTR_SET_NO_EFFECT:
                  <Q:MDOM_EXCEPTION:subtype>
                              => <Q:MDOM_EXCEPTION:XML_NOT_SUPPORTED>,
              }__;
            } elsif (not defined $node->{<Q:infoset:localName>}) {
              __WARNING{
                ManakaiDOMImplementationWarning.ATTR_SET_NO_EFFECT:
                  <Q:MDOM_EXCEPTION:subtype>
                              => <Q:MDOM_EXCEPTION:NS_NOT_SUPPORTED>,
              }__;
            } elsif ($node->{<Q:DOMCore:read-only>}) {
              __WARNING{
                DOMException.NO_MODIFICATION_ALLOWED_ERR:
                  <Q:MDOM_EXCEPTION:subtype>
                              => <Q:MDOM_EXCEPTION:NODE_READ_ONLY>,
              }__;
            } else {
              __CODE{CheckNCName: ncname => given, version => version,
                                  empty => warn3}__;
              if (not defined $given) {
                #
              } else {
                if (not defined $node->{<Q:infoset:namespaceName>}) {
                  __EXCEPTION{
                    DOMException.NAMESPACE_ERR:
                      <Q:MDOM_EXCEPTION:subtype>
                           => <Q:MDOM_EXCEPTION:NS_PREFIX_WITH_NULL_URI>,
                      <Q:MDOM_EXCEPTION:prefix> => $given,
                  }__;
                } elsif ($given eq 'xml' and
                         (not $node->{<Q:infoset:namespaceName>} or
                          $node->{<Q:infoset:namespaceName>} ne <Q:xml:>)) {
                  __EXCEPTION{
                    DOMException.NAMESPACE_ERR:
                      <Q:MDOM_EXCEPTION:subtype>
                           => <Q:MDOM_EXCEPTION:NS_XML_WITH_OTHER_URI>,
                      <Q:infoset:namespaceName>
                           => $node->{<Q:infoset:namespaceName>},
                  }__;
                }
              }
              $node->{<Q:infoset:prefix>} = $given;
            }
     @@Level[list]:
       2
       3
     @@SpecLevel:2
     @@Redefine: Node

IF:
  @Name:  Text
  @ISA:  CharacterData
  @Method:
     @@Name:  splitText
     @@Return:
        @@@Type:  Text
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  offset
        @@@Type:  unsigned-long
  @Attr:
     @@Name:  isElementContentWhitespace
     @@Get:
        @@@Type:  boolean
     @@Level[list]:  3
     @@SpecLevel:3
  @Attr:
     @@Name:  wholeText
     @@Get:
        @@@Type:  DOMString
     @@Level[list]:  3
     @@SpecLevel:3
  @Method:
     @@Name:  replaceWholeText
     @@Return:
        @@@Type:  Text
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  content
        @@@Type:  DOMString
     @@Level[list]:  3
     @@SpecLevel:3
  
  @ReAttr:
    @@Name: attributes
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-84CF096
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-1841493061
    @@Get:
      @@@Type: NamedNodeMap
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          $r = null;
  @ReAttr:
    @@Name: nodeName
    @@Description:
      @@@lang:en
      @@@@: The node name.
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-F68D095
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-1841493061
    @@Get:
      @@@Type: DOMString
      @@@InCase:
        @@@@Value:\#text
        @@@@Description:
          @@@@@lang:en
          @@@@@@: Always this value for the "Text" node.
      @@@DefaultValue: \#text
      @@@Def: \
  @ReAttr:
    @@Name: nodeType
    @@Description:
      @@@lang:en
      @@@@: The type of this node.
    @@Get:
      @@@Type: unsigned-short
      @@@InCase:
        @@@@Label: TEXT_NODE
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The node is a "Text".
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@: $r = __SUPER{Node}__->TEXT_NODE;
    @@Redefine: Node

IF:
  @Name:  Comment
  @ISA:  CharacterData
  
  @ReAttr:
    @@Name: attributes
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-84CF096
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-1841493061
    @@Get:
      @@@Type: NamedNodeMap
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          $r = null;
  @ReAttr:
    @@Name: nodeName
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-F68D095
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-1841493061
    @@Description:
      @@@lang:en
      @@@@: The node name.
    @@Get:
      @@@Type: DOMString
      @@@InCase:
        @@@@Value: \#comment
        @@@@Description:
          @@@@@lang:en
          @@@@@@: Always this value for the "Comment" node.
      @@@DefaultValue: \#comment
      @@@Def: \
  @ReAttr:
    @@Name: nodeType
    @@Description:
      @@@lang:en
      @@@@: The type of this node.
    @@Get:
      @@@Type: unsigned-short
      @@@InCase:
        @@@@Label: COMMENT_NODE
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The node is a "Comment".
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@: $r = __SUPER{Node}__->COMMENT_NODE;
    @@Redefine: Node

IF:
  @Name:  TypeInfo
  @Level[list]:  3
  @SpecLevel:3
  @Attr:
     @@Name:  typeName
     @@Get:
        @@@Type:  DOMString
  @Attr:
     @@Name:  typeNamespace
     @@Get:
        @@@Type:  DOMString
  @ConstGroup:
     @@Name:  DerivationMethods
     @@Const:
        @@@Name:  DERIVATION_RESTRICTION
        @@@Type:  unsigned-long
        @@@Value:  0x00000001
     @@Const:
        @@@Name:  DERIVATION_EXTENSION
        @@@Type:  unsigned-long
        @@@Value:  0x00000002
     @@Const:
        @@@Name:  DERIVATION_UNION
        @@@Type:  unsigned-long
        @@@Value:  0x00000004
     @@Const:
        @@@Name:  DERIVATION_LIST
        @@@Type:  unsigned-long
        @@@Value:  0x00000008
  @Method:
     @@Name:  isDerivedFrom
     @@Return:
        @@@Type:  boolean
     @@Param:
        @@@Name:  typeNamespaceArg
        @@@Type:  DOMString
     @@Param:
        @@@Name:  typeNameArg
        @@@Type:  DOMString
     @@Param:
        @@@Name:  derivationMethod
        @@@Type:  unsigned-long

IF:
  @Name:  UserDataHandler
  @Level[list]:  3
  @SpecLevel:3
  @ConstGroup:
     @@Name:  OperationType
     @@Const:
        @@@Name:  NODE_CLONED
        @@@Type:  unsigned-short
        @@@Value:  1
     @@Const:
        @@@Name:  NODE_IMPORTED
        @@@Type:  unsigned-short
        @@@Value:  2
     @@Const:
        @@@Name:  NODE_DELETED
        @@@Type:  unsigned-short
        @@@Value:  3
     @@Const:
        @@@Name:  NODE_RENAMED
        @@@Type:  unsigned-short
        @@@Value:  4
     @@Const:
        @@@Name:  NODE_ADOPTED
        @@@Type:  unsigned-short
        @@@Value:  5
  @Method:
     @@Name:  handle
     @@Param:
        @@@Name:  operation
        @@@Type:  unsigned-short
     @@Param:
        @@@Name:  key
        @@@Type:  DOMString
     @@Param:
        @@@Name:  data
        @@@Type:  DOMUserData
     @@Param:
        @@@Name:  src
        @@@Type:  Node
     @@Param:
        @@@Name:  dst
        @@@Type:  Node

IF:
  @Name:  DOMError
  @Level[list]:  3
  @SpecLevel:3
  @ConstGroup:
     @@Name:  ErrorSeverity
     @@Const:
        @@@Name:  SEVERITY_WARNING
        @@@Type:  unsigned-short
        @@@Value:  1
     @@Const:
        @@@Name:  SEVERITY_ERROR
        @@@Type:  unsigned-short
        @@@Value:  2
     @@Const:
        @@@Name:  SEVERITY_FATAL_ERROR
        @@@Type:  unsigned-short
        @@@Value:  3
  @Attr:
     @@Name:  severity
     @@Get:
        @@@Type:  unsigned-short
  @Attr:
     @@Name:  message
     @@Get:
        @@@Type:  DOMString
  @Attr:
     @@Name:  type
     @@Get:
        @@@Type:  DOMString
  @Attr:
     @@Name:  relatedException
     @@Get:
        @@@Type:  DOMObject
  @Attr:
     @@Name:  relatedData
     @@Get:
        @@@Type:  DOMObject
  @Attr:
     @@Name:  location
     @@Get:
        @@@Type:  DOMLocator

IF:
  @Name:  DOMErrorHandler
  @Level[list]:  3
  @SpecLevel:3
  @Method:
     @@Name:  handleError
     @@Return:
        @@@Type:  boolean
     @@Param:
        @@@Name:  error
        @@@Type:  DOMError

IF:
  @Name:  DOMLocator
  @Level[list]:  3
  @SpecLevel:3
  @Attr:
     @@Name:  lineNumber
     @@Get:
        @@@Type:  long
  @Attr:
     @@Name:  columnNumber
     @@Get:
        @@@Type:  long
  @Attr:
     @@Name:  byteOffset
     @@Get:
        @@@Type:  long
  @Attr:
     @@Name:  utf16Offset
     @@Get:
        @@@Type:  long
  @Attr:
     @@Name:  relatedNode
     @@Get:
        @@@Type:  Node
  @Attr:
     @@Name:  uri
     @@Get:
        @@@Type:  DOMString

IF:
  @Name:  DOMConfiguration
  @Level[list]:  3
  @SpecLevel:3
  @Method:
     @@Name:  setParameter
     @@Param:
        @@@Name:  name
        @@@Type:  DOMString
     @@Param:
        @@@Name:  value
        @@@Type:  DOMUserData
     @@Return:
        @@@Exception[list]:  DOMException
  @Method:
     @@Name:  getParameter
     @@Return:
        @@@Type:  DOMUserData
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  name
        @@@Type:  DOMString
  @Method:
     @@Name:  canSetParameter
     @@Return:
        @@@Type:  boolean
     @@Param:
        @@@Name:  name
        @@@Type:  DOMString
     @@Param:
        @@@Name:  value
        @@@Type:  DOMUserData
  @Attr:
     @@Name:  parameterNames
     @@Get:
        @@@Type:  DOMStringList

IF:
  @Name:  DocumentFragment
  @Description:
    @@lang:en
    @@@: A "lightweight" or "minimal" "Document" object.
  @ISA:  Node

  @IntMethod:
    @@Name: newObject
    @@Description:
      @@@lang:en
      @@@@:
        Construct an object for a new instance of the "DocumentFragment".
      \
        Note that this method is for the internal use.  DOM 
        applications must use the "createDocumentFragment" method 
        of the "Document" interface to create a new "DocumentFragment".
    @@Return:
      @@@Type:
        ManakaiDOM:ManakaiDOMNodeObject
      @@@Description:
        @@@@lang:en
        @@@@@: The new object for the "DocumentFragment".
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
                            ## Condition sensitive
          $r = __CLASS{Node}__->__INT{newObject}__;
          $r->{<Q:DOMCore:nodeType>} = <Q:DOMCore:DocumentFragment>;          
     @@Level[list]:
       1
       2
       3
  
  @ReAttr:
    @@Name: attributes
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-84CF096
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-1841493061
    @@Get:
      @@@Type: NamedNodeMap
      @@@DefaultValue:
        @@@@is-null: 1
      @@@Def: \
  @ReAttr:
    @@Name: nodeName
    @@Description:
      @@@lang:en
      @@@@: The node name.
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-F68D095
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-1841493061
    @@Get:
      @@@Type: DOMString
      @@@InCase:
        @@@@Value:\#document-fragment
        @@@@Description:
          @@@@@lang:en
          @@@@@@: Always this value for the "DocumentFragment" node.
      @@@DefaultValue: \#document-fragment
      @@@Def: \
  @ReAttr:
    @@Name: nodeType
    @@Description:
      @@@lang:en
      @@@@: The type of this node.
    @@Get:
      @@@Type: unsigned-short
      @@@InCase:
        @@@@Label: DOCUMENT_FRAGMENT_NODE
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The node is a "DocumentFragment".
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@: $r = __SUPER{Node}__->DOCUMENT_FRAGMENT_NODE;
    @@Redefine: Node

## IF: DocumentFragment

IF:
  @Name:  Document
  @Description:
    @@lang:en
    @@@: 
      The entire document.  It is conceptually the root of the 
      document tree and it provides the primary access to the 
      document's data.

  @ISA:  Node
  @Attr:
     @@Name:  doctype
     @@Description:
       @@@lang:en
       @@@@:
         The "DocumentType" object associated with the "Document".
       \
         Note that even this attribute is defined as read-only, 
         the direct manipulations of child nodes (by the method "insertBefore" 
         for example) can change the document type.
     @@Level[list]:
       1
       2
       3
     @@SpecLevel[list]:
       1
       3
     @@Get:
        @@@Type:  DocumentType
        @@@Description:
          @@@@lang:en
          @@@@@:
            The "DocumentType" object for the "Document".
        @@@InCase:
          @@@@Value: 
            @@@@@is-null: 1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The document type declaration is omitted or it is an HTML 
              document.
            \
              Note: If it is an HTML document, the "doctype" attribute is 
              always "null" in DOM Level 1 and Level 2.  In DOM Level 3, 
              a "DocumentType" object may be returned even if the document 
              does not have explicit document type declaration.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            for (@{$self->{<Q:TreeCore:node>}->{<Q:infoset:children>}}) {
              if ($_->{<Q:DOMCore:nodeType>} eq <Q:DOMCore:DocumentType>) {
                     ## Condition sensitive
                $r = __CLASS{Node}__->__INT{getNodeReference}__ ($_);
                last;
              } elsif ($_->{<Q:DOMCore:nodeType>} eq <Q:infoset:Element>) {
                last;
              }
            }
  @Attr:
     @@Name:  implementation
     @@Description:
       @@@lang:en
       @@@@:
         The "DOMImplementation" object that handles the "Document".
     @@Get:
        @@@Type:  DOMImplementation
        @@@Def:
          @@@@Type:
            lang:dis
          @@@@GetPropNode:
            DOMCore:implementation
  @Attr:
     @@Name:  documentElement
     @@Description:
       @@@lang:en
       @@@@: The child node that is the document element of the document.
     @@Get:
        @@@Type:  Element
        @@@Description:
          @@@@lang:en
          @@@@@: The document element.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The document element not found.
          @@@@ImplNote:
            @@@@@lang:en
            @@@@@@:
              The DOM specifications don't mention this case but for example 
              the DOMImplementation.createDocument (null, null, null) can 
              create a Document that does not have the document element.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            for (@{$self->{<Q:TreeCore:node>}->{<Q:infoset:children>}}) {
              if ($_->{<Q:DOMCore:nodeType>} eq <Q:infoset:Element>) {
                     ## Condition sensitive
                $r = __CLASS{Node}__->__INT{getNodeReference}__ ($_);
                last;
              }
            }
    @@Level[list]:
      1
      2
      3
    @@SpecLevel:1
  @Method:
     @@Name:  createElement
     @@Return:
        @@@Type:  Element
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  tagName
        @@@Type:  DOMString
  @Method:
     @@Name:  createDocumentFragment
     @@Return:
        @@@Type:  DocumentFragment
  @Method:
     @@Name:  createTextNode
     @@Return:
        @@@Type:  Text
     @@Param:
        @@@Name:  data
        @@@Type:  DOMString
  @Method:
     @@Name:  createComment
     @@Return:
        @@@Type:  Comment
     @@Param:
        @@@Name:  data
        @@@Type:  DOMString
  @Method:
     @@Name:  createCDATASection
     @@Return:
        @@@Type:  CDATASection
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  data
        @@@Type:  DOMString
  @Method:
     @@Name:  createProcessingInstruction
     @@Return:
        @@@Type:  ProcessingInstruction
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  target
        @@@Type:  DOMString
     @@Param:
        @@@Name:  data
        @@@Type:  DOMString
  @Method:
     @@Name:  createAttribute
     @@Return:
        @@@Type:  Attr
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  name
        @@@Type:  DOMString
  @Method:
     @@Name:  createEntityReference
     @@Return:
        @@@Type:  EntityReference
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  name
        @@@Type:  DOMString
  @Method:
     @@Name:  getElementsByTagName
     @@Return:
        @@@Type:  NodeList
     @@Param:
        @@@Name:  tagname
        @@@Type:  DOMString
  @Method:
     @@Name:  importNode
     @@Return:
        @@@Type:  Node
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  importedNode
        @@@Type:  Node
     @@Param:
        @@@Name:  deep
        @@@Type:  boolean
     @@Level[list]:  2
     @@SpecLevel:2
  @Method:
     @@Name:  createElementNS
     @@Return:
        @@@Type:  Element
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:  DOMString
     @@Param:
        @@@Name:  qualifiedName
        @@@Type:  DOMString
     @@Level[list]:  2
     @@SpecLevel:2
  @Method:
     @@Name:  createAttributeNS
     @@Return:
        @@@Type:  Attr
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:  DOMString
     @@Param:
        @@@Name:  qualifiedName
        @@@Type:  DOMString
     @@Level[list]:  2
     @@SpecLevel:2
  @Method:
     @@Name:  getElementsByTagNameNS
     @@Return:
        @@@Type:  NodeList
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:  DOMString
     @@Param:
        @@@Name:  localName
        @@@Type:  DOMString
     @@Level[list]:  2
     @@SpecLevel:2
  @Method:
     @@Name:  getElementById
     @@Return:
        @@@Type:  Element
     @@Param:
        @@@Name:  elementId
        @@@Type:  DOMString
     @@Level[list]:  2
     @@SpecLevel:2
  @Attr:
     @@Name:  inputEncoding
     @@Description:
       @@@lang:en
       @@@@:
         The encoding used for this document at the time of 
         the parsing.
       \
         This attribute is corresponding to the [character encoding scheme] 
         property of the document infomation item.
     @@ImplNote:
        @@@lang:en
        @@@@:
          It is unclear what type of values are permitted. 
          IANA-registered charset names? XML encoding declaration 
          names?  Or, any names passed from the upper-level protocols?
     @@Get:
        @@@Type:  DOMString
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The input encoding is not known.
        @@@Def:
          @@@@Type:
            lang:dis
          @@@@GetProp:
            infoset:characterEncodingScheme
     @@Level[list]:  3
     @@SpecLevel:3
  @Attr:
     @@Name:  xmlEncoding
     @@Description:
       @@@lang:en
       @@@@:
         The value of the encoding declaration in the XML declaration 
         of the document.
     @@ImplNote:
       @@@lang:en
       @@@@:
         This attribute is NOT equal to the [character encoding scheme] 
         property of the document information item of the Infoset.
     @@Get:
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@: The encoding.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The encoding is not specified or not known.
        @@@Def:
          @@@@Type:
            lang:dis
          @@@@GetProp:
            DOMCore:xmlEncoding
     @@Level[list]:  3
     @@SpecLevel:3
  @Attr:
     @@Name:  xmlStandalone
     @@Description:
       @@@lang:en
       @@@@: 
         Whether the document is standalone or not.
       \
         This attribute is corresponding to the standalone declaration 
         in the XML declaration and the [standalone] property of the 
         document information item of the XML Infoset.
     @@ImplNote:
       @@@lang:en
       @@@@: Default false.
     @@Get:
        @@@Type:  boolean
        @@@Def:
          @@@@Type:
            lang:dis
          @@@@GetProp:
            infoset:standalone
     @@Set:
        @@@Type:  boolean
        @@@Description:
          @@@@lang:en
          @@@@@: Whether standalone or not.
        @@@InCase:
          @@@@Value: true
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              Standalone "yes".  Note that no verification is done when 
              setting the value.  DOM applications should use 
              the method "normalizeDocument" with the "validate" parameter 
              to verify whether the value match the Validity Constraint.
        @@@InCase:
          @@@@Value: false
          @@@@Description:
            @@@@@lang:en
            @@@@@@: Standalone "no".
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NOT_SUPPORTED_ERR
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The document does not support the "XML" feature.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            my $node = $self->{<Q:TreeCore:node>};
            if ($node->{<Q:DOMCore:hasFeature>}->{XML}) {
              __EXCEPTION{
                DOMException.NOT_SUPPORTED_ERR:
                  <Q:MDOM_EXCEPTION:subtype>
                     => <Q:MDOM_EXCEPTION:MDOM_NOT_SUPPORTED_DOC_XML>,
              }__;
            }
            $node->{<Q:infoset:standalone>} = $given;
     @@Level[list]:  3
     @@SpecLevel:3
  @Attr:
     @@Name:  xmlVersion
     @@Description:
       @@@lang:en
       @@@@:
         The version number of the document.
      \
         This attribute is corresponding to the version declaration in the 
         XML declaration and [version] property of the document information 
         item of the XML Infoset.
     @@Get:
        @@@Type:  DOMString
        @@@InCase:
          @@@@Value: 1.0
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The XML version is specified as XML 1.0 or the XML document 
              has no version declaration.
        @@@InCase:
          @@@@Value: 1.1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The XML version is specified as XML 1.1.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The document does not support the "XML" feature.
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            __INT{{getDocumentXMLVersion}}__;
     @@Set:
        @@@Type:  DOMString
        @@@Description:
          @@@@lang:en
          @@@@@:
            The XML version number of the document.  Note that 
            changing this attribute will affect methods that 
            check for invalid characters in XML "Name"s.  DOM 
            application should invoke the method "normalizeDocument" in 
            order to check for invalid characters in the "Node"s that 
            are already part of the document.
        @@@Exception:
          @@@@Type: DOMException
          @@@@Name: NOT_SUPPORTED_ERR
        @@@Def:
          @@@@Type:
            lang:Perl
          @@@@@:
            my $node = $self->{<Q:TreeCore:node>};
            if (defined $node->{<Q:DOMCore:hasFeature>}->{XML}) {
              if ($given and
                  ($given eq '1.0' or $given eq '1.1')) {
                $node->{<Q:infoset:version>} = $given;
              } else {
                __EXCEPTION{
                  DOMException.NOT_SUPPORTED_ERR:
                    <Q:MDOM_EXCEPTION:subtype>
                       => <Q:MDOM_EXCEPTION:MDOM_NOT_SUPPORTED_XMLVER>,
                    <Q:infoset:version> => $given,
                }__;
              }
            } else {
              __EXCEPTION{
                DOMException.NOT_SUPPORTED_ERR:
                  <Q:MDOM_EXCEPTION:subtype>
                     => <Q:MDOM_EXCEPTION:MDOM_NOT_SUPPORTED_DOC_XML>,
              }__;
            }
     @@Level[list]:  3
     @@SpecLevel:3
  @IntMethod:
    @@Name: getDocumentXMLVersion
    @@Description:
      @@@lang:en
      @@@@:
        Return the XML version of the document.  This method is 
        same as the getting of the attribute "xmlVersion" but 
        introduced for the internal use.
    @@Return:
      @@@Type: DOMString
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          my $node = $self->{<Q:TreeCore:node>};
          $r = defined $node->{<Q:DOMCore:hasFeature>}->{XML} ?
                 defined $node->{<Q:infoset:version>} ?
                   $node->{<Q:infoset:version>} : '1.0' : null;
  @Attr:
     @@Name:  strictErrorChecking
     @@Description:
       @@@lang:en
       @@@@:
         Whether error checking is enforced or not.
     @@Get:
        @@@Type:  boolean
        @@@Def:
          @@@@Type:
            lang:dis
          @@@@GetProp:
            DOMCore:strictErrorChecking
     @@Set:
        @@@Type:  boolean
        @@@Description:
          @@@@lang:en
          @@@@@: Whether error checking is enforced or not.
        @@@InCase:
          @@@@Value: false
          @@@@@: 
            The implementation is free to not every possible error 
            case normally defined on DOM operations, and not raise any 
            "DOMException" on DOM operations or report error 
            while using method "normalizeDocument".  In case of error, 
            the behavior is undefined.
        @@@Def:
          @@@@Type:
            lang:dis
          @@@@SetProp:
            DOMCore:strictErrorChecking
     @@Level[list]:  3
     @@SpecLevel:3
     @@ImplNote:
       @@@lang:en
       @@@@: This attribute is "true" by default.
  @Attr:
     @@Name:  documentURI
     @@Description:
       @@@lang:en
       @@@@: The location of the document.
     @@Level[list]:  3
     @@SpecLevel:3
     @@Get:
        @@@Type:
          ManakaiDOM:ManakaiDOMURI
        @@@Description:
          @@@@lang:en
          @@@@@: The location of the document.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The location is undefined or the "Document" was created using 
              the method "createDocument".
        @@@Def:
          @@@@Type:
            lang:dis
          @@@@GetProp:
            DOMCore:documentURI
     @@Set:
        @@@Type:
          ManakaiDOM:ManakaiDOMURI
        @@@Description:
          @@@@lang:en
          @@@@@: 
            The location of the document.  Note that no lexical checking is 
            performed.
        @@@InCase:
          @@@@Value:
            @@@@@is-null:1
          @@@@Description:
            @@@@@lang:en
            @@@@@@: The location is undefined.
        @@@Def:
          @@@@Type:
            lang:dis
          @@@@SetProp:
            DOMCore:documentURI
  @Method:
     @@Name:  adoptNode
     @@Return:
        @@@Type:  Node
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  source
        @@@Type:  Node
     @@Level[list]:  3
     @@SpecLevel:3
  @Attr:
     @@Name:  domConfig
     @@Description:
       @@@lang:en
       @@@@: The configuration used when "normalizeDocument" is invoked.
     @@Get:
        @@@Type:  DOMConfiguration
        @@@Description:
          @@@@lang:en
          @@@@@: The DOM configuration object.
        @@@Def:
          @@@@Type:
            lang:dis
          @@@@GetProp:
            DOMCore:domConfig
     @@Level[list]:  3
     @@SpecLevel:3
  @Method:
     @@Name:  normalizeDocument
     @@Level[list]:  3
     @@SpecLevel:3
  @Method:
     @@Name:  renameNode
     @@Return:
        @@@Type:  Node
        @@@Exception[list]:  DOMException
     @@Param:
        @@@Name:  n
        @@@Type:  Node
     @@Param:
        @@@Name:  namespaceURI
        @@@Type:  DOMString
     @@Param:
        @@@Name:  qualifiedName
        @@@Type:  DOMString
     @@Level[list]:  3
     @@SpecLevel:3
  
  @ReAttr:
    @@Name: attributes
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-84CF096
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-1841493061
    @@Get:
      @@@Type: NamedNodeMap
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          $r = null;
  @ReAttr:
    @@Name: nodeName
    @@Description:
      @@@lang:en
      @@@@: The node name.
    @@Spec:
      @@@DOM3[list]:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-F68D095
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-1841493061
    @@Get:
      @@@Type: DOMString
      @@@InCase:
        @@@@Value:\#document
        @@@@Description:
          @@@@@lang:en
          @@@@@@: Always this value for the "Document" node.
      @@@DefaultValue: \#document
      @@@Def: \
  @ReAttr:
    @@Name: nodeType
    @@Description:
      @@@lang:en
      @@@@: The type of this node.
    @@Get:
      @@@Type: unsigned-short
      @@@InCase:
        @@@@Label: DOCUMENT_NODE
        @@@@Description:
          @@@@@lang:en
          @@@@@@: The node is a "Document".
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@: $r = __SUPER{Node}__->DOCUMENT_NODE;
    @@Redefine: Node
  @ReAttr:
    @@Name: textContent
    @@Spec:
      @@@DOM3:
        http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#Node3-textContent
    @@Get:
      @@@Type: DOMString
      @@@Exception[list]: DOMException
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          $r = null;
    @@Set:
      @@@Type: DOMString
      @@@Exception[list]: DOMException
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          __WARNING{ManakaiDOMImplementationException.ATTR_SET_NO_EFFECT}__;

  @IntMethod:
    @@Name: newObject
    @@Description:
      @@@lang:en
      @@@@:
        Construct an object for the new instance of the "Document".
      \
        Note that this method is for the internal use.  DOM 
        applications must use the "createDocument" method 
        of the "DOMImplementation" interface to create a new "Document".
    @@ImplNote:
      @@@lang:en
      @@@@:
        The caller of this internal method MUST ensure to set 
        the attributes: <Q:TreeCore:implementation>.
    @@Return:
      @@@Type:
        ManakaiDOM:ManakaiDOMNodeObject
      @@@Description:
        @@@@lang:en
        @@@@@: The new object for the "Document".
      @@@Def:
        @@@@Type:
          lang:Perl
        @@@@@:
          $r = __CLASS{Node}__->__INT{newObject}__;
          $r->{<Q:DOMCore:nodeType>} = <Q:infoset:Document>;
          $r->{<Q:infoset:version>} = '1.0';
          $r->{<Q:DOMCore:strictErrorChecking>} = true;
       @@@ImplNote:
         @@@@lang:en
         @@@@@:
           Other properties required to be a legal "Document" object:
           DOMCore:implementation.
         \
           Default-null (or false) properties: DOMCore:read-only,
           infoset:characterEncodingScheme, DOMCore:xmlEncoding,
           infoset:standalone,
           DOMCore:documentURI, DOMCore:domConfig.
    @@Level[list]:
      1
      2
      3

## IF: Document

## DOMCore.dis ends here
