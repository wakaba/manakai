#!/usr/bin/perl 
## This file is automatically generated
## 	at 2006-11-04T13:01:25+00:00,
## 	from file "XDoctype.dis",
## 	module <http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.XDoctype>,
## 	for <http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOMLatest>.
## Don't edit by hand!
use strict;
require Message::DOM::DOMCore;
require Message::DOM::Document;
require Message::DOM::TreeCore;
require Message::Util::Error::DOMException;
package Message::DOM::XDoctype;
our $VERSION = 20061104.1301;
sub CDATA_ATTR ();
sub ENTITIES_ATTR ();
sub ENTITY_ATTR ();
sub ENUMERATION_ATTR ();
sub EXPLICIT_DEFAULT ();
sub FIXED_DEFAULT ();
sub IDREFS_ATTR ();
sub IDREF_ATTR ();
sub ID_ATTR ();
sub IMPLIED_DEFAULT ();
sub NMTOKENS_ATTR ();
sub NMTOKEN_ATTR ();
sub NOTATION_ATTR ();
sub NO_TYPE_ATTR ();
sub REQUIRED_DEFAULT ();
sub UNKNOWN_ATTR ();
sub UNKNOWN_DEFAULT ();
sub AUTOLOAD {


        my $al = our $AUTOLOAD;
        $al =~ s/.+:://;
        if ({'CDATA_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::CDATA_ATTR',
'ENTITIES_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::ENTITIES_ATTR',
'ENTITY_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::ENTITY_ATTR',
'ENUMERATION_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::ENUMERATION_ATTR',
'EXPLICIT_DEFAULT',
'Message::DOM::IFLatest::AttributeDefinition::EXPLICIT_DEFAULT',
'FIXED_DEFAULT',
'Message::DOM::IFLatest::AttributeDefinition::FIXED_DEFAULT',
'IDREFS_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::IDREFS_ATTR',
'IDREF_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::IDREF_ATTR',
'ID_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::ID_ATTR',
'IMPLIED_DEFAULT',
'Message::DOM::IFLatest::AttributeDefinition::IMPLIED_DEFAULT',
'NMTOKENS_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::NMTOKENS_ATTR',
'NMTOKEN_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::NMTOKEN_ATTR',
'NOTATION_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::NOTATION_ATTR',
'NO_TYPE_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::NO_TYPE_ATTR',
'REQUIRED_DEFAULT',
'Message::DOM::IFLatest::AttributeDefinition::REQUIRED_DEFAULT',
'UNKNOWN_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::UNKNOWN_ATTR',
'UNKNOWN_DEFAULT',
'Message::DOM::IFLatest::AttributeDefinition::UNKNOWN_DEFAULT'}->{$al}) {
          no strict 'refs';
          *{$AUTOLOAD} = \&{{'CDATA_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::CDATA_ATTR',
'ENTITIES_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::ENTITIES_ATTR',
'ENTITY_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::ENTITY_ATTR',
'ENUMERATION_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::ENUMERATION_ATTR',
'EXPLICIT_DEFAULT',
'Message::DOM::IFLatest::AttributeDefinition::EXPLICIT_DEFAULT',
'FIXED_DEFAULT',
'Message::DOM::IFLatest::AttributeDefinition::FIXED_DEFAULT',
'IDREFS_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::IDREFS_ATTR',
'IDREF_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::IDREF_ATTR',
'ID_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::ID_ATTR',
'IMPLIED_DEFAULT',
'Message::DOM::IFLatest::AttributeDefinition::IMPLIED_DEFAULT',
'NMTOKENS_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::NMTOKENS_ATTR',
'NMTOKEN_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::NMTOKEN_ATTR',
'NOTATION_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::NOTATION_ATTR',
'NO_TYPE_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::NO_TYPE_ATTR',
'REQUIRED_DEFAULT',
'Message::DOM::IFLatest::AttributeDefinition::REQUIRED_DEFAULT',
'UNKNOWN_ATTR',
'Message::DOM::IFLatest::AttributeDefinition::UNKNOWN_ATTR',
'UNKNOWN_DEFAULT',
'Message::DOM::IFLatest::AttributeDefinition::UNKNOWN_DEFAULT'}->{$al}};
          goto &{$AUTOLOAD};
        } else {
          require Carp;
          Carp::croak (qq<Can't locate method "$AUTOLOAD">);
        }
      
}
sub import {


        my $self = shift;
        if (@_) {
          local $Exporter::ExportLevel = $Exporter::ExportLevel + 1;
          $self->SUPER::import (@_);
          for (grep {not /\W/} @_) {
            eval qq{$_};
          }
        }
      
}
our %EXPORT_TAG = ('DeclaredValueType',
['CDATA_ATTR',
'ENTITIES_ATTR',
'ENTITY_ATTR',
'ENUMERATION_ATTR',
'IDREFS_ATTR',
'IDREF_ATTR',
'ID_ATTR',
'NMTOKENS_ATTR',
'NMTOKEN_ATTR',
'NOTATION_ATTR',
'NO_TYPE_ATTR',
'UNKNOWN_ATTR'],
'DefaultValueType',
['EXPLICIT_DEFAULT',
'FIXED_DEFAULT',
'IMPLIED_DEFAULT',
'REQUIRED_DEFAULT',
'UNKNOWN_DEFAULT']);
our @EXPORT_OK = ('CDATA_ATTR',
'ENTITIES_ATTR',
'ENTITY_ATTR',
'ENUMERATION_ATTR',
'IDREFS_ATTR',
'IDREF_ATTR',
'ID_ATTR',
'NMTOKENS_ATTR',
'NMTOKEN_ATTR',
'NOTATION_ATTR',
'NO_TYPE_ATTR',
'UNKNOWN_ATTR',
'EXPLICIT_DEFAULT',
'FIXED_DEFAULT',
'IMPLIED_DEFAULT',
'REQUIRED_DEFAULT',
'UNKNOWN_DEFAULT');
use Exporter; push our @ISA, 'Exporter';
package Message::DOM::IFLatest::DocumentXDoctype;
our $VERSION = 20061104.1301;
package Message::DOM::XDoctype::ManakaiDOMDocumentXDoctype;
our $VERSION = 20061104.1301;
push our @ISA, 'Message::DOM::IFLatest::Document',
'Message::DOM::IFLatest::Document',
'Message::DOM::IFLatest::DocumentXDoctype',
'Message::DOM::IFLatest::Node';
push @Message::DOM::Document::ManakaiDOMDocument::ISA, q<Message::DOM::XDoctype::ManakaiDOMDocumentXDoctype> unless Message::DOM::Document::ManakaiDOMDocument->isa (q<Message::DOM::XDoctype::ManakaiDOMDocumentXDoctype>);
use Char::Class::XML 'InXMLNameChar10',
'InXMLNameChar11',
'InXMLNameStartChar11',
'InXML_NameStartChar10';
sub create_document_type_definition ($$) {
my ($self, $name) = @_;
my $r;

{

if 
($self->
strict_error_checking
) {
  my $version = $self->
xml_version
;
  

{

if 
(defined $name) {
  

{

if 
(((not defined $version or $version eq '1.0') and
         not 
($name =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        (defined $version and $version eq '1.1' and
         not 
($name =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $name, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
  


}

;
  

;
}


}

;
}

my $bag = 
$self->{'b'}
;
my $stem;


{


$stem = 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition'->___create_node_stem ($bag, {
  
'rc'
 => 0,
  
'id'
 => \
(
  'tag:suika.fam.cx,2005-09:' . time . ':' . $$ . ':' .
  (++$Message::Util::ManakaiNode::UniqueIDN)
)
,
}, {
    'xname' => \$name,
    'od' => $self,
  });


{

if 
(defined 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition') {
  if (ref 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition' eq 'SCALAR') {
    $stem->{'cls'} = 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition';
  } elsif (defined $Message::Util::ManakaiStringRef::Value{'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition'}) {
    $stem->{'cls'} = $Message::Util::ManakaiStringRef::Value{'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition'};
  } else {
    require Scalar::Util;
    $stem->{'cls'} = $Message::Util::ManakaiStringRef::Value{'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition'} = \('Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition');
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition'});
  }
} else {
  CORE::delete $stem->{'cls'};
}


}

;
$bag->{${$stem->{
'id'
}}} = $stem;


}

;


{


$r = ${$stem->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $stem->{
'id'
},
  
'b'
 => $bag,
}, {
  });
$stem->{
'rc'
}++;


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#hasLtDeclaration'} = 1;


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#hasGtDeclaration'} = 1;


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#hasAmpDeclaration'} = 1;


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#hasAposDeclaration'} = 1;


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#hasQuotDeclaration'} = 1;


}

;


}
$r}
sub create_element_type_definition ($$) {
my ($self, $name) = @_;
my $r;

{

if 
($self->
strict_error_checking
) {
  my $version = $self->
xml_version
;
  

{

if 
(defined $name) {
  

{

if 
(((not defined $version or $version eq '1.0') and
         not 
($name =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        (defined $version and $version eq '1.1' and
         not 
($name =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $name, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
  


}

;
  

;
}


}

;
}

my $bag = 
$self->{'b'}
;
my $stem;


{


$stem = 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition'->___create_node_stem ($bag, {
  
'rc'
 => 0,
  
'id'
 => \
(
  'tag:suika.fam.cx,2005-09:' . time . ':' . $$ . ':' .
  (++$Message::Util::ManakaiNode::UniqueIDN)
)
,
}, {
    'xname' => \$name,
    'od' => $self,
  });


{

if 
(defined 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition') {
  if (ref 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition' eq 'SCALAR') {
    $stem->{'cls'} = 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition';
  } elsif (defined $Message::Util::ManakaiStringRef::Value{'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition'}) {
    $stem->{'cls'} = $Message::Util::ManakaiStringRef::Value{'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition'};
  } else {
    require Scalar::Util;
    $stem->{'cls'} = $Message::Util::ManakaiStringRef::Value{'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition'} = \('Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition');
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition'});
  }
} else {
  CORE::delete $stem->{'cls'};
}


}

;
$bag->{${$stem->{
'id'
}}} = $stem;


}

;


{


$r = ${$stem->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $stem->{
'id'
},
  
'b'
 => $bag,
}, {
  });
$stem->{
'rc'
}++;


}

;


}
$r}
sub create_attribute_definition ($$) {
my ($self, $name) = @_;
my $r;

{

if 
($self->
strict_error_checking
) {
  my $version = $self->
xml_version
;
  

{

if 
(defined $name) {
  

{

if 
(((not defined $version or $version eq '1.0') and
         not 
($name =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        (defined $version and $version eq '1.1' and
         not 
($name =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $name, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
  


}

;
  

;
}


}

;
}

my $bag = 
$self->{'b'}
;
my $stem;


{


$stem = 'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition'->___create_node_stem ($bag, {
  
'rc'
 => 0,
  
'id'
 => \
(
  'tag:suika.fam.cx,2005-09:' . time . ':' . $$ . ':' .
  (++$Message::Util::ManakaiNode::UniqueIDN)
)
,
}, {
    'xname' => \$name,
    'od' => $self,
  });


{

if 
(defined 'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition') {
  if (ref 'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition' eq 'SCALAR') {
    $stem->{'cls'} = 'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition';
  } elsif (defined $Message::Util::ManakaiStringRef::Value{'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition'}) {
    $stem->{'cls'} = $Message::Util::ManakaiStringRef::Value{'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition'};
  } else {
    require Scalar::Util;
    $stem->{'cls'} = $Message::Util::ManakaiStringRef::Value{'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition'} = \('Message::DOM::XDoctype::ManakaiDOMAttributeDefinition');
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition'});
  }
} else {
  CORE::delete $stem->{'cls'};
}


}

;
$bag->{${$stem->{
'id'
}}} = $stem;


}

;


{


$r = ${$stem->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $stem->{
'id'
},
  
'b'
 => $bag,
}, {
  });
$stem->{
'rc'
}++;


}

;



{

local $Error::Depth = $Error::Depth + 1;

{


  if 
($name eq 'xml:id' and
      $self->
dom_config

           ->
get_parameter
 (
'http://suika.fam.cx/www/2006/dom-config/xml-id'
)) {
    $r->
declared_type

          (
2
);
  }



}


;}

;


}
$r}
sub create_general_entity ($$) {
my ($self, $name) = @_;
my $r;

{

require 
Message::DOM::XML;

if ($self->
strict_error_checking
) {
  my $version = $self->
xml_version
;
  

{

if 
(defined $name) {
  

{

if 
(((not defined $version or $version eq '1.0') and
         not 
($name =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        (defined $version and $version eq '1.1' and
         not 
($name =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $name, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
  


}

;
  

;
}


}

;
}

my $bag = 
$self->{'b'}
;
my $stem;


{


$stem = 'Message::DOM::XML::ManakaiDOMEntity'->___create_node_stem ($bag, {
  
'rc'
 => 0,
  
'id'
 => \
(
  'tag:suika.fam.cx,2005-09:' . time . ':' . $$ . ':' .
  (++$Message::Util::ManakaiNode::UniqueIDN)
)
,
}, {
    'xname' => \$name,
    'od' => $self,
  });


{

if 
(defined 'Message::DOM::XML::ManakaiDOMEntity') {
  if (ref 'Message::DOM::XML::ManakaiDOMEntity' eq 'SCALAR') {
    $stem->{'cls'} = 'Message::DOM::XML::ManakaiDOMEntity';
  } elsif (defined $Message::Util::ManakaiStringRef::Value{'Message::DOM::XML::ManakaiDOMEntity'}) {
    $stem->{'cls'} = $Message::Util::ManakaiStringRef::Value{'Message::DOM::XML::ManakaiDOMEntity'};
  } else {
    require Scalar::Util;
    $stem->{'cls'} = $Message::Util::ManakaiStringRef::Value{'Message::DOM::XML::ManakaiDOMEntity'} = \('Message::DOM::XML::ManakaiDOMEntity');
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{'Message::DOM::XML::ManakaiDOMEntity'});
  }
} else {
  CORE::delete $stem->{'cls'};
}


}

;
$bag->{${$stem->{
'id'
}}} = $stem;


}

;


{


$r = ${$stem->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $stem->{
'id'
},
  
'b'
 => $bag,
}, {
  });
$stem->{
'rc'
}++;


}

;


}
$r}
sub create_notation ($$) {
my ($self, $name) = @_;
my $r;

{

require 
Message::DOM::XML;

if ($self->
strict_error_checking
) {
  my $version = $self->
xml_version
;
  

{

if 
(defined $name) {
  

{

if 
(((not defined $version or $version eq '1.0') and
         not 
($name =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        (defined $version and $version eq '1.1' and
         not 
($name =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $name, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
  


}

;
  

;
}


}

;
}

my $bag = 
$self->{'b'}
;
my $stem;


{


$stem = 'Message::DOM::XML::ManakaiDOMNotation'->___create_node_stem ($bag, {
  
'rc'
 => 0,
  
'id'
 => \
(
  'tag:suika.fam.cx,2005-09:' . time . ':' . $$ . ':' .
  (++$Message::Util::ManakaiNode::UniqueIDN)
)
,
}, {
    'xname' => \$name,
    'od' => $self,
  });


{

if 
(defined 'Message::DOM::XML::ManakaiDOMNotation') {
  if (ref 'Message::DOM::XML::ManakaiDOMNotation' eq 'SCALAR') {
    $stem->{'cls'} = 'Message::DOM::XML::ManakaiDOMNotation';
  } elsif (defined $Message::Util::ManakaiStringRef::Value{'Message::DOM::XML::ManakaiDOMNotation'}) {
    $stem->{'cls'} = $Message::Util::ManakaiStringRef::Value{'Message::DOM::XML::ManakaiDOMNotation'};
  } else {
    require Scalar::Util;
    $stem->{'cls'} = $Message::Util::ManakaiStringRef::Value{'Message::DOM::XML::ManakaiDOMNotation'} = \('Message::DOM::XML::ManakaiDOMNotation');
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{'Message::DOM::XML::ManakaiDOMNotation'});
  }
} else {
  CORE::delete $stem->{'cls'};
}


}

;
$bag->{${$stem->{
'id'
}}} = $stem;


}

;


{


$r = ${$stem->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $stem->{
'id'
},
  
'b'
 => $bag,
}, {
  });
$stem->{
'rc'
}++;


}

;


}
$r}
$Message::DOM::ImplFeature{q<Message::DOM::DOMCore::ManakaiDOMImplementation>}->{q<http://suika.fam.cx/www/2006/feature/xdoctype>}->{q<3.0>} ||= 1;
$Message::DOM::ImplFeature{q<Message::DOM::DOMCore::ManakaiDOMImplementation>}->{q<http://suika.fam.cx/www/2006/feature/xdoctype>}->{q<>} = 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XDoctype::ManakaiDOMDocumentXDoctype>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/www/2006/feature/xdoctype',
{'',
'1',
'3.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::DOM::XDoctype::ManakaiDOMDocumentXDoctype>} = 17.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::Document::ManakaiDOMDocument>}->{compat_class}->{q<Message::DOM::XDoctype::ManakaiDOMDocumentXDoctype>} = 1;
$Message::Util::Grove::ClassProp{q<Message::DOM::XDoctype::ManakaiDOMDocumentXDoctype>} = {'s1a',
['child'],
'v1h',
['do'],
'w0',
['impl']};
package Message::DOM::IFLatest::DocumentTypeDefinition;
our $VERSION = 20061104.1301;
package Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition;
our $VERSION = 20061104.1301;
push our @ISA, 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDeclaration',
'Message::DOM::TreeCore::ManakaiDOMNode',
'Message::DOM::IFLatest::DocumentType',
'Message::DOM::IFLatest::DocumentTypeDefinition',
'Message::DOM::IFLatest::Node',
'Message::DOM::IFLevel1::DocumentType',
'Message::DOM::IFLevel1::Node',
'Message::DOM::IFLevel2::DocumentType',
'Message::DOM::IFLevel2::Node',
'Message::DOM::IFLevel3::DocumentType',
'Message::DOM::IFLevel3::Node';
sub ___create_node_stem ($$$$) {
my ($self, $bag, $obj, $opt) = @_;
my $r;

{


{

if 
(defined ${$opt->{'xname'}}) {
  if (ref ${$opt->{'xname'}} eq 'SCALAR') {
    $obj->{'xname'} = ${$opt->{'xname'}};
  } elsif (defined $Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}}) {
    $obj->{'xname'} = $Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}};
  } else {
    require Scalar::Util;
    $obj->{'xname'} = $Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}} = \(${$opt->{'xname'}});
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}});
  }
} else {
  CORE::delete $obj->{'xname'};
}


}

;
if (defined $opt->{
'od'
}) {
  

{


$obj->{'od'} = $opt->{'od'}->{
'id'
};
$bag->{${$opt->{'od'}->{
'id'
}}}
    ->{'do'}->{${$obj->{
'id'
}}}
  = $obj->{
'id'
};


}

;
} elsif (defined $opt->{
'impl'
}) {
  

{


$obj->{'impl'} = $opt->{'impl'}->{
'id'
};
$bag->{${$opt->{'impl'}->{
'id'
}}}
    ->{'lpmi'}->{${$obj->{
'id'
}}}
  = $obj->{
'id'
};


}

;
} else {
  ## TODO: Assertion
}
$obj->{
'child'
} = [];
$obj->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#elementTypes'
} = {};
$obj->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#generalEntities'
} = {};
$obj->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#notations'
} = {};
$r = $obj;


}
$r}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$v;


{


$v = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'xname'};


}

;
$r = $$v;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 10;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub text_content ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = 
undef
;


}
$r;
} else {my ($self, $given) = @_;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#setting-node-value-no-effect', 'rdata' => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::TreeCore::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_value';

;


}
}
}
sub base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
declaration_base_uri
;



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'base_uri';
}
}
sub append_child ($$) {
my ($self, $newChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
unless ($self_od) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;
}
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    7 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    7 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      

{


$newChild->{
'b'
}->{${$newChild->{
'id'
}}}
    ->{'child'} = [];


}

;
    } else {
      my $v;
      

{


$v = $nc_parent->{
'b'
}->{${$nc_parent->{
'id'
}}}
         ->{'child'};


}

;
      RP: for my $i (0..$#$v) {
        my $nodeid = $v->[$i];
        if (
(${$new_child[0]->{'id'}} eq ${$nodeid})
) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    

{


$nc->{
'b'
}->{${$nc->{
'id'
}}}
    ->{'parent'} = $self->{
'id'
};


}

;
  }

  my $children;
  

{


$children = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'child'};


}

;

  

{


## -- Adds to children list
    push @$children, map {
      
$_->{'id'}

    } @new_child;
    $r = $newChild;
  


}

;

  

;

  

;



}


;}

;


}

;


}
$r}
sub insert_before ($$;$) {
my ($self, $newChild, $refChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
unless ($self_od) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_before', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;
}
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    7 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    7 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

{


# tc:ForAppendChild & tc:ForReplaceChild
    if (defined $refChild) {
      if ($refChild eq $newChild) {
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#insert-before-itself', 'rdata' => $refChild, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
        


}

;
        

;
      }

      my $cns = $self->
child_nodes
;
      my $cnsl = @$cns;
      C: {
        $index = 0;
        for my $i (0..($cnsl-1)) {
          my $cn = $cns->[$i];
          if ($cn eq $refChild) {
            $index += $i;
            last C;
          } elsif ($cn eq $newChild) {
            $index = -1; # offset
          }
        }
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'refChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $refChild;


}


;}

;
        


}

;
        

;
      } # C
    } else { # |oldChild| is not defined
      

;
    }
  


}

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      

{


$newChild->{
'b'
}->{${$newChild->{
'id'
}}}
    ->{'child'} = [];


}

;
    } else {
      my $v;
      

{


$v = $nc_parent->{
'b'
}->{${$nc_parent->{
'id'
}}}
         ->{'child'};


}

;
      RP: for my $i (0..$#$v) {
        my $nodeid = $v->[$i];
        if (
(${$new_child[0]->{'id'}} eq ${$nodeid})
) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    

{


$nc->{
'b'
}->{${$nc->{
'id'
}}}
    ->{'parent'} = $self->{
'id'
};


}

;
  }

  my $children;
  

{


$children = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'child'};


}

;

  

;

  

{


## -- Adds to children list
    if ($index == -1) {
      push @$children, map {
        
$_->{'id'}

      } @new_child;
    } else {
      splice @$children, $index, 0, map {
        
$_->{'id'}

      } @new_child;
    }
    $r = $newChild;
  


}

;

  

;



}


;}

;


}

;


}
$r}
sub replace_child ($$$) {
my ($self, $newChild, $oldChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
unless ($self_od) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;
}
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    7 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    7 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

{


# tc:ForAppendChild & tc:ForReplaceChild
    if (defined $oldChild) {
      if ($oldChild eq $newChild) {
        

;
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#replace-by-itself', 'rdata' => $oldChild, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
        


}

;
      }

      my $cns = $self->
child_nodes
;
      my $cnsl = @$cns;
      C: {
        $index = 0;
        for my $i (0..($cnsl-1)) {
          my $cn = $cns->[$i];
          if ($cn eq $oldChild) {
            $index += $i;
            last C;
          } elsif ($cn eq $newChild) {
            $index = -1; # offset
          }
        }
        

;
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $oldChild;


}


;}

;
        


}

;
      } # C
    } else { # |oldChild| is not defined
      

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $oldChild;


}


;}

;
      


}

;
    }
  


}

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      

{


$newChild->{
'b'
}->{${$newChild->{
'id'
}}}
    ->{'child'} = [];


}

;
    } else {
      my $v;
      

{


$v = $nc_parent->{
'b'
}->{${$nc_parent->{
'id'
}}}
         ->{'child'};


}

;
      RP: for my $i (0..$#$v) {
        my $nodeid = $v->[$i];
        if (
(${$new_child[0]->{'id'}} eq ${$nodeid})
) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    

{


$nc->{
'b'
}->{${$nc->{
'id'
}}}
    ->{'parent'} = $self->{
'id'
};


}

;
  }

  my $children;
  

{


$children = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'child'};


}

;

  

;

  

;

  

{


## -- Replaces the node
    splice @$children, $index, 1, map {
      
$_->{'id'}

    } @new_child;
    

{

CORE::delete 
$oldChild->{
'b'
}->{${$oldChild->{
'id'
}}}
                 ->{'parent'};


}

;
    $r = $oldChild;
  


}

;



}


;}

;


}

;


}
$r}
sub get_feature ($$$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


}

{


$version = '' unless defined $version;


}
my $r;

{


$feature =~ s/^\+//;


{

if 
($Message::DOM::DOMFeature::ClassInfo->{ref $self}
      ->{has_feature}->{$feature}->{$version} or
    $Message::Util::AutoLoad::Registry::Feature
        ->{$feature}->{$version}) {
  $r = $self;
} else {
  CLASS: for my $__class (sort {
    $Message::DOM::ClassPoint{$b} <=> $Message::DOM::ClassPoint{$a}
  } grep {
    $Message::DOM::DOMFeature::ClassInfo->{'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition'}
        ->{compat_class}->{$_}
  } keys %{$Message::DOM::DOMFeature::ClassInfo->{'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition'}
               ->{compat_class} or {}}) {
    if ($Message::DOM::DOMFeature::ClassInfo->{$__class}
            ->{has_feature}->{$feature}->{$version} or
        $Message::Util::AutoLoad::Registry::Feature
            ->{$feature}->{$version}) {
      

{


$r = ${($self->{'b'})->{${($self->{'id'})}}->{
'cls'
}}->___create_node_ref ({
  
'id'
 => ($self->{'id'}),
  
'b'
 => ($self->{'b'}),
}, {
          'nrcls' => \$__class,
        });
($self->{'b'})->{${($self->{'id'})}}->{
'rc'
}++;


}

;
      last CLASS;
    }
  } # CLASS
}


}

;
unless (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->SUPER::get_feature ($feature, $version);
  


}


;}

;
}


}
$r}
sub remove_child ($$) {
my ($self, $oldChild) = @_;
my $r;

{

my 
$od = $self->
owner_document
;
if ((not defined $od or
     $od->
strict_error_checking
) and
    $self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'remove_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition';

;
}


{

F: 
{
  my $i = -1;
  for my $cld (@{$self->
child_nodes
}) {
    $i++;
    if ($cld eq $oldChild) {
      my $v;
      

{


$v = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'child'};


}

;
      splice @$v, $i, 1, ();
      

{

CORE::delete 
$oldChild->{
'b'
}->{${$oldChild->{
'id'
}}}
                 ->{'parent'};


}

;
      $r = $oldChild;
      last F;
    }
  }
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/removeChildImpl+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $oldChild;

;
} # F


}

;


}
$r}
sub element_types ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


$r = bless \\($self), 
'Message::DOM::TreeCore::ManakaiDOMElementTypeDefMap'
;


}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'element_types';
}
}
sub general_entities ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


$r = bless \\($self), 
'Message::DOM::TreeCore::ManakaiDOMEntityMap'
;


}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'general_entities';
}
}
sub entities ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


$r = bless \\($self), 
'Message::DOM::TreeCore::ManakaiDOMEntityMap'
;


}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'entities';
}
}
sub notations ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


$r = bless \\($self), 
'Message::DOM::TreeCore::ManakaiDOMNotationMap'
;


}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'notations';
}
}
sub get_element_type_definition_node ($$) {
my ($self, $nameArg) = @_;
my $r;

{

my 
$v;


{


$v = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#elementTypes'};


}

;
if (defined $v->{$nameArg}) {
  

{


$r = ${($self->{'b'})->{${$v->{$nameArg}}}->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $v->{$nameArg},
  
'b'
 => ($self->{'b'}),
}, {
    });
($self->{'b'})->{${$v->{$nameArg}}}->{
'rc'
}++;


}

;
}


}
$r}
sub set_element_type_definition_node ($$) {
my ($self, $defNode) = @_;
my $r;

{


{

my 
$__aname = $defNode->
node_name
;
my $__list;


{


$__list = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#elementTypes'};


}

;
if (defined $__list->{$__aname}) {
  

{


$r = ${($self->{'b'})->{${$__list->{$__aname}}}->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $__list->{$__aname},
  
'b'
 => ($self->{'b'}),
}, {
    });
($self->{'b'})->{${$__list->{$__aname}}}->{
'rc'
}++;


}

;
}
SET: {
  if (defined $r and $r eq $defNode) {
    undef $r;
    last SET; # no effect
  }
  

{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;
  unless ($defNode->
owner_document
              eq 
$self->
owner_document
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/xdt%23setDefinitionNode+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'defNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $defNode;

;
  }
  my $__owner;
  

{


$__owner = $defNode->
owner_document_type_definition
;
  


}

;
  

;
  if ($__owner) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INUSE_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#INUSE_DEFINITION_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/xdt%23setDefinitionNode+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'defNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $defNode;

;
  }
      
  if (defined $r) {
    

{

CORE::delete 
$r->{
'b'
}->{${$r->{
'id'
}}}
                 ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'};


}

;
  }

  $__list->{$__aname} = 
$defNode->{'id'}
;
  

{


$defNode->{
'b'
}->{${$defNode->{
'id'
}}}
    ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'} = $self->{
'id'
};


}

;
} # SET


}

;


}
$r}
sub get_general_entity_node ($$) {
my ($self, $nameArg) = @_;
my $r;

{

my 
$v;


{


$v = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#generalEntities'};


}

;
if (defined $v->{$nameArg}) {
  

{


$r = ${($self->{'b'})->{${$v->{$nameArg}}}->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $v->{$nameArg},
  
'b'
 => ($self->{'b'}),
}, {
    });
($self->{'b'})->{${$v->{$nameArg}}}->{
'rc'
}++;


}

;
}


}
$r}
sub set_general_entity_node ($$) {
my ($self, $defNode) = @_;
my $r;

{


{

my 
$__aname = $defNode->
node_name
;
my $__list;


{


$__list = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#generalEntities'};


}

;
if (defined $__list->{$__aname}) {
  

{


$r = ${($self->{'b'})->{${$__list->{$__aname}}}->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $__list->{$__aname},
  
'b'
 => ($self->{'b'}),
}, {
    });
($self->{'b'})->{${$__list->{$__aname}}}->{
'rc'
}++;


}

;
}
SET: {
  if (defined $r and $r eq $defNode) {
    undef $r;
    last SET; # no effect
  }
  

{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;
  unless ($defNode->
owner_document
              eq 
$self->
owner_document
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/xdt%23setDefinitionNode+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'defNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $defNode;

;
  }
  my $__owner;
  

{


$__owner = $defNode->
owner_document_type_definition
;
  


}

;
  

;
  if ($__owner) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INUSE_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#INUSE_DEFINITION_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/xdt%23setDefinitionNode+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'defNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $defNode;

;
  }
      
  if (defined $r) {
    

{

CORE::delete 
$r->{
'b'
}->{${$r->{
'id'
}}}
                 ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'};


}

;
  }

  $__list->{$__aname} = 
$defNode->{'id'}
;
  

{


$defNode->{
'b'
}->{${$defNode->{
'id'
}}}
    ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'} = $self->{
'id'
};


}

;
} # SET


}

;


}
$r}
sub get_notation_node ($$) {
my ($self, $nameArg) = @_;
my $r;

{

my 
$v;


{


$v = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#notations'};


}

;
if (defined $v->{$nameArg}) {
  

{


$r = ${($self->{'b'})->{${$v->{$nameArg}}}->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $v->{$nameArg},
  
'b'
 => ($self->{'b'}),
}, {
    });
($self->{'b'})->{${$v->{$nameArg}}}->{
'rc'
}++;


}

;
}


}
$r}
sub set_notation_node ($$) {
my ($self, $defNode) = @_;
my $r;

{


{

my 
$__aname = $defNode->
node_name
;
my $__list;


{


$__list = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#notations'};


}

;
if (defined $__list->{$__aname}) {
  

{


$r = ${($self->{'b'})->{${$__list->{$__aname}}}->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $__list->{$__aname},
  
'b'
 => ($self->{'b'}),
}, {
    });
($self->{'b'})->{${$__list->{$__aname}}}->{
'rc'
}++;


}

;
}
SET: {
  if (defined $r and $r eq $defNode) {
    undef $r;
    last SET; # no effect
  }
  

{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;
  unless ($defNode->
owner_document
              eq 
$self->
owner_document
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/xdt%23setDefinitionNode+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'defNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $defNode;

;
  }
  my $__owner;
  

{


$__owner = $defNode->
owner_document_type_definition
;
  


}

;
  

;
  if ($__owner) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INUSE_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#INUSE_DEFINITION_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/xdt%23setDefinitionNode+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'defNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $defNode;

;
  }
      
  if (defined $r) {
    

{

CORE::delete 
$r->{
'b'
}->{${$r->{
'id'
}}}
                 ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'};


}

;
  }

  $__list->{$__aname} = 
$defNode->{'id'}
;
  

{


$defNode->{
'b'
}->{${$defNode->{
'id'
}}}
    ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'} = $self->{
'id'
};


}

;
} # SET


}

;


}
$r}
sub implementation ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

my 
$__v = $self->{
'b'
}->{${$self->{
'id'
}}}
              ->{'impl'};
if (defined $__v) {
  

{


$r = ${$self->{'b'}->{${$__v}}->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $__v,
  
'b'
 => $self->{'b'},
}, {
    'nrifs' => ['Message::DOM::IFLatest::DOMImplementation'],
  });
$self->{'b'}->{${$__v}}->{
'rc'
}++;


}

;
}


}

;
unless ($r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
owner_document

              ->
implementation
;
  


}


;}

;
}


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'implementation';
}
}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/www/2006/feature/xdoctype',
{'',
'1',
'3.0',
'1'},
'http://suika.fam.cx/www/2006/feature/xdoctypedeclaration',
{'',
'1',
'3.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition>} = 20.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition>}->{compat_class}->{q<Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition>} = 1;
$Message::Util::Grove::ClassProp{q<Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition>} = {'o0',
['parent'],
's1a',
['child'],
's1h',
['http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#notations',
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#elementTypes',
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#generalEntities'],
'w0',
['od']};
package Message::DOM::IFLatest::DocumentTypeDeclaration;
our $VERSION = 20061104.1301;
package Message::DOM::XDoctype::ManakaiDOMDocumentTypeDeclaration;
our $VERSION = 20061104.1301;
push our @ISA, 'Message::DOM::IFLatest::DocumentTypeDeclaration';
sub system_id ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'sysid'};


}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'sysid'} = $given;


}

;


}
}
}
sub public_id ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'pubid'};


}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'pubid'} = $given;


}

;


}
}
}
sub name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$v;


{


$v = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'xname'};


}

;
$r = $$v;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDeclaration', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'name';
}
}
sub declaration_base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$od = $self->
owner_document
;
  if ($od) {
    $r = $od->
base_uri
;
  } else {
    $r = 
undef
;
  }



}


;}

;


}
$r;
} else {my ($self, $given) = @_;


}
}
sub manakai_declaration_base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
declaration_base_uri
;



}


;}

;


}
$r;
} else {my ($self, $given) = @_;


}
}
sub internal_subset ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = 
undef
;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDeclaration', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'internal_subset';
}
}
$Message::DOM::ImplFeature{q<Message::DOM::DOMCore::ManakaiDOMImplementation>}->{q<http://suika.fam.cx/www/2006/feature/xdoctypedeclaration>}->{q<3.0>} ||= 1;
$Message::DOM::ImplFeature{q<Message::DOM::DOMCore::ManakaiDOMImplementation>}->{q<http://suika.fam.cx/www/2006/feature/xdoctypedeclaration>}->{q<>} = 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XDoctype::ManakaiDOMDocumentTypeDeclaration>}->{has_feature} = {'http://suika.fam.cx/www/2006/feature/xdoctypedeclaration',
{'',
'1',
'3.0',
'1'}};
$Message::DOM::ClassPoint{q<Message::DOM::XDoctype::ManakaiDOMDocumentTypeDeclaration>} = 3;
package Message::DOM::IFLatest::ElementTypeDefinition;
our $VERSION = 20061104.1301;
package Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition;
our $VERSION = 20061104.1301;
push our @ISA, 'Message::DOM::TreeCore::ManakaiDOMNode',
'Message::DOM::IFLatest::ElementTypeDefinition',
'Message::DOM::IFLatest::Node';
sub ___create_node_stem ($$$$) {
my ($self, $bag, $obj, $opt) = @_;
my $r;

{


{

if 
(defined ${$opt->{'xname'}}) {
  if (ref ${$opt->{'xname'}} eq 'SCALAR') {
    $obj->{'xname'} = ${$opt->{'xname'}};
  } elsif (defined $Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}}) {
    $obj->{'xname'} = $Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}};
  } else {
    require Scalar::Util;
    $obj->{'xname'} = $Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}} = \(${$opt->{'xname'}});
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}});
  }
} else {
  CORE::delete $obj->{'xname'};
}


}

;


{


$obj->{'od'} = $opt->{'od'}->{
'id'
};
$bag->{${$opt->{'od'}->{
'id'
}}}
    ->{'do'}->{${$obj->{
'id'
}}}
  = $obj->{
'id'
};


}

;
$obj->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#attributeDefinitions'
} = {};
$r = $obj;


}
$r}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 81001;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$v;


{


$v = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'xname'};


}

;
$r = $$v;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub text_content ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = 
undef
;


}
$r;
} else {my ($self, $given) = @_;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#setting-node-value-no-effect', 'rdata' => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::TreeCore::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_value';

;


}
}
}
sub child_nodes ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


$r = bless [], 
'Message::DOM::TreeCore::ManakaiDOMEmptyNodeList'
;


}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'child_nodes';
}
}
sub base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
base_uri
;



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'base_uri';
}
}
sub append_child ($$) {
my ($self, $newChild) = @_;
my $r;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::CharacterData::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;


}
$r}
sub insert_before ($$;$) {
my ($self, $newChild, $refChild) = @_;
my $r;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_before', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::CharacterData::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;


}
$r}
sub replace_child ($$$) {
my ($self, $newChild, $oldChild) = @_;
my $r;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::CharacterData::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;


}
$r}
sub get_feature ($$$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


}

{


$version = '' unless defined $version;


}
my $r;

{


$feature =~ s/^\+//;


{

if 
($Message::DOM::DOMFeature::ClassInfo->{ref $self}
      ->{has_feature}->{$feature}->{$version} or
    $Message::Util::AutoLoad::Registry::Feature
        ->{$feature}->{$version}) {
  $r = $self;
} else {
  CLASS: for my $__class (sort {
    $Message::DOM::ClassPoint{$b} <=> $Message::DOM::ClassPoint{$a}
  } grep {
    $Message::DOM::DOMFeature::ClassInfo->{'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition'}
        ->{compat_class}->{$_}
  } keys %{$Message::DOM::DOMFeature::ClassInfo->{'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition'}
               ->{compat_class} or {}}) {
    if ($Message::DOM::DOMFeature::ClassInfo->{$__class}
            ->{has_feature}->{$feature}->{$version} or
        $Message::Util::AutoLoad::Registry::Feature
            ->{$feature}->{$version}) {
      

{


$r = ${($self->{'b'})->{${($self->{'id'})}}->{
'cls'
}}->___create_node_ref ({
  
'id'
 => ($self->{'id'}),
  
'b'
 => ($self->{'b'}),
}, {
          'nrcls' => \$__class,
        });
($self->{'b'})->{${($self->{'id'})}}->{
'rc'
}++;


}

;
      last CLASS;
    }
  } # CLASS
}


}

;
unless (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->SUPER::get_feature ($feature, $version);
  


}


;}

;
}


}
$r}
sub attribute_definitions ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


$r = bless \\($self), 
'Message::DOM::TreeCore::ManakaiDOMAttrDefMap'
;


}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'attribute_definitions';
}
}
sub get_attribute_definition_node ($$) {
my ($self, $nameArg) = @_;
my $r;

{

my 
$v;


{


$v = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#attributeDefinitions'};


}

;
if (defined $v->{$nameArg}) {
  

{


$r = ${($self->{'b'})->{${$v->{$nameArg}}}->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $v->{$nameArg},
  
'b'
 => ($self->{'b'}),
}, {
    });
($self->{'b'})->{${$v->{$nameArg}}}->{
'rc'
}++;


}

;
}


}
$r}
sub set_attribute_definition_node ($$) {
my ($self, $attrDef) = @_;
my $r;

{


{

my 
$__aname = $attrDef->
node_name
;
my $__list;


{


$__list = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#attributeDefinitions'};


}

;
if (defined $__list->{$__aname}) {
  

{


$r = ${($self->{'b'})->{${$__list->{$__aname}}}->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $__list->{$__aname},
  
'b'
 => ($self->{'b'}),
}, {
    });
($self->{'b'})->{${$__list->{$__aname}}}->{
'rc'
}++;


}

;
}
SET: {
  if (defined $r and $r eq $attrDef) {
    undef $r;
    last SET; # no effect
  }
  

{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;
  unless ($attrDef->
owner_document
              eq 
$self->
owner_document
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/xdt%23setDefinitionNodeAttr+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'attrDef', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $attrDef;

;
  }
  my $__owner;
  

;
  

{


$__owner = $attrDef->
owner_element_type_definition
;
  


}

;
  if ($__owner) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INUSE_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#INUSE_DEFINITION_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/xdt%23setDefinitionNodeAttr+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'attrDef', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $attrDef;

;
  }
      
  if (defined $r) {
    

{

CORE::delete 
$r->{
'b'
}->{${$r->{
'id'
}}}
                 ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'};


}

;
  }

  $__list->{$__aname} = 
$attrDef->{'id'}
;
  

{


$attrDef->{
'b'
}->{${$attrDef->{
'id'
}}}
    ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'} = $self->{
'id'
};


}

;
} # SET


}

;


}
$r}
sub owner_document_type_definition ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

my 
$__v = $self->{
'b'
}->{${$self->{
'id'
}}}
              ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'};
if (defined $__v) {
  

{


$r = ${$self->{'b'}->{${$__v}}->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $__v,
  
'b'
 => $self->{'b'},
}, {
    'nrifs' => [
      'Message::DOM::IFLatest::DocumentTypeDefinition',
      'Message::DOM::IFLatest::DocumentTypeDeclaration',
      'Message::DOM::IFLatest::DocumentType',
    ],
  });
$self->{'b'}->{${$__v}}->{
'rc'
}++;


}

;
}


}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'owner_document_type_definition';
}
}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/www/2006/feature/xdoctype',
{'',
'1',
'3.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition>} = 17.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition>}->{compat_class}->{q<Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition>} = 1;
$Message::Util::Grove::ClassProp{q<Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition>} = {'o0',
['http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'],
's1h',
['http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#attributeDefinitions'],
'w0',
['od']};
package Message::DOM::IFLatest::AttributeDefinition;
our $VERSION = 20061104.1301;
sub NO_TYPE_ATTR () {
0}
sub CDATA_ATTR () {
1}
sub ID_ATTR () {
2}
sub IDREF_ATTR () {
3}
sub IDREFS_ATTR () {
4}
sub ENTITY_ATTR () {
5}
sub ENTITIES_ATTR () {
6}
sub NMTOKEN_ATTR () {
7}
sub NMTOKENS_ATTR () {
8}
sub NOTATION_ATTR () {
9}
sub ENUMERATION_ATTR () {
10}
sub UNKNOWN_ATTR () {
11}
sub UNKNOWN_DEFAULT () {
0}
sub FIXED_DEFAULT () {
1}
sub REQUIRED_DEFAULT () {
2}
sub IMPLIED_DEFAULT () {
3}
sub EXPLICIT_DEFAULT () {
4}
package Message::DOM::XDoctype::ManakaiDOMAttributeDefinition;
our $VERSION = 20061104.1301;
push our @ISA, 'Message::DOM::TreeCore::ManakaiDOMNode',
'Message::DOM::IFLatest::AttributeDefinition',
'Message::DOM::IFLatest::Node';
sub ___create_node_stem ($$$$) {
my ($self, $bag, $obj, $opt) = @_;
my $r;

{


{

if 
(defined ${$opt->{'xname'}}) {
  if (ref ${$opt->{'xname'}} eq 'SCALAR') {
    $obj->{'xname'} = ${$opt->{'xname'}};
  } elsif (defined $Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}}) {
    $obj->{'xname'} = $Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}};
  } else {
    require Scalar::Util;
    $obj->{'xname'} = $Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}} = \(${$opt->{'xname'}});
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{${$opt->{'xname'}}});
  }
} else {
  CORE::delete $obj->{'xname'};
}


}

;
$obj->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#declaredType'
} = 
0
;
$obj->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#defaultType'
} = 
0
;


{


$obj->{'od'} = $opt->{'od'}->{
'id'
};
$bag->{${$opt->{'od'}->{
'id'
}}}
    ->{'do'}->{${$obj->{
'id'
}}}
  = $obj->{
'id'
};


}

;
$obj->{
'child'
} = [];
$obj->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#allowedTokens'
} = [];
$r = $obj;


}
$r}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 81002;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$v;


{


$v = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'xname'};


}

;
$r = $$v;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_value ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$dt = $self->
default_type
;
  if ($dt == 
4 or
      
$dt == 
1
) {
    for my $child (@{$self->
child_nodes
}) {
      if ($child->
node_type
 ==
          
5
) {
        my $v = $child->
text_content
;
        $v =~ s/[\x09\x0A\x0D]/ /;
        $r .= $v;
      } else {
        $r .= $child->
text_content
;
      }
    } # childNodes
    my $vt = $self->
declared_type
;
    unless ($vt == 
0 or
            
$vt == 
11 or
            
$vt == 
1
) {
      $r =~ s/\A\x20+//;
      $r =~ s/\x20+\z//;
      $r =~ s/\x20+/ /g;
    }
  } else {
    $r = 
undef
;
  }



}


;}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$dt = $self->
default_type
;
  if ($dt == 
4 or
      
$dt == 
1
) {
    

{

local $Error::Depth = $Error::Depth - 1;

{



      

{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;
    


}


;}

;
    my @children = @{$self->
child_nodes
};
    for my $child (@children) {
      $self->
remove_child
 ($child);
    } # childNodes
    if (defined $given and length $given) {
      $self->
append_child

        ($self->
owner_document

              ->
create_text_node

                  ($given));
    }
  }



}


;}

;


}
}
}
sub base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
base_uri
;



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'base_uri';
}
}
sub append_child ($$) {
my ($self, $newChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    3 => 1,
    5 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    3 => 1,
    5 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      

{


$newChild->{
'b'
}->{${$newChild->{
'id'
}}}
    ->{'child'} = [];


}

;
    } else {
      my $v;
      

{


$v = $nc_parent->{
'b'
}->{${$nc_parent->{
'id'
}}}
         ->{'child'};


}

;
      RP: for my $i (0..$#$v) {
        my $nodeid = $v->[$i];
        if (
(${$new_child[0]->{'id'}} eq ${$nodeid})
) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    

{


$nc->{
'b'
}->{${$nc->{
'id'
}}}
    ->{'parent'} = $self->{
'id'
};


}

;
  }

  my $children;
  

{


$children = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'child'};


}

;

  

{


## -- Adds to children list
    push @$children, map {
      
$_->{'id'}

    } @new_child;
    $r = $newChild;
  


}

;

  

;

  

;



}


;}

;


}

;


}
$r}
sub insert_before ($$;$) {
my ($self, $newChild, $refChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
; 
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    3 => 1,
    5 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    3 => 1,
    5 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

{


# tc:ForAppendChild & tc:ForReplaceChild
    if (defined $refChild) {
      if ($refChild eq $newChild) {
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#insert-before-itself', 'rdata' => $refChild, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
        


}

;
        

;
      }

      my $cns = $self->
child_nodes
;
      my $cnsl = @$cns;
      C: {
        $index = 0;
        for my $i (0..($cnsl-1)) {
          my $cn = $cns->[$i];
          if ($cn eq $refChild) {
            $index += $i;
            last C;
          } elsif ($cn eq $newChild) {
            $index = -1; # offset
          }
        }
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'refChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $refChild;


}


;}

;
        


}

;
        

;
      } # C
    } else { # |oldChild| is not defined
      

;
    }
  


}

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      

{


$newChild->{
'b'
}->{${$newChild->{
'id'
}}}
    ->{'child'} = [];


}

;
    } else {
      my $v;
      

{


$v = $nc_parent->{
'b'
}->{${$nc_parent->{
'id'
}}}
         ->{'child'};


}

;
      RP: for my $i (0..$#$v) {
        my $nodeid = $v->[$i];
        if (
(${$new_child[0]->{'id'}} eq ${$nodeid})
) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    

{


$nc->{
'b'
}->{${$nc->{
'id'
}}}
    ->{'parent'} = $self->{
'id'
};


}

;
  }

  my $children;
  

{


$children = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'child'};


}

;

  

;

  

{


## -- Adds to children list
    if ($index == -1) {
      push @$children, map {
        
$_->{'id'}

      } @new_child;
    } else {
      splice @$children, $index, 0, map {
        
$_->{'id'}

      } @new_child;
    }
    $r = $newChild;
  


}

;

  

;



}


;}

;


}

;


}
$r}
sub replace_child ($$$) {
my ($self, $newChild, $oldChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    3 => 1,
    5 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    3 => 1,
    5 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

{


# tc:ForAppendChild & tc:ForReplaceChild
    if (defined $oldChild) {
      if ($oldChild eq $newChild) {
        

;
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#replace-by-itself', 'rdata' => $oldChild, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';


}


;}

;
        


}

;
      }

      my $cns = $self->
child_nodes
;
      my $cnsl = @$cns;
      C: {
        $index = 0;
        for my $i (0..($cnsl-1)) {
          my $cn = $cns->[$i];
          if ($cn eq $oldChild) {
            $index += $i;
            last C;
          } elsif ($cn eq $newChild) {
            $index = -1; # offset
          }
        }
        

;
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $oldChild;


}


;}

;
        


}

;
      } # C
    } else { # |oldChild| is not defined
      

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $oldChild;


}


;}

;
      


}

;
    }
  


}

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      

{


$newChild->{
'b'
}->{${$newChild->{
'id'
}}}
    ->{'child'} = [];


}

;
    } else {
      my $v;
      

{


$v = $nc_parent->{
'b'
}->{${$nc_parent->{
'id'
}}}
         ->{'child'};


}

;
      RP: for my $i (0..$#$v) {
        my $nodeid = $v->[$i];
        if (
(${$new_child[0]->{'id'}} eq ${$nodeid})
) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    

{


$nc->{
'b'
}->{${$nc->{
'id'
}}}
    ->{'parent'} = $self->{
'id'
};


}

;
  }

  my $children;
  

{


$children = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'child'};


}

;

  

;

  

;

  

{


## -- Replaces the node
    splice @$children, $index, 1, map {
      
$_->{'id'}

    } @new_child;
    

{

CORE::delete 
$oldChild->{
'b'
}->{${$oldChild->{
'id'
}}}
                 ->{'parent'};


}

;
    $r = $oldChild;
  


}

;



}


;}

;


}

;


}
$r}
sub manakai_append_text ($$) {
my ($self, $string) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$lc = $self->
last_child
;
  if (defined $lc and
      $lc->
node_type
 == 
3
) {
    $lc->
manakai_append_text

           (ref $string eq 'SCALAR' ? $string : \$string);
  } else {
    my $text = $self->
owner_document

                    ->
create_text_node
 
                        (ref $string eq 'SCALAR' ? $$string : $string);
    $self->
append_child
 ($text);
  }
  $r = $self;



}


;}

;


}
$r}
sub get_feature ($$$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


}

{


$version = '' unless defined $version;


}
my $r;

{


$feature =~ s/^\+//;


{

if 
($Message::DOM::DOMFeature::ClassInfo->{ref $self}
      ->{has_feature}->{$feature}->{$version} or
    $Message::Util::AutoLoad::Registry::Feature
        ->{$feature}->{$version}) {
  $r = $self;
} else {
  CLASS: for my $__class (sort {
    $Message::DOM::ClassPoint{$b} <=> $Message::DOM::ClassPoint{$a}
  } grep {
    $Message::DOM::DOMFeature::ClassInfo->{'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition'}
        ->{compat_class}->{$_}
  } keys %{$Message::DOM::DOMFeature::ClassInfo->{'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition'}
               ->{compat_class} or {}}) {
    if ($Message::DOM::DOMFeature::ClassInfo->{$__class}
            ->{has_feature}->{$feature}->{$version} or
        $Message::Util::AutoLoad::Registry::Feature
            ->{$feature}->{$version}) {
      

{


$r = ${($self->{'b'})->{${($self->{'id'})}}->{
'cls'
}}->___create_node_ref ({
  
'id'
 => ($self->{'id'}),
  
'b'
 => ($self->{'b'}),
}, {
          'nrcls' => \$__class,
        });
($self->{'b'})->{${($self->{'id'})}}->{
'rc'
}++;


}

;
      last CLASS;
    }
  } # CLASS
}


}

;
unless (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->SUPER::get_feature ($feature, $version);
  


}


;}

;
}


}
$r}
sub owner_element_type_definition ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

my 
$__v = $self->{
'b'
}->{${$self->{
'id'
}}}
              ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'};
if (defined $__v) {
  

{


$r = ${$self->{'b'}->{${$__v}}->{
'cls'
}}->___create_node_ref ({
  
'id'
 => $__v,
  
'b'
 => $self->{'b'},
}, {
    'nrifs' => [
      'Message::DOM::IFLatest::DocumentTypeDefinition',
      'Message::DOM::IFLatest::DocumentTypeDeclaration',
      'Message::DOM::IFLatest::DocumentType',
    ],
  });
$self->{'b'}->{${$__v}}->{
'rc'
}++;


}

;
}


}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'owner_element_type_definition';
}
}
sub declared_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#declaredType'};


}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#declaredType'} = $given;


}

;


}
}
}
sub default_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


{


$r = $self->{
'b'
}->{${$self->{
'id'
}}}
         ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#defaultType'};


}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


{


$self->{
'b'
}->{${$self->{
'id'
}}}
    ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#defaultType'} = $given;


}

;


}
}
}
sub allowed_tokens ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


$r = bless \[$self, 'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#allowedTokens'], 
'Message::DOM::DOMCore::ManakaiDOMStringList'
;


}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'allowed_tokens';
}
}
sub _check_read_only ($) {
my ($self) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


}

;


}
}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XDoctype::ManakaiDOMAttributeDefinition>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/www/2006/feature/xdoctype',
{'',
'1',
'3.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::DOM::XDoctype::ManakaiDOMAttributeDefinition>} = 17.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XDoctype::ManakaiDOMAttributeDefinition>}->{compat_class}->{q<Message::DOM::XDoctype::ManakaiDOMAttributeDefinition>} = 1;
$Message::Util::Grove::ClassProp{q<Message::DOM::XDoctype::ManakaiDOMAttributeDefinition>} = {'o0',
['http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'],
's1a',
['child'],
'w0',
['od']};
for ($Message::DOM::IFLatest::Document::, $Message::DOM::IFLatest::DocumentType::, $Message::DOM::IFLatest::Node::, $Message::DOM::IFLevel1::DocumentType::, $Message::DOM::IFLevel1::Node::, $Message::DOM::IFLevel2::DocumentType::, $Message::DOM::IFLevel2::Node::, $Message::DOM::IFLevel3::DocumentType::, $Message::DOM::IFLevel3::Node::){}
## License: <http://suika.fam.cx/~wakaba/archive/2004/8/18/license#Perl+MPL>
1;
