#!/usr/bin/perl 
## This file is automatically generated
## 	at 2006-01-27T16:15:35+00:00,
## 	from file "lib/Message/DOM/XDoctype.dis",
## 	module <http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.XDoctype>,
## 	for <http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOMLatest>.
## Don't edit by hand!
use strict;
require Message::DOM::DOMCore;
require Message::DOM::DOMXML;
require Message::DOM::Tree;
require Message::Util::Error::DOMException;
package Message::DOM::XDoctype;
our $VERSION = 20060127.1615;
sub CDATA_ATTR ();
sub ENTITIES_ATTR ();
sub ENTITY_ATTR ();
sub ENUMERATION_ATTR ();
sub EXPLICIT_DEFAULT ();
sub FIXED_DEFAULT ();
sub IDREFS_ATTR ();
sub IDREF_ATTR ();
sub ID_ATTR ();
sub IMPLIED_DEFAULT ();
sub NMTOKENS_ATTR ();
sub NMTOKEN_ATTR ();
sub NOTATION_ATTR ();
sub NO_TYPE_ATTR ();
sub REQUIRED_DEFAULT ();
sub UNKNOWN_ATTR ();
sub UNKNOWN_DEFAULT ();
sub AUTOLOAD {


        my $al = our $AUTOLOAD;
        $al =~ s/.+:://;
        if ({'CDATA_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::CDATA_ATTR', 'ENTITIES_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::ENTITIES_ATTR', 'ENTITY_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::ENTITY_ATTR', 'ENUMERATION_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::ENUMERATION_ATTR', 'EXPLICIT_DEFAULT', 'Message::DOM::IFLatest::AttributeDefinition::EXPLICIT_DEFAULT', 'FIXED_DEFAULT', 'Message::DOM::IFLatest::AttributeDefinition::FIXED_DEFAULT', 'IDREFS_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::IDREFS_ATTR', 'IDREF_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::IDREF_ATTR', 'ID_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::ID_ATTR', 'IMPLIED_DEFAULT', 'Message::DOM::IFLatest::AttributeDefinition::IMPLIED_DEFAULT', 'NMTOKENS_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::NMTOKENS_ATTR', 'NMTOKEN_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::NMTOKEN_ATTR', 'NOTATION_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::NOTATION_ATTR', 'NO_TYPE_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::NO_TYPE_ATTR', 'REQUIRED_DEFAULT', 'Message::DOM::IFLatest::AttributeDefinition::REQUIRED_DEFAULT', 'UNKNOWN_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::UNKNOWN_ATTR', 'UNKNOWN_DEFAULT', 'Message::DOM::IFLatest::AttributeDefinition::UNKNOWN_DEFAULT'}->{$al}) {
          no strict 'refs';
          *{$AUTOLOAD} = \&{{'CDATA_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::CDATA_ATTR', 'ENTITIES_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::ENTITIES_ATTR', 'ENTITY_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::ENTITY_ATTR', 'ENUMERATION_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::ENUMERATION_ATTR', 'EXPLICIT_DEFAULT', 'Message::DOM::IFLatest::AttributeDefinition::EXPLICIT_DEFAULT', 'FIXED_DEFAULT', 'Message::DOM::IFLatest::AttributeDefinition::FIXED_DEFAULT', 'IDREFS_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::IDREFS_ATTR', 'IDREF_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::IDREF_ATTR', 'ID_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::ID_ATTR', 'IMPLIED_DEFAULT', 'Message::DOM::IFLatest::AttributeDefinition::IMPLIED_DEFAULT', 'NMTOKENS_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::NMTOKENS_ATTR', 'NMTOKEN_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::NMTOKEN_ATTR', 'NOTATION_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::NOTATION_ATTR', 'NO_TYPE_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::NO_TYPE_ATTR', 'REQUIRED_DEFAULT', 'Message::DOM::IFLatest::AttributeDefinition::REQUIRED_DEFAULT', 'UNKNOWN_ATTR', 'Message::DOM::IFLatest::AttributeDefinition::UNKNOWN_ATTR', 'UNKNOWN_DEFAULT', 'Message::DOM::IFLatest::AttributeDefinition::UNKNOWN_DEFAULT'}->{$al}};
          goto &{$AUTOLOAD};
        } else {
          require Carp;
          Carp::croak (qq<Can't locate method "$AUTOLOAD">);
        }
      
}
sub import {


        my $self = shift;
        if (@_) {
          local $Exporter::ExportLevel = $Exporter::ExportLevel + 1;
          $self->SUPER::import (@_);
          for (grep {not /\W/} @_) {
            eval qq{$_};
          }
        }
      
}
our %EXPORT_TAG = ('DeclaredValueType', ['CDATA_ATTR', 'ENTITIES_ATTR', 'ENTITY_ATTR', 'ENUMERATION_ATTR', 'IDREFS_ATTR', 'IDREF_ATTR', 'ID_ATTR', 'NMTOKENS_ATTR', 'NMTOKEN_ATTR', 'NOTATION_ATTR', 'NO_TYPE_ATTR', 'UNKNOWN_ATTR'], 'DefaultValueType', ['EXPLICIT_DEFAULT', 'FIXED_DEFAULT', 'IMPLIED_DEFAULT', 'REQUIRED_DEFAULT', 'UNKNOWN_DEFAULT']);
our @EXPORT_OK = ('CDATA_ATTR', 'ENTITIES_ATTR', 'ENTITY_ATTR', 'ENUMERATION_ATTR', 'IDREFS_ATTR', 'IDREF_ATTR', 'ID_ATTR', 'NMTOKENS_ATTR', 'NMTOKEN_ATTR', 'NOTATION_ATTR', 'NO_TYPE_ATTR', 'UNKNOWN_ATTR', 'EXPLICIT_DEFAULT', 'FIXED_DEFAULT', 'IMPLIED_DEFAULT', 'REQUIRED_DEFAULT', 'UNKNOWN_DEFAULT');
use Exporter; push our @ISA, 'Exporter';
package Message::DOM::IFLatest::DocumentXDoctype;
our $VERSION = 20060127.1615;
package Message::DOM::XDoctype::ManakaiDOMDocumentXDoctype;
our $VERSION = 20060127.1615;
push our @ISA, 'Message::DOM::Tree::ManakaiDOMDocument', 'Message::DOM::IFLatest::DocumentXDoctype';
use Char::Class::XML 'InXMLNameChar10', 'InXMLNameChar11', 'InXMLNameStartChar11', 'InXML_NameStartChar10';
sub create_document_type_definition ($$) {
my ($self, $nameArg) = @_;
my $r;

{

my 
$doc = $self->{
'node'
};
my $ver = 
($doc->{'hf'}->{XML}
     ? CORE::defined $doc->{'http://www.w3.org/2001/04/infoset#version'}
           ? $doc->{'http://www.w3.org/2001/04/infoset#version'}
           : '1.0'
     : undef)
;


{

if 
(defined $nameArg) {
  

{

if 
(((not defined $ver or $ver eq '1.0') and
         not 
($nameArg =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        (defined $ver and $ver eq '1.1' and
         not 
($nameArg =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $nameArg, 'http://www.w3.org/2001/04/infoset#version' => $ver, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
  


;}

;
  

;
}


;}

;
my $obj
  = 
Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition->_new_object
;


{


$obj->{'od'} = $doc;
if (${$obj->{
'tid'
}} ne ${$doc->{
'tid'
}}) {
  $doc->{
'rc'
}++;
  ${$doc->{
'grc'
}}++;
}


;}

;
$obj->{
'xnm'
} = $nameArg;
$r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference

       ($obj, 
'Message::DOM::IFLatest::DocumentTypeDefinition'
);


;}
$r}
sub create_element_type_definition ($$) {
my ($self, $nameArg) = @_;
my $r;

{

my 
$doc = $self->{
'node'
};
my $ver = 
($doc->{'hf'}->{XML}
     ? CORE::defined $doc->{'http://www.w3.org/2001/04/infoset#version'}
           ? $doc->{'http://www.w3.org/2001/04/infoset#version'}
           : '1.0'
     : undef)
;


{

if 
(defined $nameArg) {
  

{

if 
(((not defined $ver or $ver eq '1.0') and
         not 
($nameArg =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        (defined $ver and $ver eq '1.1' and
         not 
($nameArg =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $nameArg, 'http://www.w3.org/2001/04/infoset#version' => $ver, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
  


;}

;
  

;
}


;}

;
my $obj
  = 
Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition->_new_object
;


{


$obj->{'od'} = $doc;
if (${$obj->{
'tid'
}} ne ${$doc->{
'tid'
}}) {
  $doc->{
'rc'
}++;
  ${$doc->{
'grc'
}}++;
}


;}

;
$obj->{
'xnm'
} = $nameArg;
$r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($obj);


;}
$r}
sub create_attribute_definition ($$) {
my ($self, $nameArg) = @_;
my $r;

{

my 
$doc = $self->{
'node'
};
my $ver = 
($doc->{'hf'}->{XML}
     ? CORE::defined $doc->{'http://www.w3.org/2001/04/infoset#version'}
           ? $doc->{'http://www.w3.org/2001/04/infoset#version'}
           : '1.0'
     : undef)
;


{

if 
(defined $nameArg) {
  

{

if 
(((not defined $ver or $ver eq '1.0') and
         not 
($nameArg =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        (defined $ver and $ver eq '1.1' and
         not 
($nameArg =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $nameArg, 'http://www.w3.org/2001/04/infoset#version' => $ver, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureXMLName+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
  


;}

;
  

;
}


;}

;
my $obj = 
Message::DOM::XDoctype::ManakaiDOMAttributeDefinition->_new_object
;


{


$obj->{'od'} = $doc;
if (${$obj->{
'tid'
}} ne ${$doc->{
'tid'
}}) {
  $doc->{
'rc'
}++;
  ${$doc->{
'grc'
}}++;
}


;}

;
$obj->{
'xnm'
} = $nameArg;
$r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($obj);


;}
$r}
$Message::DOM::ImplFeature{q<Message::DOM::DOMCore::ManakaiDOMImplementation>}->{q<http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#xdoctype>}->{q<3.0>} ||= 1;
$Message::DOM::ImplFeature{q<Message::DOM::DOMCore::ManakaiDOMImplementation>}->{q<http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#xdoctype>}->{q<>} = 1;
$Message::DOM::ClassFeature{q<Message::DOM::XDoctype::ManakaiDOMDocumentXDoctype>} = {'', {'', '1'}, 'core', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#xdoctype', {'', '1', '3.0', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xmlversion', {'', '1', '1.0', '1', '1.1', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::XDoctype::ManakaiDOMDocumentXDoctype>} = 17.1;
$Message::DOM::ManakaiDOMDocument::CompatClass{q<Message::DOM::XDoctype::ManakaiDOMDocumentXDoctype>} = 1;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::XDoctype::ManakaiDOMDocumentXDoctype>} = {'s', ['child']};
package Message::DOM::IFLatest::DocumentTypeDefinition;
our $VERSION = 20060127.1615;
package Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition;
our $VERSION = 20060127.1615;
push our @ISA, 'Message::DOM::DOMXML::ManakaiDOMDocumentType', 'Message::DOM::IFLatest::DocumentTypeDefinition', 'Message::DOM::IFLatest::Node';
use Char::Class::XML 'InXMLNameChar10', 'InXMLNameChar11', 'InXMLNameStartChar11', 'InXML_NameStartChar10';
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 10;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

if 
(defined $self->{
'node'
}
                 ->{
'ln'
}) {
  if (defined $self->{
'node'
}->{
'pfx'
}) {
    $r = $self->{
'node'
}->{
'pfx'
}
       . ':'
       . $self->{
'node'
}->{
'ln'
};
  } else {
    $r = $self->{
'node'
}->{
'ln'
};
  }
} else {
  $r = $self->{
'node'
}->{
'xnm'
};
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub local_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'ln'};
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'local_name';
}
}
sub prefix ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'pfx'};
$r;
} else {my ($self, $given) = @_;

{

if 
(defined $self->{
'node'
}
                 ->{
'ln'
}) {
  

{

if 
($self->{
'node'
}->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/xdt%23NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


;}

;
  my $doc = $self->{
'parent'
};
  my $ver = $doc
              ? (
($doc->{'hf'}->{XML}
     ? CORE::defined $doc->{'http://www.w3.org/2001/04/infoset#version'}
           ? $doc->{'http://www.w3.org/2001/04/infoset#version'}
           : '1.0'
     : undef)
)
              : '1.1';
  

{


{

if 
(defined $given and $given eq '') {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#empty-namespace-prefix', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureNamespacePrefix+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
  }



;}

;
if (defined $given) {
  

{

if 
(($ver eq '1.0' and
         not 
($given =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        ($ver eq '1.1' and
         not 
($given =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $given, 'http://www.w3.org/2001/04/infoset#version' => $ver, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureNamespacePrefix+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    } elsif (index ($given, ':') > -1) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://www.w3.org/2001/04/infoset#name' => $given, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_BAD_NCNAME', 'http://www.w3.org/2001/04/infoset#version' => $ver, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/main%23ensureNamespacePrefix+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
  


;}

;
  

;
}


;}

;
  $self->{
'node'
}->{
'pfx'
} = $given;
}


;}
}
}
sub element_types ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


$r = bless \\($self), 
'Message::DOM::Tree::ManakaiDOMElementTypeDefMap'
;


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'element_types';
}
}
sub get_element_type_definition_node ($$) {
my ($self, $nameArg) = @_;
my $r;

{

my 
$n = $self->{
'node'
}
             ->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#elementTypes'
}
             ->{$nameArg};
if ($n) {
  $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($n);
}


;}
$r}
sub set_element_type_definition_node ($$) {
my ($self, $defNode) = @_;
my $r;

{


{

my 
$__aname = $defNode->
node_name
;
my $__n = $self->{
'node'
}->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#elementTypes'}->{$__aname};
SET: {
  if ($__n and $__n eq $defNode->{
'node'
}) {
    last SET; # no effect
  }
  

{

if 
($self->{
'node'
}->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/xdt%23NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


;}

;
   unless ($defNode->
owner_document eq
           
$self->
owner_document
) {
     
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/xdt%23setDefinitionNode+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'defNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $defNode;

;
  }
  my $__owner;
  

{


$__owner = $defNode->
owner_document_type_definition
;
  


;}

;
  

;
  if ($__owner) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INUSE_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#INUSE_DEFINITION_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/xdt%23setDefinitionNode+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'defNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $defNode;

;
  }
  
  if ($__n) {
    if (defined wantarray) {
      $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($__n);
    }
    CORE::delete $__n->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
};
    $__n->
_orphanate
;
  }
  
  $self->{
'node'
}->
_import_tree

                           ($defNode->{
'node'
});
  $defNode->{
'node'
}
          ->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
}
    = $self->{
'node'
};
  $self->{
'node'
}
       ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#elementTypes'}->{$__aname} = $defNode->{
'node'
};
} # SET


;}

;


;}
$r}
sub _new_object ($;$) {
my ($self, $refNode) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMNode->_new_object
 ($self, $refNode);
$r->{
'nt'
} = 
't'
;
$r->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#elementTypes'
} = {};
$r->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#generalEntities'
} = {};
$r->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#parameterEntities'
} = {};
$r->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#notations'
} = {};
$r->{
'child'
} = [];


;}
$r}
$Message::DOM::ClassFeature{q<Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition>} = {'', {'', '1'}, 'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#xdoctype', {'', '1', '3.0', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xmlversion', {'', '1', '1.0', '1', '1.1', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition>} = 11.1;
$Message::DOM::ManakaiDOMDocumentType::CompatClass{q<Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition>} = 1;
$Message::DOM::ManakaiDOMDocumentType::CompatClass{q<Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition>} = 1;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition>} = {'o', ['parent'], 's', ['http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#notations', 'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#elementTypes', 'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#parameterEntities', 'child', 'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#generalEntities'], 'x', ['od']};
package Message::DOM::IFLatest::ElementTypeDefinition;
our $VERSION = 20060127.1615;
package Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition;
our $VERSION = 20060127.1615;
push our @ISA, 'Message::DOM::Tree::ManakaiDOMNode', 'Message::DOM::IFLatest::ElementTypeDefinition', 'Message::DOM::IFLatest::Node';
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 81001;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'xnm'};
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_value ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = undef;


$r;
} else {my ($self, $given) = @_;


}
}
sub text_content ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = undef;


$r;
} else {my ($self, $given) = @_;


}
}
sub attribute_definitions ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


$r = bless \\($self), 
'Message::DOM::Tree::ManakaiDOMAttrDefMap'
;


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'attribute_definitions';
}
}
sub child_nodes ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMEmptyNodeList
->new;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'child_nodes';
}
}
sub get_attribute_definition_node ($$) {
my ($self, $nameArg) = @_;
my $r;

{

my 
$n = $self->{
'node'
}
             ->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#attributeDefinitions'
}
             ->{$nameArg};
if ($n) {
  $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($n);
}


;}
$r}
sub set_attribute_definition_node ($$) {
my ($self, $attrDef) = @_;
my $r;

{


{

my 
$__aname = $attrDef->
node_name
;
my $__n = $self->{
'node'
}->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#attributeDefinitions'}->{$__aname};
SET: {
  if ($__n and $__n eq $attrDef->{
'node'
}) {
    last SET; # no effect
  }
  

{

if 
($self->{
'node'
}->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/xdt%23NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


;}

;
   unless ($attrDef->
owner_document eq
           
$self->
owner_document
) {
     
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/xdt%23setDefinitionNodeAttr+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'attrDef', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $attrDef;

;
  }
  my $__owner;
  

;
  

{


$__owner = $attrDef->
owner_element_type_definition
;
  


;}

;
  if ($__owner) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INUSE_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#INUSE_DEFINITION_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/xdt%23setDefinitionNodeAttr+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'attrDef', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $attrDef;

;
  }
  
  if ($__n) {
    if (defined wantarray) {
      $r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference
 ($__n);
    }
    CORE::delete $__n->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
};
    $__n->
_orphanate
;
  }
  
  $self->{
'node'
}->
_import_tree

                           ($attrDef->{
'node'
});
  $attrDef->{
'node'
}
          ->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
}
    = $self->{
'node'
};
  $self->{
'node'
}
       ->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#attributeDefinitions'}->{$__aname} = $attrDef->{
'node'
};
} # SET


;}

;


;}
$r}
sub owner_document_type_definition ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMNode->_get_node_reference

       ($self->{
'node'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
})
  if $self->{
'node'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
};


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'owner_document_type_definition';
}
}
sub _new_object ($;$) {
my ($self, $refNode) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMNode->_new_object
 ($self, $refNode);
$r->{
'nt'
} = 
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ElementTypeDefinitionNodeType'
;
$r->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#attributeDefinitions'
} = {};


;}
$r}
$Message::DOM::ClassFeature{q<Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition>} = {'', {'', '1'}, 'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#xdoctype', {'', '1', '3.0', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xmlversion', {'', '1', '1.0', '1', '1.1', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition>} = 11.1;
$Message::DOM::ManakaiDOMElementTypeDefinition::CompatClass{q<Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition>} = 1;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition>} = {'o', ['http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'], 's', ['http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#attributeDefinitions'], 'x', ['od']};
package Message::DOM::IFLatest::AttributeDefinition;
our $VERSION = 20060127.1615;
sub NO_TYPE_ATTR () {
0}
sub CDATA_ATTR () {
1}
sub ID_ATTR () {
2}
sub IDREF_ATTR () {
3}
sub IDREFS_ATTR () {
4}
sub ENTITY_ATTR () {
5}
sub ENTITIES_ATTR () {
6}
sub NMTOKEN_ATTR () {
7}
sub NMTOKENS_ATTR () {
8}
sub NOTATION_ATTR () {
9}
sub ENUMERATION_ATTR () {
10}
sub UNKNOWN_ATTR () {
11}
sub UNKNOWN_DEFAULT () {
0}
sub FIXED_DEFAULT () {
1}
sub REQUIRED_DEFAULT () {
2}
sub IMPLIED_DEFAULT () {
3}
sub EXPLICIT_DEFAULT () {
4}
package Message::DOM::XDoctype::ManakaiDOMAttributeDefinition;
our $VERSION = 20060127.1615;
push our @ISA, 'Message::DOM::Tree::ManakaiDOMNode', 'Message::DOM::IFLatest::AttributeDefinition', 'Message::DOM::IFLatest::Node';
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 81002;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';
$r = $self->{'node'}->{'xnm'};
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_value ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$dt = $self->
default_type
;
  if ($dt == 
4 or
      
$dt == 
1
) {
    for my $child (@{$self->
child_nodes
}) {
      if ($child->
node_type
 ==
          
5
) {
        my $v = $child->
text_content
;
        $v =~ s/[\x09\x0A\x0D]/ /;
        $r .= $v;
      } else {
        $r .= $child->
text_content
;
      }
    } # childNodes
    my $vt = $self->
declared_type
;
    unless ($vt == 
0 or
            
$vt == 
11 or
            
$vt == 
1
) {
      $r =~ s/\A\x20+//;
      $r =~ s/\x20+\z//;
      $r =~ s/\x20+/ /g;
    }
  } else {
    $r = 
undef
;
  }



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$dt = $self->
default_type
;
  if ($dt == 
4 or
      
$dt == 
1
) {
    

{

local $Error::Depth = $Error::Depth - 1;

{



      

{

if 
($self->{
'node'
}->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/xdt%23NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


;}

;
    


;}


;}

;
    my @children = @{$self->
child_nodes
};
    for my $child (@children) {
      $self->
remove_child
 ($child);
    } # childNodes
    if (defined $given and length $given) {
      $self->
append_child

        ($self->
owner_document

              ->
create_text_node

                  ($given));
    }
  }



;}


;}

;


;}
}
}
sub text_content ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  for 
my $child (@{$self->
child_nodes
}) {
    $r .= $child->
text_content
;
  } # childNodes



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$dt = $self->
default_type
;
  if ($dt == 
4 or
      
$dt == 
1
) {
    

{

local $Error::Depth = $Error::Depth - 1;

{



      

{

if 
($self->{
'node'
}->{
'ro'
}) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2004/dom/xdt%23NodeReadOnlyError+http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom%23ManakaiDOMLatest';

;
}


;}

;
    


;}


;}

;
    my @children = @{$self->
child_nodes
};
    for my $child (@children) {
      $self->
remove_child
 ($child);
    } # childNodes
    if (defined $given and length $given) {
      $self->
append_child

        ($self->
owner_document

              ->
create_text_node

                  ($given));
    }
  }



;}


;}

;


;}
}
}
sub owner_element_type_definition ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;
$r = $self->{'node'}->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'};
if (defined $r) {$r = Message::DOM::Tree::ManakaiDOMNode->_get_node_reference ($r);
}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'owner_element_type_definition';
}
}
sub declared_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = $self->{'node'}->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#declaredType'};
$r;
} else {my ($self, $given) = @_;
$self->{'node'}->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#declaredType'} = $given;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'declared_type';
}
}
}
sub default_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = $self->{'node'}->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#defaultType'};
$r;
} else {my ($self, $given) = @_;
$self->{'node'}->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#defaultType'} = $given;
if ($self->{'node'}->{'ro'}) {report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'default_type';
}
}
}
sub allowed_tokens ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


$self->{'node'}->{
'rc'
}++;
${$self->{'node'}->{
'grc'
}}++;
$r = bless {
  
'node'
 => $self->{'node'},
}, 'Message::DOM::DOMCore::ManakaiDOMStringList';


;}

;
$r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#key'
} = 
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#allowedTokens'
;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'allowed_tokens';
}
}
sub _new_object ($;$) {
my ($self, $refNode) = @_;
my $r;

{


$r = 
Message::DOM::Tree::ManakaiDOMNode->_new_object
 ($self, $refNode);
$r->{
'nt'
} = 
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#AttributeDefinitionNodeType'
;
$r->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#declaredType'
}
  = 
0
;
$r->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#allowedTokens'
} = [];
$r->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#defaultType'
}
  = 
0
;
$r->{
'child'
} = [];


;}
$r}
$Message::DOM::ClassFeature{q<Message::DOM::XDoctype::ManakaiDOMAttributeDefinition>} = {'', {'', '1'}, 'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#xdoctype', {'', '1', '3.0', '1'}, 'xml', {'', '1', '1.0', '1', '2.0', '1', '3.0', '1'}, 'xmlversion', {'', '1', '1.0', '1', '1.1', '1'}};
$Message::DOM::ClassPoint{q<Message::DOM::XDoctype::ManakaiDOMAttributeDefinition>} = 11.1;
$Message::DOM::ManakaiDOMAttr::CompatClass{q<Message::DOM::XDoctype::ManakaiDOMAttributeDefinition>} = 1;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::DOM::XDoctype::ManakaiDOMAttributeDefinition>} = {'o', ['http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'], 's', ['child'], 'x', ['od']};
for ($Message::DOM::IFLatest::Node::){}
## License: <http://suika.fam.cx/~wakaba/archive/2004/8/18/license#Perl+MPL>
1;
