#!/usr/bin/perl 
## This file is automatically generated
## 	at 2006-12-31T02:38:39+00:00,
## 	from file "XDoctype.dis",
## 	module <http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.XDoctype>,
## 	for <http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#all>.
## Don't edit by hand!
use strict;
require Message::DOM::DOMCore;
require Message::DOM::DOMString;
require Message::DOM::Document;
require Message::DOM::TreeCore;
require Message::DOM::XML;
require Message::Util::Error::DOMException;
package Message::DOM::XDoctype;
our $VERSION = 20061231.0238;
sub CDATA_ATTR ();
sub ENTITIES_ATTR ();
sub ENTITY_ATTR ();
sub ENUMERATION_ATTR ();
sub EXPLICIT_DEFAULT ();
sub FIXED_DEFAULT ();
sub IDREFS_ATTR ();
sub IDREF_ATTR ();
sub ID_ATTR ();
sub IMPLIED_DEFAULT ();
sub NMTOKENS_ATTR ();
sub NMTOKEN_ATTR ();
sub NOTATION_ATTR ();
sub NO_TYPE_ATTR ();
sub REQUIRED_DEFAULT ();
sub UNKNOWN_ATTR ();
sub UNKNOWN_DEFAULT ();
sub AUTOLOAD {


        my $al = our $AUTOLOAD;
        $al =~ s/.+:://;
        if ({'CDATA_ATTR',
'Message::DOM::IF::AttributeDefinition::CDATA_ATTR',
'ENTITIES_ATTR',
'Message::DOM::IF::AttributeDefinition::ENTITIES_ATTR',
'ENTITY_ATTR',
'Message::DOM::IF::AttributeDefinition::ENTITY_ATTR',
'ENUMERATION_ATTR',
'Message::DOM::IF::AttributeDefinition::ENUMERATION_ATTR',
'EXPLICIT_DEFAULT',
'Message::DOM::IF::AttributeDefinition::EXPLICIT_DEFAULT',
'FIXED_DEFAULT',
'Message::DOM::IF::AttributeDefinition::FIXED_DEFAULT',
'IDREFS_ATTR',
'Message::DOM::IF::AttributeDefinition::IDREFS_ATTR',
'IDREF_ATTR',
'Message::DOM::IF::AttributeDefinition::IDREF_ATTR',
'ID_ATTR',
'Message::DOM::IF::AttributeDefinition::ID_ATTR',
'IMPLIED_DEFAULT',
'Message::DOM::IF::AttributeDefinition::IMPLIED_DEFAULT',
'NMTOKENS_ATTR',
'Message::DOM::IF::AttributeDefinition::NMTOKENS_ATTR',
'NMTOKEN_ATTR',
'Message::DOM::IF::AttributeDefinition::NMTOKEN_ATTR',
'NOTATION_ATTR',
'Message::DOM::IF::AttributeDefinition::NOTATION_ATTR',
'NO_TYPE_ATTR',
'Message::DOM::IF::AttributeDefinition::NO_TYPE_ATTR',
'REQUIRED_DEFAULT',
'Message::DOM::IF::AttributeDefinition::REQUIRED_DEFAULT',
'UNKNOWN_ATTR',
'Message::DOM::IF::AttributeDefinition::UNKNOWN_ATTR',
'UNKNOWN_DEFAULT',
'Message::DOM::IF::AttributeDefinition::UNKNOWN_DEFAULT'}->{$al}) {
          no strict 'refs';
          *{$AUTOLOAD} = \&{{'CDATA_ATTR',
'Message::DOM::IF::AttributeDefinition::CDATA_ATTR',
'ENTITIES_ATTR',
'Message::DOM::IF::AttributeDefinition::ENTITIES_ATTR',
'ENTITY_ATTR',
'Message::DOM::IF::AttributeDefinition::ENTITY_ATTR',
'ENUMERATION_ATTR',
'Message::DOM::IF::AttributeDefinition::ENUMERATION_ATTR',
'EXPLICIT_DEFAULT',
'Message::DOM::IF::AttributeDefinition::EXPLICIT_DEFAULT',
'FIXED_DEFAULT',
'Message::DOM::IF::AttributeDefinition::FIXED_DEFAULT',
'IDREFS_ATTR',
'Message::DOM::IF::AttributeDefinition::IDREFS_ATTR',
'IDREF_ATTR',
'Message::DOM::IF::AttributeDefinition::IDREF_ATTR',
'ID_ATTR',
'Message::DOM::IF::AttributeDefinition::ID_ATTR',
'IMPLIED_DEFAULT',
'Message::DOM::IF::AttributeDefinition::IMPLIED_DEFAULT',
'NMTOKENS_ATTR',
'Message::DOM::IF::AttributeDefinition::NMTOKENS_ATTR',
'NMTOKEN_ATTR',
'Message::DOM::IF::AttributeDefinition::NMTOKEN_ATTR',
'NOTATION_ATTR',
'Message::DOM::IF::AttributeDefinition::NOTATION_ATTR',
'NO_TYPE_ATTR',
'Message::DOM::IF::AttributeDefinition::NO_TYPE_ATTR',
'REQUIRED_DEFAULT',
'Message::DOM::IF::AttributeDefinition::REQUIRED_DEFAULT',
'UNKNOWN_ATTR',
'Message::DOM::IF::AttributeDefinition::UNKNOWN_ATTR',
'UNKNOWN_DEFAULT',
'Message::DOM::IF::AttributeDefinition::UNKNOWN_DEFAULT'}->{$al}};
          goto &{$AUTOLOAD};
        } else {
          require Carp;
          Carp::croak (qq<Can't locate method "$AUTOLOAD">);
        }
      
}
sub import {


        my $self = shift;
        if (@_) {
          local $Exporter::ExportLevel = $Exporter::ExportLevel + 1;
          $self->SUPER::import (@_);
          for (grep {not /\W/} @_) {
            eval qq{$_};
          }
        }
      
}
our %EXPORT_TAG = ('DeclaredValueType',
['CDATA_ATTR',
'ENTITIES_ATTR',
'ENTITY_ATTR',
'ENUMERATION_ATTR',
'IDREFS_ATTR',
'IDREF_ATTR',
'ID_ATTR',
'NMTOKENS_ATTR',
'NMTOKEN_ATTR',
'NOTATION_ATTR',
'NO_TYPE_ATTR',
'UNKNOWN_ATTR'],
'DefaultValueType',
['EXPLICIT_DEFAULT',
'FIXED_DEFAULT',
'IMPLIED_DEFAULT',
'REQUIRED_DEFAULT',
'UNKNOWN_DEFAULT']);
our @EXPORT_OK = ('CDATA_ATTR',
'ENTITIES_ATTR',
'ENTITY_ATTR',
'ENUMERATION_ATTR',
'IDREFS_ATTR',
'IDREF_ATTR',
'ID_ATTR',
'NMTOKENS_ATTR',
'NMTOKEN_ATTR',
'NOTATION_ATTR',
'NO_TYPE_ATTR',
'UNKNOWN_ATTR',
'EXPLICIT_DEFAULT',
'FIXED_DEFAULT',
'IMPLIED_DEFAULT',
'REQUIRED_DEFAULT',
'UNKNOWN_DEFAULT');
use Exporter; push our @ISA, 'Exporter';
package Message::DOM::XDoctype::ManakaiDOMImplementationXDoctype;
our $VERSION = 20061231.0238;
push @Message::DOM::DOMCore::ManakaiDOMImplementation::ISA, q<Message::DOM::XDoctype::ManakaiDOMImplementationXDoctype> unless Message::DOM::DOMCore::ManakaiDOMImplementation->isa (q<Message::DOM::XDoctype::ManakaiDOMImplementationXDoctype>);
use Char::Class::XML 'InXMLNCNameChar10',
'InXMLNameChar10',
'InXML_NCNameStartChar10',
'InXML_NameStartChar10';
sub create_document_type ($$;$$) {
my ($self, $qualifiedName, $publicId, $systemId) = @_;
my $r;

{


## Validate |qualifiedName| - don't use |InputProcessor|
## since it refers |strictErrorChecking| attribute.
unless (
($qualifiedName =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'create_document_type', 'http://www.w3.org/2001/04/infoset#name' => $qualifiedName, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMImplementationXDoctype', 'http://www.w3.org/2001/04/infoset#version' => '1.0', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'qualifiedName';

;
}
unless (
($qualifiedName =~ /\A\p{InXML_NCNameStartChar10}\p{InXMLNCNameChar10}*(?::\p{InXML_NCNameStartChar10}\p{InXMLNCNameChar10}*)?\z/)
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'create_document_type', 'http://www.w3.org/2001/04/infoset#name' => $qualifiedName, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_NS_MALFORMED_QNAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMImplementationXDoctype', 'http://www.w3.org/2001/04/infoset#version' => '1.0', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'qualifiedName';

;
}

$r = bless \{
  
'impl'
 => $self,
  
'child'
 => [],
  
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#elementTypes'
 => {},
  
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#generalEntities'
 => {},
  
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#notations'
 => {},
}, 
'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition'
;


{

if 
(defined $qualifiedName) {
  if (ref $qualifiedName eq 'SCALAR') {
    $$r->{'xname'} = $qualifiedName;
  } elsif (defined $Message::Util::ManakaiStringRef::Value{$qualifiedName}) {
    $$r->{'xname'} = $Message::Util::ManakaiStringRef::Value{$qualifiedName};
  } else {
    require Scalar::Util;
    $$r->{'xname'} = $Message::Util::ManakaiStringRef::Value{$qualifiedName} = \($qualifiedName);
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{$qualifiedName});
  }
} else {
  CORE::delete $$r->{'xname'};
}


}

;

if (defined $publicId){ 
  $r->
public_id
 ($publicId);
}
if (defined $systemId){ 
  $r->
system_id
 ($systemId);
}
$r->
manakai_set_read_only
 (
1
, 
1
);


}
$r}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XDoctype::ManakaiDOMImplementationXDoctype>}->{has_feature} = {};
$Message::DOM::ClassPoint{q<Message::DOM::XDoctype::ManakaiDOMImplementationXDoctype>} = 0;
package Message::DOM::IF::DocumentXDoctype;
our $VERSION = 20061231.0238;
package Message::DOM::XDoctype::ManakaiDOMDocumentXDoctype;
our $VERSION = 20061231.0238;
push our @ISA, 'Message::DOM::IF::Document',
'Message::DOM::IF::Document',
'Message::DOM::IF::DocumentXDoctype',
'Message::DOM::IF::Node';
push @Message::DOM::Document::ManakaiDOMDocument::ISA, q<Message::DOM::XDoctype::ManakaiDOMDocumentXDoctype> unless Message::DOM::Document::ManakaiDOMDocument->isa (q<Message::DOM::XDoctype::ManakaiDOMDocumentXDoctype>);
use Char::Class::XML 'InXMLNameChar10',
'InXMLNameChar11',
'InXMLNameStartChar11',
'InXML_NameStartChar10';
sub create_document_type_definition ($$) {
my ($self, $name) = @_;
my $r;

{

if 
($self->
strict_error_checking
) {
  my $version = $self->
xml_version
;
  

{

if 
(defined $name) {
    if (((not defined $version or $version eq '1.0') and
         not 
($name =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        (defined $version and $version eq '1.1' and
         not 
($name =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $name, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureXMLName', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
}


}

;
}

$r = bless \{
  
'od'
 => $self,
  
'child'
 => [],
  
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#elementTypes'
 => {},
  
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#generalEntities'
 => {},
  
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#notations'
 => {},
  
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#hasLtDeclaration'
 => 1,
  
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#hasGtDeclaration'
 => 1,
  
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#hasAmpDeclaration'
 => 1,
  
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#hasAposDeclaration'
 => 1,
  
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#hasQuotDeclaration'
 => 1,
}, 
'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition'
;
Scalar::Util::weaken ($$r->{
'od'
});


{

if 
(defined $name) {
  if (ref $name eq 'SCALAR') {
    $$r->{'xname'} = $name;
  } elsif (defined $Message::Util::ManakaiStringRef::Value{$name}) {
    $$r->{'xname'} = $Message::Util::ManakaiStringRef::Value{$name};
  } else {
    require Scalar::Util;
    $$r->{'xname'} = $Message::Util::ManakaiStringRef::Value{$name} = \($name);
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{$name});
  }
} else {
  CORE::delete $$r->{'xname'};
}


}

;


}
$r}
sub create_element_type_definition ($$) {
my ($self, $name) = @_;
my $r;

{

if 
($self->
strict_error_checking
) {
  my $version = $self->
xml_version
;
  

{

if 
(defined $name) {
    if (((not defined $version or $version eq '1.0') and
         not 
($name =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        (defined $version and $version eq '1.1' and
         not 
($name =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $name, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureXMLName', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
}


}

;
}


$r = bless \{
  
'od'
 => $self,
  
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#attributeDefinitions'
 => {},
}, 
'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition'
;
Scalar::Util::weaken ($$r->{
'od'
});


{

if 
(defined $name) {
  if (ref $name eq 'SCALAR') {
    $$r->{'xname'} = $name;
  } elsif (defined $Message::Util::ManakaiStringRef::Value{$name}) {
    $$r->{'xname'} = $Message::Util::ManakaiStringRef::Value{$name};
  } else {
    require Scalar::Util;
    $$r->{'xname'} = $Message::Util::ManakaiStringRef::Value{$name} = \($name);
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{$name});
  }
} else {
  CORE::delete $$r->{'xname'};
}


}

;


}
$r}
sub create_attribute_definition ($$) {
my ($self, $name) = @_;
my $r;

{

if 
($self->
strict_error_checking
) {
  my $version = $self->
xml_version
;
  

{

if 
(defined $name) {
    if (((not defined $version or $version eq '1.0') and
         not 
($name =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        (defined $version and $version eq '1.1' and
         not 
($name =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $name, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureXMLName', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
}


}

;
}

$r = bless \{
  
'od'
 => $self,
  
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#declaredType'
 => 
0
,
  
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#defaultType'
 => 
0
,
  
'child'
 => [],
  
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#allowedTokens'
 => [],
}, 
'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition'
;
Scalar::Util::weaken ($$r->{
'od'
});


{

if 
(defined $name) {
  if (ref $name eq 'SCALAR') {
    $$r->{'xname'} = $name;
  } elsif (defined $Message::Util::ManakaiStringRef::Value{$name}) {
    $$r->{'xname'} = $Message::Util::ManakaiStringRef::Value{$name};
  } else {
    require Scalar::Util;
    $$r->{'xname'} = $Message::Util::ManakaiStringRef::Value{$name} = \($name);
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{$name});
  }
} else {
  CORE::delete $$r->{'xname'};
}


}

;



{

local $Error::Depth = $Error::Depth + 1;

{


  if 
($name eq 'xml:id' and
      $self->
dom_config

           ->
get_parameter
 (
'http://suika.fam.cx/www/2006/dom-config/xml-id'
)) {
    $r->
declared_type

          (
2
);
  }



}


;}

;


}
$r}
sub create_general_entity ($$) {
my ($self, $name) = @_;
my $r;

{

require 
Message::DOM::XML;

if ($self->
strict_error_checking
) {
  my $version = $self->
xml_version
;
  

{

if 
(defined $name) {
    if (((not defined $version or $version eq '1.0') and
         not 
($name =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        (defined $version and $version eq '1.1' and
         not 
($name =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $name, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureXMLName', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
}


}

;
}

$r = bless \{
  
'od'
 => $self,
  
'child'
 => [],
}, 
'Message::DOM::XML::ManakaiDOMEntity'
;
Scalar::Util::weaken ($$r->{
'od'
});


{

if 
(defined $name) {
  if (ref $name eq 'SCALAR') {
    $$r->{'xname'} = $name;
  } elsif (defined $Message::Util::ManakaiStringRef::Value{$name}) {
    $$r->{'xname'} = $Message::Util::ManakaiStringRef::Value{$name};
  } else {
    require Scalar::Util;
    $$r->{'xname'} = $Message::Util::ManakaiStringRef::Value{$name} = \($name);
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{$name});
  }
} else {
  CORE::delete $$r->{'xname'};
}


}

;


}
$r}
sub create_notation ($$) {
my ($self, $name) = @_;
my $r;

{

require 
Message::DOM::XML;

if ($self->
strict_error_checking
) {
  my $version = $self->
xml_version
;
  

{

if 
(defined $name) {
    if (((not defined $version or $version eq '1.0') and
         not 
($name =~ /\A\p{InXML_NameStartChar10}\p{InXMLNameChar10}*\z/)
) or
        (defined $version and $version eq '1.1' and
         not 
($name =~ /\A\p{InXMLNameStartChar11}\p{InXMLNameChar11}*\z/)
)) {
      
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INVALID_CHARACTER_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_BAD_NAME', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#name' => $name, 'http://www.w3.org/2001/04/infoset#version' => $version, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ensureXMLName', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => '$INPUT_PARAM_NAME';

;
    }
}


}

;
}

$r = bless \{
  
'od'
 => $self,
}, 
'Message::DOM::XML::ManakaiDOMNotation'
;
Scalar::Util::weaken ($$r->{
'od'
});


{

if 
(defined $name) {
  if (ref $name eq 'SCALAR') {
    $$r->{'xname'} = $name;
  } elsif (defined $Message::Util::ManakaiStringRef::Value{$name}) {
    $$r->{'xname'} = $Message::Util::ManakaiStringRef::Value{$name};
  } else {
    require Scalar::Util;
    $$r->{'xname'} = $Message::Util::ManakaiStringRef::Value{$name} = \($name);
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{$name});
  }
} else {
  CORE::delete $$r->{'xname'};
}


}

;


}
$r}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XDoctype::ManakaiDOMDocumentXDoctype>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/www/2006/feature/xdoctype',
{'',
'1',
'3.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::DOM::XDoctype::ManakaiDOMDocumentXDoctype>} = 17.1;
package Message::DOM::IF::DocumentTypeDefinition;
our $VERSION = 20061231.0238;
package Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition;
our $VERSION = 20061231.0238;
push our @ISA, 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDeclaration',
'Message::DOM::TreeCore::ManakaiDOMNode',
'Message::DOM::IF::DocumentType',
'Message::DOM::IF::DocumentTypeDefinition',
'Message::DOM::IF::Node';
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = ${$$self->{
'xname'
}};


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 10;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub text_content ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = 
undef
;


}
$r;
} else {my ($self, $given) = @_;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#setting-node-value-no-effect', 'rdata' => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::TreeCore::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_value';

;


}
}
}
sub base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
declaration_base_uri
;



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'base_uri';
}
}
sub append_child ($$) {
my ($self, $newChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
unless ($self_od) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;
}
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    7 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    7 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      $$newChild->{
'child'
} = [];
    } else {
      my $v = $$nc_parent->{
'child'
};
      RP: for my $i (0..$#$v) {
        if ($v->[$i] eq $new_child[0]) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    $$nc->{
'parent'
} = $self;
    Scalar::Util::weaken ($$nc->{
'parent'
});
  }

  my $children = $$self->{
'child'
};

  

{


## -- Adds to children list
    push @$children, @new_child;
    $r = $newChild;
  


}

;

  

;

  

;



}


;}

;


}

;


}
$r}
sub insert_before ($$;$) {
my ($self, $newChild, $refChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
unless ($self_od) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_before', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;
}
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    7 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    7 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

{


# tc:ForAppendChild & tc:ForReplaceChild
    if (defined $refChild) {
      if ($refChild eq $newChild) {
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#insert-before-itself', 'rdata' => $refChild, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1';


}


;}

;
        


}

;
        

;
      }

      my $cns = $self->
child_nodes
;
      my $cnsl = @$cns;
      C: {
        $index = 0;
        for my $i (0..($cnsl-1)) {
          my $cn = $cns->[$i];
          if ($cn eq $refChild) {
            $index += $i;
            last C;
          } elsif ($cn eq $newChild) {
            $index = -1; # offset
          }
        }
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'refChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $refChild;


}


;}

;
        


}

;
        

;
      } # C
    } else { # |oldChild| is not defined
      

;
    }
  


}

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      $$newChild->{
'child'
} = [];
    } else {
      my $v = $$nc_parent->{
'child'
};
      RP: for my $i (0..$#$v) {
        if ($v->[$i] eq $new_child[0]) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    $$nc->{
'parent'
} = $self;
    Scalar::Util::weaken ($$nc->{
'parent'
});
  }

  my $children = $$self->{
'child'
};

  

;

  

{


## -- Adds to children list
    if ($index == -1) {
      push @$children, @new_child;
    } else {
      splice @$children, $index, 0, @new_child;
    }
    $r = $newChild;
  


}

;

  

;



}


;}

;


}

;


}
$r}
sub replace_child ($$$) {
my ($self, $newChild, $oldChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
unless ($self_od) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;
}
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    7 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    7 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

{


# tc:ForAppendChild & tc:ForReplaceChild
    if (defined $oldChild) {
      if ($oldChild eq $newChild) {
        

;
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#replace-by-itself', 'rdata' => $oldChild, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1';


}


;}

;
        


}

;
      }

      my $cns = $self->
child_nodes
;
      my $cnsl = @$cns;
      C: {
        $index = 0;
        for my $i (0..($cnsl-1)) {
          my $cn = $cns->[$i];
          if ($cn eq $oldChild) {
            $index += $i;
            last C;
          } elsif ($cn eq $newChild) {
            $index = -1; # offset
          }
        }
        

;
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $oldChild;


}


;}

;
        


}

;
      } # C
    } else { # |oldChild| is not defined
      

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $oldChild;


}


;}

;
      


}

;
    }
  


}

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      $$newChild->{
'child'
} = [];
    } else {
      my $v = $$nc_parent->{
'child'
};
      RP: for my $i (0..$#$v) {
        if ($v->[$i] eq $new_child[0]) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    $$nc->{
'parent'
} = $self;
    Scalar::Util::weaken ($$nc->{
'parent'
});
  }

  my $children = $$self->{
'child'
};

  

;

  

;

  

{


## -- Replaces the node
    splice @$children, $index, 1, @new_child;
    CORE::delete $$oldChild->{
'parent'
};
    $r = $oldChild;
  


}

;



}


;}

;


}

;


}
$r}
sub get_feature ($$$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


}

{


$version = '' unless defined $version;


}
my $r;

{


$feature =~ s/^\+//;


{

if 
($Message::Util::AutoLoad::Registry::Feature->{$feature}->{$version}) {
  $r = $self;
}


}

;
unless (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->SUPER::get_feature ($feature, $version);
  


}


;}

;
}


}
$r}
sub remove_child ($$) {
my ($self, $oldChild) = @_;
my $r;

{

my 
$od = $self->
owner_document
;
if ((not defined $od or
     $od->
strict_error_checking
) and
    $self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'remove_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition';

;
}


{

F: 
{
  my $i = -1;
  my $v = $$self->{
'child'
};
  for my $cld (@$v) {
    $i++;
    if ($cld eq $oldChild) {
      splice @$v, $i, 1, ();
      CORE::delete $$oldChild->{
'parent'
};
      $r = $oldChild;
      last F;
    }
  }
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/removeChildImpl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $oldChild;

;
} # F


}

;


}
$r}
sub element_types ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = bless \\($self), 
'Message::DOM::TreeCore::ManakaiDOMElementTypeDefMap'
;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'element_types';
}
}
sub general_entities ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = bless \\($self), 
'Message::DOM::TreeCore::ManakaiDOMEntityMap'
;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'general_entities';
}
}
sub entities ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = bless \\($self), 
'Message::DOM::TreeCore::ManakaiDOMEntityMap'
;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'entities';
}
}
sub notations ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = bless \\($self), 
'Message::DOM::TreeCore::ManakaiDOMNotationMap'
;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'notations';
}
}
sub get_element_type_definition_node ($$) {
my ($self, $nameArg) = @_;
my $r;

{


$r = $$self->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#elementTypes'
}->{$nameArg};


}
$r}
sub set_element_type_definition_node ($$) {
my ($self, $defNode) = @_;
my $r;

{


{

my 
$__aname = $defNode->
node_name
;
my $__list = ${$self}->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#elementTypes'};
$r = $__list->{$__aname};
SET: {
  if (defined $r and $r eq $defNode) {
    undef $r;
    last SET; # no effect
  }
  

{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;
  unless ($defNode->
owner_document
              eq 
$self->
owner_document
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#setDefinitionNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'defNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $defNode;

;
  }
  my $__owner;
  

{


$__owner = $defNode->
owner_document_type_definition
;
  


}

;
  

;
  if ($__owner) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INUSE_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#INUSE_DEFINITION_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#setDefinitionNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'defNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $defNode;

;
  }
      
  if (defined $r) {
    CORE::delete $$r->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
};
  }

  $__list->{$__aname} = $defNode;
  $$defNode->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
} = $self;
  Scalar::Util::weaken ($$defNode->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
});
} # SET


}

;


}
$r}
sub get_general_entity_node ($$) {
my ($self, $nameArg) = @_;
my $r;

{


$r = $$self->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#generalEntities'
}->{$nameArg};


}
$r}
sub set_general_entity_node ($$) {
my ($self, $defNode) = @_;
my $r;

{


{

my 
$__aname = $defNode->
node_name
;
my $__list = ${$self}->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#generalEntities'};
$r = $__list->{$__aname};
SET: {
  if (defined $r and $r eq $defNode) {
    undef $r;
    last SET; # no effect
  }
  

{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;
  unless ($defNode->
owner_document
              eq 
$self->
owner_document
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#setDefinitionNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'defNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $defNode;

;
  }
  my $__owner;
  

{


$__owner = $defNode->
owner_document_type_definition
;
  


}

;
  

;
  if ($__owner) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INUSE_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#INUSE_DEFINITION_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#setDefinitionNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'defNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $defNode;

;
  }
      
  if (defined $r) {
    CORE::delete $$r->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
};
  }

  $__list->{$__aname} = $defNode;
  $$defNode->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
} = $self;
  Scalar::Util::weaken ($$defNode->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
});
} # SET


}

;


}
$r}
sub get_notation_node ($$) {
my ($self, $nameArg) = @_;
my $r;

{


$r = $$self->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#notations'
}->{$nameArg};


}
$r}
sub set_notation_node ($$) {
my ($self, $defNode) = @_;
my $r;

{


{

my 
$__aname = $defNode->
node_name
;
my $__list = ${$self}->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#notations'};
$r = $__list->{$__aname};
SET: {
  if (defined $r and $r eq $defNode) {
    undef $r;
    last SET; # no effect
  }
  

{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;
  unless ($defNode->
owner_document
              eq 
$self->
owner_document
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#setDefinitionNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'defNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $defNode;

;
  }
  my $__owner;
  

{


$__owner = $defNode->
owner_document_type_definition
;
  


}

;
  

;
  if ($__owner) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INUSE_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#INUSE_DEFINITION_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#setDefinitionNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'defNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $defNode;

;
  }
      
  if (defined $r) {
    CORE::delete $$r->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
};
  }

  $__list->{$__aname} = $defNode;
  $$defNode->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
} = $self;
  Scalar::Util::weaken ($$defNode->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
});
} # SET


}

;


}
$r}
sub implementation ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = $$self->{
'impl'
};
unless ($r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
owner_document

              ->
implementation
;
  


}


;}

;
}


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'implementation';
}
}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/www/2006/feature/xdoctype',
{'',
'1',
'3.0',
'1'},
'http://suika.fam.cx/www/2006/feature/xdoctypedeclaration',
{'',
'1',
'3.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::DOM::XDoctype::ManakaiDOMDocumentTypeDefinition>} = 20.1;
package Message::DOM::IF::DocumentTypeDeclaration;
our $VERSION = 20061231.0238;
package Message::DOM::XDoctype::ManakaiDOMDocumentTypeDeclaration;
our $VERSION = 20061231.0238;
push our @ISA, 'Message::DOM::IF::DocumentTypeDeclaration';
sub system_id ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = $$self->{
'sysid'
};


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;
$$self->{
'sysid'
} = $given;


}
}
}
sub public_id ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = $$self->{
'pubid'
};


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;
$$self->{
'pubid'
} = $given;


}
}
}
sub name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = ${$$self->{
'xname'
}};


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDeclaration', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'name';
}
}
sub declaration_base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$od = $self->
owner_document
;
  if ($od) {
    $r = $od->
base_uri
;
  } else {
    $r = 
undef
;
  }



}


;}

;


}
$r;
} else {my ($self, $given) = @_;


}
}
sub manakai_declaration_base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
declaration_base_uri
;



}


;}

;


}
$r;
} else {my ($self, $given) = @_;


}
}
sub internal_subset ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = 
undef
;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMDocumentTypeDeclaration', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'internal_subset';
}
}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XDoctype::ManakaiDOMDocumentTypeDeclaration>}->{has_feature} = {'http://suika.fam.cx/www/2006/feature/xdoctypedeclaration',
{'',
'1',
'3.0',
'1'}};
$Message::DOM::ClassPoint{q<Message::DOM::XDoctype::ManakaiDOMDocumentTypeDeclaration>} = 3;
package Message::DOM::IF::ElementTypeDefinition;
our $VERSION = 20061231.0238;
package Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition;
our $VERSION = 20061231.0238;
push our @ISA, 'Message::DOM::TreeCore::ManakaiDOMNode',
'Message::DOM::IF::ElementTypeDefinition',
'Message::DOM::IF::Node';
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 81001;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = ${$$self->{
'xname'
}};


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub text_content ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = 
undef
;


}
$r;
} else {my ($self, $given) = @_;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#setting-node-value-no-effect', 'rdata' => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'set', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::TreeCore::ManakaiDOMNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_value';

;


}
}
}
sub child_nodes ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


$r = bless [], 
'Message::DOM::TreeCore::ManakaiDOMEmptyNodeList'
;


}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'child_nodes';
}
}
sub base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
base_uri
;



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'base_uri';
}
}
sub append_child ($$) {
my ($self, $newChild) = @_;
my $r;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::CharacterData::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;


}
$r}
sub insert_before ($$;$) {
my ($self, $newChild, $refChild) = @_;
my $r;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'insert_before', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::CharacterData::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;


}
$r}
sub replace_child ($$$) {
my ($self, $newChild, $oldChild) = @_;
my $r;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'replace_child', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::CharacterData::ManakaiDOMCharacterData', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;

;


}
$r}
sub get_feature ($$$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


}

{


$version = '' unless defined $version;


}
my $r;

{


$feature =~ s/^\+//;


{

if 
($Message::Util::AutoLoad::Registry::Feature->{$feature}->{$version}) {
  $r = $self;
}


}

;
unless (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->SUPER::get_feature ($feature, $version);
  


}


;}

;
}


}
$r}
sub attribute_definitions ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = bless \\($self), 
'Message::DOM::TreeCore::ManakaiDOMAttrDefMap'
;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'attribute_definitions';
}
}
sub get_attribute_definition_node ($$) {
my ($self, $nameArg) = @_;
my $r;

{


$r = $$self->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#attributeDefinitions'
}->{$nameArg};


}
$r}
sub set_attribute_definition_node ($$) {
my ($self, $attrDef) = @_;
my $r;

{


{

my 
$__aname = $attrDef->
node_name
;
my $__list = ${$self}->{'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#attributeDefinitions'};
$r = $__list->{$__aname};
SET: {
  if (defined $r and $r eq $attrDef) {
    undef $r;
    last SET; # no effect
  }
  

{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;
  unless ($attrDef->
owner_document
              eq 
$self->
owner_document
) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#setDefinitionNodeAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'attrDef', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $attrDef;

;
  }
  my $__owner;
  

;
  

{


$__owner = $attrDef->
owner_element_type_definition
;
  


}

;
  if ($__owner) {
    
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'INUSE_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#INUSE_DEFINITION_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#setDefinitionNodeAttr', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'attrDef', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $attrDef;

;
  }
      
  if (defined $r) {
    CORE::delete $$r->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
};
  }

  $__list->{$__aname} = $attrDef;
  $$attrDef->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
} = $self;
  Scalar::Util::weaken ($$attrDef->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
});
} # SET


}

;


}
$r}
sub owner_document_type_definition ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = $$self->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
};


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'owner_document_type_definition';
}
}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/www/2006/feature/xdoctype',
{'',
'1',
'3.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::DOM::XDoctype::ManakaiDOMElementTypeDefinition>} = 17.1;
package Message::DOM::IF::AttributeDefinition;
our $VERSION = 20061231.0238;
sub NO_TYPE_ATTR () {
0}
sub CDATA_ATTR () {
1}
sub ID_ATTR () {
2}
sub IDREF_ATTR () {
3}
sub IDREFS_ATTR () {
4}
sub ENTITY_ATTR () {
5}
sub ENTITIES_ATTR () {
6}
sub NMTOKEN_ATTR () {
7}
sub NMTOKENS_ATTR () {
8}
sub NOTATION_ATTR () {
9}
sub ENUMERATION_ATTR () {
10}
sub UNKNOWN_ATTR () {
11}
sub UNKNOWN_DEFAULT () {
0}
sub FIXED_DEFAULT () {
1}
sub REQUIRED_DEFAULT () {
2}
sub IMPLIED_DEFAULT () {
3}
sub EXPLICIT_DEFAULT () {
4}
package Message::DOM::XDoctype::ManakaiDOMAttributeDefinition;
our $VERSION = 20061231.0238;
push our @ISA, 'Message::DOM::TreeCore::ManakaiDOMNode',
'Message::DOM::IF::AttributeDefinition',
'Message::DOM::IF::Node';
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;
$r = 81002;
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub node_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = ${$$self->{
'xname'
}};


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_name';
}
}
sub node_value ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$dt = $self->
default_type
;
  if ($dt == 
4 or
      
$dt == 
1
) {
    for my $child (@{$self->
child_nodes
}) {
      if ($child->
node_type
 ==
          
5
) {
        my $v = $child->
text_content
;
        $v =~ s/[\x09\x0A\x0D]/ /;
        $r .= $v;
      } else {
        $r .= $child->
text_content
;
      }
    } # childNodes
    my $vt = $self->
declared_type
;
    unless ($vt == 
0 or
            
$vt == 
11 or
            
$vt == 
1
) {
      $r =~ s/\A\x20+//;
      $r =~ s/\x20+\z//;
      $r =~ s/\x20+/ /g;
    }
  } else {
    $r = 
undef
;
  }



}


;}

;


}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$dt = $self->
default_type
;
  if ($dt == 
4 or
      
$dt == 
1
) {
    

{

local $Error::Depth = $Error::Depth - 1;

{



      

{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;
    


}


;}

;
    my @children = @{$self->
child_nodes
};
    for my $child (@children) {
      $self->
remove_child
 ($child);
    } # childNodes
    if (defined $given and length $given) {
      $self->
append_child

        ($self->
owner_document

              ->
create_text_node

                  ($given));
    }
  }



}


;}

;


}
}
}
sub base_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
base_uri
;



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'base_uri';
}
}
sub append_child ($$) {
my ($self, $newChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    3 => 1,
    5 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    3 => 1,
    5 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/appendChildImpl1';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      $$newChild->{
'child'
} = [];
    } else {
      my $v = $$nc_parent->{
'child'
};
      RP: for my $i (0..$#$v) {
        if ($v->[$i] eq $new_child[0]) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    $$nc->{
'parent'
} = $self;
    Scalar::Util::weaken ($$nc->{
'parent'
});
  }

  my $children = $$self->{
'child'
};

  

{


## -- Adds to children list
    push @$children, @new_child;
    $r = $newChild;
  


}

;

  

;

  

;



}


;}

;


}

;


}
$r}
sub insert_before ($$;$) {
my ($self, $newChild, $refChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
; 
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    3 => 1,
    5 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    3 => 1,
    5 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

{


# tc:ForAppendChild & tc:ForReplaceChild
    if (defined $refChild) {
      if ($refChild eq $newChild) {
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#insert-before-itself', 'rdata' => $refChild, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1';


}


;}

;
        


}

;
        

;
      }

      my $cns = $self->
child_nodes
;
      my $cnsl = @$cns;
      C: {
        $index = 0;
        for my $i (0..($cnsl-1)) {
          my $cn = $cns->[$i];
          if ($cn eq $refChild) {
            $index += $i;
            last C;
          } elsif ($cn eq $newChild) {
            $index = -1; # offset
          }
        }
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/insertBeforeImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'refChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $refChild;


}


;}

;
        


}

;
        

;
      } # C
    } else { # |oldChild| is not defined
      

;
    }
  


}

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      $$newChild->{
'child'
} = [];
    } else {
      my $v = $$nc_parent->{
'child'
};
      RP: for my $i (0..$#$v) {
        if ($v->[$i] eq $new_child[0]) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    $$nc->{
'parent'
} = $self;
    Scalar::Util::weaken ($$nc->{
'parent'
});
  }

  my $children = $$self->{
'child'
};

  

;

  

{


## -- Adds to children list
    if ($index == -1) {
      push @$children, @new_child;
    } else {
      splice @$children, $index, 0, @new_child;
    }
    $r = $newChild;
  


}

;

  

;



}


;}

;


}

;


}
$r}
sub replace_child ($$$) {
my ($self, $newChild, $oldChild) = @_;
my $r;

{

my 
$self_od = $self->
owner_document
;
my $child_od = $newChild->
owner_document
;
my $child_nt = $newChild->
node_type
;


{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$strict = $self_od->
strict_error_checking
;

  ## -- Node Type check
  my @new_child;
  if ({
    3 => 1,
    5 => 1,
  }->{$child_nt}) {
    push @new_child, $newChild;
  } elsif ($child_nt == 
11
) {
    for my $cn (@{$newChild->
child_nodes
}) {
      unless ({
    3 => 1,
    5 => 1,
  }->{$cn->
node_type
}) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
      }
      push @new_child, $cn;
    }
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#HIERARCHY_BAD_TYPE', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
  }

  my $nc_parent = @new_child ? $new_child[0]->
parent_node
                             : 

undef
;
  if ($strict) {
    ## -- Wrong-document check
    unless ($self_od eq $child_od) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'WRONG_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DIFFERENT_DOCUMENT_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'newChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $newChild;


}


;}

;
    }

    ## -- Read-onlyness check
    if ($self->
manakai_read_only
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1';


}


;}

;
    }
    if (@new_child) {
      if ($nc_parent and
          $nc_parent->
manakai_read_only
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_SRC_PARENT', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1';


}


;}

;
      }
    }
  }

  ## -- Insert at...
  my $index = -1; # last
  

{


# tc:ForAppendChild & tc:ForReplaceChild
    if (defined $oldChild) {
      if ($oldChild eq $newChild) {
        

;
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/tree#replace-by-itself', 'rdata' => $oldChild, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1';


}


;}

;
        


}

;
      }

      my $cns = $self->
child_nodes
;
      my $cnsl = @$cns;
      C: {
        $index = 0;
        for my $i (0..($cnsl-1)) {
          my $cn = $cns->[$i];
          if ($cn eq $oldChild) {
            $index += $i;
            last C;
          } elsif ($cn eq $newChild) {
            $index = -1; # offset
          }
        }
        

;
        

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $oldChild;


}


;}

;
        


}

;
      } # C
    } else { # |oldChild| is not defined
      

{


{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NOT_FOUND_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NOT_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/replaceChildImpl1', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'oldChild', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#node' => $oldChild;


}


;}

;
      


}

;
    }
  


}

; # FOR !tc:ForAppendChild

  ## -- Removes from parent
  if ($nc_parent) {
    if ($child_nt == 
11
) {
      $$newChild->{
'child'
} = [];
    } else {
      my $v = $$nc_parent->{
'child'
};
      RP: for my $i (0..$#$v) {
        if ($v->[$i] eq $new_child[0]) {
          splice @$v, $i, 1, ();
          last RP;
        }
      } # RP
    }
  }

  ## -- Rewrite the |parentNode| properties
  for my $nc (@new_child) {
    $$nc->{
'parent'
} = $self;
    Scalar::Util::weaken ($$nc->{
'parent'
});
  }

  my $children = $$self->{
'child'
};

  

;

  

;

  

{


## -- Replaces the node
    splice @$children, $index, 1, @new_child;
    CORE::delete $$oldChild->{
'parent'
};
    $r = $oldChild;
  


}

;



}


;}

;


}

;


}
$r}
sub manakai_append_text ($$) {
my ($self, $string) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$lc = $self->
last_child
;
  if (defined $lc and
      $lc->
node_type
 == 
3
) {
    $lc->
manakai_append_text

           (ref $string eq 'SCALAR' ? $string : \$string);
  } else {
    my $text = $self->
owner_document

                    ->
create_text_node
 
                        (ref $string eq 'SCALAR' ? $$string : $string);
    $self->
append_child
 ($text);
  }
  $r = $self;



}


;}

;


}
$r}
sub get_feature ($$$) {
my ($self, $feature, $version) = @_;

{


$feature = lc $feature;


}

{


$version = '' unless defined $version;


}
my $r;

{


$feature =~ s/^\+//;


{

if 
($Message::Util::AutoLoad::Registry::Feature->{$feature}->{$version}) {
  $r = $self;
}


}

;
unless (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->SUPER::get_feature ($feature, $version);
  


}


;}

;
}


}
$r}
sub owner_element_type_definition ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = $$self->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#ownerDefinition'
};


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'owner_element_type_definition';
}
}
sub declared_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


$r = $$self->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#declaredType'
};


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;
$$self->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#declaredType'
} = $given;


}
}
}
sub default_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


$r = $$self->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#defaultType'
};


}
$r;
} else {my ($self, $given) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;
$$self->{
'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#defaultType'
} = $given;


}
}
}
sub allowed_tokens ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

require 
Message::DOM::DOMString;
$r = bless \[$self, 'http://suika.fam.cx/~wakaba/archive/2004/dom/xdt#allowedTokens'], 
'Message::DOM::DOMString::ManakaiDOMStringList'
;


}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::DOM::XDoctype::ManakaiDOMAttributeDefinition', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'allowed_tokens';
}
}
sub _check_read_only ($) {
my ($self) = @_;

{


{

if 
($self->
manakai_read_only
) {
  
report Message::DOM::DOMCore::ManakaiDOMException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/NodeReadOnlyError';

;
}


}

;


}
}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::XDoctype::ManakaiDOMAttributeDefinition>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/www/2006/feature/xdoctype',
{'',
'1',
'3.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::DOM::XDoctype::ManakaiDOMAttributeDefinition>} = 17.1;
for ($Message::DOM::IF::Document::, $Message::DOM::IF::DocumentType::, $Message::DOM::IF::Node::){}
## License: <http://suika.fam.cx/~wakaba/archive/2004/8/18/license#Perl+MPL>
1;
