#!/usr/bin/perl 
## This file is automatically generated
## 	at 2006-04-01T05:38:31+00:00,
## 	from file "PerlCode.dis",
## 	module <http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode>,
## 	for <http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOMLatest>.
## Don't edit by hand!
use strict;
require Message::DOM::DOMCore;
require Message::DOM::TreeCore;
require Message::Util::Error;
require Message::Util::Error::DOMException;
package Message::Util::PerlCode;
our $VERSION = 20060401.0538;
$Message::DOM::DOMCore::ManakaiDOMConfiguration{'Message::DOM::IFLatest::Document'}->{'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode#preserve-line-break'} = {'iname',
'plb',
'type',
'boolean',
'vsupport',
['1',
'1']};
$Message::DOM::DOMCore::ManakaiDOMConfiguration{'Message::DOM::IFLatest::Document'}->{'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode#split-resolver'} = {'iname',
'pcsres',
'otype',
undef,
'type',
'object'};
sub HIERARCHY_REQUEST_ERR ();
sub NOT_SUPPORTED_ERR ();
sub AUTOLOAD {


        my $al = our $AUTOLOAD;
        $al =~ s/.+:://;
        if ({'HIERARCHY_REQUEST_ERR',
'Message::Util::IFLatest::PCException::HIERARCHY_REQUEST_ERR',
'NOT_SUPPORTED_ERR',
'Message::Util::IFLatest::PCException::NOT_SUPPORTED_ERR'}->{$al}) {
          no strict 'refs';
          *{$AUTOLOAD} = \&{{'HIERARCHY_REQUEST_ERR',
'Message::Util::IFLatest::PCException::HIERARCHY_REQUEST_ERR',
'NOT_SUPPORTED_ERR',
'Message::Util::IFLatest::PCException::NOT_SUPPORTED_ERR'}->{$al}};
          goto &{$AUTOLOAD};
        } else {
          require Carp;
          Carp::croak (qq<Can't locate method "$AUTOLOAD">);
        }
      
}
sub import {


        my $self = shift;
        if (@_) {
          local $Exporter::ExportLevel = $Exporter::ExportLevel + 1;
          $self->SUPER::import (@_);
          for (grep {not /\W/} @_) {
            eval qq{$_};
          }
        }
      
}
our %EXPORT_TAG = ('PCExceptionCode',
['HIERARCHY_REQUEST_ERR',
'NOT_SUPPORTED_ERR']);
our @EXPORT_OK = ('HIERARCHY_REQUEST_ERR',
'NOT_SUPPORTED_ERR');
use Exporter; push our @ISA, 'Exporter';
package Message::Util::IFLatest::PerlCode;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCCode;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::DOM::TreeCore::ManakaiDOMElement',
'Message::Util::IFLatest::PerlCode';
sub file_node ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document

            ->
document_element
;
  if ($r) {
    unless (defined $r->
namespace_uri and
            
$r->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#' and
            
$r->
local_name eq 
'file') {
      $r = 
undef
;
    }
  }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCCode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'file_node';
}
}
sub replace_variable ($$$) {
my ($self, $originalVariable, $newValue) = @_;

{

my 
$ln = $self->
local_name
;
if ($ln eq 'unparsed' or
    $ln eq 'inlineUnparsed') {
  my $new_var = ref $newValue ? $newValue->stringify : ''.$newValue;
  my $val = $self->
text_content
;
  $val =~ s/\Q$originalVariable\E\b/$new_var/g;
  $self->
text_content
 ($val);
} elsif ($ln eq 'stringLiteral' or $ln eq 'atom' or
         $ln eq 'tokens') {
  # 
} elsif ($self->
has_child_nodes
) {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    my 
@child_nodes = @{$self->
child_nodes
};
    for my $child_node (@child_nodes) {
      if (defined $child_node->
namespace_uri and
          
$child_node->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
) {
        if ($child_node->
local_name eq 
'variable') {
          if (substr ($originalVariable, 0, 1) eq
                $child_node->
variable_type and
              
not defined $child_node->
package_name and
              
substr ($originalVariable, 1) eq
                $child_node->
pc_local_name and
              
not defined $child_node->
hash_key
) {
            if (ref $newValue) {
              $self->
replace_child
 ($child_node => $newValue);
            } else {  ## ISSUE: Is this correct?
              $child_node->
append_code
 ($newValue);
            }
          }
        } else {  ## Non-variable child
          $child_node->
replace_variable

                                    ($originalVariable => $newValue);
        }
      } else {
        # 
      }
    }
  


;}


;}

;
} # has child


;}
}
sub add_use_perl_module_name ($$) {
my ($self, $moduleName) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  

{

my 
$__v = $self->
get_attribute_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'useModuleName');
my %__mn = map {$_ => 
1
}
           split /\s+/, defined $__v ? $__v : '';
$__mn{$moduleName} = 
1
;
$self->
set_attribute_ns

                (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'pc:'.'useModuleName' => join ' ', keys %__mn);


;}

;



;}


;}

;


;}
}
sub add_use_char_class_name ($$$) {
my ($self, $moduleName, $charClassName) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  

{

my 
$__v = $self->
get_attribute_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'useCharClassName');
my %__mn = map {$_ => 
1
}
           split /\s+/, defined $__v ? $__v : '';
$__mn{$moduleName.'.'.$charClassName} = 
1
;
$self->
set_attribute_ns

                (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'pc:'.'useCharClassName' => join ' ', keys %__mn);


;}

;



;}


;}

;


;}
}
sub add_require_perl_module_name ($$) {
my ($self, $moduleName) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  

{

my 
$__v = $self->
get_attribute_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'requireModuleName');
my %__mn = map {$_ => 
1
}
           split /\s+/, defined $__v ? $__v : '';
$__mn{$moduleName} = 
1
;
$self->
set_attribute_ns

                (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'pc:'.'requireModuleName' => join ' ', keys %__mn);


;}

;



;}


;}

;


;}
}
sub add_exception_interface_package_name ($$) {
my ($self, $moduleName) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  

{

my 
$__v = $self->
get_attribute_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'exceptionInterfaceName');
my %__mn = map {$_ => 
1
}
           split /\s+/, defined $__v ? $__v : '';
$__mn{$moduleName} = 
1
;
$self->
set_attribute_ns

                (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'pc:'.'exceptionInterfaceName' => join ' ', keys %__mn);


;}

;



;}


;}

;


;}
}
sub get_use_perl_module_name_list ($) {
my ($self) = @_;
my $r = [];

{


{

local $Error::Depth = $Error::Depth + 1;

{



  

{

my 
@__nodes = ();
my %__result;
{
  my $__cnode = $self;
  if ($__cnode->
node_type
 == 
1
) {
    my $__v = $__cnode->
get_attribute_ns

                         (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'useModuleName');
    for (split /\s+/, defined $__v ? $__v : '') {
      $__result{$_} = 
1
;
    }
    push @__nodes, @{$__cnode->
child_nodes
};
  }
}
N: while (@__nodes) {
  my $__cnode = shift @__nodes;
  if ($__cnode->
node_type
 == 
1
) {
    if (defined $__cnode->
namespace_uri and
        
$__cnode->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#' and
        
$__cnode->
local_name eq 
'package') {
      next N;
    }
    my $__v = $__cnode->
get_attribute_ns

                         (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'useModuleName');
    for (split /\s+/, defined $__v ? $__v : '') {
      $__result{$_} = 
1
;
    }
    push @__nodes, @{$__cnode->
child_nodes
};
  }
}
$r = [sort {$a cmp $b} keys %__result];


;}

;



;}


;}

;


;}
$r}
sub get_use_char_class_name_list ($) {
my ($self) = @_;
my $r = {};

{

my 
$mc;


{

local $Error::Depth = $Error::Depth + 1;

{



  

{

my 
@__nodes = ();
my %__result;
{
  my $__cnode = $self;
  if ($__cnode->
node_type
 == 
1
) {
    my $__v = $__cnode->
get_attribute_ns

                         (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'useCharClassName');
    for (split /\s+/, defined $__v ? $__v : '') {
      $__result{$_} = 
1
;
    }
    push @__nodes, @{$__cnode->
child_nodes
};
  }
}
N: while (@__nodes) {
  my $__cnode = shift @__nodes;
  if ($__cnode->
node_type
 == 
1
) {
    if (defined $__cnode->
namespace_uri and
        
$__cnode->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#' and
        
$__cnode->
local_name eq 
'package') {
      next N;
    }
    my $__v = $__cnode->
get_attribute_ns

                         (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'useCharClassName');
    for (split /\s+/, defined $__v ? $__v : '') {
      $__result{$_} = 
1
;
    }
    push @__nodes, @{$__cnode->
child_nodes
};
  }
}
$mc = [sort {$a cmp $b} keys %__result];


;}

;



;}


;}

;
for (@$mc) {
  my ($m, $c) = split /\./, $_, 2;
  $r->{$m}->{$c} = 
1
;
}


;}
$r}
sub get_require_perl_module_name_list ($) {
my ($self) = @_;
my $r = [];

{


{

local $Error::Depth = $Error::Depth + 1;

{



  

{

my 
@__nodes = ($self);
my %__result;
while (@__nodes) {
  my $__cnode = shift @__nodes;
  if ($__cnode->
node_type
 == 
1
) {
    my $__v = $__cnode->
get_attribute_ns

                         (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'requireModuleName');
    for (split /\s+/, defined $__v ? $__v : '') {
      $__result{$_} = 
1
;
    }
    push @__nodes, @{$__cnode->
child_nodes
};
  }
}
$r = [sort {$a cmp $b} keys %__result];


;}

;



;}


;}

;


;}
$r}
sub get_exception_interface_package_name_list ($) {
my ($self) = @_;
my $r = [];

{


{

local $Error::Depth = $Error::Depth + 1;

{



  

{

my 
@__nodes = ($self);
my %__result;
while (@__nodes) {
  my $__cnode = shift @__nodes;
  if ($__cnode->
node_type
 == 
1
) {
    my $__v = $__cnode->
get_attribute_ns

                         (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'exceptionInterfaceName');
    for (split /\s+/, defined $__v ? $__v : '') {
      $__result{$_} = 
1
;
    }
    push @__nodes, @{$__cnode->
child_nodes
};
  }
}
$r = [sort {$a cmp $b} keys %__result];


;}

;



;}


;}

;


;}
$r}
sub dis_add_require_uri ($$) {
my ($self, $uriArg) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  

{

my 
$__v = $self->
get_attribute_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'requireResourceURI');
my %__mn = map {$_ => 
1
}
           split /\s+/, defined $__v ? $__v : '';
$__mn{$uriArg} = 
1
;
$self->
set_attribute_ns

                (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'pc:'.'requireResourceURI' => join ' ', keys %__mn);


;}

;



;}


;}

;


;}
}
sub dis_get_require_uri_list ($) {
my ($self) = @_;
my $r = [];

{


{

local $Error::Depth = $Error::Depth + 1;

{



  

{

my 
@__nodes = ($self);
my %__result;
while (@__nodes) {
  my $__cnode = shift @__nodes;
  if ($__cnode->
node_type
 == 
1
) {
    my $__v = $__cnode->
get_attribute_ns

                         (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'requireResourceURI');
    for (split /\s+/, defined $__v ? $__v : '') {
      $__result{$_} = 
1
;
    }
    push @__nodes, @{$__cnode->
child_nodes
};
  }
}
$r = [sort {$a cmp $b} keys %__result];


;}

;



;}


;}

;


;}
$r}
sub clone ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
clone_node
 (
1
);



;}


;}

;


;}
$r}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCCode>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCCode>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/12/pc/>}->{q<*>}->{q<Message::Util::PerlCode::ManakaiPCCode>} = 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<*>}->{q<Message::Util::PerlCode::ManakaiPCCode>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCCode>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PerlFile;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCFile;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCodeStatements',
'Message::Util::IFLatest::PerlCode',
'Message::Util::IFLatest::PerlCodeStatements',
'Message::Util::IFLatest::PerlCodeUnits',
'Message::Util::IFLatest::PerlFile';
sub append_new_package ($$) {
my ($self, $packageName) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
create_element_ns

                                                (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'package');
  $r->
package_name
 ($packageName);
  $self->
append_child
 ($r);



;}


;}

;


;}
$r}
sub append_package ($$) {
my ($self, $codeArg) = @_;

{

if 
($codeArg->
parent_node
) {
  
report Message::Util::PerlCode::ManakaiPCException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_package', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#IN_USE_NODE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCFile', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#childNode' => $codeArg, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'codeArg';

;
}


{

local $Error::Depth = $Error::Depth + 1;

{



  $self->
owner_document
->
adopt_node
 ($codeArg);
  $self->
append_child
 ($codeArg);



;}


;}

;


;}
}
sub get_last_package ($$%) {
my ($self, $packageName, %opt) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  for 
my $child (@{$self->
child_nodes
}) {
    if ($child->
node_type
 == 
1 and
        
defined $child->
namespace_uri and
        
$child->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#' and
        
$child->
local_name eq 
'package') {
      my $v = $child->
get_attribute_ns

                     (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'packageName');
      if (defined $v and $v eq $packageName) {
        $r = $child;
      }
    }
  }
  if (not $r and $opt{make_new_package}) {
    $r = $self->
append_new_package
 ($packageName);
  }



;}


;}

;


;}
$r}
sub source_file ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'sourceFile');
  $r = '' unless defined $r;



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $given) {
    $self->
set_attribute_ns

             ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'pc:sourceFile', $given);
  } else {
    $self->
remove_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'sourceFile');
  }



;}


;}

;


;}
}
}
sub source_module ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'sourceModule');
  $r = '' unless defined $r;



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $given) {
    $self->
set_attribute_ns

             ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'pc:sourceModule', $given);
  } else {
    $self->
remove_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'sourceModule');
  }



;}


;}

;


;}
}
}
sub source_for ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'sourceFor');
  $r = '' unless defined $r;



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $given) {
    $self->
set_attribute_ns

             ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'pc:sourceFor', $given);
  } else {
    $self->
remove_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'sourceFor');
  }



;}


;}

;


;}
}
}
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  ## -- Header
  $r = qq<#!/usr/bin/perl \n>;
  $r .= 
Message::Util::PerlCode::ManakaiPCImplementation->_perl_comment

          (q<This file is automatically generated>);
  $r .= 
Message::Util::PerlCode::ManakaiPCImplementation->_perl_comment

         (q<	at >.
Message::Util::PerlCode::ManakaiPCImplementation->_rfc_3_3_3_9_date_time
 (time).q<,>);
  $r .= 
Message::Util::PerlCode::ManakaiPCImplementation->_perl_comment

          (q<	from file ">.$self->
source_file
.q<",>);
  $r .= 
Message::Util::PerlCode::ManakaiPCImplementation->_perl_comment

          (q[	module <].$self->
source_module
.q[>,]);
  $r .= 
Message::Util::PerlCode::ManakaiPCImplementation->_perl_comment

          (q[	for <].$self->
source_for
.q[>.]);
  $r .= 
Message::Util::PerlCode::ManakaiPCImplementation->_perl_comment

          (q<Don't edit by hand!>);
  $r .= qq<use strict;\n>;
  $self->
current_package
 ('main');

  ## -- |require| Perl Modules
  my $req = $self->
get_require_perl_module_name_list
;
  for my $pack (sort {$a cmp $b} @$req) {
    $r .= qq<require $pack;\n>;
  }

  ## -- |use| Perl Modules
  for my $pack (sort {$a cmp $b} @{$self->
get_use_perl_module_name_list
}) {
    $r .= 'use ' . $pack . ";\n";
  }

  ## -- |use| Character Classes
  my $cls = $self->
get_use_char_class_name_list
;
  for my $pack (sort {$a cmp $b} keys %$cls) {
    $r .= 'use ' . $pack . ' ' .
      
Message::Util::PerlCode::ManakaiPCImplementation->perl_list

         ([sort {$a cmp $b} grep {$cls->{$pack}->{$_}}
           keys %{$cls->{$pack}}]) . ";\n";
  }

  ## -- Packages and global objects
  my $pack = {};
  for my $child (@{$self->
child_nodes
}) {
    $r .= $child->stringify;
    if ($child->
node_type
 == 
1 and
        
defined $child->
namespace_uri and
        
$child->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#' and
        
$child->
local_name eq 
'package') {
      for my $ipack (@{$child->
get_implement_package_name_list
}) {
        $pack->{$ipack} ||= 
1
; # not defined
      }
      $pack->{$child->
package_name
} = []; # defined
    }
  }

  ## -- Exception interface packages
  for (sort {$a cmp $b} @{$self->
get_exception_interface_package_name_list
}) {
    next if ref $pack->{$_};
    $pack->{$_} = [];
    $r .= sprintf q<push @%s::ISA, 'Message::Util::Error' >.
                  q<unless @%s::ISA;%s>, $_, $_, "\n";
  }

  ## -- Enables interface packages
  my @packs = map {'$' . $_ . '::'}
              sort {$a cmp $b}
              grep {not ref $pack->{$_} and $pack->{$_}}
              keys %$pack;
  $r .= q<for (>. join (', ', @packs) . qq<){}\n> if @packs;

  ## -- Footer
  $r .= 
Message::Util::PerlCode::ManakaiPCImplementation->_perl_comment

          (q[License: <].$self->
license_uri
.qq[>\n]);
  $r .= qq<1;\n>;



;}


;}

;


;}
$r}
sub current_package ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'currentPackage');
  $r = '' unless defined $r;



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $given) {
    $self->
set_attribute_ns

             ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'pc:currentPackage', $given);
  } else {
    $self->
remove_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'currentPackage');
  }



;}


;}

;


;}
}
}
sub license_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'license');
  $r = '' unless defined $r;



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $given) {
    $self->
set_attribute_ns

             ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'pc:license', $given);
  } else {
    $self->
remove_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'license');
  }



;}


;}

;


;}
}
}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCFile>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCFile>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<file>}->{q<Message::Util::PerlCode::ManakaiPCFile>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCFile>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PerlPackage;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCPackage;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCodeStatements',
'Message::Util::IFLatest::PerlCode',
'Message::Util::IFLatest::PerlCodeStatements',
'Message::Util::IFLatest::PerlCodeUnits',
'Message::Util::IFLatest::PerlPackage';
sub package_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'packageName');
  $r = '' unless defined $r;



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $given) {
    $self->
set_attribute_ns

             ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'pc:packageName', $given);
  } else {
    $self->
remove_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'packageName');
  }



;}


;}

;


;}
}
}
sub get_sub ($$;%) {
my ($self, $subName, %opt) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  F: 
{
    for my $child (@{$self->
child_nodes
}) {
      if ($child->
node_type
 == 
1 and
          
defined $child->
namespace_uri and
          
$child->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#' and
          
$child->
local_name eq 
'sub') {
        if ($child->
has_perl_name
 ($subName)) {
          $r = $child;
          last F;
        }
      }
    }
    if ($opt{make_new_node}) {
      $r = $self->
owner_document

                ->
create_element_ns

                     (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'sub');
      $r->
add_perl_name
 ($subName);
      $self->
append_child
 ($r);
    }
  } # F



;}


;}

;


;}
$r}
sub set_sub_node ($$) {
my ($self, $subArg) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
($subArg->
parent_node
) {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::PerlCode::ManakaiPCException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'set_sub_node', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#IN_USE_NODE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCPackage', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#childNode' => $subArg;


;}


;}

;
  }
  $self->
owner_document
->
adopt_node
 ($subArg);
  $self->
append_child
 ($subArg);



;}


;}

;


;}
}
sub get_overload_sub ($$;%) {
my ($self, $opName, %opt) = @_;
my $r;

{

unless 
(
{qw[
                +  1 -  1 *  1 /  1 %  1 **  1 <<  1 >>  1 x  1 .  1
                += 1 -= 1 *= 1 /= 1 %= 1 **= 1 <<= 1 >>= 1 x= 1 .= 1
                <  1 <= 1 >  1 >= 1 == 1 != 1 <=> 1
                lt 1 le 1 gt 1 ge 1 eq 1 ne 1 cmp 1
                & 1 | 1 ^ 1 neg 1 ! 1 ~ 1
                ++ 1 -- 1 = 1
                atan2 1 cos 1 sin 1 exp 1 abs 1 log 1 sqrt 1
                bool 1 "" 1 0+ 1 ${} 1 @{} 1 %{} 1 &{} 1 *{} 1 <> 1
                nomethod 1
]}
->{$opName}) {
  
report Message::Util::PerlCode::ManakaiPCException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'get_overload_sub', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#UNSUPPORTED_OPERATOR_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCPackage', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#operator' => $opName, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'opName';

;
}


{

local $Error::Depth = $Error::Depth + 1;

{


  F: 
{
    for my $child (@{$self->
child_nodes
}) {
      if ($child->
node_type
 == 
1 and
          
defined $child->
namespace_uri and
          
$child->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#' and
          
$child->
local_name eq 
'sub') {
        if ($child->
has_perl_operator
 ($opName)) {
          $r = $child;
          last F;
        }
      }
    }
    if ($opt{make_new_node}) {
      $r = $self->
owner_document

                ->
create_element_ns

                     (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'sub');
      $r->
add_perl_operator
 ($opName);
      $self->
append_child
 ($r);
    }
  } # F



;}


;}

;


;}
$r}
sub add_isa_package ($$) {
my ($self, $packageName) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$v = $self->
get_attribute_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'extends');
  $self->
set_attribute_ns

      (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'pc:extends' =>
       join ' ', (split /\s+/, defined $v ? $v : ''), $packageName);



;}


;}

;


;}
}
sub get_isa_package_name_list ($) {
my ($self) = @_;
my $r = [];

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$v = $self->
get_attribute_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'extends');
  $r = [split /\s+/, defined $v ? $v : ''];



;}


;}

;


;}
$r}
sub add_implement_package ($$) {
my ($self, $packageName) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  

{

my 
$__v = $self->
get_attribute_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'implements');
my %__mn = map {$_ => 
1
}
           split /\s+/, defined $__v ? $__v : '';
$__mn{$packageName} = 
1
;
$self->
set_attribute_ns

                (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'pc:'.'implements' => join ' ', keys %__mn);


;}

;



;}


;}

;


;}
}
sub get_implement_package_name_list ($) {
my ($self) = @_;
my $r = [];

{


{

local $Error::Depth = $Error::Depth + 1;

{



  

{

my 
%__result;
my $__v = $self->
get_attribute_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'implements');
for (split /\s+/, defined $__v ? $__v : '') {                 
  $__result{$_} = 
1
;
}
$r = [sort {$a cmp $b} keys %__result];


;}

;



;}


;}

;


;}
$r}
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$file = $self->
file_node
;

  ## Package name
  my $pn = $self->
package_name
;
  $r .= q<package > . $pn . ";\n";
  $file->
current_package
 ($pn) if $file;

  ## Package version
  $r .= 'our $VERSION = '.
      
Message::Util::PerlCode::ManakaiPCImplementation->_version_date_time
 (time).
      ";\n";

  ## Inheritance
  my @isa = (@{$self->
get_isa_package_name_list
},
             sort {$a cmp $b} @{$self->
get_implement_package_name_list
});
  if (@isa) {
    $r .= 'push our @ISA, ' .
      
Message::Util::PerlCode::ManakaiPCImplementation->perl_list
 (\@isa) .
      ";\n";
  }

  ## |use| Perl Modules
  for my $pack (sort {$a cmp $b} @{$self->
get_use_perl_module_name_list
}) {
    $r .= 'use ' . $pack . ";\n";
  }

  ## |use| Character Classes
  my $cls = $self->
get_use_char_class_name_list
;
  for my $pack (sort {$a cmp $b} keys %$cls) {
    $r .= 'use ' . $pack . ' ' .
      
Message::Util::PerlCode::ManakaiPCImplementation->perl_list

         ([sort {$a cmp $b} grep {$cls->{$pack}->{$_}}
           keys %{$cls->{$pack}}]) . ";\n";
  }

  ## Package-scope objects
  my $has_bool;
  my $op = '';
  for my $child (@{$self->
child_nodes
}) {
    if ($child->
node_type
 == 
1 and
        
defined $child->
namespace_uri and
        
$child->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
) {
      my $ln = $child->
local_name
;
      if ($ln eq 'sub') {
        my $names = $child->
get_perl_name_list
;
        my $ops = $child->
get_perl_operator_list
;
        if (@$names) {
          $r .= $child->stringify;
          if (@$names > 1) {
            $r .= sprintf q<*%s = \&%s;%s>,
                        $_, $names->[0], "\n" for @$names[1..$#$names];
          }
          for (@$ops) {
            $op .= sprintf q['%s' => '%s', %s],
                           $_ => $names->[0], "\n";
            $has_bool = 
1 if 
$_ eq 'bool';
          }
        } else {
          my $v = $child->stringify;
          for (@$ops) {
            $op .= sprintf q['%s' => %s, %s], $_ => $v, "\n";
            $has_bool = 
1 if 
$_ eq 'bool';
          }
        }
      } else {
        $r .= $child->stringify;
      }
    } elsif ($child->
node_type
 == 
1
) {
      $r .= $child;
    }
  } # children 

  if (length $op) {
    $r .= "use overload \n";
    $r .= "bool => sub () {1}, \n" unless $has_bool;
    $r .= $op . "fallback => 1;\n";
  }

  ## -- Exports
  my $xport = $self->
get_export_list
;
  if (map {values %$_} values %$xport) {
    $r .= q[our %EXPORT_TAG = (] . 
          
Message::Util::PerlCode::ManakaiPCImplementation->perl_list

             ([map {$_ => [sort {$a cmp $b} keys %{$xport->{$_}}]}
               sort {$a cmp $b} grep {length}
               keys %$xport]) . qq[);\n];
    $r .= q[our @EXPORT_OK = (] .
          
Message::Util::PerlCode::ManakaiPCImplementation->perl_list

             ([map {sort {$a cmp $b} keys %{$xport->{$_}}}
               sort {$a cmp $b} keys %$xport]) . qq[);\n];
    $r .= q[use Exporter; push our @ISA, 'Exporter';] . qq[\n];
  }



;}


;}

;


;}
$r}
sub get_export_list ($) {
my ($self) = @_;
my $r = {};

{

my 
$mc;


{

local $Error::Depth = $Error::Depth + 1;

{



  

{

my 
%__result;
my $__v = $self->
get_attribute_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'export');
for (split /\s+/, defined $__v ? $__v : '') {                 
  $__result{$_} = 
1
;
}
$mc = [sort {$a cmp $b} keys %__result];


;}

;



;}


;}

;
for (@$mc) {
  my ($m, $c) = split /\./, $_, 2;
  $r->{$m}->{$c} = 
1
;
}


;}
$r}
sub add_export ($$$) {
my ($self, $exportTag, $exportName) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  

{

my 
$__v = $self->
get_attribute_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'export');
my %__mn = map {$_ => 
1
}
           split /\s+/, defined $__v ? $__v : '';
$__mn{$exportTag.'.'.$exportName} = 
1
;
$self->
set_attribute_ns

                (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'pc:'.'export' => join ' ', keys %__mn);


;}

;



;}


;}

;


;}
}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCPackage>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCPackage>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<package>}->{q<Message::Util::PerlCode::ManakaiPCPackage>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCPackage>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PerlCodeStatements;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCCodeStatements;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCodeUnits',
'Message::Util::IFLatest::PerlCodeStatements',
'Message::Util::IFLatest::PerlCodeUnits';
sub append_code_fragment ($$) {
my ($self, $codeArg) = @_;

{

if 
({
  unparsed => 1, if => 1, statement => 1, block => 1,
  choose => 
1
,
  blockContainer => 
1
,
  inlineUnparsed => 1, variable => 1, tokens => 1, atom => 1,
  inlineContainer => 1, stringLiteral => 1, assignment => 1,
  list => 
1
, arrayRefLiteral => 
1
, hashRefLiteral => 
1
,
}->{$codeArg->
local_name
}) {
  if ($codeArg->
parent_node
) {
    
report Message::Util::PerlCode::ManakaiPCException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#IN_USE_NODE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCCodeStatements', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#childNode' => $codeArg, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'codeArg';

;
  }
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $self->
owner_document

         ->
adopt_node
 ($codeArg);
    $self->
append_child
 ($codeArg);
  


;}


;}

;
} else {
  
report Message::Util::PerlCode::ManakaiPCException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#parentNode' => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#BAD_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCCodeStatements', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#childNode' => $codeArg, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'codeArg';

;
}


;}
}
sub append_code ($$) {
my ($self, $codeArg) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
create_element_ns

                                            (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'unparsed');
  $r->
text_content
 ($codeArg);
  $self->
append_child
 ($r);



;}


;}

;


;}
$r}
sub label ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'label');
  $r = '' unless defined $r;



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $given) {
    $self->
set_attribute_ns

             ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'pc:label', $given);
  } else {
    $self->
remove_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'label');
  }



;}


;}

;


;}
}
}
sub append_block ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
create_element_ns

                                               (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'block');
  $self->
append_child
 ($r);



;}


;}

;


;}
$r}
sub append_statement ($;$) {
my ($self, $codeArg) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
create_element_ns

                                               (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'statement');
  if (defined $codeArg) {
    $r->
append_bare
 ($codeArg);
  }
  $self->
append_child
 ($r);



;}


;}

;


;}
$r}
sub append_new_pc_block ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
create_pc_block
;
  $self->
append_child
 ($r);



;}


;}

;


;}
$r}
sub append_new_pc_choose ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
create_pc_choose
;
  $self->
append_child
 ($r);



;}


;}

;


;}
$r}
sub append_new_pc_while ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
create_pc_while
;
  $self->
append_child
 ($r);



;}


;}

;


;}
$r}
sub append_new_if ($$;$$) {
my ($self, $conditionArg, $trueArg, $falseArg) = @_;
my $r;

{

for 
my $arg ([conditionArg => $conditionArg]) {
  if ({
    atom => 1, tokens => 1, inlineContainer => 1, assignment => 
1
,
    inlineUnparsed => 1, variable => 1, stringLiteral => 
1
,
    list => 
1
, arrayRefLiteral => 
1
, hashRefLiteral => 
1
,
  }->{$arg->[1]->
local_name
}) {
    if ($arg->[1]->
parent_node
) {
      
report Message::Util::PerlCode::ManakaiPCException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_new_if', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#IN_USE_NODE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCCodeStatements', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#childNode' => $arg->[1], 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => $arg->[0];

;
    }
  } else {
    
report Message::Util::PerlCode::ManakaiPCException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#parentNode' => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_new_if', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#BAD_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCCodeStatements', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#childNode' => $arg->[1], 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => $arg->[0];

;
  }
} # c

for my $arg ([trueArg => $trueArg],
             [falseArg => $falseArg]) {
  next unless $arg->[1];
  if ({
        blockContainer => 
1
,
      }->{$arg->[1]->
local_name
}) {
    if ($arg->[1]->
parent_node
) {
      
report Message::Util::PerlCode::ManakaiPCException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_new_if', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#IN_USE_NODE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCCodeStatements', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#childNode' => $arg->[1], 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => $arg->[0];

;
    }
  } else {
    
report Message::Util::PerlCode::ManakaiPCException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#parentNode' => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_new_if', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#BAD_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCCodeStatements', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#childNode' => $arg->[1], 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => $arg->[0];

;
  }
} # t/f



{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
create_element_ns

                                         (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'if');
  $r->
condition
 ($conditionArg);
  $r->
true_code
 ($trueArg) if $trueArg;
  $r->
false_code
 ($falseArg) if $falseArg;
  $self->
append_child
 ($r);



;}


;}

;


;}
$r}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCCodeStatements>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCCodeStatements>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<statementContainer>}->{q<Message::Util::PerlCode::ManakaiPCCodeStatements>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCCodeStatements>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PerlSub;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCSub;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCodeStatements',
'Message::Util::IFLatest::PerlCode',
'Message::Util::IFLatest::PerlCodeStatements',
'Message::Util::IFLatest::PerlCodeUnits',
'Message::Util::IFLatest::PerlSub';
sub pc_local_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_perl_name_list
->[0];



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCSub', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pc_local_name';
}
}
sub add_perl_name ($$) {
my ($self, $subName) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  

{

my 
$__v = $self->
get_attribute_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'localName');
my %__mn = map {$_ => 
1
}
           split /\s+/, defined $__v ? $__v : '';
$__mn{$subName} = 
1
;
$self->
set_attribute_ns

                (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'pc:'.'localName' => join ' ', keys %__mn);


;}

;



;}


;}

;


;}
}
sub get_perl_name_list ($) {
my ($self) = @_;
my $r = [];

{


{

local $Error::Depth = $Error::Depth + 1;

{



  

{

my 
%__result;
my $__v = $self->
get_attribute_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'localName');
for (split /\s+/, defined $__v ? $__v : '') {                 
  $__result{$_} = 
1
;
}
$r = [sort {$a cmp $b} keys %__result];


;}

;



;}


;}

;


;}
$r}
sub has_perl_name ($$) {
my ($self, $subName) = @_;
my $r = 0;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$l;
  

{

my 
%__result;
my $__v = $self->
get_attribute_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'localName');
for (split /\s+/, defined $__v ? $__v : '') {                 
  $__result{$_} = 
1
;
}
$l = [sort {$a cmp $b} keys %__result];


;}

;
  F: for (@$l) {
    if ($_ eq $subName) {
      $r = 
1
;
      last F;
    }
  }



;}


;}

;


;}
$r}
sub clear_perl_name ($) {
my ($self) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $self->
remove_attribute_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'localName');



;}


;}

;


;}
}
sub add_perl_operator ($$) {
my ($self, $op) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  

{

my 
$__v = $self->
get_attribute_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'operator');
my %__mn = map {$_ => 
1
}
           split /\s+/, defined $__v ? $__v : '';
$__mn{$op} = 
1
;
$self->
set_attribute_ns

                (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'pc:'.'operator' => join ' ', keys %__mn);


;}

;



;}


;}

;


;}
}
sub get_perl_operator_list ($) {
my ($self) = @_;
my $r = [];

{


{

local $Error::Depth = $Error::Depth + 1;

{



  

{

my 
%__result;
my $__v = $self->
get_attribute_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'operator');
for (split /\s+/, defined $__v ? $__v : '') {                 
  $__result{$_} = 
1
;
}
$r = [sort {$a cmp $b} keys %__result];


;}

;



;}


;}

;


;}
$r}
sub has_perl_operator ($$) {
my ($self, $op) = @_;
my $r = 0;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$l;
  

{

my 
%__result;
my $__v = $self->
get_attribute_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'operator');
for (split /\s+/, defined $__v ? $__v : '') {                 
  $__result{$_} = 
1
;
}
$l = [sort {$a cmp $b} keys %__result];


;}

;
  F: for (@$l) {
    if ($_ eq $op) {
      $r = 
1
;
      last F;
    }
  }



;}


;}

;


;}
$r}
sub prototype ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'prototype');
  $r = '' unless defined $r;



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $given) {
    $self->
set_attribute_ns

             ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'pc:prototype', $given);
  } else {
    $self->
remove_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'prototype');
  }



;}


;}

;


;}
}
}
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = q<sub>;
  my $nm = $self->
get_perl_name_list
;
  $r .= q< > . $nm->[0] if @$nm;
  if ($self->
has_attribute_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'prototype')) {
    $r .= q< (> . $self->
prototype
 . q<)>;
  }
  $r .= qq< {\n>;
  for my $child (@{$self->
child_nodes
}) {
    $r .= $child->stringify;
  }
  $r .= qq<}\n>;



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
'0+' => sub ($) {
my ($self) = @_;
my $r = 0;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = 0 + $self->
last_child
;



;}


;}

;


;}
$r}
, 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCSub>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCSub>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<sub>}->{q<Message::Util::PerlCode::ManakaiPCSub>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCSub>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PerlUnparsedCode;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCUnparsedCode;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCode',
'Message::Util::IFLatest::PerlCode',
'Message::Util::IFLatest::PerlUnparsedCode';
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = "\x0A" . $self->
text_content
 . "\x0A";



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCUnparsedCode>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCUnparsedCode>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<unparsed>}->{q<Message::Util::PerlCode::ManakaiPCUnparsedCode>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCUnparsedCode>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PerlInlineUnparsedCode;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCInlineUnparsedCode;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCode',
'Message::Util::IFLatest::PerlCode',
'Message::Util::IFLatest::PerlInlineUnparsedCode';
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
text_content
;



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCInlineUnparsedCode>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCInlineUnparsedCode>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<inlineUnparsed>}->{q<Message::Util::PerlCode::ManakaiPCInlineUnparsedCode>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCInlineUnparsedCode>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PCNumberLiteral;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCNumberLiteral;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCode',
'Message::Util::IFLatest::PCNumberLiteral',
'Message::Util::IFLatest::PerlCode';
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
text_content
;



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCNumberLiteral>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCNumberLiteral>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<numberLiteral>}->{q<Message::Util::PerlCode::ManakaiPCNumberLiteral>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCNumberLiteral>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PerlStringLiteral;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCPerlStringLiteral;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCode',
'Message::Util::IFLatest::PerlCode',
'Message::Util::IFLatest::PerlStringLiteral';
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
text_content
;
  $r =~ s/(['\\])/\\$1/g;
  my $escaped = ($r =~ s{([^\x0A\x0D\x20-\x7E])}
                        {sprintf '\x{%X}', ord $1}ge);
  if ($escaped or
      $self->
owner_document

           ->
dom_config

           ->
get_parameter

                (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#preserve-line-break'
)) {
    $r =~ s/\x0D/\\x0D/gs;
    $r =~ s/\x0A/\\x0A/gs;
    $r =~ s/\@/\\\@/g;
    $r =~ s/\$/\\\$/g;
    $r =~ s/"/\\"/g;
    $r = q<"> . $r . q<">;
  } else {
    $r = q<'> . $r . q<'>;
  }



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'0+' => sub ($) {
my ($self) = @_;
my $r = 0;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = 0 + $self->
text_content
;



;}


;}

;


;}
$r}
, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCPerlStringLiteral>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCPerlStringLiteral>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<stringLiteral>}->{q<Message::Util::PerlCode::ManakaiPCPerlStringLiteral>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCPerlStringLiteral>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PCList;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCList;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCode',
'Message::Util::IFLatest::PCList',
'Message::Util::IFLatest::PerlCode';
sub item ($$) {
my ($self, $index) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
child_nodes
->
item
 ($index);



;}


;}

;


;}
$r}
sub length ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
child_nodes
->
length
;



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCList', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'length';
}
}
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
@r = map {$_->stringify} @{$self->
child_nodes
};
  $r = '(' . join (', ', @r) . ')';



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCList>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCList>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<list>}->{q<Message::Util::PerlCode::ManakaiPCList>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCList>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PCArrayRefLiteral;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCArrayRefLiteral;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCode',
'Message::Util::IFLatest::PCArrayRefLiteral',
'Message::Util::IFLatest::PerlCode';
sub item ($$) {
my ($self, $index) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
child_nodes
->
item
 ($index);



;}


;}

;


;}
$r}
sub length ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
child_nodes
->
length
;



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCArrayRefLiteral', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'length';
}
}
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
@r = map {$_->stringify} @{$self->
child_nodes
};
  $r = '[' . join (",\n", @r) . ']';



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCArrayRefLiteral>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCArrayRefLiteral>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<arrayRefLiteral>}->{q<Message::Util::PerlCode::ManakaiPCArrayRefLiteral>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCArrayRefLiteral>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PCHashRefLiteral;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCHashRefLiteral;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCode',
'Message::Util::IFLatest::PCHashRefLiteral',
'Message::Util::IFLatest::PerlCode';
sub key ($$) {
my ($self, $index) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
child_nodes
->
item
 ($index * 2);



;}


;}

;


;}
$r}
sub value ($$) {
my ($self, $index) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
child_nodes
->
item
 ($index * 2 + 1);



;}


;}

;


;}
$r}
sub length ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$length = $self->
child_nodes
->
length
;
  $r = int ($length / 2) + ($length % 2);



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCHashRefLiteral', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'length';
}
}
sub set_named_item ($$$) {
my ($self, $key, $value) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
@children = @{$self->
child_nodes
};
  R: {
    while (@children) {
      my $ckey = shift @children;
      my $cval = shift @children;
      if ($ckey->
text_content eq 
$key) {
        $self->
replace_child
 ($value, $cval);
        last R;
      }
    }

    $self->
append_child

      ($self->
owner_document

            ->
create_element_ns

                (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'stringLiteral'))
         ->
text_content
 ($key);
    $self->
append_child
 ($value);
  } # R



;}


;}

;


;}
}
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
%r = map {$_->stringify} @{$self->
child_nodes
};
          ## Different values with same key are not preserved.
  $r = '{' . join (",\n", map {$_ => $r{$_}}
                         sort {$a cmp $b} keys %r) . '}';



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCHashRefLiteral>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCHashRefLiteral>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<hashRefLiteral>}->{q<Message::Util::PerlCode::ManakaiPCHashRefLiteral>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCHashRefLiteral>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PerlTokens;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCTokens;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCode',
'Message::Util::IFLatest::PerlCode',
'Message::Util::IFLatest::PerlTokens';
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
text_content
;



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCTokens>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCTokens>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<tokens>}->{q<Message::Util::PerlCode::ManakaiPCTokens>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCTokens>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PerlAtom;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCAtom;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCTokens',
'Message::Util::IFLatest::PerlAtom',
'Message::Util::IFLatest::PerlCode';
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
text_content
;



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'0+' => sub ($) {
my ($self) = @_;
my $r = 0;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = 0 + $self->
text_content
;



;}


;}

;


;}
$r}
, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCAtom>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCAtom>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<atom>}->{q<Message::Util::PerlCode::ManakaiPCAtom>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCAtom>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PerlVariable;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCVariable;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCode',
'Message::Util::IFLatest::PerlCode',
'Message::Util::IFLatest::PerlVariable';
sub variable_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'variableType');
  $r = '' unless defined $r;



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $given) {
    $self->
set_attribute_ns

             ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'pc:variableType', $given);
  } else {
    $self->
remove_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'variableType');
  }



;}


;}

;


;}
}
}
sub package_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'packageName');
  $r = '' unless defined $r;



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $given) {
    $self->
set_attribute_ns

             ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'pc:packageName', $given);
  } else {
    $self->
remove_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'packageName');
  }



;}


;}

;


;}
}
}
sub pc_local_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'localName');
  $r = '' unless defined $r;



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $given) {
    $self->
set_attribute_ns

             ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'pc:localName', $given);
  } else {
    $self->
remove_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'localName');
  }



;}


;}

;


;}
}
}
sub variable_scope ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'variableScope');
  $r = '' unless defined $r;



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $given) {
    $self->
set_attribute_ns

             ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'pc:variableScope', $given);
  } else {
    $self->
remove_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'variableScope');
  }



;}


;}

;


;}
}
}
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$t = $self->
variable_scope
;
  $r .= $t . ' ' if length $t;
  $r .= $t = $self->
variable_type
;
  my $v = $self->
package_name
;
  $r .= $v . '::' if length $v;
  $r .= $self->
pc_local_name
;
  $v = $self->
hash_key
;
  if ($t eq '$' and length $v) {
    $v =~ s/(['\\])/\\$1/g;
    $r .= q<{'> . $v . q<'}>;
  }



;}


;}

;


;}
$r}
sub hash_key ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'hashKey');
  $r = '' unless defined $r;



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $given) {
    $self->
set_attribute_ns

             ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'pc:hashKey', $given);
  } else {
    $self->
remove_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'hashKey');
  }



;}


;}

;


;}
}
}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCVariable>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCVariable>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<variable>}->{q<Message::Util::PerlCode::ManakaiPCVariable>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCVariable>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PerlCodeUnits;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCCodeUnits;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCode',
'Message::Util::IFLatest::PerlCodeUnits';
sub length ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = @{$self->
child_nodes
};



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCCodeUnits', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'length';
}
}
sub append_string_literal ($$) {
my ($self, $stringArg) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
create_element_ns

                                 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'stringLiteral');
  $r->
text_content
 ($stringArg);
  $self->
append_child
 ($r);



;}


;}

;


;}
$r}
sub append_new_pc_literal ($$) {
my ($self, $value) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document

            ->
create_pc_literal
 ($value);
  $self->
append_child
 ($r);



;}


;}

;


;}
$r}
sub append_new_pc_number_literal ($$) {
my ($self, $value) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document

            ->
create_pc_number_literal
 ($value);
  $self->
append_child
 ($r);



;}


;}

; 


;}
$r}
sub append_atom ($$) {
my ($self, $codeArg) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
create_element_ns

                                         (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'atom');
  $r->
text_content
 ($codeArg);
  $self->
append_child
 ($r);



;}


;}

;


;}
$r}
sub append_bare ($$) {
my ($self, $codeArg) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
create_element_ns

                                         (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'tokens');
  $r->
text_content
 ($codeArg);
  $self->
append_child
 ($r);



;}


;}

;


;}
$r}
sub append_new_pc_variable ($$$$) {
my ($self, $variableTypeArg, $packageNameArg, $localNameArg) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document

            ->
create_pc_variable

                ($variableTypeArg, $packageNameArg, $localNameArg);
  $self->
append_child
 ($r);



;}


;}

;


;}
$r}
sub append_new_pc_dereference ($$) {
my ($self, $variableTypeArg) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document

            ->
create_pc_dereference

                ($variableTypeArg);
  $self->
append_child
 ($r);



;}


;}

;


;}
$r}
sub append_new_pc_reference ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document

            ->
create_pc_reference
;
  $self->
append_child
 ($r);



;}


;}

;


;}
$r}
sub append_new_pc_expression ($$) {
my ($self, $operatorArg) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document

            ->
create_pc_expression
 ($operatorArg);
  $self->
append_child
 ($r);



;}


;}

;


;}
$r}
sub append_new_assignment ($$$) {
my ($self, $leftArg, $rightArg) = @_;
my $r;

{

for 
my $arg ([leftArg => $leftArg], [rightArg => $rightArg]) {
  if ({
    atom => 1, tokens => 1, inlineContainer => 1, assignment => 
1
,
    inlineUnparsed => 1, variable => 1, stringLiteral => 
1
,
    list => 
1
, arrayRefLiteral => 
1
, hashRefLiteral => 
1
,
  }->{$arg->[1]->
local_name
}) {
    if ($arg->[1]->
parent_node
) {
      
report Message::Util::PerlCode::ManakaiPCException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_new_assignment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#IN_USE_NODE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCCodeUnits', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#childNode' => $arg->[1], 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => $arg->[0];

;
    }
  } else {
    
report Message::Util::PerlCode::ManakaiPCException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#parentNode' => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_new_assignment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#BAD_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCCodeUnits', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#childNode' => $arg->[1], 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => $arg->[0];

;
  }
} # left/right



{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
create_element_ns

                                      (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'assignment');
  $r->
left_code
 ($leftArg);
  $r->
right_code
 ($rightArg);
  $self->
append_child
 ($r);



;}


;}

;


;}
$r}
sub append_new_pc_apply ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
create_pc_apply
;
  $self->
append_child
 ($r);



;}


;}

;


;}
$r}
sub append_new_pc_function_call ($$$) {
my ($self, $packageArg, $localNameArg) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document

            ->
create_pc_function_call

                ($packageArg, $localNameArg);
  $self->
append_child
 ($r);



;}


;}

;


;}
$r}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCCodeUnits>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCCodeUnits>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/12/pc/>}->{q<*>}->{q<Message::Util::PerlCode::ManakaiPCCodeUnits>} = 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<*>}->{q<Message::Util::PerlCode::ManakaiPCCodeUnits>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCCodeUnits>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PerlStatement;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCStatement;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCodeInlines',
'Message::Util::IFLatest::PerlCode',
'Message::Util::IFLatest::PerlCodeInlines',
'Message::Util::IFLatest::PerlStatement';
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


$r = $self->SUPER::stringify;
$r .= ";\n" if length $r;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCStatement>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCStatement>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<statement>}->{q<Message::Util::PerlCode::ManakaiPCStatement>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCStatement>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PerlCodeInlines;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCCodeInlines;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCodeUnits',
'Message::Util::IFLatest::PerlCodeInlines';
sub append_code_fragment ($$) {
my ($self, $codeArg) = @_;

{

if 
({
  atom => 1, tokens => 1, inlineContainer => 1, assignment => 
1
,
  inlineUnparsed => 1, variable => 1, stringLiteral => 
1
,
  list => 
1
, arrayRefLiteral => 
1
, hashRefLiteral => 
1
,
}->{$codeArg->
local_name
}) {
  if ($codeArg->
parent_node
) {
    
report Message::Util::PerlCode::ManakaiPCException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#IN_USE_NODE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCCodeInlines', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#childNode' => $codeArg;

;
  }
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $self->
owner_document

         ->
adopt_node
 ($codeArg);
    $self->
append_child
 ($codeArg);
  


;}


;}

;
} else {
  
report Message::Util::PerlCode::ManakaiPCException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#parentNode' => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'append_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#BAD_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCCodeInlines', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#childNode' => $codeArg;

;
}


;}
}
sub append_code ($$) {
my ($self, $codeArg) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
owner_document
->
create_element_ns

                                      (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'inlineUnparsed');
  $r->
text_content
 ($codeArg);
  $self->
append_child
 ($r);



;}


;}

;


;}
$r}
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
@child = @{$self->
child_nodes
};
  for my $child (@child) {
    if ($child->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#' and
        
$child->
local_name eq 
'inlineContainer' and
        1 == @child) {
      $r .= '(' . $child->stringify . ')';
    } else {
      $r .= $child->stringify;
    }
  }



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCCodeInlines>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCCodeInlines>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<inlineContainer>}->{q<Message::Util::PerlCode::ManakaiPCCodeInlines>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCCodeInlines>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PerlBlock;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPerlBlock;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCodeStatements',
'Message::Util::IFLatest::PerlBlock',
'Message::Util::IFLatest::PerlCode',
'Message::Util::IFLatest::PerlCodeStatements',
'Message::Util::IFLatest::PerlCodeUnits';
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{

        
  my 
@child = @{$self->
child_nodes
};
  my $label = $self->
label
;
  if (not $label and @child == 1 and 
      $child[0]->
local_name eq 
'block') {
    $r = "\x0A" . $child[0]->stringify . "\x0A";
  } elsif (not $label and @child == 1 and
           $child[0]->
local_name eq 
'unparsed' and
           $child[0]->
text_content
 =~ /^\s*$/) {
    # 
  } else {
    $r = "\x0A";
    for my $child (@child) {
      if ($child->
local_name eq 
'inlineContainer' and
          1 == @child) {
        $r .= '(' . $child->stringify . ')';
      } else {
        $r .= $child->stringify;
      }
    }
    $r .= "\x0A";

    $r = "\n{\n$r\n;}\n" if 2 < length $r;

      $r = "\n" . $label . ':' . $r if $label;
    }
  


;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPerlBlock>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPerlBlock>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<block>}->{q<Message::Util::PerlCode::ManakaiPerlBlock>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPerlBlock>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PerlCodeBlocks;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCCodeBlocks;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCodeStatements',
'Message::Util::IFLatest::PerlCodeBlocks',
'Message::Util::IFLatest::PerlCodeStatements',
'Message::Util::IFLatest::PerlCodeUnits';
sub stringify ($) {
my ($self) = @_;
my $r = '';

{

my 
@child = @{$self->
child_nodes
};
if (@child == 1 and 
    {
      block => 
1
, blockContainer => 
1
,
    }->{$child[0]->
local_name
}) {
  $r = $child[0]->stringify;
} else {
  for my $child (@child) {
    if ($child->
local_name eq 
'inlineContainer' and
        1 == @child) {
      $r .= '(' . $child->stringify . ')';
    } else {
      $r .= $child->stringify;
    }
  }
}


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCCodeBlocks>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCCodeBlocks>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<blockContainer>}->{q<Message::Util::PerlCode::ManakaiPCCodeBlocks>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCCodeBlocks>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PCDereference;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCDereference;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCodeInlines',
'Message::Util::IFLatest::PCDereference',
'Message::Util::IFLatest::PerlCode',
'Message::Util::IFLatest::PerlCodeInlines';
sub variable_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'variableType');
  $r = '' unless defined $r;



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $given) {
    $self->
set_attribute_ns

             ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'pc:variableType', $given);
  } else {
    $self->
remove_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'variableType');
  }



;}


;}

;


;}
}
}
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
variable_type
 . '{';
  A: for my $child (@{$self->
child_nodes
}) {
    next A unless $child->
node_type
 == 
1
;
    $r .= $child;
  }
  $r .= '}';



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCDereference>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCDereference>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<dereference>}->{q<Message::Util::PerlCode::ManakaiPCDereference>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCDereference>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PCReference;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCReference;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCodeInlines',
'Message::Util::IFLatest::PCReference',
'Message::Util::IFLatest::PerlCode',
'Message::Util::IFLatest::PerlCodeInlines';
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = '\(undef)';
  no warnings 'uninitialized';
  A: for my $child (@{$self->
child_nodes
}) {
    next A unless $child->
node_type
 ==
                  
1
;
    $r = $child;
    unless ({
      
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#variable'
 => 
1
,
    }->{$child->
namespace_uri
.
        $child->
local_name
}) {
      $r = '\('.$r.')';
    }
    last A;
  }



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCReference>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCReference>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<reference>}->{q<Message::Util::PerlCode::ManakaiPCReference>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCReference>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PCApply;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCApply;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCodeInlines',
'Message::Util::IFLatest::PCApply',
'Message::Util::IFLatest::PerlCode',
'Message::Util::IFLatest::PerlCodeInlines';
sub function ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  A: 
for my $child (@{$self->
child_nodes
}) {
    next A unless $child->
node_type
 == 
1
;
    $r = $child;
    last A;
  }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCApply', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'function';
}
}
sub argument ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$x;
  A: for my $child (@{$self->
child_nodes
}) {
    next A unless $child->
node_type
 == 
1
;
    if ($x) {
      $r = $child;
      last A;
    } else {
      $x = 
1
;
    }
  }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCApply', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'argument';
}
}
sub indirect ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$x = 0;
  A: for my $child (@{$self->
child_nodes
}) {
    next A unless $child->
node_type
 == 
1
;
    if ($x++ == 2) {
      $r = $child;
      last A;
    }
  }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCApply', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'indirect';
}
}
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$f;
  my $arg;
  my $obj;
  no warnings 'uninitialized';
  A: for my $child (@{$self->
child_nodes
}) {
    next A unless $child->
node_type
 == 
1
;
    if (not defined $f) {
      $f = ''.$child;
    } elsif (not defined $arg) {
      $arg = ''.$child;
    } else {
      $obj = ''.$child;
      last A;
    }
  }

  $r = $f;
  $r .= ' ' . $obj if defined $obj;

  if ({
        'die' => 
1
,
        'last' => 
1
,
        'next' => 
1
,
        'redo' => 
1
,
        'return' => 
1
,
        'warn' => 
1
,
      }->{$r}) {
    $r .= ' ' . $arg;
  } else {
    $r .= ' (' . $arg . ')';
  }



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCApply>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCApply>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<apply>}->{q<Message::Util::PerlCode::ManakaiPCApply>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCApply>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PCExpression;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCExpression;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCodeInlines',
'Message::Util::IFLatest::PCExpression',
'Message::Util::IFLatest::PerlCode',
'Message::Util::IFLatest::PerlCodeInlines';
sub operator ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'operator');
  $r = '' unless defined $r;



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $given) {
    $self->
set_attribute_ns

             ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'pc:operator', $given);
  } else {
    $self->
remove_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'operator');
  }



;}


;}

;


;}
}
}
sub operand_number ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = @{$self->
child_nodes
};



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCExpression', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'operand_number';
}
}
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
@r;
  no warnings 'uninitialized';
  A: for my $child (@{$self->
child_nodes
}) {
    next A unless $child->
node_type
 == 
1
;
    my $xuri = $child->
namespace_uri

             . $child->
local_name
;
    push @r, [$child.'', $child, $xuri];
  }
  if (@r > 1) {
    my $op = $self->
operator
;
    for (@r) {
      if ($_->[2] ne 
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#expression' and 
not {
        
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#apply'
 => 
1
,
        
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#arrayRefLiteral'
 => 
1
,
        
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#atom'
 => 
1
,
        
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#dereference'
 => 
1
,
        
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#hashRefLiteral'
 => 
1
,
        
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#numberLiteral'
 => 
1
,
        
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#stringLiteral'
 => 
1
,
        
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#tokens'
 => 
1
,
        
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#variable'
 => 
1
,
      }->{$_->[2]}) {
        $_ = '(' . $_->[0] . ')';
      } elsif ($_->[2] eq 
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#expression' and
      
(not {
        '**'  => {'->' => 
1
},
        '=~'  => {'->' => 
1
},
        '!~'  => {'->' => 
1
},
        '*'   => {'->' => 
1
, '*' => 
1
},
        '/'   => {'->' => 
1
},
        '%'   => {'->' => 
1
},
        'x'   => {'->' => 
1
},
        '+'   => {'->' => 
1
, '*' => 
1
, '+' => 
1
, '-' => 
1
},
        '-'   => {'->' => 
1
, '*' => 
1
},
        '.'   => {'->' => 
1
},
        '<'   => {'->' => 
1
},
        '>'   => {'->' => 
1
},
        '<='  => {'->' => 
1
},
        '>='  => {'->' => 
1
},
        'lt'  => {'->' => 
1
},
        'gt'  => {'->' => 
1
},
        'le'  => {'->' => 
1
},
        'gr'  => {'->' => 
1
},
        '=='  => {'->' => 
1
},
        '!='  => {'->' => 
1
},
        '<=>' => {'->' => 
1
},
        'eq'  => {'->' => 
1
},
        'ne'  => {'->' => 
1
},
        'cmp' => {'->' => 
1
},
        '&&'  => {'->' => 
1
, '&&' => 
1
},
        '||'  => {'->' => 
1
, '||' => 
1
},
        '..'  => {'->' => 
1
},
        '='   => {'->' => 
1
},
        ','   => {'->' => 
1
, ',' => 
1
, '=>' => 
1
},
        '=>'  => {'->' => 
1
, ',' => 
1
, '=>' => 
1
},
        'and' => {'->' => 
1
, 'and' => 
1
},
        'or'  => {'->' => 
1
, 'or' => 
1
},
      }->{$op}->{$_->[1]->
operator
}) and
      $_->[1]->
operand_number
 > 1) {
        $_ = '(' . $_->[0] . ')';
      } else {
        $_ = $_->[0];
      }
    }
    $op = ' '.$op unless {
      ',' => 
1
,
      '->' => 
1
,
      '..' => 
1
,
      '...' => 
1
,
    }->{$op};
    $op = $op.' ' unless {
      '->' => 
1
,
      '..' => 
1
,
      '...' => 
1
,
    }->{$op};
    $r = join $op, @r;
  } elsif (@r) {
    $r = $r[0]->[0];
  } elsif ($self->
operator eq 
',') {
    $r = '()';
  } else {
    $r = 'undef';
  }



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCExpression>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCExpression>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<expression>}->{q<Message::Util::PerlCode::ManakaiPCExpression>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCExpression>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PerlAssignment;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCAssignment;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCode',
'Message::Util::IFLatest::PerlAssignment',
'Message::Util::IFLatest::PerlCode';
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
left_code
->stringify
     . ' = '
     . $self->
right_code
->stringify;



;}


;}

;


;}
$r}
sub left_code ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  F: 
for my $child (@{$self->
child_nodes
}) {
    if ($child->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#' and
        
$child->
local_name eq 
'left') {
      $r = $child->
last_child
;
      last F;
    }
  }



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $self->
owner_document
->
adopt_node
 ($given);
  F: {
    for my $child (@{$self->
child_nodes
}) {
      if ($child->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#' and
          
$child->
local_name eq 
'left') {
        $child->
text_content
 ('');
        $child->
append_child
 ($given);
        last F;
      }
    }
    my $node = $self->
owner_document

                    ->
create_element_ns

                           (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'left');
    $node->
append_child
 ($given);
    $self->
append_child
 ($node);
  }



;}


;}

;


;}
}
}
sub right_code ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  F: 
for my $child (@{$self->
child_nodes
}) {
    if ($child->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#' and
        
$child->
local_name eq 
'right') {
      $r = $child->
last_child
;
      last F;
    }
  }



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $self->
owner_document
->
adopt_node
 ($given);
  F: {
    for my $child (@{$self->
child_nodes
}) {
      if ($child->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#' and
          
$child->
local_name eq 
'right') {
        $child->
text_content
 ('');
        $child->
append_child
 ($given);
        last F;
      }
    }
    my $node = $self->
owner_document

                    ->
create_element_ns

                           (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'right');
    $node->
append_child
 ($given);
    $self->
append_child
 ($node);
  }



;}


;}

;


;}
}
}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCAssignment>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCAssignment>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<assignment>}->{q<Message::Util::PerlCode::ManakaiPCAssignment>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCAssignment>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PCCondition;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCCondition;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCodeInlines',
'Message::Util::IFLatest::PCCondition',
'Message::Util::IFLatest::PerlCode',
'Message::Util::IFLatest::PerlCodeInlines';
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  A: 
for my $child (@{$self->
child_nodes
}) {
    next A unless $child->
node_type
 == 
1
;
    $r .= $child;
  }



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCCondition>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCCondition>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/12/pc/>}->{q<condition>}->{q<Message::Util::PerlCode::ManakaiPCCondition>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCCondition>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PCBlock;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCBlock;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCodeStatements',
'Message::Util::IFLatest::PCBlock',
'Message::Util::IFLatest::PerlCode',
'Message::Util::IFLatest::PerlCodeStatements',
'Message::Util::IFLatest::PerlCodeUnits';
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{

        
  my 
@child = @{$self->
child_nodes
};
  my $label = $self->
label
;

    $r = "\x0A";
    for my $child (@child) {
      if ($child->
local_name eq 
'inlineContainer' and
          1 == @child) {
        $r .= '(' . $child->stringify . ')';
      } else {
        $r .= $child->stringify;
      }
    }
    $r .= "\x0A";
    $r .= ';' unless @child;

    $r = "\n{\n$r\n}\n";

      $r = "\n" . $label . ':' . $r . '# ' . $label . "\n"
        if length $label;

  


;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCBlock>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCBlock>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/12/pc/>}->{q<block>}->{q<Message::Util::PerlCode::ManakaiPCBlock>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCBlock>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PCWhile;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCWhile;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCode',
'Message::Util::IFLatest::PCWhile',
'Message::Util::IFLatest::PerlCode';
sub label ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'label');
  $r = '' unless defined $r;



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $given) {
    $self->
set_attribute_ns

             ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'pc:label', $given);
  } else {
    $self->
remove_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'label');
  }



;}


;}

;


;}
}
}
sub condition ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


{

local $Error::Depth = $Error::Depth + 1;

{


  no 
warnings 'uninitialized';
  A: for my $__child (@{$self->
child_nodes
}) {
    if ($__child->
node_type
 == 
1 and
        
$__child->
namespace_uri eq 
'http://suika.fam.cx/~wakaba/archive/2005/12/pc/' and
        $__child->
local_name eq 
'condition') {
      $r = $__child;
      last A;
    }
  }



;}


;}

;


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCWhile', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'condition';
}
}
sub block ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


{

local $Error::Depth = $Error::Depth + 1;

{


  no 
warnings 'uninitialized';
  A: for my $__child (@{$self->
child_nodes
}) {
    if ($__child->
node_type
 == 
1 and
        
$__child->
namespace_uri eq 
'http://suika.fam.cx/~wakaba/archive/2005/12/pc/' and
        $__child->
local_name eq 
'block') {
      $r = $__child;
      last A;
    }
  }



;}


;}

;


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCWhile', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'block';
}
}
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = 'while (';
  my $cond = $self->
condition
;
  if ($cond) {
    $r .= $cond->stringify;
  } else {
    $r .= '0';
  }
  $r .= ') ';
  my $block = $self->
block
;
  if ($block) {
    $r .= $block->stringify;
  } else {
    $r .= "{ }\n";
  }

  my $label = $self->
label
;
  $r = "\n" . $label . ': ' . $r . ' # ' . $label . "\n"
    if length $label;



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCWhile>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCWhile>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<while>}->{q<Message::Util::PerlCode::ManakaiPCWhile>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCWhile>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PCChoose;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCChoose;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCode',
'Message::Util::IFLatest::PCChoose',
'Message::Util::IFLatest::PerlCode';
sub get_when ($$) {
my ($self, $index) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$i = 0;
  no warnings 'uninitialized';
  A: for my $child (@{$self->
child_nodes
}) {
    if ($child->
node_type
 == 
1 and
        
$child->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#' and
        
$child->
local_name eq 
'when' and
        ++$i == $index) {
      $r = $child;
      last A;
    }
  }



;}


;}

;


;}
$r}
sub append_new_pc_when ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$od = $self->
owner_document
;
  $r = $od->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'when');
  my $cond = $od->
create_element_ns

                      (
'http://suika.fam.cx/~wakaba/archive/2005/12/pc/'
, 'condition');
  $r->
append_child
 ($cond);
  my $block = $od->
create_element_ns

                      (
'http://suika.fam.cx/~wakaba/archive/2005/12/pc/'
, 'block');
  $r->
append_child
 ($block);
  $self->
insert_before
 ($r, $self->
otherwise
);



;}


;}

;


;}
$r}
sub otherwise ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


{

local $Error::Depth = $Error::Depth + 1;

{


  no 
warnings 'uninitialized';
  A: for my $__child (@{$self->
child_nodes
}) {
    if ($__child->
node_type
 == 
1 and
        
$__child->
namespace_uri eq 
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#' and
        $__child->
local_name eq 
'otherwise') {
      $r = $__child;
      last A;
    }
  }



;}


;}

;


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCChoose', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'otherwise';
}
}
sub append_new_pc_otherwise ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
otherwise
;
  unless ($r) {
    my $od = $self->
owner_document
;
    $r = $od->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'otherwise');
    my $block = $od->
create_element_ns

                      (
'http://suika.fam.cx/~wakaba/archive/2005/12/pc/'
, 'block');
    $r->
append_child
 ($block);
    $self->
append_child
 ($r);
  }



;}


;}

;


;}
$r}
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  S: 
for my $child (@{$self->
child_nodes
}) {
    next S unless $child->
node_type
 == 
1
;
    next S unless $child->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
;
    my $ln = $child->
local_name
;
    if ($ln eq 'when') {
      $r .= 'els' if length $r;
      $r .= $child->stringify;
    } elsif ($ln eq 'otherwise') {
      $r .= $child->stringify;
      last S;
    }
  } # S



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCChoose>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCChoose>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<choose>}->{q<Message::Util::PerlCode::ManakaiPCChoose>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCChoose>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PCWhen;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCWhen;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCode',
'Message::Util::IFLatest::PCWhen',
'Message::Util::IFLatest::PerlCode';
sub condition ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


{

local $Error::Depth = $Error::Depth + 1;

{


  no 
warnings 'uninitialized';
  A: for my $__child (@{$self->
child_nodes
}) {
    if ($__child->
node_type
 == 
1 and
        
$__child->
namespace_uri eq 
'http://suika.fam.cx/~wakaba/archive/2005/12/pc/' and
        $__child->
local_name eq 
'condition') {
      $r = $__child;
      last A;
    }
  }



;}


;}

;


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCWhen', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'condition';
}
}
sub block ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


{

local $Error::Depth = $Error::Depth + 1;

{


  no 
warnings 'uninitialized';
  A: for my $__child (@{$self->
child_nodes
}) {
    if ($__child->
node_type
 == 
1 and
        
$__child->
namespace_uri eq 
'http://suika.fam.cx/~wakaba/archive/2005/12/pc/' and
        $__child->
local_name eq 
'block') {
      $r = $__child;
      last A;
    }
  }



;}


;}

;


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCWhen', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'block';
}
}
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = 'if (';
  my $cond = $self->
condition
;
  if ($cond) {
    $r .= $cond->stringify;
  } else {
    $r .= '0';
  }
  $r .= ') ';
  my $block = $self->
block
;
  if ($block) {
    $r .= $block->stringify;
  } else {
    $r .= "{ }\n";
  }



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCWhen>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCWhen>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<when>}->{q<Message::Util::PerlCode::ManakaiPCWhen>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCWhen>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PCOtherwise;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCOtherwise;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCode',
'Message::Util::IFLatest::PCOtherwise',
'Message::Util::IFLatest::PerlCode';
sub block ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{


{

local $Error::Depth = $Error::Depth + 1;

{


  no 
warnings 'uninitialized';
  A: for my $__child (@{$self->
child_nodes
}) {
    if ($__child->
node_type
 == 
1 and
        
$__child->
namespace_uri eq 
'http://suika.fam.cx/~wakaba/archive/2005/12/pc/' and
        $__child->
local_name eq 
'block') {
      $r = $__child;
      last A;
    }
  }



;}


;}

;


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCOtherwise', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'block';
}
}
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$block = $self->
block
;
  if ($block) {
    $r = 'else ' . $block->stringify;
  }



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCOtherwise>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCOtherwise>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<otherwise>}->{q<Message::Util::PerlCode::ManakaiPCOtherwise>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCOtherwise>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PerlIf;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCIf;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCode',
'Message::Util::IFLatest::PerlCode',
'Message::Util::IFLatest::PerlIf';
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$tcode = $self->
true_code
;
  my $fcode = $self->
false_code
;
  my $ccode = $self->
condition
;
  if (defined $tcode) {
    if (defined $fcode) {
      $r = q<if (> . $ccode->stringify . q<) {> . $tcode->stringify .
           q<} else {> . $fcode->stringify . qq<}\n>;
    } else {
      $r = q<if (> . $ccode->stringify . q<) {> . $tcode->stringify .
           qq<}\n>;
    }
  } else {
    $r = q<unless (> . $ccode->stringify . q<) {> . $fcode->stringify .
         qq<}\n>;
  }



;}


;}

;


;}
$r}
sub condition ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  F: 
for my $child (@{$self->
child_nodes
}) {
    if ($child->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#' and
        
$child->
local_name eq 
'condition') {
      $r = $child->
last_child
;
      last F;
    }
  }



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $self->
owner_document
->
adopt_node
 ($given);
  F: {
    for my $child (@{$self->
child_nodes
}) {
      if ($child->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#' and
          
$child->
local_name eq 
'condition') {
        $child->
text_content
 ('');
        $child->
append_child
 ($given);
        last F;
      }
    }
    my $node = $self->
owner_document

                    ->
create_element_ns

                           (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'condition');
    $node->
append_child
 ($given);
    $self->
append_child
 ($node);
  }



;}


;}

;


;}
}
}
sub true_code ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  F: 
for my $child (@{$self->
child_nodes
}) {
    if ($child->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#' and
        
$child->
local_name eq 
'tr'.'ue') {
      $r = $child->
last_child
;
      last F;
    }
  }



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $self->
owner_document
->
adopt_node
 ($given);
  F: {
    for my $child (@{$self->
child_nodes
}) {
      if ($child->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#' and
          
$child->
local_name eq 
'tr'.'ue') {
        $child->
text_content
 ('');
        $child->
append_child
 ($given);
        last F;
      }
    }
    my $node = $self->
owner_document

                    ->
create_element_ns

                           (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'tr'.'ue');
    $node->
append_child
 ($given);
    $self->
append_child
 ($node);
  }



;}


;}

;


;}
}
}
sub false_code ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  F: 
for my $child (@{$self->
child_nodes
}) {
    if ($child->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#' and
        
$child->
local_name eq 
'fal'.'se') {
      $r = $child->
last_child
;
      last F;
    }
  }



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $self->
owner_document
->
adopt_node
 ($given);
  F: {
    for my $child (@{$self->
child_nodes
}) {
      if ($child->
namespace_uri eq 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#' and
          
$child->
local_name eq 
'fal'.'se') {
        $child->
text_content
 ('');
        $child->
append_child
 ($given);
        last F;
      }
    }
    my $node = $self->
owner_document

                    ->
create_element_ns

                           (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'fal'.'se');
    $node->
append_child
 ($given);
    $self->
append_child
 ($node);
  }



;}


;}

;


;}
}
}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCIf>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCIf>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<if>}->{q<Message::Util::PerlCode::ManakaiPCIf>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCIf>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PCFunctionCall;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCFunctionCall;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::PerlCode::ManakaiPCCodeInlines',
'Message::Util::IFLatest::PCFunctionCall',
'Message::Util::IFLatest::PerlCode',
'Message::Util::IFLatest::PerlCodeInlines';
sub variable_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'variableType');
  $r = '' unless defined $r;



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $given) {
    $self->
set_attribute_ns

             ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'pc:variableType', $given);
  } else {
    $self->
remove_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'variableType');
  }



;}


;}

;


;}
}
}
sub package_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'packageName');
  $r = '' unless defined $r;



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $given) {
    $self->
set_attribute_ns

             ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'pc:packageName', $given);
  } else {
    $self->
remove_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'packageName');
  }



;}


;}

;


;}
}
}
sub pc_local_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'localName');
  $r = '' unless defined $r;



;}


;}

;


;}
$r;
} else {my ($self, $given) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $given) {
    $self->
set_attribute_ns

             ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'pc:localName', $given);
  } else {
    $self->
remove_attribute_ns
 ('http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#', 'localName');
  }



;}


;}

;


;}
}
}
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r .= $self->
variable_type
;
  my $v = $self->
package_name
;
  $r .= $v . '::' if length $v;
  $r .= $self->
pc_local_name
;

  my @arg;
  no warnings 'uninitialized';
  A: for my $child (@{$self->
child_nodes
}) {
    next A unless $child->
node_type
 == 
1
;
    push @arg, ''.$child;
  }
  my $arg = join ', ', @arg;
  if ({
        'die' => 
1
,
        'last' => 
1
,
        'next' => 
1
,
        'redo' => 
1
,
        'return' => 
1
,
        'warn' => 
1
,
      }->{$r}) {
    $r .= ' ' . $arg;
  } else {
    $r .= ' (' . $arg . ')';
  }



;}


;}

;


;}
$r}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCFunctionCall>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCFunctionCall>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMElement>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<call>}->{q<Message::Util::PerlCode::ManakaiPCFunctionCall>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCFunctionCall>} = {'o0',
['parent'],
's1a',
['child'],
's2hh',
['attr'],
'w0',
['od']};
package Message::Util::IFLatest::PCDocument;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCDocument;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::DOM::TreeCore::ManakaiDOMDocument',
'Message::DOM::IFLatest::Document',
'Message::DOM::IFLatest::Node',
'Message::Util::IFLatest::PCDocument';
sub create_pc_literal ($$) {
my ($self, $value) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(ref $value eq 'HASH' or ref $value eq 'ARRAY') {
    $r = $self->
create_element_ns

             (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, ref $value eq 'HASH' ? 'hashRefLiteral'
                                             : 'arrayRefLiteral');
    for my $v (ref $value eq 'HASH' ? %$value : @$value) {
      my $vo;
      if (UNIVERSAL::isa ($v, 
'Message::Util::IFLatest::PerlCode'
)) {
        $vo = $self->
adopt_node
 ($v);
      } else {
        $vo = $self->
create_pc_literal
 ($v);
      }
      $r->
append_child
 ($vo);
    }
  } elsif (defined $value) {
    $r = $self->
create_element_ns

           (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'stringLiteral');
    $r->
text_content
 ($value);
  } else {
    $r = $self->
create_element_ns

                  (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'atom');
    $r->
text_content
 ('undef');
  }



;}


;}

;


;}
$r}
sub create_pc_number_literal ($$) {
my ($self, $value) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_element_ns

           (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'numberLiteral');
  $r->
text_content
 ($value);



;}


;}

;


;}
$r}
sub create_pc_variable ($$$$) {
my ($self, $variableType, $packageName, $localName) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'variable');
  if (not $variableType and not $packageName and
      $localName =~ s/^(\\?[\$\@%&*])//) {
    $variableType = $1;
  }
  $r->
variable_type
 ($variableType)
                                        if defined $variableType;
  $r->
package_name
 ($packageName)
                                        if defined $packageName;
  $r->
pc_local_name
 ($localName);



;}


;}

;


;}
$r}
sub create_pc_dereference ($$) {
my ($self, $variableType) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_element_ns

                (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'dereference');
  $r->
variable_type
 ($variableType);



;}


;}

;


;}
$r}
sub create_pc_reference ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_element_ns

                (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'reference');



;}


;}

;


;}
$r}
sub create_pc_expression ($$) {
my ($self, $operator) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'expression');
  $r->
operator
 ($operator);



;}


;}

;


;}
$r}
sub create_pc_apply ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'apply');



;}


;}

;


;}
$r}
sub create_pc_function_call ($$$) {
my ($self, $package, $localName) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'apply');
  my $func = $self->
create_pc_variable

                      ('', $package, $localName);
  $r->
append_child
 ($func);



;}


;}

;


;}
$r}
sub create_pc_statement ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'statement');



;}


;}

;      


;}
$r}
sub create_pc_block ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/12/pc/'
, 'block');



;}


;}

;


;}
$r}
sub create_pc_choose ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'choose');



;}


;}

;


;}
$r}
sub create_pc_while ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'while');
  $r->
append_child

        ($self->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/12/pc/'
, 'condition'));
  $r->
append_child

        ($self->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/12/pc/'
, 'block'));



;}


;}

;


;}
$r}
sub create_perl_sub ($;$) {
my ($self, $subName) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'sub');
  $r->
add_perl_name
 ($subName) if defined $subName;



;}


;}

;


;}
$r}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCDocument>}->{has_feature} = {'core',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCDocument>} = 15.1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::TreeCore::ManakaiDOMDocument>}->{compat_class_by_type}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#>}->{q<file>}->{q<Message::Util::PerlCode::ManakaiPCDocument>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCDocument>} = {'s1a',
['child'],
'v1h',
['do'],
'w0',
['impl']};
package Message::Util::IFLatest::PCImplementation;
our $VERSION = 20060401.0538;
package Message::Util::PerlCode::ManakaiPCImplementation;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::DOM::DOMCore::ManakaiDOMImplementation',
'Message::Util::Error::DOMException::ManakaiDefaultExceptionHandler',
'Message::Util::IFLatest::PCImplementation';
sub create_perl_file ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_document
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'file')
            ->
document_element
;



;}


;}

;


;}
$r}
sub create_perl_package ($$) {
my ($self, $packageName) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_document
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'file')
            ->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'package');
  $r->
package_name
 ($packageName);



;}


;}

;


;}
$r}
sub _perl_comment ($$) {
my ($self, $str) = @_;
my $r = '';

{


$r = $str;
$r =~ s/\n/\n## /g;
$r =~ s/\n## $/\n/s;
$r .= "\n" unless $r =~ /\n$/;
$r = q<## > . $r;


;}
$r}
sub _rfc_3_3_3_9_date_time ($$) {
my ($self, $perlDate) = @_;
my $r = '';

{

my 
@time = gmtime $perlDate;
$r = sprintf q<%04d-%02d-%02dT%02d:%02d:%02d+00:00>,
             $time[5] + 1900, $time[4] + 1, @time[3,2,1,0];


;}
$r}
sub _version_date_time ($$) {
my ($self, $perlDate) = @_;
my $r = '';

{

my 
@time = gmtime $perlDate;
$r = sprintf q<%04d%02d%02d.%02d%02d>,
             $time[5] + 1900, $time[4] + 1, @time[3,2,1];


;}
$r}
sub perl_literal ($$) {
my ($self, $val) = @_;
my $r = '';

{

unless 
(defined $val) {
  $r = q<undef>;
} elsif (ref $val eq 'ARRAY') {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = q<[> . 
Message::Util::PerlCode::ManakaiPCImplementation->perl_list
 ($val) . q<]>;
  


;}


;}

;
} elsif (ref $val eq 'HASH') {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = q<{>
       . 
Message::Util::PerlCode::ManakaiPCImplementation->perl_list

           ([map {$_ => $val->{$_}} sort {$a cmp $b} keys %$val])
       . q<}>;
  


;}


;}

;
} elsif (ref $val eq 'manakai::code') {
  $r = $$val;
} else {
  $val =~ s/(['\\])/\\$1/g;
  $r = q<'> . $val . q<'>;
}


;}
$r}
sub perl_list ($$) {
my ($self, $val) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = join (qq<,\n>, map {
Message::Util::PerlCode::ManakaiPCImplementation->perl_literal
 ($_)} @{$val});



;}


;}

;


;}
$r}
sub create_perl_sub ($;$) {
my ($self, $subName) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_document
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'file')
            ->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'sub');
  $r->
add_perl_name
 ($subName) if defined $subName;



;}


;}

;


;}
$r}
sub create_perl_unparsed_code ($;$) {
my ($self, $codeArg) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_document
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'file')
            ->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'unparsed');
  $r->
text_content
 ($codeArg) if defined $codeArg;



;}


;}

;


;}
$r}
sub create_perl_inline_container ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_document
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'file')
        ->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'inlineContainer');



;}


;}

;


;}
$r}
sub create_perl_inline_unparsed_code ($;$) {
my ($self, $codeArg) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_document
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'file')
         ->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'inlineUnparsed');
  $r->
text_content
 ($codeArg) if defined $codeArg;



;}


;}

;


;}
$r}
sub create_perl_bare ($$) {
my ($self, $codeArg) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_document
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'file')
            ->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'tokens');
  $r->
text_content
 ($codeArg) if defined $codeArg;



;}


;}

;


;}
$r}
sub create_perl_atom ($$) {
my ($self, $codeArg) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_document
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'file')
            ->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'atom');
  $r->
text_content
 ($codeArg) if defined $codeArg;



;}


;}

;


;}
$r}
sub create_perl_string_literal ($$) {
my ($self, $stringArg) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_document
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'file')
         ->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'stringLiteral');
  $r->
text_content
 ($stringArg);



;}


;}

;


;}
$r}
sub create_perl_variable ($$$$) {
my ($self, $variableType, $packageName, $localName) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_document
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'file')
            ->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'variable');
  if (not $variableType and not $packageName and
      $localName =~ s/^(\\?[\$\@%&*])//) {
    $variableType = $1;
  }
  $r->
variable_type
 ($variableType)
                                        if defined $variableType;
  $r->
package_name
 ($packageName)
                                        if defined $packageName;
  $r->
pc_local_name
 ($localName);



;}


;}

;


;}
$r}
sub create_perl_block ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_document
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'file')
            ->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'block');



;}


;}

;


;}
$r}
sub create_perl_block_container ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_document
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'file')
          ->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'blockContainer');



;}


;}

;


;}
$r}
sub create_perl_statement ($;$) {
my ($self, $codeArg) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_document
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'file')
            ->
create_element_ns
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'statement');
  if (defined $codeArg) {
    $r->
append_bare
 ($codeArg);
  }



;}


;}

;


;}
$r}
sub create_perl_if ($$;$$) {
my ($self, $conditionArg, $trueArg, $falseArg) = @_;
my $r;

{

for 
my $arg ([conditionArg => $conditionArg]) {
  if ({
    atom => 1, tokens => 1, inlineContainer => 1, assignment => 
1
,
    inlineUnparsed => 1, variable => 1, stringLiteral => 
1
,
    list => 
1
, arrayRefLiteral => 
1
, hashRefLiteral => 
1
,
  }->{$arg->[1]->
local_name
}) {
    if ($arg->[1]->
parent_node
) {
      
report Message::Util::PerlCode::ManakaiPCException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'create_perl_if', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#IN_USE_NODE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCImplementation', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#childNode' => $arg->[1], 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => $arg->[0];

;
    }
  } else {
    
report Message::Util::PerlCode::ManakaiPCException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#parentNode' => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'create_perl_if', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#BAD_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCImplementation', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#childNode' => $arg->[1], 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => $arg->[0];

;
  }
} # c

for my $arg ([trueArg => $trueArg],
             [falseArg => $falseArg]) {
  next unless $arg->[1];
  if ({
        blockContainer => 
1
,
      }->{$arg->[1]->
local_name
}) {
    if ($arg->[1]->
parent_node
) {
      
report Message::Util::PerlCode::ManakaiPCException -object => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'create_perl_if', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#IN_USE_NODE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCImplementation', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#childNode' => $arg->[1], 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => $arg->[0];

;
    }
  } else {
    
report Message::Util::PerlCode::ManakaiPCException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#parentNode' => $self, '-type' => 'HIERARCHY_REQUEST_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'create_perl_if', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#BAD_CHILD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::PerlCode::ManakaiPCImplementation', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#childNode' => $arg->[1], 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => $arg->[0];

;
  }
} # t/f



{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
create_document
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'file')
            ->
create_element_ns

                  (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'if');
  $r->
condition
 ($conditionArg) if $conditionArg;
  $r->
true_code
 ($trueArg) if $trueArg;
  $r->
false_code
 ($falseArg) if $falseArg;



;}


;}

;


;}
$r}
$Message::DOM::ImplFeature{q<Message::Util::PerlCode::ManakaiPCImplementation>}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode>}->{q<1.0>} ||= 1;
$Message::DOM::ImplFeature{q<Message::Util::PerlCode::ManakaiPCImplementation>}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode>}->{q<>} = 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCImplementation>}->{has_feature} = {'',
{'',
'1'},
'http://suika.fam.cx/www/2006/feature/min',
{'',
'1',
'3.0',
'1'},
'http://suika.fam.cx/www/2006/feature/uri',
{'',
'1',
'4.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#minimum',
{'',
'1',
'3.0',
'1'},
'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'},
'xml',
{'',
'1',
'1.0',
'1',
'2.0',
'1',
'3.0',
'1'},
'xmlversion',
{'',
'1',
'1.0',
'1',
'1.1',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCImplementation>} = 16.1;
$Message::DOM::ManakaiDOMImplementationSource::SourceClass{q<Message::Util::PerlCode::ManakaiPCImplementation>} = 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::DOM::DOMFeature::ManakaiMinimumImplementation>}->{compat_class}->{q<Message::Util::PerlCode::ManakaiPCImplementation>} = 1;
$Message::Util::Grove::ClassProp{q<Message::Util::PerlCode::ManakaiPCImplementation>} = {'v1h',
['lpmi']};
package Message::Util::IFLatest::PCException;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::Error';

sub ___error_def () {
  \%Message::Util::IFLatest::PCException::ErrorDef
}

sub HIERARCHY_REQUEST_ERR () {
3}
$Message::Util::IFLatest::PCException::ErrorDef{'HIERARCHY_REQUEST_ERR'} = {'description',
'An attempt is made to break the hierarchy.',
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code',
'3'};
$Message::Util::IFLatest::PCException::ErrorDef{'HIERARCHY_REQUEST_ERR'}->{'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'}->{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#BAD_CHILD_ERR'} = {'description',
'An attempt is made to append a node as a child whose type is not allowed.'};
$Message::Util::IFLatest::PCException::ErrorDef{'HIERARCHY_REQUEST_ERR'}->{'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'}->{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#IN_USE_NODE_ERR'} = {'description',
'An attempt is made to append a node that has already been used elsewhere.'};
sub NOT_SUPPORTED_ERR () {
9}
$Message::Util::IFLatest::PCException::ErrorDef{'NOT_SUPPORTED_ERR'} = {'description',
'An attempt is made to do something the implementation does not support.',
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code',
'9'};
$Message::Util::IFLatest::PCException::ErrorDef{'NOT_SUPPORTED_ERR'}->{'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'}->{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#UNSUPPORTED_OPERATOR_ERR'} = {'description',
'Operator "%p (name => {http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#operator});" is not supported'};
package Message::Util::PerlCode::ManakaiPCException;
our $VERSION = 20060401.0538;
push our @ISA, 'Message::Util::Error::DOMException::Exception';
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::PerlCode::ManakaiPCException>}->{has_feature} = {'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/perlcode',
{'',
'1',
'1.0',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::PerlCode::ManakaiPCException>} = 1;
for ($Message::DOM::IFLatest::Document::, $Message::DOM::IFLatest::Node::){}
## License: <http://suika.fam.cx/~wakaba/archive/2004/8/18/license#Perl+MPL>
1;
