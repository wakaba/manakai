#!/usr/bin/perl 
## This file is automatically generated
## 	at 2005-11-15T09:44:12+00:00,
## 	from file "lib/Message/Util/Error/DOMException.dis",
## 	module <http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException>,
## 	for <http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl>.
## Don't edit by hand!
use strict;
require Message::Util::Error;
package Message::Util::Error::DOMException;
our $VERSION = 20051115.0944;
sub MDOM_DEBUG_BUG ();
sub NOT_SUPPORTED_ERR ();
sub NO_MODIFICATION_ALLOWED_ERR ();
sub AUTOLOAD {


        my $al = our $AUTOLOAD;
        $al =~ s/.+:://;
        if ({'MDOM_DEBUG_BUG', 'Message::Util::Error::DOMException::CoreException::MDOM_DEBUG_BUG', 'NOT_SUPPORTED_ERR', 'Message::Util::Error::DOMException::CoreException::NOT_SUPPORTED_ERR', 'NO_MODIFICATION_ALLOWED_ERR', 'Message::Util::Error::DOMException::CoreException::NO_MODIFICATION_ALLOWED_ERR'}->{$al}) {
          no strict 'refs';
          *{$AUTOLOAD} = \&{{'MDOM_DEBUG_BUG', 'Message::Util::Error::DOMException::CoreException::MDOM_DEBUG_BUG', 'NOT_SUPPORTED_ERR', 'Message::Util::Error::DOMException::CoreException::NOT_SUPPORTED_ERR', 'NO_MODIFICATION_ALLOWED_ERR', 'Message::Util::Error::DOMException::CoreException::NO_MODIFICATION_ALLOWED_ERR'}->{$al}};
          goto &{$AUTOLOAD};
        } else {
          require Carp;
          Carp::croak (qq<Can't locate method "$AUTOLOAD">);
        }
      
}
sub import {


        my $self = shift;
        if (@_) {
          local $Exporter::ExportLevel = $Exporter::ExportLevel + 1;
          $self->SUPER::import (@_);
          for (grep {not /\W/} @_) {
            eval qq{$_};
          }
        }
      
}
our %EXPORT_TAG = ('CoreExceptionCode', ['MDOM_DEBUG_BUG', 'NOT_SUPPORTED_ERR', 'NO_MODIFICATION_ALLOWED_ERR']);
our @EXPORT_OK = ('MDOM_DEBUG_BUG', 'NOT_SUPPORTED_ERR', 'NO_MODIFICATION_ALLOWED_ERR');
use Exporter; push our @ISA, 'Exporter';
package Message::Util::Error::DOMException::ManakaiDOMExceptionOrWarning;
our $VERSION = 20051115.0944;
push our @ISA, 'Message::Util::Error', 'Error', 'Message::Util::Error';
sub text ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$template;
if (defined $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
} and
    defined $self->{
'-def'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
}
         ->{$self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
}}
         ->{
'description'
}) {
  $template = $self->{
'-def'
}
         ->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
}
         ->{$self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
}}
         ->{
'description'
};
} elsif (defined $self->{
'-def'
}
         ->{
'description'
}) {
  $template = $self->{
'-def'
}
         ->{
'description'
};
} else {
  $template = $self->{
'-type'
};
}
$r = $self->_FORMATTER_PACKAGE_->new
          ->replace ($template, param => $self);


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::Error::DOMException::ManakaiDOMExceptionOrWarning', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'text';
}
}
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


$r = $self->SUPER::stringify;
if (defined $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class'
}) {
  if (defined $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method'
}) {
    $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class'
} . '->' .
         $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method'
} . ': ' . $r;
  } elsif (defined $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr'
}) {
    $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class'
} . '->' .
         $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr'
} . ' (' .
         $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on'
} . '): ' . $r;
  } else {
    $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class'
} . ': ' . $r;
  }
}
if (defined $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name'
}) {
  $r = 'Parameter "' . $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name'
} . '": ' . $r;
}


;}
$r}
sub code ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


$r = $self->{
'-def'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code'
};


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::Error::DOMException::ManakaiDOMExceptionOrWarning', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'code';
}
}
sub value ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


$r = $self->{
'-def'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code'
};


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::Error::DOMException::ManakaiDOMExceptionOrWarning', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'value';
}
}
sub type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = $self->{-type};


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::Error::DOMException::ManakaiDOMExceptionOrWarning', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'type';
}
}
sub subtype ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
};


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::Error::DOMException::ManakaiDOMExceptionOrWarning', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'subtype';
}
}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
'0+' => 'value', 
fallback => 1;
$Message::DOM::ClassFeature{q<Message::Util::Error::DOMException::ManakaiDOMExceptionOrWarning>} = {};
$Message::DOM::ClassPoint{q<Message::Util::Error::DOMException::ManakaiDOMExceptionOrWarning>} = 0;
package Message::Util::Error::DOMException::Exception;
our $VERSION = 20051115.0944;
push our @ISA, 'Message::Util::Error::DOMException::ManakaiDOMExceptionOrWarning';
sub text ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$template;
if (defined $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
} and
    defined $self->{
'-def'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
}
         ->{$self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
}}
         ->{
'description'
}) {
  $template = $self->{
'-def'
}
         ->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
}
         ->{$self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
}}
         ->{
'description'
};
} elsif (defined $self->{
'-def'
}
         ->{
'description'
}) {
  $template = $self->{
'-def'
}
         ->{
'description'
};
} else {
  $template = $self->{
'-type'
};
}
$r = $self->_FORMATTER_PACKAGE_->new
          ->replace ($template, param => $self);


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::Error::DOMException::Exception', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'text';
}
}
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


$r = $self->SUPER::stringify;
if (defined $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class'
}) {
  if (defined $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method'
}) {
    $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class'
} . '->' .
         $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method'
} . ': ' . $r;
  } elsif (defined $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr'
}) {
    $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class'
} . '->' .
         $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr'
} . ' (' .
         $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on'
} . '): ' . $r;
  } else {
    $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class'
} . ': ' . $r;
  }
}
if (defined $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name'
}) {
  $r = 'Parameter "' . $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name'
} . '": ' . $r;
}


;}
$r}
sub code ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


$r = $self->{
'-def'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code'
};


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::Error::DOMException::Exception', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'code';
}
}
sub value ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


$r = $self->{
'-def'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code'
};


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::Error::DOMException::Exception', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'value';
}
}
sub type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = $self->{-type};


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::Error::DOMException::Exception', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'type';
}
}
sub subtype ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
};


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::Error::DOMException::Exception', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'subtype';
}
}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
'0+' => 'value', 
fallback => 1;
$Message::DOM::ClassFeature{q<Message::Util::Error::DOMException::Exception>} = {};
$Message::DOM::ClassPoint{q<Message::Util::Error::DOMException::Exception>} = 0;
package Message::Util::Error::DOMException::ManakaiDOMWarning;
our $VERSION = 20051115.0944;
push our @ISA, 'Message::Util::Error::DOMException::ManakaiDOMExceptionOrWarning';
$Message::DOM::ClassFeature{q<Message::Util::Error::DOMException::ManakaiDOMWarning>} = {};
$Message::DOM::ClassPoint{q<Message::Util::Error::DOMException::ManakaiDOMWarning>} = 0;
package Message::Util::Error::DOMException::CoreException;
our $VERSION = 20051115.0944;
push our @ISA, 'Message::Util::Error::DOMException::Exception';
sub MDOM_DEBUG_BUG {
3}
sub NO_MODIFICATION_ALLOWED_ERR {
7}
sub NOT_SUPPORTED_ERR {
9}
sub ___error_def {

{'MDOM_DEBUG_BUG', {'description', 'Unexpected case occurs. In general, this exception is not reported. If the implementation has a bug and something unexpected is occur, this exception is raised. Applications <kwd:MUST-NOT> try to catch this exception. If this exception is raised, please report to the author of that module. {NOTE:: New assertion mechanism and subtype <X::DOMMain|ASSERTION_ERR> has been introduced; it should be used instead of throwing <X::MDOMX:MDOM_DEBUG_BUG> directly. }', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code', '3', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype', {'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ASSERTION_ERR', {'description', 'Failure to pass an assertion.'}}}, 'NOT_SUPPORTED_ERR', {'description', 'The implementation does not support the action.', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code', '9', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype', {'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_ATTR_NOT_IMPLEMENTED', {'description', 'The attribute "%p (name => {http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class}, suffix => {.} );%p (name => {http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr});" %p (name => {http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on}, prefix => {(}, suffix => {)}); has not been implemented yet'}, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED', {'description', 'The method "%p (name => {http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class}, suffix => {.} );%p (name => {http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method});" has not been implemented yet'}}}, 'NO_MODIFICATION_ALLOWED_ERR', {'description', 'An attempt is made to modify read-only object.', 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code', '7', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype', {'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', {'description', 'Attribute "%p (name => {http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class}, suffix => {.} );%p (name => {http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr});" is read-only'}}}}
}
$Message::DOM::ClassFeature{q<Message::Util::Error::DOMException::CoreException>} = {};
$Message::DOM::ClassPoint{q<Message::Util::Error::DOMException::CoreException>} = 0;
package Message::Util::Error::DOMException::ManakaiDefaultExceptionHandler;
our $VERSION = 20051115.0944;
push our @ISA, 'Message::Util::Error::MUErrorTarget';
sub ___report_error ($$) {
my ($self, $err) = @_;

{

if 
($err->isa (
'Message::Util::Error::DOMException::Exception'
)) {
  $err->
throw
;
} else {
## TODO: Implement warning reporting
  warn $err->stringify;
}


;}
}
$Message::DOM::ClassFeature{q<Message::Util::Error::DOMException::ManakaiDefaultExceptionHandler>} = {};
$Message::DOM::ClassPoint{q<Message::Util::Error::DOMException::ManakaiDefaultExceptionHandler>} = 0;
push @Message::Util::Error::ISA, 'Message::Util::Error' unless @Message::Util::Error::ISA;
for ($Error::, $Message::Util::Error::MUErrorTarget::){}
## License: <http://suika.fam.cx/~wakaba/archive/2004/8/18/license#Perl+MPL>
1;
