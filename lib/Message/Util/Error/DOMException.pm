#!/usr/bin/perl 
## This file is automatically generated
## 	at 2006-11-05T02:39:46+00:00,
## 	from file "Error/DOMException.dis",
## 	module <http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException>,
## 	for <http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl>.
## Don't edit by hand!
use strict;
require Message::Util::Error;
package Message::Util::Error::DOMException;
our $VERSION = 20061105.0239;
sub NOT_SUPPORTED_ERR ();
sub NO_MODIFICATION_ALLOWED_ERR ();
sub AUTOLOAD {


        my $al = our $AUTOLOAD;
        $al =~ s/.+:://;
        if ({'NOT_SUPPORTED_ERR',
'Message::Util::IF::ICoreException::NOT_SUPPORTED_ERR',
'NO_MODIFICATION_ALLOWED_ERR',
'Message::Util::IF::ICoreException::NO_MODIFICATION_ALLOWED_ERR'}->{$al}) {
          no strict 'refs';
          *{$AUTOLOAD} = \&{{'NOT_SUPPORTED_ERR',
'Message::Util::IF::ICoreException::NOT_SUPPORTED_ERR',
'NO_MODIFICATION_ALLOWED_ERR',
'Message::Util::IF::ICoreException::NO_MODIFICATION_ALLOWED_ERR'}->{$al}};
          goto &{$AUTOLOAD};
        } else {
          require Carp;
          Carp::croak (qq<Can't locate method "$AUTOLOAD">);
        }
      
}
sub import {


        my $self = shift;
        if (@_) {
          local $Exporter::ExportLevel = $Exporter::ExportLevel + 1;
          $self->SUPER::import (@_);
          for (grep {not /\W/} @_) {
            eval qq{$_};
          }
        }
      
}
our %EXPORT_TAG = ('CoreExceptionCode',
['NOT_SUPPORTED_ERR',
'NO_MODIFICATION_ALLOWED_ERR']);
our @EXPORT_OK = ('NOT_SUPPORTED_ERR',
'NO_MODIFICATION_ALLOWED_ERR');
use Exporter; push our @ISA, 'Exporter';
package Message::Util::Error::DOMException::Exception;
our $VERSION = 20061105.0239;
push our @ISA, 'Message::Util::Error';
sub text ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

my 
$template;
if (defined $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
} and
    defined $self->{
'-def'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
}
         ->{$self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
}}
         ->{
'description'
}) {
  $template = $self->{
'-def'
}
         ->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
}
         ->{$self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
}}
         ->{
'description'
};
} elsif (defined $self->{
'-def'
}
         ->{
'description'
}) {
  $template = $self->{
'-def'
}
         ->{
'description'
};
} else {
  $template = $self->{
'-type'
};
}
$r = $self->_FORMATTER_PACKAGE_->new
          ->replace ($template, param => $self);


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::Error::DOMException::Exception', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'text';
}
}
sub stringify ($) {
my ($self) = @_;
my $r = '';

{


$r = $self->SUPER::stringify;
if (defined $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class'
}) {
  my $cls = $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class'
};
  $cls =~ s/\G.+?:://g;
  if (defined $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method'
}) {
    $r = $cls . '.' . $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method'
} . ': ' . $r;
  } elsif (defined $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr'
}) {
    $r = $cls . '.' . $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr'
} . ' (' .
         $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on'
} . '): ' . $r;
  } else {
    $r = $cls . ': ' . $r;
  }
}
if (defined $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name'
}) {
  $r = 'Parameter /' . $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name'
} . '/: ' . $r;
}


}
$r}
sub code ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


$r = $self->{
'-def'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code'
};


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::Error::DOMException::Exception', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'code';
}
}
sub value ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


$r = $self->{
'-def'
}->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code'
};


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::Error::DOMException::Exception', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'value';
}
}
sub type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = $self->{
'-type'
};


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::Error::DOMException::Exception', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'type';
}
}
sub subtype ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = $self->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
};


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::Error::DOMException::Exception', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'subtype';
}
}
use overload 
bool => sub () {1}, 
'""' => 'stringify', 
'0+' => 'value', 
fallback => 1;
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::Error::DOMException::Exception>}->{has_feature} = {};
$Message::DOM::ClassPoint{q<Message::Util::Error::DOMException::Exception>} = 0;
package Message::Util::IF::ICoreException;
our $VERSION = 20061105.0239;
push our @ISA, 'Message::Util::Error';

sub ___error_def () {
  \%Message::Util::IF::ICoreException::ErrorDef
}

sub NO_MODIFICATION_ALLOWED_ERR () {
7}
$Message::Util::IF::ICoreException::ErrorDef{'NO_MODIFICATION_ALLOWED_ERR'} = {'description',
'An attempt is made to modify read-only object.',
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code',
'7'};
$Message::Util::IF::ICoreException::ErrorDef{'NO_MODIFICATION_ALLOWED_ERR'}->{'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'}->{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR'} = {'description',
'Attribute "%p (name => {http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class}, suffix => {.} );%p (name => {http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr});" is read-only'};
sub NOT_SUPPORTED_ERR () {
9}
$Message::Util::IF::ICoreException::ErrorDef{'NOT_SUPPORTED_ERR'} = {'description',
'The implementation does not support the action.',
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code',
'9'};
$Message::Util::IF::ICoreException::ErrorDef{'NOT_SUPPORTED_ERR'}->{'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'}->{'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_ATTR_NOT_IMPLEMENTED'} = {'description',
'The attribute "%p (name => {http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class}, suffix => {.} );%p (name => {http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr});" %p (name => {http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on}, prefix => {(}, suffix => {)}); has not been implemented yet'};
$Message::Util::IF::ICoreException::ErrorDef{'NOT_SUPPORTED_ERR'}->{'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'}->{'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED'} = {'description',
'The method "%p (name => {http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class}, suffix => {.} );%p (name => {http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method});" has not been implemented yet'};
package Message::Util::Error::DOMException::CoreException;
our $VERSION = 20061105.0239;
push our @ISA, 'Message::Util::Error::DOMException::Exception',
'Message::Util::IF::ICoreException';
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::Error::DOMException::CoreException>}->{has_feature} = {};
$Message::DOM::ClassPoint{q<Message::Util::Error::DOMException::CoreException>} = 0;
package Message::Util::Error::DOMException::ManakaiDefaultExceptionHandler;
our $VERSION = 20061105.0239;
push our @ISA, 'Message::Util::Error::MUErrorTarget';
sub ___report_error ($$) {
my ($self, $err) = @_;

{

if 
($err->isa (
'Message::Util::Error::DOMException::Exception'
)) {
  $err->
throw
;
} else {
  warn $err->stringify;
}


}
}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::Error::DOMException::ManakaiDefaultExceptionHandler>}->{has_feature} = {};
$Message::DOM::ClassPoint{q<Message::Util::Error::DOMException::ManakaiDefaultExceptionHandler>} = 0;
for ($Message::Util::Error::MUErrorTarget::){}
## License: <http://suika.fam.cx/~wakaba/archive/2004/8/18/license#Perl+MPL>
1;
