Module:
  @QName:
    Err:Core
  @FullName:
    @@lang: en
    @@@:
      Manakai Error Implementation

  @DISPerl:packageName:
    Message::Util::Error

  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/
  
  @Description:
    @@lang:en
    @@@:
      This module provides the manakai implementation of
      error reporting system.

  @DISCore:author: DISCore|Wakaba
  @License:
    license:Perl+MPL
  @Date:
    $Date: 2006/12/31 09:12:03 $
  
  @Require:
    @@Module:
      @@@QName:
        DISlib:DISPerl
    @@Module:
      @@@QName:
        DISlib:DISIDL
    @@Module:
      @@@QName: UtilMuf|Muf2003

Namespace:
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @DISlib:
    http://suika.fam.cx/~wakaba/archive/2004/dis/
  @DISPerl:
    http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#
  @Err:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/
  @ecore:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/
  @kwd:
    http://suika.fam.cx/~wakaba/archive/2005/rfc2119/
  @lang:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#
  @UtilMuf:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Formatter/

ResourceDef:
  @QName:
    Err:
  @rdf:type:
    dis:ModuleGroup
  @FullName:
    @@lang:en
    @@@:
      The manakai error reporting modules
  @DISPerl:packageName:
    Message::Util::Error::
  @DISPerl:interfacePackageName:
    Message::Util::IF::

ElementTypeBinding:
  @Name: enDesc
  @ElementType:
    dis:Description
  @ShadowContent:
    @@lang:en

ElementTypeBinding:
  @Name: IFQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: IFISA
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsISA
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

## -- The "Error"

ResourceDef:
  @QName: Err|ErrorAny
  @enDesc:
    <Q::Err|ErrorClass> and <Q::Err|ErrorInterface>.
  @rdfs:subClassOf: DISLang|AnyClass
  @rdf:type: rdfs|Class

ResourceDef:
  @QName: Err|ErrorClass
  @enDesc:
    An <Q::Err|ErrorClass> is a class that inherits the <Perl::Error>
    class or the <Perl::Error> itself.
  @rdfs:subClassOf: Err|ErrorAny
  @rdfs:subClassOf: DISPerl|Class
  @rdf:type: rdfs|Class

ResourceDef:
  @QName: Err|ErrorInterface
  @enDesc:
    The <Q::Err|ErrorInterface> is an interface that shows what
    a <Q::Err|ErrorClass> <kwd:MUST> implement.
  @rdfs:subClassOf: Err|ErrorAny
  @rdfs:subClassOf: DISPerl|Interface
  @rdf:type: rdfs|Class

ResourceDef:
  @rdf:type:
    @@@@: dis|MultipleResource
    @@@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass
  @resourceFor: ManakaiDOM|ForIF
  @resourceFor: ManakaiDOM|ForClass

  @rdf:type:
    @@@: Err|ErrorInterface
    @@ForCheck: ManakaiDOM|ForIF

  @rdf:type:
    @@@: Err|ErrorClass
    @@ForCheck: ManakaiDOM|ForClass

  @Implement:
    @@@: ||+||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass

  @IFQName: ErrorInterface
  @ClsQName: Error

  @IFPackName: Error
  @ClsPackName: Error

  @IFFileName: Error-interface
  @ClsFileName: Error

  @enDesc:
    <PerlModule::Error>.

  @Method:
    @@Name: throw
    @@enDesc:
      Throws (or rethrows) the error.
    @@Return:

  @Method:
    @@Name: stacktrace
    @@enDesc:
      Returns a stacktrace string.
    @@Return:
      @@@Type: DISLang|String
      @@@enDesc:
        A stacktrace string.  The value of the variable
        <Perl::$Error::Debug> at the time of the creation of the error
        controls the content.
      @@@InCase:
        @@@@Label:
          @@@@@lang:en
          @@@@@@:
            <Perl::$Error::Debug> is non-<Perl::0>
        @@@@enDesc:
          A string created by calling <Perl::Carp::longmess>.
      @@@InCase:
        @@@@Label:
          @@@@@lang:en
          @@@@@@:
            <Perl::$Error::Debug> is <Perl::0>
        @@@@enDesc:
          The text of the error appended with the file name and
          line number where the error was created, providing the 
          text does not end with a newline.
  @Attr:
    @@Name: object
    @@enDesc: The object the error is associated with.
    @@Get:
    @@Type: DISPerl|BlessedRef
  @Attr:
    @@Name: file
    @@enDesc: The file where the error was created.
    @@Type: DISPerl|String
    @@Get:
  @Attr:
    @@Name: line
    @@enDesc: The line where the error was created.
    @@Type: DISPerl|Number
    @@Get:
  @Attr:
    @@Name: text
    @@enDesc: The textual description of the error.
    @@Type: DISLang|String
    @@Get:

  @Method:
    @@Operator:
      @@@ContentType: DISCore|QName
      @@@@: DISPerl|AsStringMethod
    @@enDesc:
      Converts the object into a string.  This method <kwd:MAY>
      simple return the same as the <A::Error.text> method or 
      it <kwd:MAY> append more information such as file name
      and line number.
    @@Return:

  @Method:
    @@Operator:
      @@@ContentType: DISPerl|Perl
      @@@@: 0+
    @@Name: value
    @@enDesc:
      Returns a value that can be associated with the error.

      {eg:: If an error was created due to the failure of a 
            system call, then this method may return the
            numeric value of <Perl::$!> at the time.
      }
    @@Return:
##Error

ElementTypeBinding:
  @Name: Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Attribute

ElementTypeBinding:
  @Name: Get
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|AttributeGet

ElementTypeBinding:
  @Name: Set
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|AttributeSet

ElementTypeBinding:
  @Name: IFPackName
  @ElementType:
    DISPerl:packageName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsPackName
  @ElementType:
    DISPerl:packageName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: IFFileName
  @ElementType:
    dis:FileName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsFileName
  @ElementType:
    dis:FileName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:Method

ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:MethodReturn

ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:MethodParameter

ElementTypeBinding:
  @Name: nullCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase
    @@Value:
      @@@is-null:1

ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase

## -- The "Message::Util::Error"

ResourceDef:
  @QName: Err|MUErrorAny
  @enDesc:
    <Q::Err|MUErrorClass> and <Q::Err|MUErrorInterface>.
  @rdfs:subClassOf: Err|ErrorAny
  @rdf:type: rdfs|Class

ResourceDef:
  @QName: Err|MUErrorClass
  @enDesc:
    An <Q::Err|MUErrorClass> is a class that inherits the
    <Perl::Message::Util::Error> class or the <Perl::Error> itself.
  @rdfs:subClassOf: Err|MUErrorAny
  @rdfs:subClassOf: Err|ErrorClass
  @rdf:type: rdfs|Class

ResourceDef:
  @QName: Err|MUErrorInterface

  @rdfs:subClassOf: Err|MUErrorAny
  @rdfs:subClassOf: Err|ErrorInterface
  @rdf:type: rdfs|Class

ResourceDef:
  @rdf:type:
    @@@@: dis|MultipleResource
    @@@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass
  @resourceFor: ManakaiDOM|ForIF
  @resourceFor: ManakaiDOM|ForClass

  @rdf:type:
    @@@: Err|MUErrorInterface
    @@ForCheck: ManakaiDOM|ForIF

  @rdf:type:
    @@@: Err|MUErrorClass
    @@ForCheck: ManakaiDOM|ForClass

  @Implement:
    @@@: ||+||ManakaiDOM|ForIF
    @@ContentType: DISCore|TFPQNames
    @@ForCheck: ManakaiDOM|ForClass

  @IFQName: MUErrorInterface
  @ClsQName: MUError

  @IFPackName:
    Message::Util::Error
  @ClsPackName: 
    Message::Util::Error

  @IFISA: ErrorInterface
  @ClsISA: Error

  @IFFileName: Message/Util/Error/module-interface
  @ClsFileName: Message/Util/Error/module-class

  @ecore:textFormatter: MUErrorFormatter

  @Method:
    @@Operator:
      @@@@: ErrorDefMethod
      @@@ContentType: DISCore|QName
    @@enDesc:
      This method <kwd:MUST> be a contant function that returns
      a reference to the hash that contains the definitions 
      of errors.
    @@Return:
      @@@Type: DISPerl|HASH
      @@@enDesc:
        A hash reference containing error definitions.

        Hash keys are the names of errors and
        hash values are their definition respectively.
        A hash value is also a hash reference which
        contains property name-value pairs.

  @Method:
    @@ForCheck: ManakaiDOM|ForClass
    @@Operator: DISPerl|AsStringMethod
    @@enDesc:
      Converts the object into a string.  This method <kwd:MAY>
      simple return the same as the <A::Error.text> method or
      it <kwd:MAY> append more information such as file name
      and line number.

      The <M::MUError.stringify> method returns a string
      generated by simple join <A::Error.text> and short
      trace message on file name and line number.

      If the <Perl::$Message::Util::Error::VERBOSE> flag exhibits <DOM::true>,
      then the stacktrace message is extended so that any
      <QUOTE::outer> subroutines that leads the method in which
      an error is thrown being called.  This flag might be useful
      for application developers.

      If the <Perl::$Error::Debug> flag exhibits <DOM::true>, then
      the stacktrace message is more extended so that any
      <QUOTE::inner> method calls as well as <QUOTE::outer>
      ones are exposed.  It is intended for convinience of 
      <QUOTE::dis> module developers.
    @@Return:
##MUError

ResourceDef:
  @rdf:type:
    @@@@: dis|MultipleResource
    @@@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass
  @resourceFor: ManakaiDOM|ForClass

  @ClsQName: MUErrorFormatter

  @rdf:type:
    @@@: DISLang|Class
    @@ForCheck: ManakaiDOM|ForClass

  @Implement: Muf2003|MUFTextFormatter
  @ISA: Muf2003|ManakaiMUFTextFormatter

  @ClsPackName: 
    Message::Util::Error::formatter

  @enDesc:
    In addition to rules defined in <IF::Muf2003::MUFTextFormatter2003>, 
    the formatter <Class::MUErrorFormatter> defines a few rules.

  @RuleDef:
    @@Name: name
    @@enDesc:
      The error type name, i.e. the value of <CODE::-type> parameter.

  @RuleDef:
    @@Name: p
    @@enDesc:
      The value of an error parameter.
    @@RuleParam:
      @@@Name: name
      @@@dataType: DISCore|String
      @@@enDesc:
        The name of the error parameter.
    @@RuleParam:
      @@@Name: empty
      @@@dataType: DISCore|String
      @@@enDesc:
        If the error parameter value is an empty string, then 
        this rule parameter value is returned instead.
      @@@nullCase:
        @@@@enDesc:
          A string <CODE::<lt>empty<gt>> is used.
    @@RuleParam:
      @@@Name: undef
      @@@dataType: DISCore|String
      @@@enDesc:
        If the error parameter value is <DOM::null>, then
        this rule parameter value is returned instead.
      @@@nullCase:
        @@@@enDesc:
          A string <CODE::<lt>undef<gt>> is used.

  @RuleDef:
    @@Name: t
    @@enDesc:
      The value of an error parameter.

        {NOTE:: This rule is obsolete in favor of <CODE::p>.
    @@RuleParam:
      @@@Name: name
      @@@dataType: DISCore|String
      @@@enDesc:
        The name of the error parameter.
    @@RuleParam:
      @@@Name: empty
      @@@dataType: DISCore|String
      @@@enDesc:
        If the error parameter value is an empty string, then 
        this rule parameter value is returned instead.
      @@@nullCase:
        @@@@enDesc:
          A string <CODE::<lt>empty<gt>> is used.
    @@RuleParam:
      @@@Name: undef
      @@@dataType: DISCore|String
      @@@enDesc:
        If the error parameter value is <DOM::null>, then
        this rule parameter value is returned instead.
      @@@nullCase:
        @@@@enDesc:
          A string <CODE::<lt>undef<gt>> is used.
##MUErrorFormatter

ElementTypeBinding:
  @Name: RuleDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass
    @@rdf:type: Muf2003|RuleDefClass

ElementTypeBinding:
  @Name: RuleParam
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: Muf2003|RuleParameter

SPropDef:
  @QName: ecore|textFormatter
  @enDesc:
    A <IF::Muf2003:MUFTextFormatter2003> that 
    is used to generate <A::Error.text>.
  @rdfs:domain: Err|MUFError
  @rdfs:range: Muf2003|MUFTextFormatter2003
  @multipleProperties: DISCore|Single
  @dataType: DISCore|QName

ResourceTypeDef:
  @QName: ecore|AnyErrorCode
  @enDesc:
    A <Q::ecore:AnyErrorCode> is anything which identifies the kind
    of an error.  For example, the class that extends the 
    <Class::MUError> class is an <Q::ecore:AnyErrorCode>.

RPropDef:
  @QName: ecore|message
  @enDesc:
    A template for error message.
  @rdfs:domain: ecore|AnyErrorCode
  @rdfs:subClassOf: dis|Def

SPropDef:
  @QName: ecore|defaultMessage
  @enDesc:
    A template for default error message.
  
      {NOTE:: Here, <QUOTE::default> implies that the message
              is intended for application developers rather
              than end users.
      }
  @rdfs:subPropertyOf: ecore|message
  @multipleProperties: DISCore|OrderedList
  @dataType: lang|muf

ResourceDef:
  @QName: lang|muf
  @rdf:type: DISCore|LexicalType
  @rdfs:subClassOf: DISCore|NSString
  @ImplNote:
    @@lang:en
    @@@:
      Should be moved to some other module?

## -- Properties of error objects

SPropDef:
  @QName: ecore|hasParameter
  @FullName:
    @@lang:en
    @@@: parameter for exception
  @enDesc:
    The <P::ecore:hasParameter> property describes that the subject 
    resource, an error code, can take a parameter of the object resource.
  @rdfs:domain: ecore|AnyErrorCode
  @rdfs:range: ecore|Parameter
  @dataType: DISCore|QName
  @multipleProperties: DISCore|OrderedList

ResourceTypeDef:
  @QName: ecore|Parameter
  @FullName:
    @@lang:en
    @@@: exception parameter
  @enDesc:
    A <Q::ecore:Parameter> is a parameter of exceptions that can be
    specified when an exception is thrown.

    A <Q::ecore:Parameter> can be associated to one or more
    exception codes by the <Q::ecore:hasParameter> property.
  @rdfs:subClassOf: DISLang|ExceptionParameter

SPropDef:
  @QName: ecore|propKey
  @enDesc:
    Internal property name.
  @rdfs:subPropertyOf: DISPerl|propHashKey
  @dataType: DISCore|String
  @multipleProperties: DISCore|Single

ElementTypeBinding:
  @Name: XWParam
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: ecore|Parameter

XWParam:
  @QName: ecore|stacktrace
  @enDesc:
    The stacktrace text of the error with error message text.

    {NOTE:: This value is managed by the <A::Error>
            class.  Use <A::ErrorInterface.stacktrace>
            attribute to retrieve the value.
    }
  @ecore:propKey: -stacktrace


XWParam:
  @QName: ecore|stacktraceBody
  @enDesc:
    The stacktrace text of the error.
  @ecore:propKey: -stacktrace_

XWParam:
  @QName: ecore|text
  @enDesc:
    The text that describes the error.

    {NOTE:: This property might not be used when the text is 
            generated by the class of the error.  Use
            <A::ErrorInterface.text> attribute.
    }
  @ecore:propKey: -text

XWParam:
  @QName: ecore|package
  @enDesc:
    The Perl package in which an error has occurred.
  @ecore:propKey: -package

XWParam:
  @QName: ecore|file
  @enDesc:
    {NOTE:: Use <A::ErrorInterface.file>.
    }
  @ecore:propKey: -file

XWParam:
  @QName: ecore|line
  @enDesc:
    {NOTE:: Use <A::ErrorInterface.line>.
    }
  @ecore:propKey: -line

XWParam:
  @QName: ecore|object
  @enDesc:
    {NOTE:: Use <A::ErrorInterface.object>.
    }
  @ecore:propKey: -object

XWParam:
  @QName: ecore|value
  @enDesc:
    {NOTE:: Use <A::ErrorInterface.value>.
    }
  @ecore:propKey: -value

XWParam:
  @QName: ecore|def
  @enDesc:
    A reference to the hash that describes the current error.
  @ecore:propKey: -def

XWParam:
  @QName: ecore|description
  @enDesc:
    A description of the error.
  @ecore:propKey: description

XWParam:
  @QName: ecore|type
  @enDesc:
    A text that identifies the kind of the error.
  @ecore:propKey: -type

## -- Exception target

SPropDef:
  @QName: ecore|raises
  @enDesc:
    The <P::ecore:raises> property describes that the subject resource
    would throw an error of type of the object resource.
  @dataType: DISCore|QName
  @multipleProperties: DISCore|UnorderedList

ResourceDef:
  @QName: MUErrorTarget

  @rdf:type: ManakaiDOM|IF

  @enDesc:
    The <Perl::report> statement of the
    <Perl::Message::Util::Error> module calls back the
    <Perl::___report_error> method of the object specified
    in <Perl::-object> named parameter.  The object <kwd:MAY> choose to
    throw an exception based on the information given to
    the method, to report the error in some application dependent manner,
    or to simply ignore it.

  @Method:
    @@Operator: 
      @@@@: ManakaiDOM|MUErrorHandler
      @@@ContentType: DISCore|QName
    @@enDesc:
      This method is called when a <Perl::report> 
      is called on this object.
    @@Param:
      @@@Name: err
      @@@Type: MUError
      @@@enDesc:
        The <CODE::report>ed error object.

        {NOTE:: Application <kwd:MAY> choose to <M::ErrorInterface.throw> this
                error or it <kwd:MAY> choose not to throw it and to
                process the error by its own way.
        }
    @@Return:
      @@@Type: DISPerl|Any
      @@@enDesc:
        The <Perl::report> statement, through which the method is
        invoked, will return this value.
      @@@nullCase:
        @@@@enDesc:
          The <Perl::report> statement will return no value.
##MUErrorTarget

ResourceDef:
  @QName:
    ManakaiDOM:MUErrorHandler
  @rdf:type: DISLang|Operator
  @Description:
    @@lang:en
    @@@:
      A Perl <Perl::___report_error> subroutine called by 
      <PerlModule::Message::Util::Error> exception reporting. 

ResourceDef:
  @QName: ErrorDefMethod
  @PerlName: ___error_def
  @enDesc:
    Objects implementimg the <IF::MessageUtilError>
    interface <kwd:MUST> provide a constant method whose name is 
    <Perl::___error_def> and which returns a reference to hash
    that contains definitions of errors.
  @rdf:type: DISLang|Operator

ElementTypeBinding:
  @Name: PerlName
  @ElementType:
    dis:AppName
  @ShadowContent:
    @@ContentType: lang|Perl

ElementTypeBinding:
  @Name: ResourceTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: rdfs|Class
    @@rdfs:subClassOf: rdfs|Class

ElementTypeBinding:
  @Name: SPropDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      rdf:Property
    @@rdf:type: DISSource|Property
    @@rdf:type: DISSource|ResourceProperty

ElementTypeBinding:
  @Name: RPropDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: rdf|Property
    @@rdf:type: DISSource|Property

## -- Error Class Instance

ResourceDef:
  @QName: ecore|ErrorSimple
  @rdf:type: Err|ErrorClass
  @DISPerl:packageName:
    Error::Simple
  @DISPerl:ISA: ecore|Error

  @enDesc:
    The <Class::ErrorSimple> class can be used to hold simple
    error strings and values.

    {NOTE:: This class is used internally if an <Perl::eval>ed block
            <Perl::die>s with an error what is a plain string.
            Applications can use the name of the class
            to <Perl::catch> such errors.
    }

  @Method:
    @@Operator: DISPerl|NewMethod
    @@enDesc:
      Constructs a new instance of <Class::ErrorSimple>.
    @@Param:
      @@@Name: textArg
      @@@Type: DISPerl|String
      @@@enDesc:
        The value that would be returned by the <A::ErrorInterface.text>
        method.
    
        If the value ends with <QUOTE::at file line 1> as <Perl::$@>
        strings do, this information will be used to set the
        <A::ErrorInterface.file> and <A::ErrorInterface.line> 
        attributes.
    @@Param:
      @@@Name: valueArg
      @@@Type: DISPerl|Number
      @@@enDesc:
        The value that would be returned by the <A::ErrorInterface.value>
        method.
    @@Return:
      @@@Type: ErrorInterface
      @@@actualType: ErrorSimple
  
  @Method:
    @@Operator: DISPerl|AsStringMethod
    @@Return:
      @@@Type: DISPerl|String
##Error::Simple

