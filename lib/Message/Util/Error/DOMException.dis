Module:
  @QName:
    Err:DOMException
  @FullName:
    @@lang: en
    @@@:
      Manakai DOM-Style Error Reporting System Implementation
  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#
  
  @Description:
    @@lang:en
    @@@:
      This module provides the manakai implementation of DOM-style 
      error reporting system build on the top of the 
      <PerlModule::Message::Util::Error>. 

  @DISCore:author: DISCore|Wakaba
  @License:
     license:Perl+MPL
  @Date:
    @@@:
      $Date: 2005/10/02 23:35:34 $
    @@ContentType:
      dis:Date.RCS
  
  @Require:
    @@Module:
      @@@QName:
        DISlib:DISPerl
      @@@WithFor:
        ManakaiDOM:all
    @@Module:
      @@@QName:
        DISlib:DISIDL
      @@@WithFor:
        ManakaiDOM:all
    @@Module:
      @@@QName: Err|DOMException
      @@@WithFor:
        ManakaiDOM:Perl
    @@Module:
      @@@QName: Err|Core
      @@@WithFor: ManakaiDOM|Perl
  @DefaultFor:
    ManakaiDOM:Perl

Namespace:
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @dis2pm:
    http://suika.fam.cx/~wakaba/archive/2004/11/8/dis2pm#
  @DISlib:
    http://suika.fam.cx/~wakaba/archive/2004/dis/
  @disPerl:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--
  @DOMCore:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
  @DOMMain:
    http://suika.fam.cx/~wakaba/archive/2004/dom/main#
  @dx:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#
  @ecore:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/
  @Err:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/
  @kwd:
    http://suika.fam.cx/~wakaba/archive/2005/rfc2119/
  @lang:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @MDOMX:
    http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @MUError:\
  @MUErrorCore:-
  @Perl:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#Perl--
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#

## -- Module group for documentation

ResourceDef:
  @For: =ManakaiDOM|all
  @rdf:type: dis|ModuleGroup

  @QName: dx|ManakaiErrorModules
  @Label:
    @@@: manakai Error Modules
    @@lang:en
  @FileName: Message/Util/errors

  @enDesc:
    The <DFN::manakai Error Modules> is a set of modules that
    provide facilities for error and exception handling.

    The <Class::ecore|Error||ManakaiDOM|Perl> module, which is
    strictly not part of manakai, enables Perl programs
    to throw exceptions and to catch them by <Perl::try> and
    <Perl::catch> syntax.

    The <Class::ecore|MUError||ManakaiDOM|Perl> module
    extends the <Class::ecore|Error||ManakaiDOM|Perl> module
    so that programs can report errors by various ways,
    e.g. via <Class::ecore|Error||ManakaiDOM|Perl>'s exception
    <Perl::throw>ing or via so-called error handler code, through
    the one <Perl::report> statement.

    The <Module::Err|DOMException||ManakaiDOM|Perl> module
    again extends the <Class::ecore|MUError||ManakaiDOM|Perl>
    module and it provides a base implementation for
    DOM-compatible exception system.  Not only it has
    an attribute for DOM error code, it also has a
    property for <QUOTE::sub-code> that describes the 
    situation clearer than the DOM code.  In addition,
    parameters can be defined for each sub-codes.

  @DISCore:module: Err|Core||ManakaiDOM|Perl
  @DISCore:module: Err|DOMException||ManakaiDOM|Perl
##ManakaiErrorModules

ElementTypeBinding:
  @Name: enDesc
  @ElementType:
    dis:Description
  @ShadowContent:
    @@lang:en

ElementTypeBinding:
  @Name: enFN
  @ElementType:
    dis:FullName
  @ShadowContent:
    @@lang:en

## -- Resource types

ResourceTypeDef:
  @QName: AnyExceptionAnyClass
  @FullName:
    @@lang:en
    @@@:
      Any <QUOTE::exception> class or interface
  @Description:
    @@lang:en
    @@@:
      Concrete implementations of any type of <QUOTE::exception>,
      including <QUOTE::error> and <QUOTE::warning>.
  @rdfs:subClassOf: DISLang|AnyClass
  @rdfs:subClassOf: Err|MUErrorAny

ResourceTypeDef:
  @QName: dx|Interface
  @enFN:
    DOM-style exception interface
  @Description:
    @@lang:en
    @@@:
      An exception type.
  @rdfs:subClassOf:
    AnyExceptionAnyClass::ManakaiDOM:all
  @rdfs:subClassOf: Err|MUErrorInterface
  @rdfs:subClassOf: DISLang|Exception

ResourceDef:
  @QName: ManakaiDOM|ExceptionIF
  @AliasFor: dx|Interface
  @For: =ManakaiDOM|all

ResourceTypeDef:
  @QName: AnyExceptionClass
  @FullName:
    @@lang:en
    @@@:
      Any <QUOTE::exception> class
  @Description:
    @@lang:en
    @@@:
      Concrete implementations of any type of <QUOTE::exception>,
      including <QUOTE::error> and <QUOTE::warning>.
  @rdfs:subClassOf:
    AnyExceptionAnyClass::ManakaiDOM:all
  @rdfs:subClassOf: Err|MUErrorClass

ResourceTypeDef:
  @QName: dx|Class
  @enFN: DOM-style exception class
  @Description:
    @@lang:en
    @@@:
      A concrete implementation of an exception type.
  @rdfs:subClassOf:
    AnyExceptionClass::ManakaiDOM:all
  @rdfs:subClassOf: DISLang|Exception

ResourceDef:
  @QName: ManakaiDOM|ExceptionClass
  @AliasFor: dx|Class
  @For: =ManakaiDOM|all

ResourceTypeDef:
  @QName: 
    ManakaiDOM:WarningClass
  @FullName:
    @@lang:en
    @@@: Warning class
  @Description:
    @@lang:en
    @@@:
      A warning type (including its implementation).
  @rdfs:subClassOf:
    AnyExceptionClass::ManakaiDOM:all

ResourceTypeDef:
  @QName: 
    ManakaiDOM:ExceptionOrWarningSubType
  @FullName:
    @@lang:en
    @@@: Exception/warning subtype
  @Description:
    @@lang:en
    @@@:
      A subtype of an exception or warning.

PropDef:
  @QName: 
    ManakaiDOM:exceptionOrWarningParameter
  @FullName:
    @@lang:en
    @@@: Parameter (for an exception or warning)
  @rdfs:domain: 
    ManakaiDOM:Const
  @Description:
    @@lang:en
    @@@:
      Declares the existence of an additional information about the exception.

ResourceTypeDef:
  @QName: 
    DOMMain:XWParameter
  @FullName:
    @@lang:en
    @@@:
      Exception parameter
  @Description:
    @@lang:en
    @@@:
      A parameter that is used to describe exceptions and warnings. 

ElementTypeBinding:
  @Name: ResourceTypeDef
  @ElementType: 
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      rdfs:Class
    @@rdfs:subClassOf: rdfs|Class
    @@For: =ManakaiDOM|all

## -- Throwing of exceptions

PropDef:
  @QName: dx|raises
  @Description:
    @@lang:en
    @@@:
      An exception the method or attribute might raise.
  @multipleProperties: DISCore|OrderedList
  @dataType: dx|XCRef

ResourceDef:
  @QName: ManakaiDOM|raises
  @AliasFor: dx|raises
  @For: =ManakaiDOM|all

PropDef:
  @QName: 
    ManakaiDOM:alwaysWarns
  @Description:
    @@lang:en
    @@@:
      A warning that is reported everytime the method or attribute is called. 
      \
      {NOTE:: By the configuration for warning level, it might not be 
              reported.
      \
      }
  @multipleProperties: DISCore|OrderedList
  @dataType: dx|XCRef

ElementTypeBinding:
  @Name: PropDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      rdf:Property
    @@For: =ManakaiDOM|all

## -- lang:Perl vocabulary

ElementTypeBinding:
  @Name: BlockElementType
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISPerl|BlockElementType
    @@For: =ManakaiDOM|all

LexTypeDef:
  @QName: DISPerl|XWSpecification
  @Description:
    @@lang:en
    @@@:
      A reference to an exception or warning code and 
      optional parameter specification list. 
  @rdfs:subClassOf: DISCore|NSString

BlockElementType:
  @QName:
    disPerl:EXCEPTION
  @Description:
    @@lang:en
    @@@:
      Throws an exception. 
  @dataType: DISPerl|XWSpecification

BlockElementType:
  @QName:
    disPerl:WARNING
  @Description:
    @@lang:en
    @@@:
      Reports a warning. 
  @dataType: DISPerl|XWSpecification

## -- lang:dis vocabulary

TreeElementType:
  @Name: raiseException
  @Description:
    @@lang:en
    @@@:
      Raises an exception.  Content: Same as <Q::ManakaiDOM:raises>.

ElementTypeBinding:
  @Name: TreeElementType
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:TreeElementType
    @@For: =ManakaiDOM|all

## -- References to Exception

LexTypeDef:
  @QName: dx|XCRef
  @enFN: Exception code reference
  @Description:
    @@lang:en
    @@@:
      A reference to an exception or warning code or subcode. 
      \
      - XCodeRef := FQXCodeRef / coderef / subcoderef
      \
      - FQXCodeRef := xref "." coderef ["." subcoderef]
      \
      - xref := <lt>A dis:TFQNames referring an exception or 
                 warning interface or class>
      \
      - coderef := codeq / codenc
      \
      - codeq := <lt>A dis:TFQNames with a prefixed "Type" QName,
                  referring an exception or warning code>
      \
      - codenc := <lt>An unprefixed dis:TypeQName identifying a code 
                   in the null namespace>
      \
      - subcoderef := <lt>A dis:TFQNames referring an exception or warning subcode;
                       it should be prefixed>
  @rdfs:subClassOf: DISCore|NSString

ResourceDef:
  @QName: 
    DOMMain:XCodeRef
  @AliasFor: dx|XCRef
  @For: =ManakaiDOM|all

ElementTypeBinding:
  @Name: LexTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISCore|LexicalType
    @@For: =ManakaiDOM|all

## -- Exception classes

ResourceDef:
  @QName: 
    ManakaiDOM:ManakaiDOMExceptionOrWarning
  @rdf:type: AnyExceptionClass

  @Implement: ecore|MUErrorInterface
  @AppISA:
    @@ContentType:
      lang:Perl
    @@@:
      Message::Util::Error
    @@ImplNote: 
      @@@lang:en
      @@@@:
        <Q::ecore|MUErrorClass>.
  @For:
    ManakaiDOM:Perl

  @Description:
    @@lang:en
    @@@:
      The base class that should be inherited by all manakai 
      DOM-style exception and warning classes.  DOM applications 
      are able to test whether an object is an instance of any 
      manakai DOM-style exception or warning or not. 

  @Attr:
    @@Name:text
    @@Description:
      @@@lang:en
      @@@@:
        Returns a short plain-text message, written in the 
        <CODE::i-default> language, that describes 
        what is happened. 
        \
        {NOTE:: This attribute is also defined in the class 
                <PerlModule::Message::Util::Error> and it is 
                overridden here for the purpose of manakai 
                exception and warning reporting. 
        \
        }
        \
        {NOTE:: This attribute only provides a mechanism for programer 
                to know what is occuring; for reporting error to end 
                user, DOM application should implement its own 
                mechanism with localized message.
        \
        }
    @@Get:
      @@@Type:
        DISLang:String::ManakaiDOM:all
      @@@Description:
        @@@@lang:en
        @@@@@:
          An error message written in <CODE::i-default> language.
      @@@PerlDef:
          my $template;
          if (defined $self->{<Q::MDOMX:subtype>} and
              defined $self->{<Q::MUErrorCore:def>}->{<Q::MDOMX:subtype>}
                   ->{$self->{<Q::MDOMX:subtype>}}
                   ->{<Q::MUError:description>}) {
            $template = $self->{<Q::MUErrorCore:def>}
                   ->{<Q::MDOMX:subtype>}
                   ->{$self->{<Q::MDOMX:subtype>}}
                   ->{<Q::MUError:description>};
          } elsif (defined $self->{<Q::MUErrorCore:def>}
                   ->{<Q::MUError:description>}) {
            $template = $self->{<Q::MUErrorCore:def>}
                   ->{<Q::MUError:description>};
          } else {
            $template = $self->{<Q::MUErrorCore:type>};
          }
          $r = $self->_FORMATTER_PACKAGE_->new
                    ->replace ($template, param => $self);

  @Method:
    @@Operator:
      @@@@:
        DISPerl:AsStringMethod
      @@@ContentType:
        dis:TypeQName
    @@Description:
      @@@lang:en
      @@@@:
        Generates a simple string that describes what kind of error 
        has occured, written in the <CODE::i-default> language. 
        \
        {NOTE:: The <PerlModule::Message::Util::Error> module defines 
                a generic definition of the method and it is overriden 
                here for the purpose of manakai DOM's exception system. 
        \
        }
    @@Return:
      @@@Type:
        DISLang:String::ManakaiDOM:all
      @@@PerlDef:
        $r = $self->SUPER::stringify;
        if (defined $self->{<Q::MDOMX:class>}) {
          if (defined $self->{<Q::MDOMX:method>}) {
            $r = $self->{<Q::MDOMX:class>} . '->' .
                 $self->{<Q::MDOMX:method>} . ': ' . $r;
          } elsif (defined $self->{<Q::MDOMX:attr>}) {
            $r = $self->{<Q::MDOMX:class>} . '->' .
                 $self->{<Q::MDOMX:attr>} . ' (' .
                 $self->{<Q::MDOMX:on>} . '): ' . $r;
          } else {
            $r = $self->{<Q::MDOMX:class>} . ': ' . $r;
          }
        }
        if (defined $self->{<Q::MDOMX:param-name>}) {
          $r = 'Parameter "' . $self->{<Q::MDOMX:param-name>} . '": ' . $r;
        }

  @Attr:
    @@Name: code
    @@enDesc:
      A numeric exception code that identifies the kind of 
      the error.  It should be equal to one of constant values
      defined as members of the exception interface that the
      object implements. 
    @@Type: 
      DOMMain:unsigned-short::ManakaiDOM:all
    @@Get:
      @@@PerlDef:
        $r = $self->{<Q::MUErrorCore:def>}->{<Q::DOMCore:code>};

  @Attr:
    @@Name: value
    @@Operator:
      @@@@: 0+
      @@@ContentType: lang|Perl
    @@enDesc:
      A numeric exception code that identifies the kind of 
      the error.

      {NOTE:: This attribute always has the same value as 
              <A::ManakaiDOM:ManakaiDOMExceptionOrWarning.code>.
      }
    @@Type: DOMMain|unsigned-short||ManakaiDOM|all
    @@Get:
      @@@PerlDef:
        $r = $self->{<Q::MUErrorCore:def>}->{<Q::DOMCore:code>};

  @Attr:
    @@Name: type
    @@enDesc:
      The type of the error, i.e. the local name of the constant
      function whose value is the numeric exception code of the error.
    @@Type: DISLang|String||ManakaiDOM|all
    @@Get:
      @@@PerlDef:
        $r = $self->{-type};

  @Attr:
    @@Name: subtype
    @@enDesc:
      The subtype of the error.
    @@Type: DISLang|String||ManakaiDOM|all
    @@Get:
      @@@enDesc:
        A URI reference that identifies the subtype.
      @@@InCase:
        @@@@Value:
          @@@@@is-null:1
        @@@@enDesc:
          The error has no subtype information.
      @@@PerlDef:
        $r = $self->{<Q::MDOMX:subtype>};
##ManakaiDOMExceptionOrWarning

ResourceDef:
  @QName: 
    DOMMain:ManakaiDOMExceptionIF
  @rdf:type:
    ManakaiDOM:ExceptionIF
  @For:
    ManakaiDOM:Perl
##ManakaiDOMExceptionIF

ResourceDef:
  @QName: 
    ManakaiDOM:ManakaiDOMException
  @rdf:type:
    ManakaiDOM:ExceptionClass
  @ISA: 
    ManakaiDOM:ManakaiDOMExceptionOrWarning
  @For:
    ManakaiDOM:Perl

  @Description:
    @@lang:en
    @@@:
      An abstract class that is inherited by all manakai DOM-style
      exception classes.
##ManakaiDOMException

ResourceDef:
  @QName: 
    ManakaiDOM:ManakaiDOMWarning
  @rdf:type:
    ManakaiDOM:WarningClass
  @ISA: 
    ManakaiDOM:ManakaiDOMExceptionOrWarning
  @For:
    ManakaiDOM:Perl

  @Description:
    @@lang:en
    @@@:
      An abstract class that is inherited by all manakai warning classes.

ResourceDef:
  @QName: dx|CoreException
  @rdf:type: dx|Class
  @ISA:
    ManakaiDOM:ManakaiDOMException
  @Description:
    @@lang:en
    @@@:
      Exceptions common to all manakai DOM-style modules. 
  @For:
    ManakaiDOM:Perl
  @ResourceDef:
    @@QName: dx|CoreExceptionCode
    @@rdf:type: DISLang|ConstGroup
    @@Type:
      DOMMain:unsigned-short::ManakaiDOM:all
    @@rdfs:subClassOf:
      DOMMain:unsigned-short::ManakaiDOM:all

    @@ResourceDef:
      @@@QName: 
        MDOMX:MDOM_DEBUG_BUG
      @@@rdf:type:
        ManakaiDOM:Const
      @@@Value:
        @@@@@: 3
        @@@@ContentType: DISCore|Integer
      @@@Description:
        @@@@lang:en
        @@@@@:
          Unexpected case occurs.  In general, this exception is not 
          reported.  If the implementation has a bug and 
          something unexpected is occur, this exception is raised. 
        \
          Applications <kwd:MUST-NOT> try to catch this exception. 
          If this exception is raised, please report to the 
          author of that module.
          \
          {NOTE:: New assertion mechanism and subtype <X::DOMMain|ASSERTION_ERR> 
                  has been introduced; it should be used instead of 
                  throwing <X::MDOMX:MDOM_DEBUG_BUG> directly. 
          \
          }
      @@@XParam:
        @@@@QName:
          MDOMX:values
        @@@@Description:
          @@@@@lang:en
          @@@@@@: Arbitrary values for debugging.

      @@@XSubTypeDef:
        @@@@QName: 
          DOMMain:ASSERTION_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            Failure to pass an assertion. 
        @@@@XParam:
          @@@@@QName:
            DOMMain:assertionType
          @@@@@Description:
            @@@@@@lang:en
            @@@@@@@:Type of the assertion.
        @@@@XParam:
          @@@@@QName:
            DOMMain:actualValue
          @@@@@Description:
            @@@@@@lang:en
            @@@@@@@: The actual value.
        @@@@XParam:
          @@@@@QName:
            DOMMain:expectedValue
          @@@@@Description:
            @@@@@@lang:en
            @@@@@@@@: The expected value.
        @@@@XParam:
          @@@@@QName:
            DOMMain:expectedLabel
          @@@@@Description:
            @@@@@@lang:en
            @@@@@@@:
              A simple explaination for expected value. 
        @@@@XParam:
          @@@@@QName:
            DOMMain:traceText
          @@@@@Description:
            @@@@@@lang:en
            @@@@@@@:
              Perl's stack trace string (return value of <Perl::Carp::longmess>
              is assumed). 
        @@@@Def:
          @@@@@lang:en
          @@@@@ContentType:
            lang:muf
          @@@@@@:
            ASSERTION ERROR: got "%p (name => {<Q::DOMMain:actualValue>});" 
            while %p (name => {<Q::DOMMain:expectedValue>}, prefix => {"},
            suffix => {"});%p (name => {<Q::DOMMain:expectedLabel>},
            prefix => { (}, suffix => {)}); is expected %p (
            name => {<Q::DOMMain:traceText>}); 

    @@ResourceDef:
      @@@QName: NO_MODIFICATION_ALLOWED_ERR
      @@@rdf:type:
        ManakaiDOM:Const
      @@@Value:
        @@@@@:7
        @@@@ContentType: DISCore|Integer
      @@@Description:
        @@@@lang:en
        @@@@@: An attempt is made to modify read-only object.
      @@@XSubTypeDef:
        @@@@QName: READ_ONLY_ATTRIBUTE_ERR
        @@@@Description:
          @@@@@lang:en
          @@@@@@:
            An attempt is made to modify a read-only attribute.
          @@@@enMufDef:
              Attribute "%p (name => {<Q::MDOMX:class>}, suffix => {.}
              );%p (name => {<Q::MDOMX:attr>});" is read-only
  
    @@ResourceDef:
      @@@QName: NOT_SUPPORTED_ERR
      @@@rdf:type:
        ManakaiDOM:Const
      @@@Value:
        @@@@@:9
        @@@@ContentType: DISCore|Integer
      @@@Description:
        @@@@lang:en
        @@@@@: The implementation does not support the action. 

        @@@XSubTypeDef:
          @@@@QName:
            MDOMX:MDOM_IMPL_ATTR_NOT_IMPLEMENTED
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The implementation does not support this attribute.
          @@@@XParam:
            @@@@@QName:
              MDOMX:class
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@:
                The name of class to which the attribute not implemented belongs.
          @@@@XParam:
            @@@@@QName:
              MDOMX:attr
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@:
                The name of attribute that is not implemented.
          @@@@XParam:
            @@@@@QName:
              MDOMX:on
            @@@@@InCase:
              @@@@@@Value:
                @@@@@@@@: get
                @@@@@@@ContentType: DISCore|String
              @@@@@@Description:
                @@@@@@@lang:en
                @@@@@@@@: Getting this attribute is not implemented.
            @@@@@InCase:
              @@@@@@Value:
                @@@@@@@@: set
                @@@@@@@ContentType: DISCore|String
              @@@@@@Description:
                @@@@@@@lang:en
                @@@@@@@@: Setting this attribute is not implemented.
          @@@@enMufDef:
              The attribute "%p (name => {<Q::MDOMX:class>}, suffix => {.}
              );%p (name => {<Q::MDOMX:attr>});"
              %p (name => {<Q::MDOMX:on>},
                  prefix => {(}, suffix => {)}); has not been implemented yet 
        @@@XSubTypeDef:
          @@@@QName:
            MDOMX:MDOM_IMPL_METHOD_NOT_IMPLEMENTED
          @@@@Description:
            @@@@@lang:en
            @@@@@@:
              The DOM implementation does not support this method.
          @@@@XParam:
            @@@@@QName:
              MDOMX:class
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@:
                The name of class to which the method not implemented belongs.
          @@@@XParam:
            @@@@@QName:
              MDOMX:method
            @@@@@Description:
              @@@@@@lang:en
              @@@@@@@:
                The name of method that is not implemented.
          @@@@enMufDef:
              The method "%p (name => {<Q::MDOMX:class>}, suffix => {.}
              );%p (name => {<Q::MDOMX:method>});" has not been implemented yet
##CoreException

ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:Method

ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:MethodReturn

ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:MethodParameter

ElementTypeBinding:
  @Name: Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:Attribute

ElementTypeBinding:
  @Name: Get
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:AttributeGet

ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ImplNote
#    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase

ElementTypeBinding:
  @Name: PerlDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:Perl

ElementTypeBinding:
  @Name:enMufDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@lang:en
    @@ContentType:
      lang:muf

ElementTypeBinding:
  @Name: XSubTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:ExceptionOrWarningSubType

ElementTypeBinding:
  @Name: XParam
  @ElementType:
    ManakaiDOM:exceptionOrWarningParameter

## -- Common exception parameters

XWParam:
  @QName:
    MDOMX:param-name
  @Type: 
    DISPerl:MethodName
  @Description:
    @@lang:en
    @@@:
      A name of method parameter that is related to the exception 
      or warning issued. 

XWParam:
  @QName:
    MDOMX:class
  @Type:
    Perl:package-name
  @Description:
    @@lang:en
    @@@:
      The name of class in whose method or attribute an exception 
      or warning is thrown. 

XWParam:
  @QName: 
    MDOMX:resourceURI
  @Description:
    @@lang:en
    @@@:
      The URI reference of the resource in which the source code
      is defined.

ElementTypeBinding:
  @Name: XWParam
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: 
      DOMMain:XWParameter
    @@For: =ManakaiDOM|all

## -- Exception target

ResourceDef:
  @QName: ManakaiDefaultExceptionHandler
  @enDesc:
    This class provides a default exception handler.
  @rdf:type: DISLang|Class
  @ForCheck:
    ManakaiDOM:Perl
  @Implement: ecore|MUErrorTarget

  @ResourceDef:
    @@rdf:type:
      DISLang:Method
    @@Operator:
      @@@@:
        ManakaiDOM:MUErrorHandler
      @@@ContentType: DISCore|QName
    @@Description:
      @@@lang:en
      @@@@:
        This method is a generic error handler; all manakai exceptions 
        and warnings associated to an object are once reported to this method 
        and then delivered to appropriate entities. 
        \
        If the error is an exception (such as <X::DOMCore:DOMException> or 
        <X::ManakaiDOM:ManakaiDOMImplementationException>), it is 
        simply thrown.  If the error is only a warning, it is reported 
        via the <IF::DOMCore:DOMError> interface. 
        \
        See <PerlModule::Message::Util::Error> documentation for more 
        information on the error reporting mechanism.
        \
        {NOTE:: This kind of methods are named as <Perl::___report_error> 
                in the convention of <PerlModule::Message::Util::Error>. 
        \
        }
    @@Param:
      @@@Name:err
      @@@Type: 
        ManakaiDOM:ManakaiDOMExceptionOrWarning::ManakaiDOM:Perl
      @@@Description:
        @@@@lang:en
        @@@@@:
          An exception object that describes what kind of error it is 
          and how it should be recovered. 
          \
          {NOTE:: Exception objects in manakai implementation 
                  inherit the class <PerlModule::Message::Util::Error>, 
                  that in turn inherits <PerlModule::Error>.
          \
          }
    @@Return:
      @@@PerlDef:
          if ($err->isa (<ClassName::ManakaiDOM:ManakaiDOMException
                                   ::ManakaiDOM:Perl>)) {
            $err->throw;
          } else {
            \## TODO: Implement warning reporting
            warn $err->stringify;
          }
##ManakaiDefaultExceptionHandler

LexTypeDef:
  @QName:
    lang:muf
  @rdfs:subClassOf: DISCore|NSString
  @ImplNote:
    @@lang:en
    @@@:
      Should be moved to some other module.

