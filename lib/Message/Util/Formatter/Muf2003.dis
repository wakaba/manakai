Module:
  @QName: UtilMuf|Muf2003
  @FullName:
    @@lang:en
    @@@:
      The 2003 implelementation of the MUF template language

  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Formatter/Muf2003/

  @DISCore:author: DISCore|Wakaba
  @License: license|Perl+MPL
  @Date:
    $Date: 2006/12/30 12:00:49 $

  @Require:
    @@Module:
      @@@QName: DISlib|DISPerl
    @@Module:
      @@@QName: Err|Core

Namespace:
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @DISlib:
    http://suika.fam.cx/~wakaba/archive/2004/dis/
  @dx:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#
  @ecore:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/
  @Err:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/
  @idl:
    http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#
  @kwd:
    http://suika.fam.cx/~wakaba/archive/2005/rfc2119/
  @lang:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#
  @UtilMuf:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Formatter/

ResourceDef:
  @QName: UtilMuf|
  @rdf:type: dis|ModuleGroup
  @enFN: MUF Template Language Modules
  @DISPerl:packageName:
    Message::Util::Formatter::
  @DISPerl:interfacePackageName:
    Message::Util::IF::

ElementTypeBinding:
  @Name: enDesc
  @ElementType:
    dis:Description
  @ShadowContent:
    @@lang:en

ElementTypeBinding:
  @Name: enFN
  @ElementType:
    dis:FullName
  @ShadowContent:
    @@lang:en

ElementTypeBinding:
  @Name: IFQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: IFISA
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsISA
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: IFClsDef
  @ElementType: 
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@: dis|MultipleResource
      @@@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass
    @@resourceFor: ManakaiDOM|ForIF
    @@resourceFor: ManakaiDOM|ForClass

    @@rdf:type:
      @@@@: DISLang|Interface
      @@@ForCheck: ManakaiDOM|ForIF

    @@rdf:type:
      @@@@: DISLang|Class
      @@@ForCheck: ManakaiDOM|ForClass
    @@Implement:
      @@@@: ||+||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: IFDef
  @ElementType: 
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@: dis|MultipleResource
      @@@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass
    @@resourceFor: ManakaiDOM|ForIF

    @@rdf:type:
      @@@@: DISLang|Interface
      @@@ForCheck: ManakaiDOM|ForIF

## -- The Base Formatter

IFClsDef:
  @IFQName: MUFFormatter2003
  @ClsQName: ManakaiMUFFormatter2003Base

  @DISPerl:classPackageName:
    Message::Util::Formatter::Base

  @enDesc:
    The <Class::ManakaiMUFFormatter2003Base> class is the base class
    on which specific applications of <QUOTE::formatting> are built.

  @IntMethod:
    @@Name: ruleDef
    @@DISPerl:methodName: ___rule_def
    @@enDesc:
      A constant method that provides definitions of rules
      implemented by the class.
    @@Return:
      @@@Type: DISPerl|HASH
      @@@enDesc:
        A hash reference that containing definitions of rules.
  
  @IntMethod:
    @@Name: getRuleDef
    @@DISPerl:methodName: ___get_rule_def
    @@enDesc:
      Returns the definition of a rule.
    @@Param:
      @@@Name: name
      @@@Type: MUFString
      @@@enDesc:
        The name of the rule.
    @@Return:
      @@@Type: DISPerl|HASH
      @@@enDesc:
        The hash reference to the rule definition.

        If the class implements the <M::MUFFormatter2003.ruleDef> method and
        it contains the definition of the rule <P::name>, then it is returned.
        Otherwise, the <M::MUFFormatter2003.getRuleDef> methods of the 
        superclasses, if any, are invoked in depth-first order until
        a rule definition is found.
      @@@nullCase:
        @@@@enDesc:
          No definition for the rule <P::name> found.

  @IntMethod:
    @@Operator: DISPerl|NewMethod
    @@ManakaiDOM:isStatic:1
    @@enDesc:
      Creates a new instance of the formatter.
    @@NamedParam:
      @@@Name: rule
      @@@Type: DISPerl|Ref
      @@@enDesc:
        A set of rule definitions.
      @@@InCase:
        @@@@Type: DISPerl|HASH
        @@@@enDesc:
          The hash is used as the set of rule definitions for the formatter,
          i.e. used as if it is the return value of the method
          <M::MUFFormatter2003.ruleDef>.
      @@@InCase:
        @@@@Type: DISPerl|CODE
        @@@@enDesc:
          The code is used as the method that returns a rule definition if any,
          i.e. used as if it is the <M::MUFFormatter2003.getRuleDef> method.
      @@@nullCase:
        @@@@enDesc:
          The rule definitions are provided by the class itself,
          i.e. <M::MUFFormatter2003.ruleDef> and <M::MUFFormatter2003.getRuleDef>
          methods are in effect.

  @IntMethod:
    @@Name: replaceOption
    @@DISPerl:methodName: replace_option
    @@enDesc:
      The default configuration for the <M::MUFFormatter2003.replace>
      method.
    @@Return:
      @@@Type: DISPerl|HASH
      @@@enDesc:
        A formatter class can provide default values for
        <M::MUFFormatter2003.replace> named parameters by
        overridding this method.  The method <kwd:MUST> return
        a reference to a hash whose key-value pairs are
        valid named parameters of the <M::MUFFormatter2003.replace> method.

  @Method:
    @@Name: replace
    @@enDesc:
      Replaces the MUF template as per rules therein.

        {NOTE:: The rule definition method may throw an exception.
        }
    @@Param:
      @@@Name: format
      @@@Type: MUFString
      @@@enDesc:
        The MUF template to replace.
    @@NamedParam:
      @@@Name: param
      @@@Type: DISPerl|HASH
      @@@enDesc:
        This parameter value will be available as the <CODE::o>
        parameter to methods in rule definitions.  Applications
        can use this parameter to inform any configuration information
        to rule definition methods.  The parameter value is 
        also used as <P::o> parameter of the rule definition methods
        of the <CODE::-entire> top-level rule. 

          {NOTE:: A rule definition method <kwd:MAY> modify the
                  <P::param>.
          }

        The named parameters to the method, including <P::param> and
        any default value from <M::MUFFormatter2003.replaceOption>,
        are available to rule definition methods via the <CODE::option>
        named parameter as a hash reference.
    @@Return:
      @@@Type: DISPerl|Any
      @@@enDesc:
        The value of the key <CODE::-result> of the hash <P::param>.
      @@@nullCase:
        @@@@enDesc: 
          The hash value is <DOM::null> or not exist.
      @@@ecore:raises:
        @@@@@: ATTR_SEPARATOR_NOT_FOUND
        @@@@enDesc:
          If an attribute separator is expected but not found.
      @@@ecore:raises:
        @@@@@: SEMICOLON_NOT_FOUND
        @@@@enDesc:
          If a rule close delimiter is expected but not found.

  @Method:
    @@Name: call
    @@enDesc:
      Invokes a rule definition method.

        {NOTE:: The rule definition method may throw an exception.
        }
    @@Param:
      @@@Name: name
      @@@Type: MUFString
      @@@enDesc:
        The name of the rule.

        If the rule definition of the name equals to <P::name>
        is found, then the method of that definition is invoked.
        If not, then the method of the <CODE::-undef> rule is invoked.
        In both cases, if the definition does not contain the 
        method whose name equals to <P::function>, then 
        the method of <CODE::-default> rule is invoked.
    @@Param: 
      @@@Name: function
      @@@Type: MUFString
      @@@enDesc:
        The name of the method to invoke.
    @@Param:
      @@@Name: methodParams
      @@@Type: DISPerl|List
      @@@enDesc:
        Additional parameters, if any, are used as a second or later
        parameters of the rule definition method.
    @@Return:
      @@@Type: DISPerl|Any
      @@@enDesc:
        Any return value of the rule definition method.
      @@@nullCase: 
        @@@@enDesc:
          The rule definition method returns <DOM::null> or
          it does not return any value.

  @RuleDef:
    @@Name: -bare_text
    @@enDesc:
      The <CODE::-bare_text> rule definition is referenced
      when a text is encounted.

  @RuleDef:
    @@Name: -undef
    @@enDesc:
      The <CODE::-undef> rule definition is referenced when
      a rule whose definition not found in the class is encounted.

  @RuleDef:
    @@Name: -default
    @@Implement: MUFRuleDef2003
    @@enDesc:
      The <CODE::-default> rule definition is referenced when
      a rule definition does not implemente a particular method.
    @@Method:
      @@@Name: pre
      @@@enDesc:
        No action.
      @@@Return:
    @@Method:
      @@@Name: attr
      @@@enDesc:
        No action.
      @@@Return:
    @@Method:
      @@@Name: post
      @@@enDesc:
        No action.
      @@@Return:

  @RuleDef:
    @@Name: -entire
    @@enDesc:
      The <CODE::-entire> rule is referenced for the entire template.
##MUFFormatter2003

IFClsDef:
  @IFQName: MUFTextFormatter2003
  @ClsQName: ManakaiMufTextFormatter2003

  @enDesc:
    The <Class::ManakaiMufTextFormatter2003> is an application
    of <Class::ManakaiMufFormatter2003> that is used to generate
    formatted plain text fragment with given formatting rule text
    and formatting functions.

  @IFISA: MUFFormatter2003
  @ClsISA: ManakaiMUFFormatter2003

  @RuleDef:
    @@Name: -bare_text
    @@Method:
      @@@Name: after
      @@@enDesc:
        The text is appended to the <Perl::<P::p>-<gt>{-result}>.
  
  @RuleDef:
    @@Name: -undef
    @@Method:
      @@@Name: post
      @@@enDesc:
        Appends a short message that indicates the rule is not defined
        to the <Perl::<P::p>-<gt>{-result}>.

  @RuleDef:
    @@Name: -default
    @@Implement: MUFTextRuleDef2003
    @@Method:
      @@@Name: pre
      @@@enDesc:
        The <Perl::<P::p>-<gt>{-result}> value is initialized to an empty
        string and then the <M::MufTextRuleDef2003.before> method is invoked.
    @@Method:
      @@@Name: attr
      @@@enDesc:
        If it is a Boolean attribute, then a value of <Perl::1>
        is set to the <P::p> with the key of attribute name.
        Otherwise, a attribute name and value pair is set to the
        <P::p> as a key-value pair.  If it is not a Boolean attribute
        and the attribute value flag contains a character <CHAR::LATIN
        SMALL LETTER P>, then the value is recursively evaluated by
        <M::MUFFormatter2003.replace> before it is set.
    @@Method:
      @@@Name: post
      @@@enDesc:
        The <M::MufTextRuleDef.after> method is invoked.  Then, 
        if <Perl::<P::p>-<gt>{-result}>'s length is positive, 
        it is enclosed by <Perl::<P::p>-<gt>{prefix}> and
        <Perl::<P::p>-<gt>{suffix}> (possibly empty respectively).
    @@Method:
      @@@Name: before
      @@@enDesc: No action.
    @@Method:
      @@@Name: after
      @@@enDesc: No action.

  @RuleDef:
    @@Name: -entire
    @@Method:
      @@@Name: pre
      @@@enDesc:
        The <Perl::<P::p>-<gt>{-result}> is initialized by an empty string.
    @@Method:
      @@@Name: attr
      @@@enDesc: 
        The <Perl::<P::attrValue>-<gt>{-result}> value is appended
        to the <Perl::<P::p>-<gt>{-result}>.

  @RuleDef:
    @@Name: percent
    @@enDesc:
      Evaluated to a <CHAR::PERCENT SIGN>.  It is used for escaping 
      since <CHAR::PERCENT SIGN> is a rule open delimiter in MUF template
      language.
    @@Method:
      @@@Name: after
      @@@enDesc:
        The method appends a <CHAR::PERCENT SIGN> to the
        <Perl::<P::p>-<gt>{-result}> value.
##MUFTextFormatter2003

ElementTypeBinding:
  @Name: ResourceTypeDef
  @ElementType: 
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      rdfs:Class
    @@rdfs:subClassOf: rdfs|Class

ResourceTypeDef:
  @QName: RuleDefClass
  @rdfs:subClassOf: DISLang|Class
  @rdfs:subClassOf: DISPerl|HASH
  @enDesc:
    A <Q::RuleDefClass> is a Perl hash reference
    that contains a set of methods as its key-value pairs.

ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:Method

ElementTypeBinding:
  @Name: IntMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:Method
    @@ManakaiDOM:isForInternal:1

ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:MethodReturn

ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:MethodParameter

ElementTypeBinding:
  @Name: NamedParam
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:MethodParameter
    @@DISPerl:isNamedParameter:1

ElementTypeBinding:
  @Name: nullCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase
    @@Value:
      @@@is-null:1

ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase

ElementTypeBinding:
  @Name: RuleDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass
    @@rdf:type: RuleDefClass

IFDef:
  @IFQName: MUFRuleDef2003

  @enDesc:
    {NOTE:: In fact, rule definitions are provided as hash references
            rather than classes.
    }

        {NOTE:: The rule definition method <kwd:MAY> throw exceptions.
        }

  @Method:
    @@Name: pre
    @@enDesc:
      The <M::MUFRuleDef2003.pre> method is invoked just before a rule's
      attribute specification list, if any, is evaluated.
    @@Param:
      @@@Name: name
      @@@Type: MUFString
      @@@enDesc:
        The local name of the rule.
    @@Param:
      @@@Name: p
      @@@Type: DISPerl|HASH
      @@@enDesc:
        A hash reference that will be used to hold attribute values.
        It is empty at the time of invocation of the method.
        The method <kwd:MAY> modify the hash.

        For the <CODE::-entire> rule, <P::p> is the same value as <P::o>.

        For the <CODE::-bare_text> rule, <P::p> is an empty hash
        (unless any previous invocation of rule definition methods
        modifies it).
    @@Param:
      @@@Name: o
      @@@Type: DISPerl|HASH
      @@@enDesc:
        The contextual information provided as a <CODE::param> parameter
        to the <M::MUFFormatter2003.replace> method.
        The method <kwd:MAY> modify the hash.
    @@NamedParam:
      @@@Name: option
      @@@Type: DISPerl|HASH
      @@@enDesc:
        The named parameters for the <M::MUFFormatter2003.replace> method.
        The method <kwd:MAY> modify the hash.
    @@Return:

  @Method:
    @@Name: attr
    @@enDesc:
      The <M::MUFRuleDef2003.attr> method is invoked for each attribute
      specification.

      For the <CODE::-entire> rule, the method is invoked for every
      rule or text after its evaluation.

      For the <CODE::-bare_text> rule, the method is invoked once
      with the text content.
    @@Param:
      @@@Name: name
      @@@Type: MUFString
      @@@enDesc:
        The local name of the rule.
    @@Param:
      @@@Name: p
      @@@Type: DISPerl|HASH
      @@@enDesc:
        The current set of attributes being evaluated.
        The method <kwd:MAY> modify the hash.

        For the <CODE::-entire> rule, <P::p> is the same value as <P::o>.

        For the <CODE::-bare_text> rule, <P::p> is an empty hash
        (unless any previous invocation of rule definition methods
        modifies it).
    @@Param:
      @@@Name: o
      @@@Type: DISPerl|HASH
      @@@enDesc:
        The contextual information provided as a <CODE::param> parameter
        to the <M::MUFFormatter2003.replace> method.
        The method <kwd:MAY> modify the hash.
    @@Param:
      @@@Name: attrName
      @@@Type: MUFString
      @@@enDesc:
        The attribute name.

           {NOTE:: Since the MUF language does not distingulish 
                   characters <CHAR::HYPHEN-MINUS> and <CHAR::UNDERLINE>
                   in attribute names, any <CHAR::HYPHEN-MINUS> in
                   <P::attrName> is already normalized to
                   <CHAR::UNDERLINE>.  In addition, any quoted pairs
                   are unquoted.
           }

        For Boolean attributes, <P::attrName> is <CODE::-boolean>.

        For the <CODE::-entire> rule, the rule local name for
        a rule or the string <CODE::-bare_text> for a text.

        For the <CODE::-bare_text> rule, the string <CODE::-bare_text>.
    @@Param:
      @@@Name: attrValue
      @@@Type: MUFString
      @@@enDesc:
        The attribute value, after any unquoting of quoted pairs.

        For Boolean attributes, <P::attrValue> is the attribute
        name after <CHAR::HYPHEN-MINUS> normalization.

        For the <CODE::-entire> rule, the <CODE::p> hash for the rule
        or text.

        For the <CODE::-bare_text> rule, the text content.
    @@NamedParam:
      @@@Name: nameFlag
      @@@DISPerl:paramName: -name_flag
      @@@Type: MUFString
      @@@enDesc:
        Flags attached to the attribute name.
      @@@nullCase:
        @@@@enDesc:
          If no flag specified, or the <P::name> is <CODE::-entire>
          or <CODE::-bare_text>.
    @@NamedParam:
      @@@Name: valueFlag
      @@@DISPerl:paramName: -value_flag
      @@@Type: MUFString
      @@@enDesc:
        Flags attaced to the attribute value.
      @@@nullCase:
        @@@@enDesc:
          If no flag specified, or the <P::name> is <CODE::-entire>
          or <CODE::-bare_text>.
    @@NamedParam:
      @@@Name: option
      @@@Type: DISPerl|HASH
      @@@enDesc:
        The named parameters for the <M::MUFFormatter2003.replace> method.
        The method <kwd:MAY> modify the hash.
    @@Return:

  @Method:
    @@Name: post
    @@enDesc:
      The <M::MUFRuleDef2003.post> method is invoked just after a rule's
      attribute specification list, if any, is evaluated.
    @@Param:
      @@@Name: p
      @@@Type: DISPerl|HASH
      @@@enDesc:
        A hash reference that will be used to hold attribute values.
        The method <kwd:MAY> modify the hash.

        For the <CODE::-entire> rule, <P::p> is the same value as <P::o>.

        For the <CODE::-bare_text> rule, <P::p> is an empty hash
        (unless any previous invocation of rule definition methods
        modifies it).
    @@Param:
      @@@Name: o
      @@@Type: DISPerl|HASH
      @@@enDesc:
        The contextual information provided as a <CODE::param> parameter
        to the <M::MUFFormatter2003.replace> method.
        The method <kwd:MAY> modify the hash.
    @@NamedParam:
      @@@Name: option
      @@@Type: DISPerl|HASH
      @@@enDesc:
        The named parameters for the <M::MUFFormatter2003.replace> method.
        The method <kwd:MAY> modify the hash.
    @@Return:
##MUFRuleDef2003

IFDef:
  @IFQName: MUFTextRuleDef2003
  
  @IFISA: MUFRuleDef2003

  @Method:
    @@Name: before

  @Method:
    @@Name: after

  @RuleParam:
    @@Name: prefix
    @@dataType: DISCore|String
    @@enDesc:
      If the result text is not an empty string, then this value is
      prepended to it.

  @RuleParam:
    @@Name: suffix
    @@dataType: DISCore|String
    @@enDesc:
      If the result text is not an empty string, then this value is
      appended to it.
##MUFTextRuleDef2003

ElementTypeBinding:
  @Name: RuleParam
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: Muf2003|RuleParameter

ResourceTypeDef:
  @QName: Muf2003|RuleParameter
  @enDesc:
    A <Q::RuleParameter> is a parameter that can be passed to
    a rule.  It is written as an attribute in MUF template language.
  @rdfs:subClassOf: DISLang|AnyParameter

ResourceDef:
  @QName: MUFString
  @AliasFor: DISPerl|String

IFClsDef:
  @IFQName: MUFFormatter2003Exception
  @ClsQName: ManakaiMUFFormatter2003Exception
  @DISPerl:classPackageName: 
    Message::Util::Formatter::error

  @IFISA: ecore|MUErrorInterface
  @ClsISA: ecore|MUError

  @rdf:type:
    @@@: Err|MUErrorInterface
    @@ForCheck: ManakaiDOM|ForIF
  @rdf:type:
    @@@: Err|MUErrorClass
    @@ForCheck: ManakaiDOM|ForClass
##MUFFormatter2003Exception

IFClsDef:
  @IFQName: MUFFormatter2003BaseException
  @ClsQName: ManakaiMUFFormatter2003BaseException
  @DISPerl:classPackageName: 
    Message::Util::Formatter::Base::error

  @IFISA: MUFFormatter2003Exception
  @ClsISA: ManakaiMUFFormatter2003BaseException

  @rdf:type:
    @@@: Err|MUErrorInterface
    @@ForCheck: ManakaiDOM|ForIF
  @rdf:type:
    @@@: Err|MUErrorClass
    @@ForCheck: ManakaiDOM|ForClass

  @ResourceDef:
    @@QName: ATTR_SEPARATOR_NOT_FOUND
    @@rdf:type: ecore|AnyErrorCode
    @@ForCheck: ManakaiDOM|ForIF
    @@enDesc:
      A delimiter that terminates the attribute specification, i.e.
      either <CHAR::COMMA> or <CHAR::RIGHT PARENTHESIS>, is expected.
    @@ecore:hasParameter:
      @@@@: contextBefore
      @@@enDesc:
        Substring before the position where a delimiter is expected.
    @@ecore:hasParameter:
      @@@@: contextAfter
      @@@enDesc:
        Substring after the position where a delimiter is expected.
    @@ecore:hasParameter:
      @@@@: option
      @@@enDesc:
        The named parameters for the <M::MUFFormatter2003.replace> method.
        The method <kwd:MAY> modify the hash.
    @@ecore:hasParameter:
      @@@@: method
      @@@enDesc:
        The name of the parameter in which the exception is thrown.
  @ResourceDef: 
    @@QName: SEMICOLON_NOT_FOUND
    @@rdf:type: ecore|AnyErrorCode
    @@ForCheck: ManakaiDOM|ForIF
    @@enDesc: 
      A delimiter that terminates the rule, i.e. <CHAR::SEMICOLON>,
      is expected.
    @@ecore:hasParameter:
      @@@@: contextBefore
      @@@enDesc:
        Substring before the position where a delimiter is expected.
    @@ecore:hasParameter:
      @@@@: contextAfter
      @@@enDesc:
        Substring after the position where a delimiter is expected.
    @@ecore:hasParameter:
      @@@@: option
      @@@enDesc:
        The named parameters for the <M::MUFFormatter2003.replace> method.
        The method <kwd:MAY> modify the hash.
    @@ecore:hasParameter:
      @@@@: method
      @@@enDesc:
        The name of the parameter in which the exception is thrown.
##MUFFormatter2003BaseException

XWParam:
  @QName: contextBefore
  @ecore:propKey: context_before

XWParam:
  @QName: contextAfter
  @ecore:propKey: context_after

XWParam:
  @QName: option
  @ecore:propKey: option

XWParam:
  @QName: method
  @ecore:propKey: method

ElementTypeBinding:
  @Name: XWParam
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: ecore|Parameter
