Module:
  @QName:
    DIS:DISDump
  @FullName:
    @@lang: en
    @@@:
      <QUOTE::DISDump> Serialization
  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#DISDump/
  
  @Description:
    @@lang:en
    @@@:
      This module provides an object model for <QUOTE::DISDump>
      serialization format.  

  @Author:
    @@FullName: Wakaba
    @@Mail: w@suika.fam.cx
  @License:
    license:Perl+MPL
  @Date:
    @@@:
      $Date: 2005/09/09 04:26:10 $
    @@ContentType:
      dis:Date.RCS
  
  @Require:
    @@Module:
      @@@QName: DIS|DISDoc
      @@@WithFor: DIS|ForLatest
    @@Module:
      @@@QName: MDOM|DOMCore
      @@@WithFor: ManakaiDOM|ManakaiDOMLatest

  @DefaultFor: 
    DIS:ForLatest

Namespace:
  @dd:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#DISDoc/
  @ddel:
    http://suika.fam.cx/~wakaba/archive/2005/disdoc#
  @DIS:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @dis2pm:
    http://suika.fam.cx/~wakaba/archive/2004/11/8/dis2pm#
  @DISlib:
    http://suika.fam.cx/~wakaba/archive/2004/dis/
  @disPerl:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--
  @DOMCore:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
  @DOMException:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#
  @DOMLS:
    http://suika.fam.cx/~wakaba/archive/2004/dom/ls#
  @DOMMain:
    http://suika.fam.cx/~wakaba/archive/2004/dom/main#
  @DOMMetaImpl:
    http://suika.fam.cx/~wakaba/archive/2004/dom/meta#
  @dump:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#DISDump/
  @html3:
    urn:x-suika-fam-cx:markup:ietf:html:3:draft:00:
  @html5:
    http://www.w3.org/1999/xhtml
  @ilang:
    urn:x-suika-fam-cx:lang:
  @infoset:
    http://www.w3.org/2001/04/infoset#
  @lang:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @Markup:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Markup#
  @MDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.
  @MDOMX:
    http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @nl:
    http://suika.fam.cx/~wakaba/archive/2004/dis/NaturalLanguage#
  @owl:
    http://www.w3.org/2002/07/owl#
  @Perl:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#Perl--
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#
  @s:
    http://suika.fam.cx/~wakaba/archive/2004/dis/Markup#
  @script:
    http://suika.fam.cx/~wakaba/archive/2005/5/script#
  @sw010:
    urn:x-suika-fam-cx:markup:suikawiki:0:10:
  @swcfg21:
    http://suika.fam.cx/~wakaba/archive/2005/swcfg21#
  @TreeCore:\
  @Util:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/
  @xhtml1:
    http://www.w3.org/1999/xhtml
  @xhtml2:
    http://www.w3.org/2002/06/xhtml2/
  @xml:
    http://www.w3.org/XML/1998/namespace
  @xmlns:
    http://www.w3.org/2000/xmlns/
  @xsi:
    http://www.w3.org/2001/XMLSchema-instance

## -- Features

ElementTypeBinding:
  @Name: FeatureDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DOMMain:DOMFeature
    @@ForCheck:
      ManakaiDOM:all

ElementTypeBinding:
  @Name: FeatureVerDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DOMMain:DOMFeature

ElementTypeBinding:
  @Name: featureQName
  @ElementType:
    dis:AppName
  @ShadowContent:
    @@ContentType:
      dis:TypeQName

FeatureDef:
  @QName: DIS|Dump
  @FeatureVerDef:
    @@QName: DIS|Dump10
    @@Version: 1.0
    @@DOMMetaImpl:instanceFeatureOf: DIS|Dump
    @@DOMMain:requireFeature: DIS|Doc20
    @@FullName:
      @@@lang:en
      @@@@:
        <QUOTE::DISDump> version 1.0

ElementTypeBinding:
  @Name: enDesc
  @ElementType: 
    dis:Description
  @ShadowContent: 
    @@lang:en

ElementTypeBinding:
  @Name: IFClassETDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@: dis|MultipleResource
      @@@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass !s|ForML
    @@resourceFor: ManakaiDOM|ForIF
    @@resourceFor: ManakaiDOM|ForClass
    @@resourceFor: s|ForML

    @@rdf:type:
      @@@@: ManakaiDOM|IF
      @@@ForCheck: ManakaiDOM|ForIF
    @@s:elementType:
      @@@@: ||+||s|ForML
      @@@ForCheck: ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames

    @@rdf:type:
      @@@@: ManakaiDOM|Class
      @@@ForCheck: ManakaiDOM|ForClass
    @@Implement:
      @@@@: ||+||ManakaiDOM|ForIF
      @@@ForCheck: ManakaiDOM|ForClass
      @@@ContentType: DISCore|TFPQNames
    @@s:elementType:
      @@@@: ||+||s|ForML
      @@@ForCheck: ManakaiDOM|ForClass
      @@@ContentType: DISCore|TFPQNames
      @@@DISCore:stopISARecursive:1

    @@rdf:type:
      @@@@: s|ElementType
      @@@ForCheck: s|ForML

    @@DOMMain:implementFeature: DIS|Dump10

ElementTypeBinding:
  @Name: IFClassDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@: dis|MultipleResource
      @@@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass
    @@resourceFor: ManakaiDOM|ForIF
    @@resourceFor: ManakaiDOM|ForClass

    @@rdf:type:
      @@@@: ManakaiDOM|IF
      @@@ForCheck: ManakaiDOM|ForIF

    @@rdf:type:
      @@@@: ManakaiDOM|Class
      @@@ForCheck: ManakaiDOM|ForClass
    @@Implement:
      @@@@: ||+||ManakaiDOM|ForIF
      @@@ForCheck: ManakaiDOM|ForClass
      @@@ContentType: DISCore|TFPQNames

    @@DOMMain:implementFeature: DIS|Dump10

ElementTypeBinding:
  @Name: IFDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@: dis|MultipleResource
      @@@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass
    @@resourceFor: ManakaiDOM|ForIF

    @@rdf:type:
      @@@@: ManakaiDOM|IF
      @@@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: IFQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: ETQName
  @ElementType:
    dis:AppName
  @ShadowContent:
    @@ForCheck:
      s:ForML
    @@ContentType:
      dis:TypeQName


ElementTypeBinding:
  @Name: ATTRQName
  @ElementType:
    dis:AppName
  @ShadowContent:
    @@ForCheck:
      s:ForML
    @@ContentType:
      dis:TypeQName

ElementTypeBinding:
  @Name: AttrQName
  @ElementType:
    dis:AppName
  @ShadowContent:
    @@ContentType:
      dis:TypeQName

ElementTypeBinding:
  @Name: IFISA
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsISA
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Method

ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|MethodReturn

ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|MethodParameter

## -- DISDump Implementation Interface

IFClassDef:
  @IFQName: DISImplementationDISDump
  @ClsQName: ManakaiDISImplementationDISDump
  
  @ClsISA: DISDoc|ManakaiDISImplementationDISDoc
  @ClsISA: DOMCore|ManakaiDOMImplementation||ManakaiDOM|ManakaiDOMLatest

  @DOMMetaImpl:provideFeature: DIS|Dump10

  @enDesc:
    This interface provides factory methods to create
    <QUOTE::DISDump>-related objects.

  @Method:
    @@Name: createDISDumpDocument
    @@PerlName: create_disdump_document
    @@enDesc:
      Creates a DISDump document.
    @@Return:
      @@@Type: DISDumpDocument
      @@@enDesc:
        The newly created DISDump document.
      @@@PerlDef:
        __DEEP{
          $r = $self-><M::DOMCore:DOMImplementation::ManakaiDOM:ManakaiDOMLatest
                         .createDocument> (<Q::dump:>, 'dump:moduleSet');
        }__;
##DISImplementationDISDump

ElementTypeBinding:
  @Name: PerlName
  @ElementType:
    dis:AppName
  @ShadowContent:
    @@ContentType: lang|Perl

ElementTypeBinding:
  @Name: PerlDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType: lang|Perl

ElementTypeBinding:
  @Name: disDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType: lang|dis

ElementTypeBinding:
  @Name: PropDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: rdf|Property

## -- DISDump object model

IFClassDef:
  @IFQName: DISDumpDocument
  @ClsQName: ManakaiDOMDISDumpDocument
  
  @IFISA: DOMCore|Document||ManakaiDOM|ManakaiDOMLatest
  @ClsISA: DOMCore|ManakaiDOMDocument||ManakaiDOM|ManakaiDOMLatest

  @s:rootElementType: moduleSetElement
##DISDumpDocument

ResourceDef:
  @QName: AnyDISDumpElement
  @AppName:
    @@@: dump|*
    @@ContentType: dis|TypeQName
  @enDesc:
    Any element type in the <URI^^dis|TypeQName::dump:> namespace.
  @rdf:type: s|AnyElementInNS

IFClassDef:
  @IFQName: DISDumpElement
  @ClsQName: ManakaiDOMDISDumpElement
  
  @IFISA: DOMCore|Element||ManakaiDOM|ManakaiDOMLatest
  @ClsISA: DOMCore|ManakaiDOMElement||ManakaiDOM|ManakaiDOMLatest

  @s:elementType: AnyDISDumpElement


  @ResourceDef:
    @@ForCheck: ManakaiDOM|ForClass
    @@QName: getChildByName
    @@rdf:type: dis2pm|BlockCode
    @@enDesc:
      Selects a child element by its expanded name.
      \
      Parameters: $namespace, $localName, $label, $parent, $result
    @@PerlDef:
          for my $__c (@{$parent-><AG::Node.childNodes>}) {
            if ($__c-><AG::Node.nodeType> == <C::Node.ELEMENT_NODE> and
                defined $__c-><AG::Node.localName> and
                $__c-><AG::Node.localName> eq $localName  and
                $__c-><AG::Node.namespaceURI> eq $namespace) {
              $result = $__c;
              last $label;
            }
          }

  @Attr:
    @@Name: ref
    @@enDesc:
      If the attribute has a value, the actual description
      of the resource is found elsewhere referred by the URI.
    @@ReflectCDATA:
    @@Get:
    @@Set:
    @@DocAttr: refAttr
##DISDumpElement

IFClassDef:
  @IFQName: DISDumpElementResource
  @ClsQName: ManakaiDOMDISDumpElementResource
  
  @IFISA: DISDumpElement
  @ClsISA: ManakaiDOMDISDumpElement
  
  @IFISA: DISDumpElementDescription
  @ClsISA: ManakaiDOMDISDumpElementDescription

  @IFISA: DISDumpElementRDFClass
  @ClsISA: ManakaiDOMDISDumpElementRDFClass

  @Method:
    @@Name: addURI
    @@enDesc:
      Adds a URI as one of name of this resource.
      If the URI is already registered, no action has performed.
    @@Param:
      @@@Name: uri
      @@@Type: URI
      @@@enDesc:
        The URI to add.
    @@Param:
      @@@Name: isAlias
      @@@Type: boolean
      @@@enDesc:
        Whether this is an alias or not.
    @@Return:
      @@@PerlDef: 
        __DEEP{
          unless ($self-><M::DISDumpElementResource.hasURI> ($uri)) {
            my $el = $self-><M::Node.appendChild>
              ($self-><AG::Node.ownerDocument>
                    -><M::Document.createElementNS>
                         (<Q::dump:>, 'uri'));
            $el-><M::DISDumpElementURI.setURI> ($uri, $isAlias);
          }
        }__;

  @Method:
    @@Name: hasURI
    @@enDesc:
      Tests whether a URI is one of name of this resource or not.
    @@Param:
      @@@Name: uri
      @@@Type: URI
      @@@enDesc:
        The URI to test.
    @@Return:
      @@@Type: DOMMain|boolean||ManakaiDOM|all
      @@@enDesc:
        Whether the <P::uri> is a name of this resource or not.
      @@@PerlDef:
        __DEEP{
          C:
            for my $c (@{$self-><AG::Node.childNodes>}) {
              if ($c-><AG::Node.nodeType> == <C::Node.ELEMENT_NODE> and
                  defined $c-><AG::Node.localName> and
                  $c-><AG::Node.localName> eq 'uri' and
                  $c-><AG::Node.namespaceURI> eq <Q::dump:> and
                  $c-><M::Element.getAttributeNS>
                            (<Q::dump:>, 'uri') eq $uri) {
                $r = true;
                last C;
              }
            }
        }__;

  @Attr:
    @@Name: perlName
    @@enDesc:
      The Perl name of this resource.
    @@Type: DOMString
    @@Get:
      @@@PerlDef:
        __DEEP{
          __CODE{getChildByName::
            $parent => $self, $result => $r, $label => {},
            $namespace => {<Q::dump:>}, $localName => 'perlName',
          }__;
          $r = $r-><AG::Node.textContent> if $r;
        }__;
    @@Set:
      @@@PerlDef:
        __DEEP{
          my $r;
          C: {
            __CODE{getChildByName::
              $parent => $self, $result => $r, $label => {C},
              $namespace => {<Q::dump:>}, $localName => 'perlName',
            }__;
            $r = $self-><AG::Node.ownerDocument>
                      -><M::Document.createElementNS>
                            (<Q::dump:>, 'perlName');
            $self-><M::Node.appendChild> ($r);
          } # C
          $r-><AS::Node.textContent> ($given);
        }__;

  @ResourceDef:
    @@ForCheck: ManakaiDOM|ForClass
    @@QName: createChild
    @@rdf:type: dis2pm|BlockCode
    @@enDesc:
      Finds a child resource element by its URI and
      returns it if exist or creates a new child element otherwise.
      \
      Parameters: $namespace, $localName, $uri, $parent, $result.
    @@PerlDef:
      __DEEP{
        C: {
          for my $__c (@{$parent-><AG::Node.childNodes>}) {
            if ($__c-><AG::Node.nodeType> == <C::Node.ELEMENT_NODE> and
                defined $__c-><AG::Node.localName> and
                $__c-><AG::Node.localName> eq $localName and
                $__c-><AG::Node.namespaceURI> eq $namespace and
                $__c-><M::DISDumpElementResource.hasURI> ($uri)) {
              $result = $__c;
              last C;
            }
          }
          $result = $parent-><AG::Node.ownerDocument>
                           -><M::Document.createElementNS>
                             ($namespace, $localName);
          $result-><M::DISDumpElementResource.addURI> ($uri);
          $parent-><M::Node.appendChild> ($result);
        } # C
      }__;

  @ResourceDef:
    @@ForCheck: ManakaiDOM|ForClass
    @@QName: createChildByRefURI
    @@rdf:type: dis2pm|BlockCode
    @@enDesc:
      Finds a child resource element by its URI and
      returns it if exist or creates a new child element otherwise.
      \
      Parameters: $namespace, $localName, $uri, $parent, $result.
    @@PerlDef:
      __DEEP{
        C: {
          for my $__c (@{$parent-><AG::Node.childNodes>}) {
            if ($__c-><AG::Node.nodeType> == <C::Node.ELEMENT_NODE> and
                defined $__c-><AG::Node.localName> and
                $__c-><AG::Node.localName> eq $localName and
                $__c-><AG::Node.namespaceURI> eq $namespace and
                $__c-><M::Element.getAttributeNS> (<Q::dump:>, 'ref') eq $uri) {
              $result = $__c;
              last C;
            }
          }
          $result = $parent-><AG::Node.ownerDocument>
                           -><M::Document.createElementNS>
                             ($namespace, $localName);
          $result-><M::Element.setAttributeNS> (<Q::dump:>, 'dump:ref', $uri);
          $parent-><M::Node.appendChild> ($result);
        } # C
      }__;

  @ResourceDef:
    @@ForCheck: ManakaiDOM|ForClass
    @@QName: createChildByPerlName
    @@rdf:type: dis2pm|BlockCode
    @@enDesc:
      Finds a child resource element by its Perl name and
      returns it if exist or creates a new child element otherwise.
      \
      Parameters: $namespace, $localName, $perlName, $parent, $result.
    @@PerlDef:
      __DEEP{
        C: {
          for my $__c (@{$parent-><AG::Node.childNodes>}) {
            if ($__c-><AG::Node.nodeType> == <C::Node.ELEMENT_NODE> and
                defined $__c-><AG::Node.localName> and
                $__c-><AG::Node.localName> eq $localName and
                $__c-><AG::Node.namespaceURI> eq $namespace and
                $__c-><AG::DISDumpElementResource.perlName> eq $perlName) {
              $result = $__c;
              last C;
            }
          }
          $result = $parent-><AG::Node.ownerDocument>
                           -><M::Document.createElementNS>
                             ($namespace, $localName);
          $result-><AS::DISDumpElementResource.perlName> ($perlName);
          $parent-><M::Node.appendChild> ($result);
        } # C
      }__;

  @ResourceDef:
    @@ForCheck: ManakaiDOM|ForClass
    @@QName: createChildByElementType
    @@rdf:type: dis2pm|BlockCode
    @@enDesc:
      Finds a child resource element by its element type name and
      returns it if exist or creates a new child element otherwise.
      \
      Parameters: $namespace, $localName, $parent, $result.
    @@PerlDef:
      __DEEP{
        C: {
          for my $__c (@{$parent-><AG::Node.childNodes>}) {
            if ($__c-><AG::Node.nodeType> == <C::Node.ELEMENT_NODE> and
                defined $__c-><AG::Node.localName> and
                $__c-><AG::Node.localName> eq $localName and
                $__c-><AG::Node.namespaceURI> eq $namespace) {
              $result = $__c;
              last C;
            }
          }
          $result = $parent-><AG::Node.ownerDocument>
                           -><M::Document.createElementNS>
                             ($namespace, $localName);
          $parent-><M::Node.appendChild> ($result);
        } # C
      }__;

  @Method:
    @@Name: createFullName
    @@enDesc:
      Creates a child <Q::dump:fullName> element and returns it.
      If this element already has the element then the element is returned.
    @@Return:
      @@@Type: DISDumpElement
      @@@enDesc:
        The child <Q::dump:fullName> element.
      @@@PerlDef:
      __DEEP{
        C: {
          __CODE{getChildByName::
            $parent => $self, $result => $r,
            $namespace => {<Q::dump:>}, $localName => 'fullName',
            $label => {C},
          }__;
          $r = $self-><AG::Node.ownerDocument>
                    -><M::Document.createElementNS> (<Q::dump:>, 'fullName');
          $self-><M::Node.appendChild> ($r);
        } # C
      }__;

  @Attr:
    @@Name: hasFullName
    @@enDesc:
      Returns whether this element has a full name or not.
    @@Type: boolean
    @@Get:
      @@@PerlDef:
        __DEEP{
          $r = $self-><M::DISDumpElementResource.createFullName>
                    -><M::Node.hasChildNodes>;
        }__;

  @Attr:
    @@Name: resourceNamespaceURI
    @@enDesc:
      The namespace URI of this resource.
    @@ReflectCDATA:
    @@Get:
    @@Set:
    @@DocAttr: namespaceURIAttr

  @Attr:
    @@Name: resourceLocalName
    @@enDesc:
      The local name of this resource.
    @@ReflectCDATA:
    @@Get:
    @@Set:
    @@DocAttr: localNameAttr

  @Attr:
    @@Name: resourceDataType
    @@enDesc:
      The data type of this resource.
    @@ReflectCDATA:
    @@Get:
    @@Set:
    @@DocAttr: dataTypeAttr

  @Attr:
    @@Name: resourceActualDataType
    @@enDesc:
      The actual data type of this resource.
    @@ReflectCDATA:
    @@Get:
    @@Set:
    @@DocAttr: actualDataTypeAttr

  @Attr:
    @@Name: resourceAccess
    @@enDesc:
      The accessible scope of this resource.  Currently its value is 
      restricted to either <CODE::private> or missing (public).
    @@ReflectCDATA:
    @@Get:
    @@Set:
    @@DocAttr: accessAttr

  @Attr:
    @@Name: resourceFileNameStem
    @@enDesc:
      The main part of the file name corresponding to this resource.
    @@ReflectCDATA:
    @@Get:
    @@Set:
    @@DocAttr: fileNameStemAttr

  @Attr:
    @@Name: resourceFilePathStem
    @@enDesc:
      The main part of the file path corresponding to this resource.
    @@ReflectCDATA:
    @@Get:
    @@Set:
    @@DocAttr: filePathStemAttr

  @Attr:
    @@Name: resourceIsPartial
    @@enDesc:
      Whether the element contains only partial description
      for the resource or not (full).
    @@ReflectBoolean:
    @@Get:
    @@Set:
    @@DocAttr: isPartialAttr
##DISDumpElementResource

IFClassDef:
  @IFQName: DISDumpElementDescription
  @ClsQName: ManakaiDOMDISDumpElementDescription

  @Method:
    @@Name: createDescription
    @@enDesc:
      Creates a child <Q::dump:description> element and returns it.
      If this element already has the element then the element is returned.
    @@Return:
      @@@Type: DISDumpElement
      @@@enDesc:
        The child <Q::dump:description> element.
      @@@PerlDef:
      __DEEP{
        C: {
          __CODE{getChildByName::
            $parent => $self, $result => $r,
            $namespace => {<Q::dump:>}, $localName => 'description',
            $label => {C},
          }__;
          $r = $self-><AG::Node.ownerDocument>
                    -><M::Document.createElementNS> (<Q::dump:>, 'description');
          $self-><M::Node.appendChild> ($r);
        } # C
      }__;
##DISDumpElementDescription

ResourceDef:
  @QName: isPartialAttr
  @rdf:type: s|Attribute
  @AttrQName: dump|isPartial

ResourceDef:
  @QName: refAttr
  @rdf:type: s|Attribute
  @AttrQName: dump|ref

ResourceDef:
  @QName: fileNameStemAttr
  @AttrQName: dump|fileNameStem
  @rdf:type: s|Attribute

ResourceDef:
  @QName: filePathStemAttr
  @AttrQName: dump|filePathStem
  @rdf:type: s|Attribute

ResourceDef:
  @QName: accessAttr
  @AttrQName: dump|access
  @rdf:type: s|Attribute

ResourceDef:
  @rdf:type: s|Attribute
  @AttrQName: dump|namespaceURI
  @QName: namespaceURIAttr

ResourceDef:
  @rdf:type: s|Attribute
  @AttrQName: dump|localName
  @QName: localNameAttr

ResourceDef:
  @rdf:type: s|Attribute
  @AttrQName: dump|dataType
  @QName: dataTypeAttr

ResourceDef:
  @rdf:type: s|Attribute
  @AttrQName: dump|actualDataType
  @QName: actualDataTypeAttr

ResourceDef:
  @QName: Node
  @AliasFor: DOMCore|Node||ManakaiDOM|ManakaiDOMLatest

ResourceDef:
  @QName: Document
  @AliasFor: DOMCore|Document||ManakaiDOM|ManakaiDOMLatest

ResourceDef:
  @QName: Element
  @AliasFor: DOMCore|Element||ManakaiDOM|ManakaiDOMLatest

ResourceDef:
  @QName: Attr
  @AliasFor: DOMCore|Attr||ManakaiDOM|ManakaiDOMLatest

IFClassDef:
  @IFQName: DISDumpElementURI
  @ClsQName: ManakaiDOMDISDumpElementURI
  
  @IFISA: DISDumpElement
  @ClsISA: ManakaiDOMDISDumpElement

  @Method:
    @@Name: setURI
    @@enDesc:
      Sets the value of this element.
    @@Param:
      @@@Name: uri
      @@@Type: URI
      @@@enDesc:
        The new URI.
    @@Param:
      @@@Name: isAlias
      @@@Type: boolean
      @@@enDesc:
        Whether this URI is an alias or not.
    @@Return:
      @@@PerlDef:
        __DEEP{
          $self-><AS::Node.textContent> ('');
          $self-><M::Element.setAttributeNS> (<Q::dump:>, 'dump:uri', $uri);
          $self-><AS::DISDumpElementURI.isAliasURI> ($isAlias);
          if ($uri =~ /^data:,200411tf\#xmlns\(t=data:,200411tf%23\)
                                        t:tf\(([^,]*),([^,]*)\)/x) {
            my ($t, $f) = ($1, $2);
            require Encode;
            for my $u ($t, $f) {
              $u =~ s/%([0-9A-Fa-f][0-9A-Fa-f])/pack 'C', hex $1/ge;
              $u = Encode::decode ('utf8', $u);
            }
            my $od = $self-><AG::Node.ownerDocument>;
            my $tel = $od-><M::Document.createElementNS> (<Q::dump:>, 'turi');
            $self-><M::Node.appendChild> ($tel);
            $tel-><M::DISDumpElementURI.setURI> ($t);
            my $fel = $od-><M::Document.createElementNS> (<Q::dump:>, 'furi');
            $self-><M::Node.appendChild> ($fel);
            $fel-><M::DISDumpElementURI.setURI> ($f);
            $self-><M::Element.setAttributeNS>
                   (<Q::dump:>, 'dump:uriType', 'tf');
          } elsif ($uri =~ /^data:,200411tf\#xmlns\(t=data:,200411tf%23\)
                                        t:tfp\(([^\)]*)\)/x) {
            my @u = split /,/, $1;
            require Encode;
            for my $u (@u) {
              $u =~ s/%([0-9A-Fa-f][0-9A-Fa-f])/pack 'C', hex $1/ge;
              $u = Encode::decode ('utf8', $u);
            }
            my $od = $self-><AG::Node.ownerDocument>;
            my $tel = $od-><M::Document.createElementNS> (<Q::dump:>, 'turi');
            $self-><M::Node.appendChild> ($tel);
            $tel-><M::DISDumpElementURI.setURI> (shift @u);
            my $fel = $od-><M::Document.createElementNS> (<Q::dump:>, 'furi');
            $self-><M::Node.appendChild> ($fel);
            $fel-><M::DISDumpElementURI.setURI> (shift @u);
            my $pel;
            for my $p (@u) {
              $pel = $od-><M::Document.createElementNS> (<Q::dump:>, 'puri');
              $self-><M::Node.appendChild> ($pel);
              $pel-><M::DISDumpElementURI.setURI> ($p);
            }
            $self-><M::Element.setAttributeNS>
                   (<Q::dump:>, 'dump:uriType', 'tfp');
          } elsif ($uri =~ /^data:,200411tf\#xmlns\(t=data:,200411tf%23\)
                                        t:child\(([^,]*),([^,]*)\)/x) {
            my ($t, $f) = ($1, $2);
            require Encode;
            for my $u ($t, $f) {
              $u =~ s/%([0-9A-Fa-f][0-9A-Fa-f])/pack 'C', hex $1/ge;
              $u = Encode::decode ('utf8', $u);
            }
            my $od = $self-><AG::Node.ownerDocument>;
            my $tel = $od-><M::Document.createElementNS> (<Q::dump:>, 'turi');
            $self-><M::Node.appendChild> ($tel);
            $tel-><M::DISDumpElementURI.setURI> ($t);
            my $fel = $od-><M::Document.createElementNS>
                                                    (<Q::dump:>, 'localName');
            $self-><M::Node.appendChild> ($fel);
            $fel-><M::Element.setAttributeNS>
                   (<Q::dump:>, 'dump:value', $f);
            $self-><M::Element.setAttributeNS>
                   (<Q::dump:>, 'dump:uriType', 'tl');
          } else {
            $self-><M::Element.removeAttributeNS> (<Q::dump:>, 'uriType');
          }
        }__;

  @Attr:
    @@Name: isAliasURI
    @@enDesc:
      Whether this is an alias or not.
    @@ReflectBoolean:
    @@Get:
    @@Set:
    @@DocAttr: isAliasAttr
##DISDumpElementURI

ResourceDef:
  @rdf:type: s|Attribute
  @QName: isAliasAttr
  @AttrQName: dump|isAlias

IFClassETDef:
  @IFQName: DISDumpURIElement
  @ClsQName: ManakaiDOMDISDumpURIElement
  @ETQName: dump|uri

  @IFISA: DISDumpElementURI
  @ClsISA: ManakaiDOMDISDumpElementURI
##DISDumpURIElement

IFClassETDef:
  @IFQName: DISDumpTURIElement
  @ClsQName: ManakaiDOMDISDumpTURIElement
  @ETQName: dump|turi
  
  @IFISA: DISDumpElementURI
  @ClsISA: ManakaiDOMDISDumpElementURI
##DISDumpTURIElement

IFClassETDef:
  @IFQName: DISDumpFURIElement
  @ClsQName: ManakaiDOMDISDumpFURIElement
  @ETQName: dump|furi

  @IFISA: DISDumpElementURI
  @ClsISA: ManakaiDOMDISDumpElementURI
##DISDumpFURIElement

IFClassETDef:
  @IFQName: DISDumpPURIElement
  @ClsQName: ManakaiDOMDISDumpPURIElement
  @ETQName: dump|puri

  @IFISA: DISDumpElementURI
  @ClsISA: ManakaiDOMDISDumpElementURI
##DISDumpPURIElement

IFClassETDef:
  @IFQName: DISDumpModuleSetElement
  @ClsQName: ManakaiDOMDISDumpModuleSetElement
  @ETQName: dump|moduleSet
  @QName:
    @@@: moduleSetElement
    @@ForCheck: s|ForML

  @IFISA: DISDumpElementResource
  @ClsISA: ManakaiDOMDISDumpElementResource

  @Method:
    @@Name: createModule
    @@enDesc:
      Creates an element for a module.  If there is already
      an element for the module, simply that element is returned.
    @@Param:
      @@@Name: uri
      @@@Type: URI
      @@@enDesc:
        The canonical URI of the module to create.
    @@Return:
      @@@Type: DISDumpModuleElement
      @@@enDesc:
        The newly created or already exist module element.
      @@@PerlDef:
        __CODE{createChild::
          $namespace => {<Q::dump:>},
          $localName => 'module',
          $uri => $uri,
          $parent => $self,
          $result => $r,
        }__;
##DISDumpModuleSetElement

ResourceDef:
  @QName: URI
  @AliasFor: DIS|AnyURI

IFClassETDef:
  @IFQName: DISDumpModuleElement
  @ClsQName: ManakaiDOMDISDumpModuleElement
  @ETQName: dump|module

  @IFISA: DISDumpElementResource
  @ClsISA: ManakaiDOMDISDumpElementResource

  @PackageNameAttr:

  @Method:
    @@Name: createClass
    @@enDesc:
      Creates an element for a class.  If there is already
      an element for the class, simply that element is returned.
    @@Param:
      @@@Name: uri
      @@@Type: URI
      @@@enDesc:
        The canonical URI of the module to create.
    @@Return:
      @@@Type: DISDumpClassElement
      @@@enDesc:
        The newly created or already exist class element.
      @@@PerlDef:
        __CODE{createChild::
          $namespace => {<Q::dump:>},
          $localName => 'class',
          $uri => $uri,
          $parent => $self,
          $result => $r,
        }__;

  @Method:
    @@Name: createInterface
    @@enDesc:
      Creates an element for an interface.  If there is already
      an element for the interface, simply that element is returned.
    @@Param:
      @@@Name: uri
      @@@Type: URI
      @@@enDesc:
        The canonical URI of the interface to create.
    @@Return:
      @@@Type: DISDumpInterfaceElement
      @@@enDesc:
        The newly created or already exist interface element.
      @@@PerlDef:
        __CODE{createChild::
          $namespace => {<Q::dump:>},
          $localName => 'interface',
          $uri => $uri,
          $parent => $self,
          $result => $r,
        }__;

  @Method:
    @@Name: createDataType
    @@enDesc:
      Creates an element for a datatype.  If there is already
      an element for the datatype, simply that element is returned.
    @@Param:
      @@@Name: uri
      @@@Type: URI
      @@@enDesc:
        The name of the module to create.
    @@Return:
      @@@Type: DISDumpDataTypeElement
      @@@enDesc:
        The newly created or already exist datatype element.
      @@@PerlDef:
        __CODE{createChild::
          $namespace => {<Q::dump:>},
          $localName => 'dataType',
          $uri => $uri,
          $parent => $self,
          $result => $r,
        }__;
##DISDumpModuleElement

ElementTypeBinding:
  @Name: PackageNameAttr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Attribute
    @@Name: perlPackageName
    @@Description:
      @@@lang:en
      @@@@:
        The Perl package name for this resource.
    @@Type: DOMString
    @@ResourceDef:
      @@@rdf:type: DISLang|AttributeGet
      @@@Def:
        @@@@ContentType: lang|Perl
        @@@@@:
          __DEEP{
            __CODE{getChildByName::
              $parent => $self, $result => $r, $label => {},
              $namespace => {<Q::dump:>}, $localName => 'perlPackageName',
            }__;
            $r = $r-><AG::Node.textContent> if $r;
          }__;
    @@ResourceDef:
      @@@rdf:type: DISLang|AttributeSet
      @@@Def:
        @@@@ContentType: lang|Perl
        @@@@@:
          __DEEP{
            my $r;
            C: {
              __CODE{getChildByName::
                $parent => $self, $result => $r, $label => {C},
                $namespace => {<Q::dump:>}, $localName => 'perlPackageName',
              }__;
              $r = $self-><AG::Node.ownerDocument>
                        -><M::Document.createElementNS>
                               (<Q::dump:>, 'perlPackageName');
              $self-><M::Node.appendChild> ($r);
            } # C
            $r-><AS::Node.textContent> ($given);
          }__;

ResourceDef:
  @QName: DOMString
  @AliasFor: DOMMain|DOMString||ManakaiDOM|ManakaiDOM

IFClassDef:
  @IFQName: DISDumpElementClass
  @ClsQName: ManakaiDOMDISDumpElementClass

  @PackageNameAttr:

  @Method:
    @@Name: createMethod
    @@enDesc:
      Creates an element for a method.  If there is already
      an element for the method, simply that element is returned.
    @@Param:
      @@@Name: perlNameArg
      @@@Type: DOMString
      @@@enDesc:
        The Perl name of the method to create.
    @@Return:
      @@@Type: DISDumpMethodElement
      @@@enDesc:
        The newly created or already exist method element.
      @@@PerlDef:
        __CODE{createChildByPerlName::
          $namespace => {<Q::dump:>},
          $localName => 'method',
          $perlName => $perlNameArg,
          $parent => $self,
          $result => $r,
        }__;
        my $el;
        __CODE{createChildByElementType::
          $namespace => {<Q::dump:>},
          $localName => 'return',
          $parent => $r, $result => $el,
        }__;

  @Method:
    @@Name: createAttribute
    @@enDesc:
      Creates an element for an attribute.  If there is already
      an element for the attribute, simply that element is returned.
    @@Param:
      @@@Name: perlNameArg
      @@@Type: DOMString
      @@@enDesc:
        The Perl name of the attribute to create.
    @@Param:
      @@@Name: isReadOnly
      @@@Type: boolean
      @@@enDesc:
        Whether the attribute is read-only or not.
    @@Return:
      @@@Type: DISDumpAttributeElement
      @@@enDesc:
        The newly created or already exist attribute element.
      @@@PerlDef:
        __CODE{createChildByPerlName::
          $namespace => {<Q::dump:>},
          $localName => 'attribute',
          $perlName => $perlNameArg,
          $parent => $self,
          $result => $r,
        }__;
        my $el;
        __CODE{createChildByElementType::
          $namespace => {<Q::dump:>},
          $localName => 'get',
          $parent => $r, $result => $el,
        }__;
        unless ($isReadOnly) {
          __CODE{createChildByElementType::
            $namespace => {<Q::dump:>},
            $localName => 'set',
            $parent => $r, $result => $el,
          }__;
        }

  @Method:
    @@Name: createConstGroup
    @@enDesc:
      Creates an element for a const group.  If there is already
      an element for the group, simply that element is returned.
    @@Param:
      @@@Name: perlNameArg
      @@@Type: DOMString
      @@@enDesc:
        The Perl name of the group to create.
    @@Return:
      @@@Type: DISDumpConstGroupElement
      @@@enDesc:
        The newly created or already exist group element.
      @@@PerlDef:
        __CODE{createChildByPerlName::
          $namespace => {<Q::dump:>},
          $localName => 'constGroup',
          $perlName => $perlNameArg,
          $parent => $self,
          $result => $r,
        }__;
##DISDumpElementClass

IFClassDef:
  @IFQName: DISDumpElementExtends
  @ClsQName: ManakaiDOMDISDumpElementExtends

  @Method:
    @@Name: appendNewExtends
    @@enDesc:
      Adds a superclass of this class.
    @@Param:
      @@@Name: uri
      @@@Type: URI
      @@@enDesc:
        The URI of the superclass to add.
    @@Return:
      @@@Type: DISDumpExtendsElement
      @@@enDesc:
        The newly created extends element.
      @@@PerlDef: 
        __DEEP{
          $r = $self-><M::Node.appendChild>
              ($self-><AG::Node.ownerDocument>
                    -><M::Document.createElementNS>
                         (<Q::dump:>, 'extends'));
          $r-><M::Element.setAttributeNS>
                         (<Q::dump:>, 'dump:uri' => $uri);
        }__;
##DISDumpElementExtends

IFClassDef:
  @IFQName: DISDumpElementImplements
  @ClsQName: ManakaiDOMDISDumpElementImplements

  @Method:
    @@Name: appendNewImplements
    @@enDesc:
      Adds an interface implemented by this class.
    @@Param:
      @@@Name: uri
      @@@Type: URI
      @@@enDesc:
        The URI of the interface to add.
    @@Return:
      @@@Type: DISDumpImplementsElement
      @@@enDesc:
        The newly created implements element.
      @@@PerlDef: 
        __DEEP{
          $r = $self-><M::Node.appendChild>
              ($self-><AG::Node.ownerDocument>
                    -><M::Document.createElementNS>
                         (<Q::dump:>, 'implements'));
          $r-><M::Element.setAttributeNS>
                         (<Q::dump:>, 'dump:uri' => $uri);
        }__;
##DISDumpElementImplements

IFClassETDef:
  @IFQName: DISDumpClassElement
  @ClsQName: ManakaiDOMDISDumpClassElement
  @ETQName: dump|class

  @IFISA: DISDumpElementResource
  @ClsISA: ManakaiDOMDISDumpElementResource

  @IFISA: DISDumpElementClass
  @ClsISA: ManakaiDOMDISDumpElementClass

  @IFISA: DISDumpElementExtends
  @ClsISA: ManakaiDOMDISDumpElementExtends

  @IFISA: DISDumpElementImplements
  @ClsISA: ManakaiDOMDISDumpElementImplements
##DISDumpClassElement

IFClassETDef:
  @IFQName: DISDumpInterfaceElement
  @ClsQName: ManakaiDOMDISDumpInterfaceElement
  @ETQName: dump|interface

  @IFISA: DISDumpElementResource
  @ClsISA: ManakaiDOMDISDumpElementResource

  @IFISA: DISDumpElementClass
  @ClsISA: ManakaiDOMDISDumpElementClass

  @IFISA: DISDumpElementExtends
  @ClsISA: ManakaiDOMDISDumpElementExtends

  @ATTR:
    @@DOMName: isExceptionInterface
    @@ATTRQName: dump|isException
    @@ReflectBoolean:
    @@Get:
    @@Set:
    @@enDesc:
      Whether this interface defines an exception interface
      or a general interface.
##DISDumpInterfaceElement

IFClassDef:
  @IFQName: DISDumpElementRDFClass
  @ClsQName: ManakaiDOMDISDumpElementRDFClass

  @enDesc:
    The <IF::DISDumpElementRDFClass> interface should be 
    implemented by element node which is an RDF class (<Q::rdf:Class>).

  @Method:
    @@Name: appendNewSubClassOf
    @@enDesc:
      Adds a superclass of this class.
    @@Param:
      @@@Name: uri
      @@@Type: URI
      @@@enDesc:
        The URI of the superclass to add.
    @@Return:
      @@@Type: DISDumpSubClassOfElement
      @@@enDesc:
        The newly created <XE::dump:subClassOf> element.
      @@@PerlDef: 
        __DEEP{
          $r = $self-><M::Node.appendChild>
              ($self-><AG::Node.ownerDocument>
                    -><M::Document.createElementNS>
                         (<Q::dump:>, 'subClassOf'));
          $r-><M::Element.setAttributeNS>
                         (<Q::dump:>, 'dump:ref' => $uri);
        }__;
##DISDumpElementRDFClass

IFClassETDef:
  @IFQName: DISDumpSubClassOfElement
  @ClsQName: ManakaiDOMDISDumpSubClassOfElement
  @ETQName: dump|subClassOf

  @IFISA: DISDumpElement
  @ClsISA: ManakaiDOMDISDumpElement

  @IFISA: DISDumpElementRDFClass
  @ClsISA: ManakaiDOMDISDumpElementRDFClass
##DISDumpSubClassOfElement


IFClassETDef:
  @IFQName: DISDumpExtendsElement
  @ClsQName: ManakaiDOMDISDumpExtendsElement
  @ETQName: dump|extends

  @IFISA: DISDumpElement
  @ClsISA: ManakaiDOMDISDumpElement

  @IFISA: DISDumpElementExtends
  @ClsISA: ManakaiDOMDISDumpElementExtends
##DISDumpExtendsElement

IFClassETDef:
  @IFQName: DISDumpImplementsElement
  @ClsQName: ManakaiDOMDISDumpImplementsElement
  @ETQName: dump|implements

  @IFISA: DISDumpElement
  @ClsISA: ManakaiDOMDISDumpElement

  @IFISA: DISDumpElementExtends
  @ClsISA: ManakaiDOMDISDumpElementExtends
##DISDumpImplementsElement

ResourceDef:
  @QName: sourceClassAttr
  @rdf:type: s|Attribute
  @AttrQName: dump|sourceClass

IFClassDef:
  @IFQName: DISDumpElementClassMember
  @ClsQName: ManakaiDOMDISDumpElementClassMember
  
  @Method:
    @@Name: appendNewOverrides
    @@enDesc:
      Adds a reference to a class member resource which belongs to
      any superclass and which is overridden by this resource.
    @@Param:
      @@@Name: uri
      @@@Type: URI
      @@@enDesc:
        The URI of the superresource to add.
    @@Return:
      @@@Type: DISDumpElement
      @@@enDesc:
        The newly created overrides element.
      @@@PerlDef: 
        __DEEP{
          $r = $self-><M::Node.appendChild>
              ($self-><AG::Node.ownerDocument>
                    -><M::Document.createElementNS>
                         (<Q::dump:>, 'overrides'));
          $r-><M::Element.setAttributeNS>
                         (<Q::dump:>, 'dump:uri' => $uri);
        }__;
##DISDumpElementClassMember

IFClassETDef:
  @IFQName: DISDumpMethodElement
  @ClsQName: ManakaiDOMDISDumpMethodElement
  @ETQName: dump|method

  @IFISA: DISDumpElementResource
  @ClsISA: ManakaiDOMDISDumpElementResource

  @IFISA: DISDumpElementClassMember
  @ClsISA: ManakaiDOMDISDumpElementClassMember

  @IFISA: DISDumpElementImplements
  @ClsISA: ManakaiDOMDISDumpElementImplements

  @Attr:
    @@Name: disReturn
    @@enDesc:
      Creates an element for a method <QUOTE::return>.  If there is already
      an element for the method, simply that element is returned.
    @@Type: DISDumpMethodReturnElement
    @@Get:
      @@@PerlDef:
        __DEEP{
          C: {
              __CODE{getChildByName::
                $parent => $self, $result => $r, $label => {C},
                $namespace => {<Q::dump:>}, $localName => 'return',
              }__;
            unless ($r) {
              $r = $self-><AG::Node.ownerDocument>
                        -><M::Document.createElementNS>
                             (<Q::dump:>, 'return');
              $self-><M::Node.appendChild> ($r);
            }
          } # C
        }__;

  @Method:
    @@Name: createParameter
    @@enDesc:
      Creates an element for a parameter.  If there is already
      an element for the group, simply that element is returned.
    @@Param:
      @@@Name: perlNameArg
      @@@Type: DOMString
      @@@enDesc:
        The Perl name of the group to create, with prefix if non-named
        parameter, or without prefix if named parameter.
    @@Param:
      @@@Name: isNamedParam
      @@@Type: boolean
      @@@enDesc:
        Whether is this parameter is a named parameter or not.
    @@Return:
      @@@Type: DISDumpMethodParameterElement
      @@@enDesc:
        The newly created or already exist parameter element.
      @@@PerlDef:
        my $prefix;
        if ($perlNameArg =~ s/^([\$\@%&*])//) {
          $prefix = $1;
        }
        __CODE{createChildByPerlName::
          $namespace => {<Q::dump:>},
          $localName => 'param',
          $perlName => $perlNameArg,
          $parent => $self,
          $result => $r,
        }__;
        __DEEP{
          $r-><AS::DISDumpMethodParameterElement.isNamedParameter>
              ($isNamedParam);
          $r-><M::Element.setAttributeNS> (<Q::dump:>, 'dump:prefix', $prefix)
            if defined $prefix;
        }__;
##DISDumpMethodElement


IFClassETDef:
  @IFQName: DISDumpAttributeElement
  @ClsQName: ManakaiDOMDISDumpAttributeElement
  @ETQName: dump|attribute

  @IFISA: DISDumpElementResource
  @ClsISA: ManakaiDOMDISDumpElementResource

  @IFISA: DISDumpElementClassMember
  @ClsISA: ManakaiDOMDISDumpElementClassMember

  @IFISA: DISDumpElementImplements
  @ClsISA: ManakaiDOMDISDumpElementImplements

  @Attr:
    @@Name: disGet
    @@enDesc:
      Creates an element for an attribute getter.  If there is already
      an element for the attribute, simply that element is returned.
    @@Type: DISDumpAttributeGetElement
    @@Get:
      @@@PerlDef:
        __DEEP{
          C: {
              __CODE{getChildByName::
                $parent => $self, $result => $r, $label => {C},
                $namespace => {<Q::dump:>}, $localName => 'get',
              }__;
            unless ($r) {
              $r = $self-><AG::Node.ownerDocument>
                        -><M::Document.createElementNS>
                             (<Q::dump:>, 'get');
              $self-><M::Node.appendChild> ($r);
            }
          } # C
        }__;

  @Attr:
    @@Name: disSet
    @@enDesc:
      Creates an element for an attribute setter.  If there is already
      an element for the attribute, simply that element is returned.
    @@Type: DISDumpAttributeSetElement
    @@Get:
      @@@PerlDef:
        __DEEP{
          C: {
              __CODE{getChildByName::
                $parent => $self, $result => $r, $label => {C},
                $namespace => {<Q::dump:>}, $localName => 'set',
              }__;
            unless ($r) {
              $r = $self-><AG::Node.ownerDocument>
                        -><M::Document.createElementNS>
                             (<Q::dump:>, 'set');
              $self-><M::Node.appendChild> ($r);
            }
          } # C
        }__;

  @ATTR:
    @@DOMName: isReadOnlyAttribute
    @@ATTRQName: dump|isReadOnly
    @@enDesc:
      Returns whether this attribute is read-only or not.
    @@ReflectBoolean:
    @@Get:
    @@Set:
##DISDumpAttributeElement

ResourceDef:
  @QName: boolean
  @AliasFor: DOMMain|boolean||ManakaiDOM|all


ResourceDef:
  @QName: NodeStem
  @AliasFor: ManakaiNode|NodeStem||ManakaiDOM|Perl
  @For: ManakaiDOM|Perl

ResourceDef:
  @QName: NodeRef
  @AliasFor: ManakaiNode|NodeRef||ManakaiDOM|Perl
  @For: ManakaiDOM|Perl

ElementTypeBinding:
  @Name: ReflectCDATA
  @ElementType:
    dis:Type
  @ShadowContent:
    @@@: DOMString
  @ShadowSibling:
    @@actualType: CDATADOMString

ElementTypeBinding:
  @Name: ReflectBoolean
  @ElementType:
    dis:Type
  @ShadowContent:
    @@@: DOMMain|boolean||ManakaiDOM|all
  @ShadowSibling:
    @@actualType: Boolean

IFClassETDef:
  @IFQName: DISDumpMethodParameterElement
  @ClsQName: ManakaiDOMDISDumpMethodParameterElement
  @ETQName: dump|param

  @IFISA: DISDumpElementResource
  @ClsISA: ManakaiDOMDISDumpElementResource

  @IFISA: DISDumpElementSelectCase
  @ClsISA: ManakaiDOMDISDumpElementSelectCase

  @ATTR:
    @@DOMName: isNamedParameter
    @@ATTRQName: dump|isNamedParameter
    @@ReflectBoolean:
    @@enDesc:
      Whether this parameter is a named parameter or not.
    @@Get:
    @@Set:

  @ATTR:
    @@DOMName: isNullableParameter
    @@ATTRQName: dump|isNullable
    @@ReflectBoolean:
    @@enDesc:
      Whether this parameter is <DOM::null>able or not.
    @@Get:
    @@Set:
##DISDumpMethodParameterElement

IFClassDef:
  @IFQName: DISDumpElementSelectCase
  @ClsQName: ManakaiDOMDISDumpElementSelectCase

  @Method:
    @@Name: appendCase
    @@enDesc:
      Creates an element for a case.
    @@Return:
      @@@Type: DISDumpCaseElement
      @@@enDesc:
        The newly created element.
      @@@PerlDef:
        __DEEP{
          $r = $self-><AG::Node.ownerDocument>
                    -><M::Document.createElementNS>
                          (<Q::dump:>, 'case');
          $self-><M::Node.appendChild> ($r);
        }__;
##DISDumpElementSelectCase

IFClassDef:
  @IFQName: DISDumpElementRaises
  @ClsQName: ManakaiDOMDISDumpElementRaises

  @Method:
    @@Name: createRaises
    @@enDesc:
      Creates an element for a <QUOTE::raises>.
    @@Param:
      @@@Name: classURI
      @@@Type: URI
      @@@enDesc:
        The URI of the resource for the exception interface or class.
    @@Param:
      @@@Name: codeURI
      @@@Type: URI
      @@@enDesc:
        The URI of the resource for the exception code.
      @@@nullCase:
        @@@@enDesc:
          No code information.
    @@Param:
      @@@Name: subCodeURI
      @@@Type: URI
      @@@enDesc:
        The URI of the resource for the exception subcode.
      @@@nullCase:
        @@@@enDesc:
          No code information.
    @@Return:
      @@@Type: DISDumpElement
      @@@enDesc:
        The newly created element.  If <P::subCodeURI> is specified,
        it is a <XE::dump|raisesSubCode> element.  If not specified 
        but <P::codeURI> is specified, it is a <XE::dump|raisesCode>
        element.  Otherwise, it is a <XE::dump|raises> element.
      @@@PerlDef:
        my $iel;
        __CODE{createChildByRefURI::
          $namespace => {<Q::dump:>},
          $localName => 'raises',
          $uri => $classURI,
          $parent => $self,
          $result => $iel,
        }__;
        my $cel;
        if (defined $codeURI) {
          __CODE{createChildByRefURI::
           $namespace => {<Q::dump:>},
            $localName => 'raisesCode',
            $uri => $codeURI,
            $parent => $iel,
            $result => $cel,
          }__;
          if (defined $subCodeURI) {
            __CODE{createChildByRefURI::
             $namespace => {<Q::dump:>},
              $localName => 'raisesSubCode',
              $uri => $subCodeURI,
              $parent => $cel,
              $result => $r,
            }__;
          } else {
            $r = $cel;
          }
        } else {
          $r = $iel;
        }
##DISDumpElementRaises



IFClassETDef:
  @IFQName: DISDumpMethodReturnElement
  @ClsQName: ManakaiDOMDISDumpMethodReturnElement
  @ETQName: dump|return

  @IFISA: DISDumpElementResource
  @ClsISA: ManakaiDOMDISDumpElementResource

  @IFISA: DISDumpElementSelectCase
  @ClsISA: ManakaiDOMDISDumpElementSelectCase

  @IFISA: DISDumpElementRaises
  @ClsISA: ManakaiDOMDISDumpElementRaises
##DISDumpMethodReturnElement

IFClassETDef:
  @IFQName: DISDumpAttributeGetElement
  @ClsQName: ManakaiDOMDISDumpAttributeGetElement
  @ETQName: dump|get

  @IFISA: DISDumpElementResource
  @ClsISA: ManakaiDOMDISDumpElementResource

  @IFISA: DISDumpElementSelectCase
  @ClsISA: ManakaiDOMDISDumpElementSelectCase

  @IFISA: DISDumpElementRaises
  @ClsISA: ManakaiDOMDISDumpElementRaises
##DISDumpAttributeGetElement

IFClassETDef:
  @IFQName: DISDumpAttributeSetElement
  @ClsQName: ManakaiDOMDISDumpAttributeSetElement
  @ETQName: dump|set

  @IFISA: DISDumpElementResource
  @ClsISA: ManakaiDOMDISDumpElementResource

  @IFISA: DISDumpElementSelectCase
  @ClsISA: ManakaiDOMDISDumpElementSelectCase

  @IFISA: DISDumpElementRaises
  @ClsISA: ManakaiDOMDISDumpElementRaises
##DISDumpAttributeSetElement

IFClassDef:
  @IFQName: DISDumpElementLabel
  @ClsQName: ManakaiDOMDISDumpElementLabel

  @Method:
    @@Name: createLabel
    @@enDesc:
      Creates a child <Q::dump:label> element and returns it.
      If this element already has the element then the element is returned.
    @@Return:
      @@@Type: DISDumpElement
      @@@enDesc:
        The child <Q::dump:label> element.
      @@@PerlDef:
      __DEEP{
        C: {
          __CODE{getChildByName::
            $parent => $self, $result => $r,
            $namespace => {<Q::dump:>}, $localName => 'label',
            $label => {C},
          }__;
          $r = $self-><AG::Node.ownerDocument>
                    -><M::Document.createElementNS> (<Q::dump:>, 'label');
          $self-><M::Node.appendChild> ($r);
        } # C
      }__;

  @Attr:
    @@Name: hasLabel
    @@enDesc:
      Returns whether this element has label or not.
    @@Type: boolean
    @@Get:
      @@@PerlDef:
        __DEEP{
          $r = $self-><M::DISDumpElementLabel.createLabel>
                    -><M::Node.hasChildNodes>;
        }__;
##DISDumpElementLabel

IFClassDef:
  @IFQName: DISDumpElementValue
  @ClsQName: ManakaiDOMDISDumpElementValue

  @Method:
    @@Name: createValue
    @@enDesc:
      Creates a child <Q::dump:value> element and returns it.
      If this element already has the element then the element is returned.
    @@Return:
      @@@Type: DISDumpElement
      @@@enDesc:
        The child <Q::dump:value> element.
      @@@PerlDef:
      __DEEP{
        C: {
          __CODE{getChildByName::
            $parent => $self, $result => $r,
            $namespace => {<Q::dump:>}, $localName => 'value',
            $label => {C},
          }__;
          $r = $self-><AG::Node.ownerDocument>
                    -><M::Document.createElementNS> (<Q::dump:>, 'value');
          $self-><M::Node.appendChild> ($r);
        } # C
      }__;

  @Attr:
    @@Name: hasValue
    @@enDesc:
      Returns whether this element has value or not.
    @@Type: boolean
    @@Get:
      @@@PerlDef:
        __DEEP{
          $r = $self-><M::DISDumpElementValue.createValue>
                    -><M::Node.hasChildNodes>;
        }__;
##DISDumpElementValue

IFClassETDef:
  @IFQName: DISDumpCaseElement
  @ClsQName: ManakaiDOMDISDumpCaseElement
  @ETQName: dump|case

  @IFISA: DISDumpElementResource
  @ClsISA: ManakaiDOMDISDumpElementResource

  @IFISA: DISDumpElementLabel
  @ClsISA: ManakaiDOMDISDumpElementLabel

  @IFISA: DISDumpElementValue
  @ClsISA: ManakaiDOMDISDumpElementValue
##DISDumpCaseElement

IFClassETDef:
  @IFQName: DISDumpRaisesElement
  @ClsQName: ManakaiDOMDISDumpRaisesElement
  @ETQName: dump|raises

  @IFISA: DISDumpElementDescription
  @ClsISA: ManakaiDOMDISDumpElementDescription
##DISDumpRaisesElement

IFClassETDef:
  @IFQName: DISDumpRaisesCodeElement
  @ClsQName: ManakaiDOMDISDumpRaisesCodeElement
  @ETQName: dump|raisesCode

  @IFISA: DISDumpElementDescription
  @ClsISA: ManakaiDOMDISDumpElementDescription
##DISDumpRaisesCodeElement

IFClassETDef:
  @IFQName: DISDumpRaisesSubCideElement
  @ClsQName: ManakaiDOMDISDumpRaisesSubCodeElement
  @ETQName: dump|raisesSubCode

  @IFISA: DISDumpElementDescription
  @ClsISA: ManakaiDOMDISDumpElementDescription
##DISDumpRaisesSubCodeElement

ReflectTypeDef:
  @QName: CDATADOMString
  @enDesc:
    <IF::DOMMain:DOMString> for DOM attributes reflecting
    <SGML::CDATA> element attributes.
  @rdfs:subClassOf: DOMString
  @ResourceDef:
    @@rdf:type: DOMMain|ReflectGet
    @@DefaultValue: \
    @@enDesc:
      The DOM attribute returns the current value of the element attribute
      in a transparent, case-sensitive manner.
      \
      If the element attribute is absent, the default value, if any,
      or the empty string is returned.
    @@PerlDef:
      my $ao = $self->{<Q::TreeCore:node>}->{<Q::infoset:attributes>}
                    ->{$NS_URI_NO_NULL}->{$LOCAL_NAME};
      if ($ao) {
        my $attr;
        __CODE{ManakaiNode:getWeakReference||ManakaiDOM:Perl::
          $object => $ao, $ref => $attr,
          $class => {<ClassName::DOMCore:ManakaiDOMAttr
                               ::ManakaiDOM:ManakaiDOMLatest>},
        }__;
        __DEEP{
          $r = $attr-><AG::Attr.value>;
        }__;
      }
  @ResourceDef:
    @@QName: CDATADOMStringSet
    @@rdf:type: DOMMain|ReflectSet
    @@enDesc:
      The corresponding element attribute is set to the given value,
      in a transparent, case-sensitive manner.
    @@ImplNote:
      @@@lang:en
      @@@@: 
        What will happen if the <DOM::null> value is given?
    @@PerlDef:
      my $ao = $self->{<Q::TreeCore:node>}->{<Q::infoset:attributes>}
                    ->{$NS_URI_NO_NULL}->{$LOCAL_NAME};
      if ($ao) {
        my $attr;
        __CODE{ManakaiNode:getWeakReference||ManakaiDOM:Perl::
          $object => $ao, $ref => $attr,
          $class => {<ClassName::DOMCore:ManakaiDOMAttr
                               ::ManakaiDOM:ManakaiDOMLatest>},
        }__;
        __DEEP{
          $attr-><AS::Attr.value> ($given);
        }__;
      } else {
        __DEEP{
          $self-><M::Element.setAttributeNS>
                                               ($NS_URI, $QNAME => $given);
        }__;
      }

      
ReflectTypeDef:
  @QName: Boolean
  @enDesc:
    <IF::DOMMain:boolean::ManakaiDOM:all> for DOM attributes reflecting
    boolean element attributes.
  @rdfs:subClassOf: DOMMain|boolean||ManakaiDOM|all
  @ResourceDef:
    @@rdf:type: DOMMain|ReflectGet
    @@DefaultValue: false
    @@enDesc:
      The DOM attribute returns <DOM::true> if the element attribute
      is set and <DOM::false> if it is absent.
    @@PerlDef:
      my $ao = $self->{<Q::TreeCore:node>}->{<Q::infoset:attributes>}
                    ->{$NS_URI_NO_NULL}->{$LOCAL_NAME};
      if ($ao) {
        my $attr;
        __CODE{ManakaiNode:getWeakReference||ManakaiDOM:Perl::
          $object => $ao, $ref => $attr,
          $class => {<ClassName::DOMCore:ManakaiDOMAttr
                               ::ManakaiDOM:ManakaiDOMLatest>},
        }__;
        __DEEP{
          $r = $attr-><AG::Attr.value> =~ /\A\s*(?:tr ue|1)\s*\z/x
             ? true : false;
        }__;
      }
  @ResourceDef:
    @@rdf:type: DOMMain|ReflectSet
    @@enDesc:
      The element attribute is removed if the DOM attribute
      is set to <DOM::false> and is set to have the same
      value as its local name if the DOM attribute is set to <DOM::true>.
    @@PerlDef:
      my $ao = $self->{<Q::TreeCore:node>}->{<Q::infoset:attributes>}
                    ->{$NS_URI_NO_NULL}->{$LOCAL_NAME};
      if ($ao) {
        if ($given) {
          my $attr;
          __CODE{ManakaiNode:getWeakReference||ManakaiDOM:Perl::
            $object => $ao, $ref => $attr,
            $class => {<ClassName::DOMCore:ManakaiDOMAttr
                                 ::ManakaiDOM:ManakaiDOMLatest>},
          }__;
          __DEEP{
            $attr-><AS::Attr.value> ('tr'.'ue');
          }__;
        } else {
          CORE::delete $self->{<Q::TreeCore:node>}->{<Q::infoset:attributes>}
                            ->{$NS_URI_NO_NULL}->{$LOCAL_NAME};
          CORE::delete $ao->{<Q::infoset:ownerElement>};
          $ao-><M::NodeStem.orphanate>;
        }
      } else {
        if ($given) {
          __DEEP{
            $self-><M::Element.setAttributeNS>
                                            ($NS_URI, $QNAME => 'tr'.'ue');
          }__;
        }
      }

ElementTypeBinding:
  @Name: ReflectTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: ManakaiDOM|DataType
    @@ForCheck: !ManakaiDOM|IDL

ElementTypeBinding:
  @Name: Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Attribute

ElementTypeBinding:
  @Name: Get
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|AttributeGet

ElementTypeBinding:
  @Name: Set
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|AttributeSet

ElementTypeBinding:
  @Name: ATTR
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@: s|Attribute
      @@@ForCheck: s|ForML
    @@rdf:type:
      @@@@: DISLang|Attribute
      @@@ForCheck: ManakaiDOM|ForClass
    @@rdf:type:
      @@@@: DISLang|Attribute
      @@@ForCheck: ManakaiDOM|ForIF
    @@DocAttr:
      @@@@: ||+||s|ForML
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass
    @@DocAttr:
      @@@@: ||+||s|ForML
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: DOMName
  @ElementType:
    dis:Name
  @ShadowContent:
    @@ForCheck: !s|ForML

IFClassETDef:
  @IFQName: DISDumpConstGroupElement
  @ClsQName: ManakaiDOMDISDumpConstGroupElement
  @ETQName: dump|constGroup

  @IFISA: DISDumpElementResource
  @ClsISA: ManakaiDOMDISDumpElementResource

  @IFISA: DISDumpElementImplements
  @ClsISA: ManakaiDOMDISDumpElementImplements

  @IFISA: DISDumpElementClassMember
  @ClsISA: ManakaiDOMDISDumpElementClassMember

  @Method:
    @@Name: createConst
    @@enDesc:
      Creates an element for a constant.  If there is already
      an element for the constant, simply that element is returned.
    @@Param:
      @@@Name: perlNameArg
      @@@Type: DOMString
      @@@enDesc:
        The name of the module to create.
    @@Return:
      @@@Type: DISDumpConstElement
      @@@enDesc:
        The newly created or already exist constant element.
      @@@PerlDef:
        __CODE{createChildByPerlName::
          $namespace => {<Q::dump:>},
          $localName => 'const',
          $perlName => $perlNameArg,
          $parent => $self,
          $result => $r,
        }__;
##DISDumpConstGroupElement

IFClassETDef:
  @IFQName: DISDumpConstElement
  @ClsQName: ManakaiDOMDISDumpConstElement
  @ETQName: dump|const

  @IFISA: DISDumpElementResource
  @ClsISA: ManakaiDOMDISDumpElementResource

  @IFISA: DISDumpElementValue
  @ClsISA: ManakaiDOMDISDumpElementValue

  @IFISA: DISDumpElementImplements
  @ClsISA: ManakaiDOMDISDumpElementImplements

  @Method:
    @@Name: createExceptionSubCode
    @@enDesc:
      Creates an element for a subcode.  If there is already
      an element for the subcode, simply that element is returned.
    @@Param:
      @@@Name: uri
      @@@Type: URI
      @@@enDesc:
        The URI of the module to create.
    @@Return:
      @@@Type: DISDumpExceptionSubCodeElement
      @@@enDesc:
        The newly created or already exist constant element.
      @@@PerlDef:
        __CODE{createChild::
          $namespace => {<Q::dump:>},
          $localName => 'exceptionSubCode',
          $uri => $uri,
          $parent => $self,
          $result => $r,
        }__;
##DISDumpConstElement

IFClassETDef:
  @IFQName: DISDumpExceptionSubCodeElement
  @ClsQName: ManakaiDOMDISDumpExceptionSubCodeElement
  @ETQName: dump|exceptionSubCode

  @IFISA: DISDumpElementResource
  @ClsISA: ManakaiDOMDISDumpElementResource
##DISDumpExceptionSubCodeElement

IFClassETDef:
  @IFQName: DISDumpDataTypeElement
  @ClsQName: ManakaiDOMDISDumpDataTypeElement
  @ETQName: dump|dataType

  @IFISA: DISDumpElementResource
  @ClsISA: ManakaiDOMDISDumpElementResource

  @IFISA: DISDumpElementLabel
  @ClsISA: ManakaiDOMDISDumpElementLabel
##DISDumpDataTypeElement

