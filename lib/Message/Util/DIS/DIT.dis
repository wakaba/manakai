Module:
  @QName: DIS|DIT
  @enFN:
    The DIT <QUOTE::dis> Serialization Format
  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#DIT/
  
  @enDesc:
    ...

  @DISCore:author: DISCore|Wakaba
  @License: license|Perl+MPL
  @Date:
    $Date: 2007/01/20 11:54:40 $
  
  @Require:
    @@Module:
      @@@QName: DIS|common
    @@Module:
      @@@QName: MDOM|DOMCore
      @@@WithFor: ManakaiDOM|ManakaiDOMLatest
    @@Module:
      @@@QName: MDOM|GenericLS
      @@@WithFor: ManakaiDOM|ManakaiDOMLatest
    @@Module:
      @@@WithFor: ManakaiDOM|ManakaiDOM
    @@Module:
      @@@WithFor: ManakaiDOM|ManakaiDOMLatest
    @@Module:
      @@@QName: Util|DIS
      @@@WithFor: DIS|ForLatest

  @DefaultFor: ManakaiDOM|ManakaiDOMLatest

Namespace:
  @c:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
  @DIS:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @DISlib:
    http://suika.fam.cx/~wakaba/archive/2004/dis/
  @dit:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#DIT/
  @domperl:
    http://suika.fam.cx/~wakaba/archive/2006/dom/perl/
  @dtest:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Test/
  @dx:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#
  @ecore:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/
  @f:
    http://suika.fam.cx/~wakaba/archive/2004/dom/feature#
  @gls:
    http://suika.fam.cx/~wakaba/archive/2004/dom/gls#
  @idl:
    http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#
  @kwd:
    http://suika.fam.cx/~wakaba/archive/2005/rfc2119/
  @lang:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @MDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#
  @tc:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/
  @te:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/Element/
  @test:
    http://suika.fam.cx/~wakaba/archive/2004/dis/Test#
  @Util:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/

## -- Features

ElementTypeBinding:
  @Name: FeatureDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DOMFeature|Feature

ElementTypeBinding:
  @Name: FeatureVerDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DOMFeature|Feature

ElementTypeBinding:
  @Name: featureQName
  @ElementType:
    DOMFeature:name
  @ShadowContent:
    @@ContentType: DISCore|QName

FeatureDef:
  @QName: DIS|DIT
  @FeatureVerDef:
    @@QName: DIS|DIT10
    @@Version: 1.0
    @@f:requires: c|CoreFeature30
    @@f:instanceOf: DIS|DIT
    @@enFN:
      The DIT Module, Version 1.0

ElementTypeBinding:
  @Name: enDesc
  @ElementType: 
    dis:Description
  @ShadowContent: 
    @@lang:en

ElementTypeBinding:
  @Name: enFN
  @ElementType:
    dis:FullName
  @ShadowContent:
    @@lang:en

ElementTypeBinding:
  @Name: enImplNote
  @ElementType:
    dis:ImplNote
  @ShadowContent:
    @@lang:en

ElementTypeBinding:
  @Name: IFClsDef
  @ElementType: 
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@: dis|MultipleResource
      @@@ForCheck: !ManakaiDOM|ForIF !ManakaiDOM|ForClass
    @@resourceFor: ManakaiDOM|ForIF
    @@resourceFor: ManakaiDOM|ForClass

    @@rdf:type:
      @@@@: DISLang|Interface
      @@@ForCheck: ManakaiDOM|ForIF

    @@rdf:type:
      @@@@: DISLang|Class
      @@@ForCheck: ManakaiDOM|ForClass

    @@Implement:
      @@@@: ||+||ManakaiDOM|ForIF
      @@@ContentType: DISCore|TFPQNames
      @@@ForCheck: ManakaiDOM|ForClass

    @@f:implements: DIS|DIT10

ElementTypeBinding:
  @Name: IFQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsQName
  @ElementType:
    dis:QName
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: IFISA
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForIF

ElementTypeBinding:
  @Name: ClsISA
  @ElementType:
    dis:ISA
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Method

ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|MethodReturn

ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|MethodParameter

ElementTypeBinding:
  @Name: Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|Attribute

ElementTypeBinding:
  @Name: Get
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|AttributeGet

ElementTypeBinding:
  @Name: Set
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISLang|AttributeSet

ResourceDef:
  @QName: DOMString
  @AliasFor: str|DOMString

ResourceDef:
  @QName: Node
  @AliasFor: tc|Node

ElementTypeBinding:
  @Name: PerlDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType: lang|Perl
    @@ForCheck: ManakaiDOM|ForClass

ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase

ElementTypeBinding:
  @Name: nullCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase
    @@Value:
      @@@is-null:1
      @@@ContentType: DISCore|String

ElementTypeBinding:
  @Name: TrueCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase
    @@Value:
      @@@@: 1
      @@@ContentType: DISCore|Boolean
    @@Type: idl|boolean

ElementTypeBinding:
  @Name: FalseCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase
    @@Value:
      @@@@: 0
      @@@ContentType: DISCore|Boolean
    @@Type: idl|boolean

ElementTypeBinding:
  @Name: RPropDef:
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISSource|Property

ElementTypeBinding:
  @Name: SPropDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DISSource|Property
    @@rdf:type: DISSource|ResourceProperty

IFClsDef:
  @IFQName: DITParser
  @ClsQName: ManakaiDITParser

  @Implement: ecore|MUErrorTarget

  @DISLang:role: gls|ParserRole

  @f:implements: DIS|DIT10

  @enDesc:
    A <IF::DITParser> object parses a DIT source document and
    returns it as an object. 

    A <IF::DITParser> object can be retrieved by 
    <M::GenericLS|GLSImplementation.createGLSParer>.

  @Attr:
    @@Name: domConfig
    @@enDesc:
      The configuration of the parser.

    @@Get:
      @@@Type: c|DOMConfiguration
      @@@enDesc: The DOM configuration object.
      @@@PerlDef:
        __CODE{c|getConfigObject::
          $target => $self,
          $targetHash => $self,
          $targetType => {<IFName::DITParser>},
          $result => $r,
        }__;

  @Method:
    @@ManakaiDOM:isForInternal:1
    @@ForCheck: ManakaiDOM|ForClass
    @@Operator: DISPerl|NewMethod
    @@enDesc:
      Creates a new instance of the object.
    @@Param:
      @@@Name: impl
      @@@Type: gls|GLSImplementation
      @@@enDesc:
        The implementation from which the parser is created.
    @@Param:
      @@@Name: features
      @@@Type: DOMString
      @@@dis:actualType: f|FeaturesString
      @@@enDesc:
        The set of features requested for the parser.
    @@Return:
      @@@Type: DOMMain|DOMObject
      @@@enDesc:
        The newly created parser.
      @@@PerlDef:
        $r = bless {
          <H::f|implementation> => $impl,
        }, $self;

  @Method:
    @@Name: parseString
    @@enDesc:
      Parses a string as DIT textual definition and
      merge resources included there into a <QUOTE::dis> database.
    @@Param:
      @@@Name: sourceText
      @@@Type: DOMString
      @@@enDesc:
        The text to parse.
    @@Param:
      @@@Name: disDatabase
      @@@Type: DISDatabase
      @@@enDesc:
        The <QUOTE::dis> database object to which the
        loaded resources will belong.
    @@Return:
      @@@Type: DISModule
      @@@enDesc:
        The <QUOTE::dis> module object generated from the
        <P::sourceText>.
      @@@dx:raises:
        @@@@@: dit|PARSE_ERR
        @@@@enDesc:
          <kwd:MUST> be thrown if the DIT document contains one or more error.
      @@@PerlDef:
        $self->{char} = [];
        $self->{token} = [];
        $self->{source} = $sourceText;
        $self->{location} = {};
        __DEEP{
          $r = $self->_parse_document;
        }__;

  @Method:
    @@Name: shiftChar
    @@ManakaiDOM:isForInternal:1
    @@ForCheck: ManakaiDOM|ForClass
    @@enDesc:
      Returns the next character.
    @@Return:
      @@@Type: idl|long||ManakaiDOM|all
      @@@enDesc:
        The code position number of the next character, if any,
        or <CODE::-2>.
      @@@PerlDef:
        if (@{$self->{char}}) {
          $r = shift @{$self->{char}};
        } else {
          my $char = substr ($self->{source}, pos ($self->{source}), 1);
          pos ($self->{source})++;

          if (length $char) {
            $r = ord $char;
          } else {
            $r = -1;
          }
        }

  @Method:
    @@ManakaiDOM:isForInternal: 1
    @@Operator: ManakaiDOM|MUErrorHandler
    @@enDesc:
      When a <IF::ecore|ErrorInterface> is <Perl::report>ed,
      then this method is invoked.
      
      The method calls the <cfg::DOMCore|error-handler> if the error is of 
      <IF::DOMCore|DOMError>.  Otherwise, the error is re-thrown so that
      corresponding <Perl::catch> clause, if any, can catch the error.
    @@Param:
      @@@Name: err
      @@@Type: ecore|ErrorInterface
      @@@enDesc:
        The reported error object.
    @@Return:
      @@@Type: DISPerl|Any
      @@@enDesc:
        If the <P::err> is a <IF::DOMCore|DOMError>, then the return value
        of the error handler.

           {NOTE:: If the error is thrown, the method never returns.
           }
      @@@nullCase:
        @@@@enDesc:
          No error handler.
      @@@PerlDef:
        if ($err->isa (<IFName::DOMCore|DOMError>)) {
          __DEEP{
            A: {
              my $cfg = $self-><AG::TDTParser.domConfig>;
              my $h = $cfg-><M::DOMCore|DOMConfiguration.getParameter>
                               ('error-handler');
              $r = $h-><M::DOMCore|DOMErrorHandler.handleError> ($err);
            } # A
          }__;
        } else {
          $err-><M::ecore|ErrorInterface.throw>;
        }

  @DISPerl:dpgDef:
    lexmode default : initial : standalone {

      /* Name */
      $name-start-char := [U+0041..U+005A U+0061..U+007A];
      $name-char       := [U+0041..U+005A U+0061..U+007A U+0030..U+0039 '-' '_'];
      $name := $name-start-char $name-char*;
      $prefixed-name := $name? ['|'] $name?;
      NAME : value := $name;
      PREFIXEDNAME : value := $prefixed-name;
      ANDNAME : value := ['&'] $name;
      DOLLERNAME : value := ['$'] $name;

      /* At-keyword */
      ATKEYWORD : value := ['@'] $name;

      /* RNI-keyword */
      RNIKEYWORD : value := ['#'] $name;

      /* Block */
      LBRACE := ['{'];
      RBRACE := ['}'];

      /* Declaration */
      COLON := [':'];
      SEMICOLON := [';'];

      /* String */
      $hexdigit := [U+0030..U+0039 U+0041..U+0046 U+0061..U+0066];
      $ucs2 := [U+005C] ['u'] $hexdigit $hexdigit $hexdigit $hexdigit;
      $ucs4 := [U+005C] ['U'] $hexdigit $hexdigit $hexdigit $hexdigit
          $hexdigit $hexdigit $hexdigit $hexdigit;
      $schar := $ucs2? $ucs4? [^U+0027 U+005C]?
      STRING : value := [U+0027] $schar* [U+0027];

      /* Number */
      MINUS := ['-'];
      DNUM : value := [U+0030..U+0039]+;
      XNUM : value := ['0'] ['x']
                      [U+0030..U+0039 U+0041..U+0046 U+0061..U+0066 '_']+;
      BNUM : value := ['0'] ['b'] ['0' '1' '_']+;

      /* Functional notation */
      COMMA := [','];
      LPAREN := ['('];
      RPAREN := [')'];

      /* Range */
      RANGE := ['.'] ['.'];

      /* URI */
      URI : value := ['<'] [^'<' '>' '[' ']'] [^'<' '>']* ['>'];
      
      /* Ignored white space */
      WSP : ignore := [U+0009..U+000D U+0020]+;

      /* Ignored comment */
      COMMENT1 : ignore := ['/'] ['/'] [^U+000A..U+000D]* [U+000A..U+000D]*;
      $comment2 := [^'/' '*'] [^'*']* ['*']+;
      COMMENT2 : ignore := ['/'] ['*'] [^'*']* ['*']+ $comment2* ['/'];

    } // lexmode default

    /*
      A DIT Document (|lang:dit|).
    */
    rule document : standalone : recursive {
      /*
        root-document := *at-namespace *at-require *at-import body

        imported-document := *at-namespace *at-require *at-import

        body := *(in-resource-rule / at-let)
    
        in-resource-rule := property / resource / ref / empty-rule

        at-namespace := '@namespace' namespace-prefix uri SEMICOLON

        at-require := '@require' qname SEMICOLON

        at-import := '@import' qname SEMICOLON
 
        at-let := '@let' ANDNAME parameters resource SEMICOLON

        property := qname COLON value SEMICOLON

        resource := LBRACE *in-resource-rule RBRACE

        ref := ANDNAME

        empty-rule := SEMICOLON

        parameters := VARNAME *(COMMA VARNAME)

        value := primitive-value [LBRACE *property RBRACE] / variable-ref

        primitive-value := STRING / number / URI / PREFIXEDNAME / function-call

        function-call := NAME LPAREN [value *(COMMA value)] RPAREN

        variable-ref := DOLLERNAME

        namespace-prefix := NAME / '#default'

        uri := URI / qname

        qname := NAME / PREFIXEDNAME

        number := MINUS? (DNUM / XNUM / BNUM)

        cwsp := WSP / COMMENT1 / COMMENT2
          ;; allowed everywhere
      */

      my $node : return;
      lang:Perl {
        $node = {
        };
      }

      ~ (NAME) {
        lang:Perl ($v => $token.value) {
          $node->{node_type} = $v;
        }
      }

      ~ (LBRACE) { }

      &_node ($node => $node);

      ~ (#EOF) { }
    } // document

    token-error default : default {
      lang:Perl {
        my $location = {
          utf32_offset => pos ($self->{source}),
        };
        my $continue = __DOMCore:ERROR{dit|bad-token-error::
          dit|error-token => {$token},
          DOMCore|location => {$location},
          dit|source-text => {\($self->{source})},
        }__;
        unless ($continue) {
          __EXCEPTION{dtest|PARSE_ERR::
          }__;
        }
        $self->{has_error} = true;
      }
    } // token-error default
##DITParser

IFClsDef:
  @IFQName: DITExceptionFormatter
  @ClsQName: ManakaiDITExceptionFormatter

  @ClsISA: ecore|MUErrorFormatter||ManakaiDOM|Perl

  @RuleDef:
    @@Name: dit-error-token-type
    @@enDesc:
      The type of the token the parser is encountered.

    @@Method:
      @@@Name: after
      @@@Param:
        @@@@Name: name
        @@@@Type: DOMString
        @@@@enDesc: The name of the method.
      @@@Param:
        @@@@Name: p
        @@@@Type: DISPerl|HASH
        @@@@enDesc: The set of the parameters to the method.
      @@@Param:
        @@@@Name: o
        @@@@Type: DISPerl|HASH
        @@@@enDesc: The option value.
      @@@Return:
        @@@@PerlDef:
          $p->{-result} = $o->{<H::dit|error-token>}->{type}
            if defined $o->{<H::dit|error-token>}->{type};

  @RuleDef:
    @@Name: dit-error-token-value
    @@enDesc:
      The value of the token the parser is encountered, if any.

    @@Method:
      @@@Name: after
      @@@Param:
        @@@@Name: name
        @@@@Type: DOMString
        @@@@enDesc: The name of the method.
      @@@Param:
        @@@@Name: p
        @@@@Type: DISPerl|HASH
        @@@@enDesc: The set of the parameters to the method.
      @@@Param:
        @@@@Name: o
        @@@@Type: DISPerl|HASH
        @@@@enDesc: The option value.
      @@@Return:
        @@@@PerlDef:
          $p->{-result} = $o->{<H::dit|error-token>}->{value}
            if defined $o->{<H::dit|error-token>}->{value};

  @RuleDef:
    @@Name: dit-error-lines
    @@enDesc:
      A copy of fragment of the source text that contains the line
      where the error occurred, if available.
    
    @@Method:
      @@@Name: after
      @@@Param:
        @@@@Name: name
        @@@@Type: DOMString
        @@@@enDesc: The name of the method.
      @@@Param:
        @@@@Name: p
        @@@@Type: DISPerl|HASH
        @@@@enDesc: The set of the parameters to the method.
      @@@Param:
        @@@@Name: o
        @@@@Type: DISPerl|HASH
        @@@@enDesc: The option value.
      @@@Return:
        @@@@PerlDef:
          my $pos = $o-><AG::DOMCore|DOMError.location>
                      -><AG::DOMCore|DOMLocator.utf32Offset>;
          if ($pos > -1) {
            my $src = $o->{<H::dit|source-text>};
            my $start = $pos;
            $start = rindex ($$src, "\x0A", $start - 1) for 0..2;
            $start++;
            my $end = $pos;
            $end = index ($$src, "\x0A", $end + 1) for 0..2;
            $end = length $$src if $end < 0;
            $p->{-result} = substr $$src, $start, $end - $start;
          }
##DITExceptionFormatter

ElementTypeBinding:
  @Name: RuleDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@ForCheck: ManakaiDOM|ForClass
    @@rdf:type: Muf2003|RuleDefClass

ElementTypeBinding:
  @Name: RuleParam
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: Muf2003|RuleParameter

ElementTypeBinding:
  @Name:enMufDef
  @ElementType:
    ecore:defaultMessage
  @ShadowContent:
    @@lang:en
    @@ContentType:
      lang:muf

PropDef:
  @QName: dit|error-token
  @enDesc:
    The token where the parser found an error.

PropDef:
  @QName: dit|source-text
  @enDesc:
    A reference to the original source text, if available.

PropDef:
  @QName: dit|relatedURI
  @enDesc:
    A related URI.

PropDef:
  @QName: dit|resource
  @enDesc:
    A related <QUOTE::dis> resource.

PropDef:
  @QName: dit|qname
  @enDesc:
    A related <QUOTE::dis> QName.

ElementTypeBinding:
  @Name: CParamApp
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      @@@@: DOMCore|DOMConfigurationParameterApplication
      @@@For: ManakaiDOM|DOM
    @@rdf:type:
      @@@@: DISCore|Property
      @@@For: =ManakaiDOM|all
    @@For: ManakaiDOM|DOM3
    @@For: =ManakaiDOM|all

CParamApp:
  @DOMCore:domConfigurationParameter: DOMCore|error-handler
  @DOMCore:targetType: DITParser

ElementTypeBinding:
  @Name: ErrDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: DOMCore|DOMErrorType
    @@For: ManakaiDOM|DOM3
    @@ecore:textFormatter: ManakaiDITExceptionFormatter

ErrDef:
  @QName: dit|bad-token-error
  @enDesc:
    The parser is encountered to a token whose type is not
    allowed there.
  @DOMCore:severity: DOMCore|SEVERITY_FATAL_ERROR
  @enMufDef:
    Token |%dit-error-token-type;|%dit-error-token-value
    (prefix => { (|}, suffix => {|)}); is not 
    allowed %dit-error-lines (prefix => {(|}, suffix => {|)});

ErrDef:
  @QName: dit|undeclared-namespace-prefix-error
  @enDesc:
    The namespace prefix is not declared.
  @DOMCore:severity: DOMCore|SEVERITY_ERROR
  @enMufDef:
    |%p (name => {<Q::dit|qname>});|: Namespace prefix is not declared

ErrDef:
  @QName: dit|bad-error-resource-error
  @enDesc:
    The type of an error resource is not supported.
  @DOMCore:severity: DOMCore|SEVERITY_ERROR
  @enMufDef:
    <%p (name => {<Q::dit|uri>});>: Not an error of supported error type
