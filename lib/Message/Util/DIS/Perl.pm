#!/usr/bin/perl 
## This file is automatically generated
## 	at 2006-02-24T11:08:50+00:00,
## 	from file "lib/Message/Util/DIS/Perl.dis",
## 	module <http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl>,
## 	for <http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#ForLatest>.
## Don't edit by hand!
use strict;
require Message::DOM::DOMCore;
require Message::Util::DIS;
require Message::Util::Error::DOMException;
require Message::Util::PerlCode;
package Message::Util::DIS::Perl;
our $VERSION = 20060224.1108;
use Message::Util::Error;
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/error-module-is-already-in-database'} = {'description', 'Module <%p (name => {http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri});> is already in database', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter', 'Message::Util::Error::formatter', 'sev', '2', 't', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/error-module-is-already-in-database'};
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/error-resource-is-already-in-database'} = {'description', 'Resource <%p (name => {http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri});> is already in database', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter', 'Message::Util::Error::formatter', 'sev', '2', 't', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/error-resource-is-already-in-database'};
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-unload-module-start'} = {'description', 'Removing module <%p (name => {http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri});> for <%p (name => {http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#forURI});> from database...', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter', 'Message::Util::Error::formatter', 'sev', '1', 't', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-unload-module-start'};
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-unload-module-end'} = {'description', 'done', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter', 'Message::Util::Error::formatter', 'sev', '1', 't', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-unload-module-end'};
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AnyMethod'}->{'pl_name'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_perl_name_list
->[0];



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_name';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AnyMethod'}->{'get_perl_class_member_code'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
pl_code_fragment

            ->
clone_node
 (
1
);
  for (@{$self->
get_perl_name_list
}) {
    $r->
add_perl_name
 ($_);
  }
  for (@{$self->
get_perl_operator_list
}) {
    $r->
add_perl_operator
 ($_);
  }



;}


;}

;


;}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Method'}->{'pl_code_fragment'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



    $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plCodeFragment'
} = 
undef
;  ## To avoid loop
    my $ret = $self->
get_child_resource_by_type
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#MethodReturn'
);
    unless ($ret) { 
      

{

local $Error::Depth = $Error::Depth - 1;

{



        
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $self->local_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#errResource' => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_METHOD_RETURN_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $self->{uri}, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment';

;
      


;}


;}

;
    }
    my $plimpl = $self->
pl_implementation
;
    $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plCodeFragment'
}
       = $plimpl->
create_perl_sub

                    ($self->
pl_name
);
    
    ## Method parameters
    my $params = $self->
get_child_resource_list
;
    my @param_variables;
    my @named_param_variables;
    my $prototype = '$';
    my $is_optional_param = 
0
;
    my $is_named_param = 
0
;
    for my $param (@$params) {
      next unless $param->
is_type_uri

                                (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#MethodParameter'
);
      unless ($is_named_param) {
        if ($param->
get_property_boolean

                         (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#isNamedParameter'
, 
0
)) {
          $is_named_param = 
1
;
          if (not $is_optional_param and
              not $param->
pl_is_nullable
) {
            $prototype .= ';'
          }
          $is_optional_param = 
1
;
          push @param_variables, ['%opt'];
          $prototype .= '%';
        } else {  ## Non-named parameter
          push @param_variables, [
            $param->
pl_variable_name
,
          ];
          if ($param->
pl_is_nullable
) {
            $prototype .= ';' unless $is_optional_param;
            $is_optional_param = 
1
;
          } elsif ($is_optional_param) {
            $prototype =~ tr/;//d;
            $is_optional_param = 
0
;
          }
          $prototype .= $param->
pl_prototype
;
          my $param_processor
                = $param->
pl_get_method_input_normalizer
;
          if ($param_processor) {
            $param_variables[-1]->[1]
                = $param_processor->
pl_code_fragment
;
            unless ($param_variables[-1]->[1]) {
             

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $param->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_CODE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $param->{uri};


;}


;}

;
            }
            $param_variables[-1]->[1] = $param_variables[-1]->[1]->clone;
            $param_variables[-1]->[1]
                           ->
replace_variable

                                 ('$INPUT' => $param_variables[-1]->[0]);
          }
        }
      } else { ## Named parameter
        unless ($param->
get_property_boolean

                              (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#isNamedParameter'
, 
0
)) {
          

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $param->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $param->local_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NON_NAMED_PARAMETER_AFTER_NAMED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $param->{uri}, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment';


;}


;}

;
        } elsif ($param->
pl_is_nullable
) {
          $prototype =~ s/;%$/%/;
        }
      }
      if ($is_named_param) {
        push @named_param_variables, [
          $param->
pl_variable_name
,
          
undef
,
          '$' . $param->
local_name
,
        ];
        my $param_processor
                = $param->
pl_get_method_input_normalizer
;
        if ($param_processor) {
          $named_param_variables[-1]->[1]
                = $param_processor->
pl_code_fragment
;
          unless ($param_variables[-1]->[1]) {
           

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $param->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_CODE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $param->{uri};


;}


;}

;
          }
          $named_param_variables[-1]->[1]
            = $named_param_variables[-1]->[1]->clone;
          $named_param_variables[-1]->[1]
                           ->
replace_variable

                                 ('$INPUT' => $param_variables[-1]->[0]);
        }
      }
    } # %$params
    
    $r->
prototype
 ($prototype);
    $r->
append_code_fragment

           ($plimpl->
create_perl_statement

                  ('my (' . join (', ', '$self',
                     map {$_->[0]} @param_variables) . ') = @_'));
    for my $p (@param_variables, @named_param_variables) {
      if ($p->[1]) {  ## Input processor
        $r->
append_code_fragment
 ($p->[1]);
      }
    }

    ## TODO: in/out
    
    ## Return value
    my $data_type;
    my $data_type_value;
    

try {local $Error::Depth = $Error::Depth + 3;


      $data_type = $ret->
dis_actual_data_type_resource
;
      $data_type_value = $ret->
dis_actual_data_type_value
;
    } catch 
Message::Util::IFLatest::DISException with 
{
      my $err = shift;
      if ($err->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
} ne 
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_DIS_TYPE_ERR'
) {
        $err->throw;
      }
    };
    if ($data_type and $data_type->
is_subset_of_uri

                                                (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#void'
)) {
      undef $data_type;
      undef $data_type_value;
    }

    if ($data_type) {
      my $def = $data_type->
get_property_value

                                  (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--DefaultValue'
);
      my $rs = $plimpl->
create_perl_statement
;
      my $rvar = $plimpl->
create_perl_variable

                                       ('$', 
undef
, 'r');
      $rvar->
variable_scope
 ('my');
      if ($def) {
        $def = $def->
pl_code_fragment

                       ($self,
                        data_type_uri => $data_type
                               ->
uri
);
        $rs->
append_new_assignment
 ($rvar => $def);
      } else {
        

{

if 
($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#String'
)) {
  $def = $plimpl->
create_perl_string_literal
 ('');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#boolean'
) or
         $data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#AnyRealNumber'
)) {
  $def = $plimpl->
create_perl_atom
 ('0');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ARRAY'
)) {
  $def = $plimpl->
create_perl_atom
 ('[]');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#HASH'
)) {
  $def = $plimpl->
create_perl_atom
 ('{}');
}


;}

;
        if ($def) {
          $rs->
append_new_assignment
 ($rvar => $def);
        } else {
          $rs->
append_code_fragment
 ($rvar);
        }
      }
      $r->
append_code_fragment
 ($rs);
    }

    my $code = $ret->
pl_code_fragment
;
    if ($code) {
      for my $np (@named_param_variables) {
        $code->
replace_variable

                     ($np->[2] => $np->[0]);
      }
      $r->
append_code_fragment
 ($code);

      $ret->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plDefined'
} = 
1
;
      $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plDefined'
} = 
1
;
    } else {  ## Method code not defined
      my $cls = $self->{db}->
get_resource

                                      (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#CoreException'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
      my $const = $self->{db}->
get_resource

                                  (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#NOT_SUPPORTED_ERR'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
      my $subtype = $self->{db}->
get_resource

                          (
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
      $_->
is_referred

         ($ret->
uri
) for $cls, $const, $subtype;
      my $context_param = $ret->
_pl_get_context_parameter
;
      $self->
_pl_append_throw

                       ($r, $cls, $const, $subtype,
                        {%$context_param});
      $ret->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plDefined'
} = 
0
;
      $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plDefined'
} = 
0
;
    }

    if ($data_type) {
      my $rvar = $plimpl->
create_perl_variable

                                       ('$', 
undef
, 'r');

      ## Output processor
      my $nin = $data_type_value->
get_property

                                (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noInputNormalize'
);
      my $op = $data_type->
get_child_resource_by_type

                                (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#OutputProcessor'
)
        unless $nin and $nin->
value
;
      if ($op) {
        my $opcode = $op->
pl_code_fragment
;
        unless ($opcode) {
         

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_CODE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $op->uri;


;}


;}

;
        }
        $opcode = $opcode->clone;
        $opcode->
replace_variable

                                 ('$INPUT' => $rvar->clone);
        $r->
append_code_fragment
 ($opcode);
      }

      ## Return value
      $r->
append_code_fragment
 ($rvar);
    }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Attribute'}->{'pl_code_fragment'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



    $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plCodeFragment'
} = 
undef
;  ## To avoid loop
    my $get = $self->
get_child_resource_by_type
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AttributeGet'
);
    unless ($get) { 
      

{

local $Error::Depth = $Error::Depth - 1;

{



        
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#errResource' => $self, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_ATTR_GET_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $self->uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment';

;
      


;}


;}

;
    }
    my $da; ## Reflecting element attribute
    my $plimpl = $self->
pl_implementation
;
    my $data_type = $get->
dis_actual_data_type_resource
;
    my $data_type_value = $get->
dis_actual_data_type_value
;
    my $get_code = $plimpl->
create_perl_block_container
;
    $get_code->
append_statement
 (q<my ($self) = @_>);
    my $code = $get->
pl_code_fragment
;
    unless ($code) {
      $da = $self->
get_property_resource

                         (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--DocAttr'
,
                          default_media_type => 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Core#TFPQNames'
);
      if ($da) {  ## Reflecting an element attribute
        my $data_type_node = $get->
dis_actual_data_type_value
;
        my $daget_node = $data_type_node->
get_property

                                      (
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#reflectGet'
);
        ## TODO: More work might be required for 
        ##       default values for element attributes.
        my $daget;
        if (UNIVERSAL::isa ($daget_node, 
'Message::Util::IF::DVURIValue'
)) {
          $daget = $daget_node->
get_resource

                    ($self->
database
);
        } else {
          $daget = $data_type->
get_child_resource_by_type
 (
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ReflectGet'
);
        }
        if ($daget) {
          $code = $daget->
pl_code_fragment
->clone;
          my $ln = $da->
mv_local_name
;
          my $pfx = $da->
mv_prefix
;
          $pfx = defined $pfx ? $pfx . ':' : '';
          $code->
replace_variable

                 ('$LOCAL_NAME' => $plimpl->
create_perl_string_literal
 ($ln));
          $code->
replace_variable

                 ('$QNAME' => $plimpl->
create_perl_string_literal
 ($pfx.$ln));
          $code->
replace_variable

                 ('$PREFIX' => $plimpl->
create_perl_string_literal
 ($pfx));
          my $nsuri = $da->
mv_namespace_uri
;
          $code->
replace_variable

                 ('$NS_URI' => defined $nsuri
                               ? $plimpl->
create_perl_string_literal
 ($nsuri)
                               : $plimpl->
create_perl_atom
 ('undef'));
          $code->
replace_variable

                 ('$NS_URI_NO_NULL' => defined $nsuri
                               ? $plimpl->
create_perl_string_literal
 ($nsuri)
                               : $plimpl->
create_perl_string_literal
 (
'http://suika.fam.cx/~wakaba/-temp/2003/09/27/null'
));
        } else {
          

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_REFLECT_GET_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $data_type->{uri};


;}


;}

;
        }
      }
    }
    if ($code) {
      ## Default value
      my $def = $get->
get_property_value

                           (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--DefaultValue'
);
      if ($def) {
        $def = $def->
pl_code_fragment

                    ($self,
                     data_type_uri => $data_type
                            ->
uri
);
      } else {
        

{

if 
($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#String'
)) {
  $def = $plimpl->
create_perl_string_literal
 ('');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#boolean'
) or
         $data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#AnyRealNumber'
)) {
  $def = $plimpl->
create_perl_atom
 ('0');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ARRAY'
)) {
  $def = $plimpl->
create_perl_atom
 ('[]');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#HASH'
)) {
  $def = $plimpl->
create_perl_atom
 ('{}');
}


;}

;
      }
      my $rs = $plimpl->
create_perl_statement
;
      my $rvar1 = $plimpl->
create_perl_variable

                                       ('$', 
undef
, 'r');
      $rvar1->
variable_scope
 ('my');
      if ($def) {
        $rs->
append_new_assignment
 ($rvar1 => $def);
      } else {
        $rs->
append_code_fragment
 ($rvar1);
      }
      $get_code->
append_code_fragment
 ($rs);

      ## Main code
      $get_code->
append_code_fragment
 ($code);

      ## Return value
      my $rvar = $plimpl->
create_perl_variable

                                       ('$', 
undef
, 'r');

      ## Output processor
      my $nin = $data_type_value->
get_property

                                (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noInputNormalize'
);
      my $op = $data_type->
get_child_resource_by_type

                                (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#OutputProcessor'
)
        unless $nin and $nin->
value
;
      if ($op) {
        my $opcode = $op->
pl_code_fragment
;
        unless ($opcode) {
         

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_CODE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $op->uri;


;}


;}

;
        }
        $opcode = $opcode->clone;
        $opcode->
replace_variable

                                 ('$INPUT' => $rvar->clone);
        $get_code->
append_code_fragment
 ($opcode);
      }

      $get_code->
append_statement
 ($rvar);

      $get->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plDefined'
} = 
1
;
    } else {  ## Getter code not defined
      my $cls = $self->{db}->
get_resource

                                      (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#CoreException'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
      my $const = $self->{db}->
get_resource

                                  (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#NOT_SUPPORTED_ERR'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
      my $subtype = $self->{db}->
get_resource

                            (
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_ATTR_NOT_IMPLEMENTED'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
      $_->
is_referred

         ($get->
uri
) for $cls, $const, $subtype;
      my $context_param = $get->
_pl_get_context_parameter
;
      $self->
_pl_append_throw

                       ($get_code, $cls, $const, $subtype,
                        {%$context_param});
      $get->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plDefined'
} = 
0
;
      $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plDefined'
} = 
0
;
    }

    my $set = $self->
get_child_resource_by_type
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AttributeSet'
);
    my $set_code = $plimpl->
create_perl_block_container
;
    if ($set) {
      my $data_type = $set->
dis_actual_data_type_resource
;
      my $code = $set->
pl_code_fragment
;
      unless ($code) {
        $da ||= $self->
get_property_resource

                         (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--DocAttr'
,
                          default_media_type => 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Core#TFPQNames'
);
        if ($da) {  ## Reflecting an element attribute
          my $data_type_node = $set->
dis_actual_data_type_value
;
          my $daset_node = $data_type_node->
get_property

                                      (
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#reflectSet'
);
          my $daset;
          if (UNIVERSAL::isa ($daset_node, 
'Message::Util::IF::DVURIValue'
)) {
            $daset = $daset_node->
get_resource

                        ($self->
database
);
          } else {
            $daset = $data_type->
get_child_resource_by_type
 (
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ReflectSet'
);
          }
          if ($daset) {
            $code = $daset->
pl_code_fragment
->clone;
            my $ln = $da->
mv_local_name
;
            my $pfx = $da->
mv_prefix
;
            $pfx = defined $pfx ? $pfx . ':' : '';
            $code->
replace_variable

                 ('$LOCAL_NAME' => $plimpl->
create_perl_string_literal
 ($ln));
            $code->
replace_variable

                 ('$QNAME' => $plimpl->
create_perl_string_literal
 ($pfx.$ln));
            $code->
replace_variable

                 ('$PREFIX' => $plimpl->
create_perl_string_literal
 ($pfx));
            my $nsuri = $da->
mv_namespace_uri
;
            $code->
replace_variable

                 ('$NS_URI' => defined $nsuri
                               ? $plimpl->
create_perl_string_literal
 ($nsuri)
                               : $plimpl->
create_perl_atom
 ('undef'));
            $code->
replace_variable

                 ('$NS_URI_NO_NULL' => defined $nsuri
                               ? $plimpl->
create_perl_string_literal
 ($nsuri)
                               : $plimpl->
create_perl_string_literal
 (
'http://suika.fam.cx/~wakaba/-temp/2003/09/27/null'
));
          } else {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_REFLECT_SET_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $data_type->{uri};


;}


;}

;
          }
        }
      }
      if ($code) {
        ## Input
        $set_code->
append_statement

                      (q<my ($self, $given) = @_>);
        my $param_processor
                = $set->
pl_get_method_input_normalizer
;
        if ($param_processor) {
          my $pcode = $param_processor->
pl_code_fragment
->clone;
          $pcode->
replace_variable

                                           ('$INPUT' => '$given');
          $set_code->
append_code_fragment
 ($pcode);
        }

        ## Main code
        $set_code->
append_code_fragment
 ($code);

        $set->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plDefined'
} = 
1
;
        $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plDefined'
} = $get->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plDefined'
};
      } else { ## Setter code not defined
        $set_code->
append_statement

                                      (q<my ($self) = @_>);
        my $cls = $self->{db}->
get_resource

                                      (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#CoreException'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
        my $const = $self->{db}->
get_resource

                                  (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#NOT_SUPPORTED_ERR'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
        my $subtype = $self->{db}->
get_resource

                            (
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_ATTR_NOT_IMPLEMENTED'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
        $_->
is_referred

         ($set->
uri
) for $cls, $const, $subtype;
        my $context_param = $get->
_pl_get_context_parameter
;
        $self->
_pl_append_throw

                       ($set_code, $cls, $const, $subtype,
                        {%$context_param});
        $set->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plDefined'
} = 
0
;
        $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plDefined'
} = 
0
;
      }
    } else {  ## No attribute setter
      $set_code->
append_statement

                                               (q<my ($self) = @_>);
      my $cls = $self->{db}->
get_resource

                                      (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#CoreException'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
      my $const = $self->{db}->
get_resource

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#NO_MODIFICATION_ALLOWED_ERR'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
      my $subtype = $self->{db}->
get_resource

                            (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
      $_->
is_referred

        ($self->
uri
) for $cls, $const, $subtype;
      my $context_param = $get->
_pl_get_context_parameter
;
      $self->
_pl_append_throw

                       ($set_code, $cls, $const, $subtype,
                        {%$context_param});
      $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plDefined'
} = $get->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plDefined'
};
    }

    $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plCodeFragment'
}
       = $plimpl->
create_perl_sub

                    ($self->
pl_name
);
    $r->
prototype
 (q<$;$>);

    ## TODO: Don't output "if" if non-debug build
    
    $r->
append_new_if

             ($plimpl->
create_perl_inline_unparsed_code

                                (q<@_ == 1>),
              $get_code,
              $set_code);



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#AnyMethod'}->{'get_perl_module_member_code'} = sub ($$$) {
my ($self, $factory, $thismod_pack) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$method_code = $self->
pl_code_fragment
;
  my $method_names = $self->
get_perl_name_list
;
  $method_code->
clear_perl_name
;
  my $type_uris = $self->
get_property_text_list

                                (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#targetType'
);
  my $method_name_0 = $method_names->[0];
  my $type_uri_0 = $type_uris->[0];
  my $st = $factory->
create_pc_statement
;
        $st->
append_code

               ('$Message::Util::DIS::Method{');
        $st->
append_string_literal
 ($type_uri_0);
        $st->
append_code
 ('}->{');
        $st->
append_string_literal
 ($method_name_0);
        $st->
append_code
 ('} = ');
        $st->
owner_document

           ->
adopt_node
 ($method_code);
        $st->
append_child
 ($method_code);
  $thismod_pack->
append_child
 ($st);
  for my $type_uri (@$type_uris) {
    M: for my $method_name (@$method_names) {
      next M if $method_name eq $method_name_0 and
                $type_uri eq $type_uri_0;
      my $st = $factory->
create_pc_statement
;
            $st->
append_code

                   ('$Message::Util::DIS::Method{');
            $st->
append_string_literal
 ($type_uri);
            $st->
append_code
 ('}->{');
            $st->
append_string_literal
 ($method_name);
            $st->
append_code
 ('} = ');
            $st->
append_code

                   ('$Message::Util::DIS::Method{');
            $st->
append_string_literal
 ($type_uri_0);
            $st->
append_code
 ('}->{');
            $st->
append_string_literal
 ($method_name_0);
            $st->
append_code
 ('}');
      $thismod_pack->
append_child
 ($st);
    }
  }



;}


;}

;


;}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#MethodParameter'}->{'pl_name'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_property_text

                (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#paramName'
,
                 $self->
local_name
);
  if (defined $r) {
    if ($self->
get_property_boolean

                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#isNamedParameter'
, 
0
)) {
      $r = 
Message::Util::DIS::ManakaiDISImplementation->_camel_case_to_underscore_name

                                               ($r);
    }
  }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_name';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Const'}->{'pl_name'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


    unless 
(defined $self->
local_name
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{



        
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self->source_element, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_LOCAL_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_name', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $self->uri;

;
      


;}


;}

;
    }
    $r = uc $self->
local_name
;
    if ($r =~ /^_/ or $r =~ /_$/) {
      

{

local $Error::Depth = $Error::Depth - 1;

{



        
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self->source_element, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#generatedName' => $r, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $self->local_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESERVED_PERL_METHOD_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $self->uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_name';

;
      


;}


;}

;
    }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_name';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Const'}->{'pl_fully_qualified_name'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
parent_resource

              ->
parent_resource

              ->
pl_fully_qualified_name

       . '::' . $self->
pl_name
;



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_fully_qualified_name';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Const'}->{'pl_code_fragment'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$data_type = $self->
dis_actual_data_type_resource
;
    my $plimpl = $self->
pl_implementation
;
    my $value = $self->
get_property_value

                      (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Value'
);
    if ($value) {
      $value = $value->
pl_code_fragment

                      ($self,
                       data_type_uri => $data_type
                            ->
uri
);
    } else {
      

{

if 
($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#String'
)) {
  $value = $plimpl->
create_perl_string_literal
 ('');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#boolean'
) or
         $data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#AnyRealNumber'
)) {
  $value = $plimpl->
create_perl_atom
 ('0');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ARRAY'
)) {
  $value = $plimpl->
create_perl_atom
 ('[]');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#HASH'
)) {
  $value = $plimpl->
create_perl_atom
 ('{}');
}


;}

;
    }
    $r = $plimpl->
create_perl_sub

                    ($self->
pl_name
);
    $r->
append_code_fragment
 ($value);
    $r->
prototype
 ('');



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Const'}->{'get_perl_class_member_code'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
pl_code_fragment
;



;}


;}

;


;}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#ErrorCode'}->{'get_perl_definition_hash_namespace'} = sub ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$if = $self->
get_error_interface_resource
;
  if ($if) {
    $r = $if->
pl_fully_qualified_name
;
  } else {
    $r = 
undef
;
  }



;}


;}

;


;}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#ErrorSubCode'}->{'get_perl_definition_hash_namespace'} = $Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#ErrorCode'}->{'get_perl_definition_hash_namespace'};
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#ErrorCode'}->{'get_perl_error_interface_member_code'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $factory->
create_document_fragment
;

  ## Perl constant function
  my $const = $self->
pl_code_fragment
;
  $factory->
adopt_node
 ($const);
  $r->
append_child
 ($const);

  ## Error definition
  my $def_st = $factory->
create_pc_statement
;
  for ($def_st->
append_new_pc_expression
 ('=')) {
    $_->
append_new_pc_variable

          ('$',
           $self->
get_perl_definition_hash_namespace
,
           'ErrorDef')
      ->
hash_key
 ($self->
pl_name
);
    $_->
append_new_pc_literal
 ({
      
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code'
 => 0+$self->
pl_code_fragment
,
      
'description'
 =>
        $self->
_pl_muf_description_text
,
    });
  }
  $r->
append_child
 ($def_st);

  ## Error subcode definitions
  for (@{$self->
get_child_resource_list_by_type

                  (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#ErrorSubCode'
)}) {
    $r->
append_child

          ($_->
get_perl_error_interface_member_code

                 ($factory));
  }



;}


;}

;


;}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#ErrorSubCode'}->{'get_perl_error_interface_member_code'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  ## Error definition
  my $errif = $self->
get_error_interface_resource
;
  $r = $factory->
create_pc_statement
;
  $r->
append_new_pc_variable

        ('$',
         $errif->
get_perl_definition_hash_namespace
,
         'ErrorDef')
    ->
hash_key

        ($self->
get_perl_error_code_name
);
  $r->
append_code
 ('->{');
  $r->
append_string_literal
 (
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
);
  $r->
append_code
 ('}->{');
  $r->
append_string_literal

        ($self->
name_uri
);
  $r->
append_code
 ('} = ');
  $r->
append_new_pc_literal
 ({
          
'description'
 =>
          $self->
_pl_muf_description_text
,
        });
  $self->
_pl_add_require_resource

           ($errif => $r);



;}


;}

;


;}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#ErrorSubCode'}->{'get_perl_error_code_name'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$code = $self->
get_error_code_resource
;
  if ($code) {
    $r = $code->
pl_name
;
  } else {
    $r = 
undef
;
  }



;}


;}

;


;}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#ConstGroup'}->{'pl_name'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_property_text

                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#exportTagName'
,
                  $self->
local_name
);



;}


;}

;
unless (defined $r) {
  
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self->source_element, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_LOCAL_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_name', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $self->uri;

;
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_name';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#ConstGroup'}->{'get_perl_class_member_code'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $factory->
create_document_fragment
;
  for my $gcr (@{$self->
get_child_resource_list
}) {
    if ($gcr->
is_type_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Const'
)) {
      if ($gcr->
is_type_uri
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#ErrorCode'
)) {
        $r->
append_child

              ($_->
get_perl_error_interface_member_code

                     ($factory));
      } else {
        my $sub = $gcr->
pl_code_fragment
;
        $factory->
adopt_node
 ($sub);
        $r->
append_child
 ($sub);
      }
    }
  }



;}


;}

;


;}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#ConstGroup'}->{'get_perl_error_interface_member_code'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $factory->
create_document_fragment
;

  ## Error code definitions
  for (@{$self->
get_child_resource_list_by_type

                  (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#ErrorCode'
)}) {
    $r->
append_child

          ($_->
get_perl_error_interface_member_code

                 ($factory));
  }



;}


;}

;


;}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AnyClass'}->{'pl_name'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
get_property_text

                        (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#name'
,
                         $self->
local_name
);
    if (defined $r) {
      $r = 
Message::Util::DIS::ManakaiDISImplementation->_camel_case_to_underscore_name
 ($r);
    }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_name';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AnyClass'}->{'pl_fully_qualified_name'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
get_property_text

                      (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#packageName'
);
    if (defined $r) {
      ## NOTE: "lang:Perl" is fully-qualified name by definition
    } else {
      unless (defined $self->
local_name
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{



          
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_LOCAL_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_fully_qualified_name';

;
        


;}


;}

;
      }
        $r = $self->
owner_module

                  ->
pl_fully_qualified_name

           . '::' . $self->
local_name
;
    }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_fully_qualified_name';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Class'}->{'pl_code_fragment'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$plimpl = $self->
pl_implementation
;
    $r = $plimpl->
create_perl_package

                      ($self->
pl_fully_qualified_name
);
    ## - Inheritance
    for my $scls (@{$self->
get_property_resource_list
 (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--ISA'
)}) {
      my $spack_name = $scls->
pl_fully_qualified_name
;
      if (defined $spack_name) {
        $r->
add_isa_package
 ($spack_name);
      } else {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_PERL_PACKAGE_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $scls->uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--ISA';


;}


;}

;
      }
      $self->
_pl_add_require_resource

                                          ($scls => $r);
    }

    ## dis:AppISA packages
    for my $spack_name (@{
      $self->
pl_additional_isa_packages

    }) {
      $r->
add_isa_package
 ($spack_name);
      $r->
add_require_perl_module_name

                                      ($spack_name);                     
    }

    ## - Implementing interfaces
    for my $scls (@{$self->
get_property_resource_list

                            (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Implement'
, recursive_isa => 
1
,
                             default_media_type => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--TFQNames'
)}) {
      my $spack_name = $scls->
pl_fully_qualified_name
;
      if (defined $spack_name) {
        $r->
add_implement_package
 ($spack_name);
        if ($scls->
is_type_uri

              (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/MUErrorInterface'
)) {
          $r->
add_exception_interface_package_name

              ($spack_name);
        }
      }
    }

    ## - Class members
    my @cr = @{$self->
get_child_resource_list
};
    for my $cr (@cr) {
      my $mcode = $cr->
get_perl_class_member_code

                          ($r->
owner_document
);
      if ($mcode) {
        $r->
owner_document

          ->
adopt_node
 ($mcode);
        $r->
append_child
 ($mcode);
      }
    }

    ## - Error Descriptions
    if ($self->
is_type_uri

         (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/MUErrorClass'
)) {
      my $tf = $self->
get_property_resource

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter'
);
      if ($tf) {
        my $fpc = $plimpl->
create_perl_sub

                             ('_FORMATTER_PACKAGE_');
        $fpc->
append_string_literal

                             ($tf->
pl_fully_qualified_name
);
        $r->
set_sub_node
 ($fpc);
      }
    } # Err:MUErrorClass

      my %rule;
      ## Muf2003 formatting rule definitions for errors
      for my $rc (@{$self->
get_child_resource_list_by_type

                       (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Formatter/Muf2003/RuleDefClass'
)}) {
        my $rule_name = $rc->
pl_name
;
        my $rcls = $rule{$rule_name} = {};
        for my $rm (@{$rc->
get_child_resource_list_by_type

                       (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Method'
)}) {
          my $c = $rm->
pl_code_fragment
;
          $rcls->{$rm->
pl_name
} = $c;
          $c->
clear_perl_name
;
        }
      }
      if (%rule) {
        my $rule_def = $plimpl->
create_perl_sub

                                  ('___rule_def');
        $rule_def->
append_statement

                 ->
append_new_pc_literal
 (\%rule);
        $r->
set_sub_node
 ($rule_def);
      }


    ## - Lexer and Parser
    my $dpgparser;
    for my $val (@{$self->
get_property_value_list

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#dpgDef'
)}) {
      $dpgparser ||= $plimpl->
get_feature

                               (
'http://suika.fam.cx/www/2006/feature/GenericLS'
 => '3.0')
                          ->
create_gls_parser

                               ({
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#DPG'
 => '1.0'});
      my $dpgdoc = $dpgparser->
parse_string

                      ($val->
value
, $val);
      
      $r->
append_child

            ($dpgdoc->
document_element

                    ->
pl_code_fragment

                      ($r->
owner_document
,
                       dis_resource => $self,
                       context_object => $val));
    }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Class'}->{'get_perl_module_member_code'} = sub ($$$$) {
my ($self, $factory, $thismod_pack, $const) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $factory->
create_pc_block
;
  my $cls = $self;

  ## -- Subroutines and variables
  my $pack = $cls->
pl_code_fragment
;
  $factory->
adopt_node
 ($pack);
  $r->
append_child
 ($pack);
        my $pack_name = $cls->
pl_fully_qualified_name
;

        ## -- Constants
        for my $cr (@{$cls->
get_child_resource_list
}) {
          if ($cr->
is_type_uri

                                  (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Const'
)) {
            $thismod_pack->
add_export

              (
undef
,
               my $nm = $cr->
pl_name
);
            $const->{$nm} = $cr->
pl_fully_qualified_name
;
          } elsif ($cr->
is_type_uri

                                  (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ConstGroup'
)) {
            my $tag = $cr->
pl_name
;
            for my $gcr (@{$cr->
get_child_resource_list
}) {
              if ($gcr->
is_type_uri

                                  (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Const'
)) {
                $thismod_pack->
add_export

                  ($tag, my $nm = $gcr->
pl_name
);
                $const->{$nm} = $gcr->
pl_fully_qualified_name
;
              }
            }
          }
        }

        ## -- Features
        my %feature;
        for my $v (@{$cls->
get_property_value_list

                              (
'http://suika.fam.cx/~wakaba/archive/2004/dom/feature#provides'
)}) {
          my $f = $self->
database

                       ->
get_resource

                             ($v->isa (
'Message::Util::IF::DVURIValue'
)
                                 ? $v->
uri
                                 : 
$v->
value
);
          unless ($f->
is_defined
) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'get_perl_module_member_code', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/feature#Feature', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $f->uri;


;}


;}

;
          }
          for my $s ($f, @{$f->
get_property_resource_list

                           (
'http://suika.fam.cx/~wakaba/archive/2004/dom/feature#extends'
,
                            recursive => 
1
,
                            default_media_type => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--TypeQName'
)}) {
            $feature{$s->
uri
}
                 = [$s, $v];
          }
        }
        for my $f (values %feature) {
          my @fname = @{$f->[0]->
feature_name_list
};
          my $fver = $f->[0]->
get_property_text

                                (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Version'
, 
undef
);
          next unless defined $fver;
          my $fi = $self->
pl_is_feature_implemented
 ($f->[0]->{uri}) ? 
1 : 

0
;
          my $pt = $f->[1]->
get_property

                                    (
'http://suika.fam.cx/~wakaba/archive/2004/dom/feature#through'
);
          if (UNIVERSAL::isa ($pt, 
'Message::Util::IF::DVURIValue'
)) {
            my $c = $pt->
get_resource

                      ($self->
database
);
            $c->
is_referred

                            ($f->[0]->
uri
);
            my $cp = $c->
pl_fully_qualified_name
;
            for my $fname (@fname) {
              $r->
append_statement

                  ('$Message::DOM::ImplFeature{q<' . $cp .
                   '>}->{q<' .
                   $fname . '>}->{q<' . $fver . '>} ||= '.$fi);
              $r->
append_statement

                  ('$Message::DOM::ImplFeature{q<' . $cp .
                   '>}->{q<' . $fname . '>}->{q<>} = 1');
            }
          } else { # no "through" attribute
            for my $fname (@fname) {
              $r->
append_statement

                  ('$Message::DOM::ImplFeature{q<' . $pack_name .
                   '>}->{q<' .
                   $fname . '>}->{q<' . $fver . '>} ||= '.$fi);
              $r->
append_statement

                  ('$Message::DOM::ImplFeature{q<' . $pack_name .
                   '>}->{q<' . $fname . '>}->{q<>} = 1');
            }
          }
        } # for

        my %ifeature;
        my $ifpoint = 0;
        my %fdup; # Check dupulication
        FI: for my $feature (@{$cls->
get_property_resource_list

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dom/feature#implements'
,
                      isa_recursive => 
1
)}) {
          my $furi = $feature->
uri
;
          next FI if $fdup{$furi};
          $fdup{$furi} = 
1
;

          my $fver = $feature->
get_property_text

                                (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Version'
, 
undef
);
          $ifpoint += $fver;
          my $fi = defined $fver
                 ? $self->
pl_is_feature_implemented

                                   ($feature->{uri}) ? 
1 : 

0
                 : 

1
;
          for my $fname (@{$feature->
feature_name_list
}) {
            $ifeature{$fname}->{$fver} = $fi;
            $ifeature{$fname}->{''} = 
1
;
          }                  
        } # FI
        $r->
append_statement

              ('$Message::DOM::ClassFeature{q<' . $pack_name .
               '>} = ' . 
Message::Util::PerlCode::ManakaiPCImplementation->perl_literal
 (\%ifeature));

        ## TODO: Features from implementing interfaces.

        ## Score calculated from provided features
        $r->
append_statement

                ('$Message::DOM::ClassPoint{q<' . $pack_name .
                 '>} = ' . $ifpoint);

        ## -- Roles
        for my $role (@{$cls->
get_property_resource_list

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#role'
, isa_recursive => 
1
,
                      default_media_type => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--TypeQName'
)}) {
          if ($role->
is_subset_of_uri

(
'http://suika.fam.cx/~wakaba/archive/2004/dom/meta#ImplementationSourceForManakaiDOMImplementationRegistry'
)) {
            $r->
append_statement

                  ('$Message::DOM::ManakaiDOMImplementationRegistry'.
                   '::SourceClass{q<' . $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

    (
'http://suika.fam.cx/~wakaba/archive/2004/dom/meta#ImplementationForManakaiDOMImplementationSource'
)) {
            $r->
append_statement

                  ('$Message::DOM::ManakaiDOMImplementationSource'.
                   '::SourceClass{q<' . $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

(
'http://suika.fam.cx/~wakaba/archive/2004/dom/meta#ImplementationCompatibleWithManakaiDOMMinimumImplementation'
)
          ) {
            $r->
append_statement

                  ('$Message::DOM::ManakaiDOMImplementation'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
          }
          
          ## Node
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#ElementRole'
)) {
            my $for_specific_et;
            for my $et (@{$cls->
get_property_resource_list

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Markup#elementType'
, isa_recursive => 
1
,
                      default_media_type => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--TFQNames'
)}) {
              $for_specific_et = 
1
;
              my $ln = $et->
mv_local_name
;
              $ln = '*' unless defined $ln;
              my $ns = $et->
mv_namespace_uri
;
              $ns = '' unless defined $ns;
                ## ISSUE: Is NULL-namespace should be allowed here?
              $r->
append_statement

                  ('$Message::DOM::ManakaiDOMElement' .
                   '::CompatClassET{q<' . $ns . '>}->{q<' . $ln .
                   '>}->{q<' . $pack_name . '>} = 1');
            }
            $r->
append_statement

                  ('$Message::DOM::ManakaiDOMElement'.
                   '::CompatClass{q<' . $pack_name . '>} = 1')
              unless $for_specific_et;
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#AttributeRole'
)) {
            my $for_specific_attr;
            for my $at (@{$cls->
get_property_resource_list

                     (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--DocAttr'
, isa_recursive => 
1
,
                      default_media_type => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--TFQNames'
)}) {
              $for_specific_attr = 
1
;
              my $ln = $at->
mv_local_name
;
              $ln = '*' unless defined $ln;
              my $ns = $at->
mv_namespace_uri
;
              $ns = '' unless defined $ns;
              my $et = $at->
mv_owner_element_resource
;
              my $etns = '*';
              my $etln = '*';
              if ($et) {
                $etns = $et->
mv_local_name
;
                $etln = '*' unless defined $etln;
                my $etns = $at->
mv_namespace_uri
;
                $etns = '' unless defined $etns;
                  ## ISSUE: Should NULL-namespace be allowed here?
              }
              
              $r->
append_statement

                  ('$Message::DOM::ManakaiDOMElement' .
                   '::CompatClassAttr{q<' . $etns . '>}->{q<' . $etln .
                   '>}->{q<' . $ns . '>}->{q<' . $ln . '>}->{q<' .
                   $pack_name . '>} = 1');
            }
            $r->
append_statement

                  ('$Message::DOM::ManakaiDOMAttr'.
                   '::CompatClass{q<' . $pack_name . '>} = 1')
              unless $for_specific_attr;
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#TextRole'
)) {
            $r->
append_statement

                  ('$Message::DOM::ManakaiDOMText'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#CommentRole'
)) {
            $r->
append_statement

                  ('$Message::DOM::ManakaiDOMComment'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#CDATASectionRole'
)) {
            $r->
append_statement

                  ('$Message::DOM::ManakaiDOMCDATASection'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#ProcessingInstructionRole'
)) {
            $r->
append_statement

                  ('$Message::DOM::ManakaiDOMProcessingInstruction'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
            ## TODO: Target name dependent
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DocumentRole'
)) {
            my $for_specific_et;
            for my $et (@{$cls->
get_property_resource_list

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Markup#rootElementType'
, isa_recursive => 
1
,
                      default_media_type => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--TFQNames'
)}) {
              $for_specific_et = 
1
;
              my $ln = $et->
mv_local_name
;
              $ln = '*' unless defined $ln;
              my $ns = $et->
mv_namespace_uri
;
              $ns = '' unless defined $ns;
                ## ISSUE: Is NULL-namespace should be allowed here?
              $r->
append_statement

                  ('$Message::DOM::ManakaiDOMDocument' .
                   '::CompatClassET{q<' . $ns . '>}->{q<' . $ln .
                   '>}->{q<' . $pack_name . '>} = 1');
            }
            $r->
append_statement

                  ('$Message::DOM::ManakaiDOMDocument'.
                   '::CompatClass{q<' . $pack_name . '>} = 1')
              unless $for_specific_et;
            ## TODO: by document type name and media type
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DocumentFragmentRole'
)) {
            $r->
append_statement

                  ('$Message::DOM::ManakaiDOMDocumentFragment'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DocumentTypeRole'
)) {
            $r->
append_statement

                  ('$Message::DOM::ManakaiDOMDocumentType'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
            ## TODO: Doctype name or public ID dependent
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#EntityRole'
)) {
            $r->
append_statement

                  ('$Message::DOM::ManakaiDOMEntity'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
            ## TODO: Entity name or public ID dependent
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#EntityReferenceRole'
)) {
            $r->
append_statement

                  ('$Message::DOM::ManakaiDOMEntityReference'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
            ## TODO: Entity name or public ID dependent
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NotationRole'
)) {
            $r->
append_statement

                  ('$Message::DOM::ManakaiDOMNotation'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
            ## TODO: Notation name or public ID dependent
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NamespaceRole'
)) {
            $r->
append_statement

                  ('$Message::DOM::ManakaiDOMNamespace'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#ElementTypeDefinitionRole'
)) {
            $r->
append_statement

                  ('$Message::DOM::ManakaiDOMElementTypeDefinition'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#AttributeDefinitionRole'
)) {
            $r->
append_statement

                  ('$Message::DOM::ManakaiDOMAttributeDefinition'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
          }
          ## NOTE: DOMCore:AnyNodeRole is subset of  
          ##       DOMCore:ElementRole and DOMCore:TextRole and ...

          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/dom/gls#ParserRole'
)) {
            $r->
append_statement

                  ('$Message::DOM::DOMLS::ParserClass{q<'.
                   $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/dom/gls#SerializerRole'
)) {
            $r->
append_statement

                  ('$Message::DOM::DOMLS::SerializerClass{q<'.
                   $pack_name . '>} = 1');
          }

          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#ModuleRole'
)) {
            $r->
append_statement

                  ('$Message::Util::DIS::ManakaiDISModuleDefinition'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#ForRole'
)) {
            $r->
append_statement

                  ('$Message::Util::DIS::ManakaiDISForDefinition'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#ResourceRole'
)) {
            $r->
append_statement

                  ('$Message::Util::DIS::ManakaiDISResourceDefinition'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#ElementRole'
)) {
            $r->
append_statement

                  ('$Message::Util::DIS::ManakaiDISElement'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#DatabaseRole'
)) {
            $r->
append_statement

                  ('$Message::Util::DIS::ManakaiDISDatabase'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Value/ValueRole'
)) {
            $r->
append_statement

                  ('$Message::Util::DIS::Value::ManakaiDVValue'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#NodeRefRole'
)) {
            my %nrp;
            my $db = $self->
database
;
            for my $p (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#subnode0'
,
                       
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#subnode1'
,
                       
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#subnode2'
,
                       
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#origin0'
,
                       
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#xrefnode0'
) {
              $nrp{
                $db->
get_resource
 ($p)
                   ->
get_property_text

                          (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#stemName'
, $p)
              } = [keys %{{map {
                $_->
get_property_text

                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#propHashKey'
,
                           $_->
uri
) => 
1
,
              } @{$cls->
get_property_resource_list

                          ($p, isa_recursive => 
1
)}}}];
            }
            for (keys %nrp) {
              CORE::delete $nrp{$_} unless @{$nrp{$_}};
            }
            $r->
append_statement

                  ('$Message::Util::ManakaiNode::ManakaiNodeRef'.
                   '::Prop{q<' . $pack_name . '>} = '.
                   
Message::Util::PerlCode::ManakaiPCImplementation->perl_literal
 (\%nrp));
          }
        }
  
  my $fragment = $factory->
create_document_fragment
;
  my @children = @{$r->
child_nodes
};
  for (@children) {
    $fragment->
append_child
 ($_);
  }
  $r = $fragment;



;}


;}

;


;}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Formatter/Muf2003/RuleDefClass'}->{'get_perl_module_member_code'} = sub ($$) {
my ($self, $factory) = @_;
my $r;


$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Interface'}->{'pl_fully_qualified_name'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
get_property_text

                      (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#packageName'
);
    if (defined $r) {
      ## NOTE: "lang:Perl" is fully-qualified name by definition
    } else {
      unless (defined $self->
local_name
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{



          
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_LOCAL_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_fully_qualified_name';

;
        


;}


;}

;
      }
        $r = $self->
owner_module

                  ->
pl_interface_name

           . '::' . $self->
local_name
;
    }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_fully_qualified_name';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Interface'}->{'pl_code_fragment'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$plimpl = $self->
pl_implementation
;
  $r = $plimpl->
create_perl_package

                      ($self->
pl_fully_qualified_name
);

  if ($self->
is_type_uri
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#Interface'
)) {
    ## - Inheritance
    $r->
add_isa_package
 ('Message::Util::Error');
    $r->
add_require_perl_module_name

          ('Message::Util::Error');

    ## - Error definition reference
    $r->
append_code

          ("sub ___error_def () {\n".
           '  \%'.$self->
pl_fully_qualified_name
.
           "::ErrorDef\n".
           "}\n");
  }

  ## - Interface members
  my @cr = @{$self->
get_child_resource_list
};
  for my $cr (@cr) {
    my $mcode = $cr->
get_perl_error_interface_member_code

                      ($r->
owner_document
);
    if ($mcode) {
      $r->
owner_document

        ->
adopt_node
 ($mcode);
      $r->
append_child
 ($mcode);
    }
  }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Interface'}->{'get_perl_module_member_code'} = sub ($$$$) {
my ($self, $factory, $thismod_pack, $const) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
pl_code_fragment
;
  for my $cr (@{$self->
get_child_resource_list_by_type

                                  (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#ConstGroup'
)}) {
          my $tag = $cr->
pl_name
;
          for my $gcr (@{$cr->
get_child_resource_list_by_type

                                  (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Const'
)}) {
            $thismod_pack->
add_export

                  ($tag, my $nm = $gcr->
pl_name
);
            $const->{$nm} = $gcr->
pl_fully_qualified_name
;
          }
        }



;}


;}

;


;}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#Interface'}->{'get_perl_definition_hash_namespace'} = sub ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
pl_fully_qualified_name
;



;}


;}

;


;}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameter'}->{'get_perl_module_member_code'} = sub ($$$) {
my ($self, $factory, $thismod_pack) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  unless 
($self->
parent_resource
) {
    my $code = $self->
pl_code_fragment
;
    $factory->
adopt_node
 ($code);
    $thismod_pack->
append_child
 ($code);
  }



;}


;}

;


;}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameterApplication'}->{'get_perl_module_member_code'} = $Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameter'}->{'get_perl_module_member_code'};
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMErrorType'}->{'get_perl_module_member_code'} = $Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameter'}->{'get_perl_module_member_code'};
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ScalarVariable'}->{'get_perl_module_member_code'} = $Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameter'}->{'get_perl_module_member_code'};
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ScalarVariable'}->{'pl_fully_qualified_name'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
get_property_text

                      (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#packageName'
);
    if (defined $r) {
      ## NOTE: "lang:Perl" is fully-qualified name by definition
    } else {
      unless (defined $self->
local_name
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{



          
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_LOCAL_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_fully_qualified_name';

;
        


;}


;}

;
      }
        $r = $self->
owner_module

                  ->
pl_fully_qualified_name

           . '::' . $self->
local_name
;
    }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_fully_qualified_name';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ScalarVariable'}->{'pl_code_fragment'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$plimpl = $self->
pl_implementation
;
    my $varn = $self->
pl_variable_name
;
    my $var = $plimpl->
create_perl_variable

                                               (
undef
, 
undef
, $varn);
    my $data_type = $self->
dis_actual_data_type_resource
;
    my $value = $self->
get_property_value

                      (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--DefaultValue'
);
    if ($value) {
      $value = $value->
pl_code_fragment

                      ($self,
                       data_type_uri => $data_type
                            ->
uri
);
    } else {
      

{

if 
($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#String'
)) {
  $value = $plimpl->
create_perl_string_literal
 ('');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#boolean'
) or
         $data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#AnyRealNumber'
)) {
  $value = $plimpl->
create_perl_atom
 ('0');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ARRAY'
)) {
  $value = $plimpl->
create_perl_atom
 ('[]');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#HASH'
)) {
  $value = $plimpl->
create_perl_atom
 ('{}');
}


;}

;
    }
    $r = $plimpl->
create_perl_statement
;
    $r->
append_new_assignment
 ($var => $value);



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ScalarVariable'}->{'get_perl_class_member_code'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $factory->
create_document_fragment
;
  my $varn = $self->
pl_variable_name
;
  my $var = $factory->
create_pc_variable

                        (
undef
, 
undef
, $varn);
  my $data_type = $self->
dis_actual_data_type_resource
;
  my $value = $self->
get_property_value

                            (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--DefaultValue'
);
  if ($value) {
    $value = $value->
pl_code_fragment

                            ($self,
                             data_type_uri => $data_type
                                  ->
uri
);
    $factory->
adopt_node
 ($value);
  } else {
    

{

if 
($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#String'
)) {
  $value = $factory->
create_pc_literal
 ('');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#boolean'
) or
         $data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#AnyRealNumber'
)) {
  $value = $factory->
create_pc_number_literal
 ('0');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ARRAY'
)) {
  $value = $factory->
create_pc_literal
 ([]);
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#HASH'
)) {
  $value = $factory->
create_pc_literal
 ({});
}


;}

;
  }
  if ($self->
get_property_boolean

                      (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#defaultValueHasSelfReference'
)) {
    my $v = $var->
clone_node
;
    $v->
variable_scope
 ('our');
    $r->
append_child

          ($factory->
create_pc_statement
)
      ->
append_child
 ($v);
  } else {
    $var->
variable_scope
 ('our');
  }
  for ($r->
append_child

             ($factory->
create_pc_statement
)
         ->
append_new_pc_expression
 ('=')) {
    $_->
append_child
 ($var);
    $_->
append_child
 ($value);
  }



;}


;}

;


;}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Core#AnyDefContainer'}->{'pl_code_fragment'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



    $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plCodeFragment'
} = 
undef
;  ## To avoid loop
    my $def = $self->
get_property_value

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Def'
);
    $def = $def->[0] if $def;
    my $is_inline = $self->
is_type_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#InlineCode'
) ? 
1 : 

0
;
    unless ($def) {
      $r = 
undef
;
    } elsif ($def->
data_type eq 

'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#Perl'
) {
      my $source_code = $def->
string_value
;
      my $source_node = $def->
source_node_path
;
      $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plCodeFragment'
}
         = $is_inline
             ? $self->
pl_preprocess_perl_statement

                                   ($source_code,
                                    contains_statements => 
0
,
                                    source_file => $source_node,
                                    source_line => 1,
                                    namespace_context => $def)
             : $self->
pl_preprocess_perl_code

                           ($source_code,
                            method_resource => 
                        ($self->
is_type_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#MethodReturn'
)
                        ? $self->
parent_resource
                        : 

undef
),
                        source_file => $source_node,
                        source_line => 1,
                                    namespace_context => $def);
    } elsif ($def->
data_type eq 

'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis'
) {
      $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plCodeFragment'
}
         = $def->
value

               ->
pl_code_fragment

                    ($self,
                     for_arg => $self->
for_uri
,
                     forp_arg => $self->
forp_uri
,
                     contains_statements => (not $is_inline),
              database_arg => $self->
database
); 
    } else {
      

{

local $Error::Depth = $Error::Depth - 1;

{



        
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $def, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#UNSUPPORTED_MEDIA_TYPE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $def->data_type;

;
      


;}


;}

;
    } # media type



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#InCase'}->{'pl_code_fragment'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$data_type = $self->
dis_actual_data_type_resource
;
    $r = $self->
get_property_value

                      (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Value'
);
    if ($r) {
      $r = $r->
pl_code_fragment

                      ($self,
                       data_type_uri => $data_type
                            ->
uri
);
    } else {
      my $plimpl = $self->
pl_implementation
;
      

{

if 
($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#String'
)) {
  $r = $plimpl->
create_perl_string_literal
 ('');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#boolean'
) or
         $data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#AnyRealNumber'
)) {
  $r = $plimpl->
create_perl_atom
 ('0');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ARRAY'
)) {
  $r = $plimpl->
create_perl_atom
 ('[]');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#HASH'
)) {
  $r = $plimpl->
create_perl_atom
 ('{}');
}


;}

;
    }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameter'}->{'pl_code_fragment'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$cparam = $self;
    if ($self->
is_type_uri

                   (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameterApplication'
)) {
      $cparam = $self->
get_property_resource

                   (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#domConfigurationParameter'
);
      unless ($cparam) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameter', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => ($cparam or $self)->uri;


;}


;}

;
      }
    }
    my $uri = $cparam->
name_uri
;
    my $plimpl = $self->
pl_implementation
;
    my $db = $self->
database
;
    my $cfgname = 
Message::Util::PerlCode::ManakaiPCImplementation->perl_literal

                   (lc $cparam->
get_property_text

                     (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#domConfigurationParameterName'
, $uri));
    my %prop;
    for ([getter => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameterGetter'
],
         [setter => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameterSetter'
],
         [get_default =>
             
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameterDefaultGetter'
],
         [unsetter => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameterUnsetter'
],
         [checker => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameterChecker'
]) {
      my $cres = $cparam->
get_child_resource_by_type

                          ($_->[1]);
      if ($cres) {
        $prop{$_->[0]}
          = bless \($cres->
pl_code_fragment

                         ->stringify), 'manakai::code';
      }
    }
    my $type = $cparam->
dis_actual_data_type_resource
;
    if ($type->
is_subset_of_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#boolean'
)) {
      $prop{type} = 'boolean';
      my @csrc = ($cparam);
      push @csrc, $self unless $cparam eq $self;
      for (@csrc) {
        C: for my $c (@{$self->
get_child_resource_list_by_type

                                         (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#InCase'
)}) {
          my $v = $c->
get_property_value

                                         (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Value'
);
          next C unless $v;
          my $support = $c->
get_property_boolean

                                         (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#isSupported'
);
          my $tf = $v->
value
 ? 
1 : 

0
;
          $prop{vsupport}->[$tf] = 
1 if 
$support;
          if ($tf) {
            if ($c->
get_property_boolean

                                         (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--IsDefault'
)) {
              $prop{default} = 
1
;
            }
          }
          SP: for (@{$c->
get_property_value_list

                           (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--SetParam'
)}) {
            next unless $_->isa (
'Message::Util::IF::DVURIValue'
);
            my $suri = $_->
uri
;
            my $sres = $db->
get_resource
 ($suri);
            my $v = $_->
get_property
 (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Value'
);
            next SP unless $v;
            $prop{setparam}->[$tf]->{
              $sres->
get_property_text

                         (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#propHashKey'
, $suri)
            } = $v->
value
;
          } # SP
        }
      }
    } elsif ($type->
is_subset_of_uri

                                       (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#String'
)) {
      $prop{type} = 'string';
    } else {
      $prop{type} = 'object';
      $prop{otype} =$type->
pl_fully_qualified_name
;
    }
    my @target = sort { $a cmp $b } map {
                   $_->
pl_fully_qualified_name

                 } @{
                  # $self, not $cparam
                  $self->
get_property_resource_list

                      (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#targetType'
)
                 };
    my $target0 = 
Message::Util::PerlCode::ManakaiPCImplementation->perl_literal
 ($target[0]);
    $r = $plimpl->
create_perl_statement

           ('$Message::DOM::DOMCore::ManakaiDOMConfiguration{'.
            $target0 . '}->{' . $cfgname . '} = ' . 
            
Message::Util::PerlCode::ManakaiPCImplementation->perl_literal
 ({
              iname => $db->
get_resource
 ($uri)
                          ->
get_property_text

                                (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#propHashKey'
, $uri),
              %prop,
            }));
    if (@target > 1) {
      my $c = $plimpl->
create_perl_block_container
;
      $c->
append_code_fragment
 ($r);
      for my $target (@target[1..$#target]) {
        $c->
append_code_fragment

          ($plimpl->
create_perl_statement

           ('$Message::DOM::DOMCore::ManakaiDOMConfiguration{'.
            
Message::Util::PerlCode::ManakaiPCImplementation->perl_literal
 ($target) .
            '}->{'. $cfgname .
            '} = $Message::DOM::DOMCore::ManakaiDOMConfiguration{' .
            $target0 . '}->{' . $cfgname . '}'));
      }
      $r = $c;
    }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameterApplication'}->{'pl_code_fragment'} = $Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameter'}->{'pl_code_fragment'};
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMErrorType'}->{'pl_code_fragment'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$plimpl = $self->
pl_implementation
;
    my $db = $self->
database
;
    my $sev = $self->
get_property_resource

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#severity'
);
    if (not $sev or not $sev->
is_type_uri

                                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Const'
)) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Const', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => ($sev or $self)->uri;


;}


;}

;
    }
    my $tf = $self->
get_property_resource

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter'
);
    unless ($tf) {
      $tf = $db->
get_resource

                   (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/MUErrorFormatter'
,
                    for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
    }
    $r = $plimpl->
create_perl_statement

           ('$Message::DOM::DOMCore::ManakaiDOMError::Def{'.
            
Message::Util::PerlCode::ManakaiPCImplementation->perl_literal

              ($self->
name_uri
).
            '} = '.
            
Message::Util::PerlCode::ManakaiPCImplementation->perl_literal
 ({
              
't'
 => $self->
get_property_text

                  (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#errorType'
,
                   $self->
name_uri
),
              description => $self->
_pl_muf_description_text
,
              
'sev'
 => 0 + $sev->
pl_code_fragment
,
              
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter'
 => $tf->
pl_fully_qualified_name
,
            }));



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment';
}
}
;
package Message::Util::IF::DISImplementationPerl;
our $VERSION = 20060224.1109;
package Message::Util::DIS::Perl::ManakaiDISImplementationPerl;
our $VERSION = 20060224.1109;
push our @ISA, 'Message::Util::IF::DISImplementationPerl';
sub pl_load_dis_database ($$$) {
my ($self, $fileName, $moduleResolver) = @_;
my $r;

{

use 
Storable qw/retrieve/;
local $Carp::CarpLevel = $Carp::CarpLevel + 1;
$r = retrieve $fileName;

## Restores weak references
require Scalar::Util;
for my $doc (values %{$r->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceFile'
}}) {
  Scalar::Util::weaken ($doc->{
'node'
}->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#db'
})
    if $doc->{
'node'
}->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#db'
};
  Scalar::Util::weaken ($doc->{db}) if $doc->{db};
  Scalar::Util::weaken ($doc->{ns}->{'###db'}) if $doc->{ns}->{'###db'};
}
for my $def (values %{$r->{modDef}},
             values %{$r->{forDef}},
             values %{$r->{resDef}}) {
  $def->{db} = $r;
  Scalar::Util::weaken ($def->{db});
}

$r->{
'dbmodcode'
} = $moduleResolver;


;}
$r}
$Message::DOM::ImplFeature{q<Message::Util::DIS::Perl::ManakaiDISImplementationPerl>}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#perl>}->{q<1.0>} ||= 1;
$Message::DOM::ImplFeature{q<Message::Util::DIS::Perl::ManakaiDISImplementationPerl>}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#perl>}->{q<>} = 1;
$Message::DOM::ClassFeature{q<Message::Util::DIS::Perl::ManakaiDISImplementationPerl>} = {'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#perl', {'', '1', '1.0', '1'}};
$Message::DOM::ClassPoint{q<Message::Util::DIS::Perl::ManakaiDISImplementationPerl>} = 1;
package Message::Util::IF::DISElementPerl;
our $VERSION = 20060224.1109;
package Message::Util::DIS::Perl::ManakaiDISElementPerl;
our $VERSION = 20060224.1109;
push our @ISA, 'Message::Util::IF::DISElementPerl';
sub pl_implementation ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


## NOTE: Method name is directly written
$r = 
Message::Util::PerlCode::ManakaiPCImplementation
->_new;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_implementation';
}
}
sub pl_value_code_fragment ($$$%) {
my ($self, $attrURI, $disResource, %opt) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$dataType;
  my $vnode = defined $attrURI
              ? $self->
dis_get_attribute

                                   ($attrURI,
                                    for_arg => $opt{for_arg},
                                    forp_arg => $opt{forp_arg},
                         database_arg => $disResource
                             ->
database
)
              : $self;
  my $plimpl = $self->
pl_implementation
;
  if ($vnode) {
    unless ($plimpl) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_value_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_PERL_CODE_IMPL_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl';


;}


;}

;
    }
    my $isnull = $vnode->
dis_get_attribute

                                   (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--is-null'
,
                                    for_arg => $opt{for_arg},
                                    forp_arg => $opt{forp_arg},
                          database_arg => $disResource
                             ->
database
);
    if ($isnull and $isnull->
value
) {
      $r = $plimpl->
create_perl_atom
 ('undef');
    } else {
      my $vnode_type_uri = $vnode->
media_type_uri

                                   (for_arg => $opt{for_arg},
                                    forp_arg => $opt{forp_arg});
      my $vnode_value = $vnode->
value
;
      if ($vnode_type_uri) {
        my $vnode_type = $disResource->{db}
                             ->
get_resource

                                              ($vnode_type_uri);
        if ($vnode_type->
is_subset_of_uri

                                (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Boolean'
)) {
          $r = $plimpl->
create_perl_atom

                                ($vnode_value ? 
1 : 

0
);
        } elsif ($vnode_type->
is_subset_of_uri

                                (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--TypeQName'
)) {
          $r = $plimpl->
create_perl_string_literal

                            ($vnode->
qname_to_uri
 ($vnode_value,
                                                     node => $vnode));
        } elsif ($vnode_type->
is_subset_of_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#Perl'
)) {
          $r = $disResource->
pl_preprocess_perl_statement

                                   ($vnode_value,
                                    node => $vnode,
                                    contains_statements => 
0
);
        } else { ## DISCore:String or some
          $r = $plimpl->
create_perl_string_literal

                                               ($vnode_value);
        }
      } elsif ($opt{data_type_uri}) {
        $dataType ||= $disResource->
database

                                  ->
get_resource

                                      ($opt{data_type_uri});
        if ($dataType->
is_subset_of_uri

                                      (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#AnyRealNumber'
)) {
          $r = $plimpl->
create_perl_atom

                                      (0 + $vnode_value);
        } elsif ($dataType->
is_subset_of_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#boolean'
)) {
          $r = $plimpl->
create_perl_atom

                            ($vnode_value eq 'tr'.'ue' ? 
1 : 

0
);
        } else { ## DOMMain:DOMString or some
          $r = $plimpl->
create_perl_string_literal

                                               ($vnode_value);
        }
      } else {  ## Untyped
        $r = $plimpl->
create_perl_string_literal

                                               ($vnode_value);
      }
    }
  } # has value

  if (not $r and $opt{use_default_value}) {
    $dataType ||= $disResource->
database

                              ->
get_resource

                                      ($opt{data_type_uri});
    if ($dataType->
is_subset_of_uri

                                      (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#String'
)) {
      $r = $plimpl->
create_perl_string_literal
 ('');
    } elsif ($dataType->
is_subset_of_uri

                                      (
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#boolean'
) or
             $dataType->
is_subset_of_uri

                                      (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#AnyRealNumber'
)) {
      $r = $plimpl->
create_perl_atom
 ('0');
    } elsif ($dataType->
is_subset_of_uri

                                      (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#Perl--ARRAY'
)) {
      $r = $plimpl->
create_perl_atom
 ('[]');
    } elsif ($dataType->
is_subset_of_uri

                                      (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#Perl--HASH'
)) {
      $r = $plimpl->
create_perl_atom
 ('{}');
    }
  }



;}


;}

;


;}
$r}
sub pl_code_fragment ($$%) {
my ($self, $disResource, %opt) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$plimpl = $self->
pl_implementation
;
  my $et = $self->
expanded_uri
;
  if ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Def'
) {
    my $value = $self->
value
;
    if (defined $value) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#DISPERL_NO_VALUE_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


;}


;}

;
    }
    $r = $plimpl->
create_perl_block_container
;
    for my $c (@{$self->
dis_child_elements

                          (for_arg => $opt{for_arg}, forp_arg => $opt{forp_arg},
                           database_arg => $opt{database_arg})}) {
      my $ccode = $c->
pl_code_fragment

                          ($disResource,
                           for_arg => $opt{for_arg}, forp_arg => $opt{forp_arg},
                           contains_statements => $opt{contains_statements},
                           database_arg => $opt{database_arg});
      $r->
append_code_fragment
 ($ccode->clone)
        if $ccode;
    }
  } elsif ({
    
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#constValue'
 => 
1
,
    
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#cloneCode'
 => 
1
,
  }->{$et}) {
    my ($qname, $const_name, $on) = split /\s*\.\s*/,
                                     $self->
value
, 3;
    my $parentResource = $disResource
                                 ->
parent_resource
;
    my $uri = $self->
tfqnames_to_uri

                     ($qname,
                      ($parentResource
                               ->
parent_resource
 ||
                       $parentResource || $disResource)->
                              
name_uri
,
                      $opt{for_arg}, node => $self);
    my $const;
    if (defined $const_name) {
      my $owner = $disResource->
database

                              ->
get_resource
 ($uri);
      $owner->
is_referred
 ($self);
      if ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#constValue'
) {
        $const = $owner->
get_const_resource_by_name
 ($const_name);
        unless (defined $const) {
          

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Const', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $const_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#parentURI' => $uri;


;}


;}

;
        }
      } else {
        $const = $owner->
get_child_resource_by_name_and_type

                                  ($const_name, 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AnyMethod'
);
        unless (defined $const) {
          

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AnyMethod', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $const_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#parentURI' => $uri;


;}


;}

;
        }
      }
    } else {
      $const = $disResource->
database

                           ->
get_resource
 ($uri);
    }
    if ($const->
is_type_uri

                              (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Const'
)) {
      $const->
is_referred
 ($self);

      my $data_type = $const->
dis_actual_data_type_resource
;
      my $val = $const->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Value'
}->
pl_code_fragment

                    ($disResource,
                     data_type_uri => $data_type
                            ->
uri
,
                           database_arg => $opt{database_arg})
        if $const->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Value'
};
      unless (defined $val) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $const->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $const->local_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_CONST_VALUE_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $const->{uri};


;}


;}

;
      }
    
      if ($opt{contains_statements}) {
        $r = $plimpl->
create_perl_statement
;
        my $rvar = $plimpl->
create_perl_variable

                                         ('$', 
undef
, 'r');
        $r->
append_new_assignment
 ($rvar => $val);
      } else {
        $r = $val;
      }
    } elsif ($const->
is_type_uri

                         (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AnyMethod'
)) {
      my $ret = $const->
get_child_resource_by_type

                         ($const->
is_type_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Method'
)
                          ? 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#MethodReturn'
                          : 
($on and $on eq 'set')
                            ? 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AttributeSet'
                            : 

'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AttributeGet'
);
      unless ($ret) { 
        

{

local $Error::Depth = $Error::Depth - 1;

{


          if 
($const->
is_type_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Method'
)) {
            
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $const->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $const->local_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_METHOD_RETURN_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#errResource' => $const, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $const->uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;

;
          } elsif ($on and $on eq 'set') {
            
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $const->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#errResource' => $const, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_ATTR_SET_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $const->uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;

;
          } else {
            
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $const->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#errResource' => $const, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_ATTR_GET_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $const->uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;

;
          }
        


;}


;}

; # UNDEEP
      }
      $r = $ret->
pl_code_fragment
;
    } elsif ($const->
is_type_uri

                         (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Core#AnyDefContainer'
)) {
      $r = $const->
pl_code_fragment
;
    } else {
      if ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#constValue'
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Const', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $const->local_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $const->{uri};


;}


;}

;
      } else {  # DISPerl:cloneCode
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AnyMethod', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $const->local_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $const->{uri};


;}


;}

;
      }
    }
  } elsif ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#value'
) {
    my $val = $self->
pl_value_code_fragment

                    (
undef
, $disResource,
                     for_arg => $opt{for_arg},
                     forp_arg => $opt{forp_arg},
                           database_arg => $opt{database_arg});
    $r = $plimpl->
create_perl_statement
;
    my $rvar = $plimpl->
create_perl_variable

                                         ('$', 
undef
, 'r');
    $r->
append_new_assignment
 ($rvar => $val);
  } elsif ({
    
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--GetProp'
 => 
1
,
    
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--GetPropNode'
 => 
1
,
    
'http://suika.fam.cx/~wakaba/archive/2005/swcfg21#GetPropNode'
 => 
1
,
  }->{$et}) {
    my $prop_uri = $self->
qname_value_uri
;
    my $prop_res = $disResource->{db}
             ->
get_resource
 ($prop_uri);
    $prop_res->
is_referred
 ($self);
    my $prop_name = $prop_res->
get_property_text

               (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#propHashKey'
, $prop_uri);
    $r = $plimpl->
create_perl_statement
;
    my $node_prop_name = $disResource->{db}
             ->
get_resource
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#node'
)
             ->
get_property_text

               (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#propHashKey'
, 
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#node'
);
    my $val = $plimpl->
create_perl_inline_container
;
    $val->
append_code
 ('$self->{');
    $val->
append_string_literal
 ($node_prop_name);
    $val->
append_code
 ('}->{');
    $val->
append_string_literal
 ($prop_name);
    $val->
append_code
 ('}');
    my $rvar = $plimpl->
create_perl_variable

                                       ('$', 
undef
, 'r');
    $r->
append_new_assignment
 ($rvar => $val);
    
    if ({
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--GetPropNode'
 => 
1
,
         
'http://suika.fam.cx/~wakaba/archive/2005/swcfg21#GetPropNode'
 => 
1
}->{$et}) {
      my $q = $plimpl->
create_perl_block_container
;
      $q->
append_code_fragment
 ($r);
      $q->
append_new_if

               ($plimpl->
create_perl_inline_unparsed_code

                                             ('defined $r'),
                my $qt = $plimpl->
create_perl_block_container
);
      $qt->
append_statement

         ->
append_new_assignment

               ($rvar->clone => my $qtr = $plimpl->
create_perl_inline_container
);
      my $cls = $disResource->{db}->
get_resource
 ({
                     
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--GetPropNode'
 => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#ManakaiDOMNode'
,
                     
'http://suika.fam.cx/~wakaba/archive/2005/swcfg21#GetPropNode'
 =>
                                           
'http://suika.fam.cx/~wakaba/archive/2005/swcfg21#ManakaiSWCFGNode'
,
                   }->{$et}, for_arg => $opt{for_arg});
      $cls->
is_referred
 ($self);
      $qtr->
append_code

               ($cls->
pl_fully_qualified_name
 . q[->_get_node_reference ($r)]);
      $r = $q;
    }
  } elsif ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--SetProp'
) {
    my $prop_uri = $self->
qname_value_uri
;
    my $prop_res = $disResource->{db}
             ->
get_resource
 ($prop_uri);
    $prop_res->
is_referred
 ($self);
    my $prop_name = $prop_res->
get_property_text

               (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#propHashKey'
, $prop_uri);
    $r = $plimpl->
create_perl_statement
;
    my $node_prop_name = $disResource->{db}
             ->
get_resource
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#node'
)
             ->
get_property_text

               (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#propHashKey'
, 
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#node'
);
    my $val = $plimpl->
create_perl_inline_container
;
    $val->
append_code
 ('$self->{');
    $val->
append_string_literal
 ($node_prop_name);
    $val->
append_code
 ('}->{');
    $val->
append_string_literal
 ($prop_name);
    $val->
append_code
 ('}');
    my $rvar = $plimpl->
create_perl_variable

                                       ('$', 
undef
, 'given');
    $r->
append_new_assignment
 ($val => $rvar);
    my $chk = $self->
dis_get_attribute

                                   (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--CheckReadOnly'
,
        for_arg => $disResource->
for_uri
,
        forp_arg => $disResource->
forp_uri
,
        database_arg => $disResource->
database
);
    if ($chk and $chk->
value
) {
      my $q = $plimpl->
create_perl_if

           (my $qc = $plimpl->
create_perl_inline_container
,
            my $qt = $plimpl->
create_perl_block_container
);
      my $ro_prop_name = $disResource->{db}
             ->
get_resource
 (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#read-only'
)
             ->
get_property_text

               (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#propHashKey'
, 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#read-only'
);
      $qc->
append_code
 ('$self->{');
      $qc->
append_string_literal
 ($node_prop_name);
      $qc->
append_code
 ('}->{');
      $qc->
append_string_literal
 ($ro_prop_name);
      $qc->
append_code
 ('}');

      my $for_uri = $disResource->{db}->
get_for

                       ($opt{for_arg})->
isa_uri

                       (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM1'
)
                    ? $opt{for_arg} : 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOMLatest'
;
      my $cls = $disResource->{db}->
get_resource

                                    (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#ManakaiDOMException'
,
                                               for_arg => $for_uri);
      my $const = $disResource->{db}->
get_resource

                         (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#NO_MODIFICATION_ALLOWED_ERR'
,
                                               for_arg => $for_uri);
      my $subtype = $disResource->{db}
                                    ->
get_resource

                                            (
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#NOMOD_THIS'
,
                                               for_arg => $for_uri);
      $_->
is_referred

                       ($self) for $cls, $const, $subtype;
      my $context_param = $disResource->
_pl_get_context_parameter
;
      $disResource->
_pl_append_throw

                       ($qt, $cls, $const, $subtype,
                        {%$context_param},
                        node => $self);
      my $or = $r;
      $r = $plimpl->
create_perl_block_container
;
      $r->
append_code_fragment
 ($q);
      $r->
append_code_fragment
 ($or);
    } # Read-only checking
  } elsif ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#raiseException'
) {
    my ($cls, $const, $subtype)
        = @{$disResource->{db}->
xcref_to_resource

                                 ($self->
value
,
                                  $self,
                                  node => $self,
                                  for_arg => $opt{for_arg})};
    my $context_param = $disResource->
_pl_get_context_parameter
;
    $disResource->
_pl_append_throw

                ($r = $plimpl->
create_perl_block_container
,
                 $cls, $const, $subtype,
                 {%$context_param},
                 node => $self);
  } elsif ({
    
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--ContentType'
 => 
1
,
    
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--For'
 => 
1
, 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--ForCheck'
 => 
1
,
    
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--ImplNote'
 => 
1
,
    
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#nop'
 => 
1
,
  }->{$et}) {
    #
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#UNSUPPORTED_ELEMENT_TYPE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


;}


;}

;
  }



;}


;}

; # DEEP


;}
$r}
$Message::DOM::ClassFeature{q<Message::Util::DIS::Perl::ManakaiDISElementPerl>} = {'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#perl', {'', '1', '1.0', '1'}};
$Message::DOM::ClassPoint{q<Message::Util::DIS::Perl::ManakaiDISElementPerl>} = 1;
package Message::Util::IF::DVValuePerl;
our $VERSION = 20060224.1109;
package Message::Util::DIS::Perl::ManakaiDVValuePerl;
our $VERSION = 20060224.1109;
push our @ISA, 'Message::Util::IF::DVValuePerl';
sub pl_code_fragment ($$%) {
my ($self, $disResource, %opt) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$dataType;
  my $plimpl = $self->
pl_implementation
;
  unless ($plimpl) {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_PERL_CODE_IMPL_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDVValuePerl';


;}


;}

;
  }
  if ($self->
is_null
) {
    $r = $plimpl->
create_perl_atom
 ('undef');
  } else {
    my $vnode_type = $disResource->
database

                                 ->
get_resource

                                      ($self->
data_type
);
    if ($vnode_type->
is_subset_of_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#Perl'
)) {
      $r = $disResource->
pl_preprocess_perl_statement

                    ($self->
string_value
,
                     contains_statements => 
0
,
                     namespace_context => $self);
    } elsif ($vnode_type->
is_subset_of_uri

                                (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Core#Integer'
)) {
      $r = $plimpl->
create_perl_atom

                          ($self->
value
 + 0);
    } elsif ($vnode_type->
is_subset_of_uri

                                (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Core#Boolean'
)) {
      $r = $plimpl->
create_perl_atom

                          ($self->
value
 ? 
1 : 

0
);
    } elsif ($opt{data_type_uri}) {
      $dataType ||= $disResource->
database

                                ->
get_resource

                                      ($opt{data_type_uri});
      my $vnode_value = $self->
value
;
      if (UNIVERSAL::can ($vnode_value, 'value')) {
        $vnode_value = $vnode_value->
value
;
      }
      if ($dataType->
is_subset_of_uri

                                        (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#AnyRealNumber'
)) {
        $r = $plimpl->
create_perl_atom

                                        (0 + $vnode_value);
      } elsif ($dataType->
is_subset_of_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#boolean'
)) {
        $r = $plimpl->
create_perl_atom

                              ($vnode_value eq 'tr'.'ue' ? 
1 :
                               
$vnode_value eq '1' ? 
1 : 

0
);
      } else { ## DOMMain:DOMString or some
        $r = $plimpl->
create_perl_string_literal

                                 ($self->
string_value
);
      }
    } else { ## DISCore:String or some
      $r = $plimpl->
create_perl_string_literal

                            ($self->
string_value
);
    }
  }



;}


;}

;


;}
$r}
sub pl_implementation ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


## NOTE: Method name directly written
$r = 
Message::Util::PerlCode::ManakaiPCImplementation
->_new;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDVValuePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_implementation';
}
}
$Message::DOM::ClassFeature{q<Message::Util::DIS::Perl::ManakaiDVValuePerl>} = {'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#perl', {'', '1', '1.0', '1'}};
$Message::DOM::ClassPoint{q<Message::Util::DIS::Perl::ManakaiDVValuePerl>} = 1;
package Message::Util::IF::DISDatabasePerl;
our $VERSION = 20060224.1109;
package Message::Util::DIS::Perl::ManakaiDISDatabasePerl;
our $VERSION = 20060224.1109;
push our @ISA, 'Message::Util::IF::DISDatabasePerl';
sub pl_store ($$$) {
my ($self, $fileName, $moduleResolver) = @_;

{

use 
Storable qw/nstore/;
local $Carp::CarpLevel = $Carp::CarpLevel + 1;

## Updates resource to module mapping
my %mod_res;
my %mod_for;
my %mod_mod;   ## Module objects with full properties
my %temp_mod;  ## Module objects for index


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$core_mod = $self->
get_module

                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/DISCore'
);
    ## Loads the core module for resources does not belong
    ## to any module.

  for my $res (values %{$self->{resDef}}) {
    my $mod_urir = $res->
owner_module_uri_ref
;
    unless (defined $mod_urir) {
      $mod_urir = \
'http://suika.fam.cx/~wakaba/archive/2004/dis/DISCore'
;
    }
    for my $res_uri (@{$res->
uris
}) {
      $self->{
'rm'
}->{$res_uri} = $mod_urir;
      $mod_res{$$mod_urir}->{$res_uri} = $res;
    }
    CORE::delete $res->{db};
  }

  for my $res (values %{$self->{forDef}}) {
    my $mod_urir = $res->
owner_module_uri_ref
;
    unless (defined $mod_urir) {
      $mod_urir = \
'http://suika.fam.cx/~wakaba/archive/2004/dis/DISCore'
;
    }
    for my $res_uri (@{$res->
uris
}) {
      $self->{
'rm'
}->{$res_uri} = $mod_urir;
      $mod_for{$$mod_urir}->{$res_uri} = $res;
    }
    CORE::delete $res->{db};
  }

  for my $res (values %{$self->{modDef}}) {
    my $mod_uri = $res->
uri
;
    if ($res->
is_defined and
        
not $res->isa (
'Message::Util::DIS::ManakaiDISModuleLite'
)) {
      $mod_mod{$mod_uri} = $res;
      CORE::delete $res->{db};
      $temp_mod{$mod_uri} = bless {},
                               
'Message::Util::DIS::ManakaiDISModuleLite'
;
      for ('uri', 'localName', 'namespaceURI', 'for', 'forp',
           
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#isDefined'
, 
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#isReferred'
,
           
'snid'
, 
'dns'
,
           
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/plHashKey'
) {
        $temp_mod{$mod_uri}->{$_} = $res->{$_}
          if defined $res->{$_};
      }
    } else {
      $temp_mod{$mod_uri} = $res;
    }
  }



;}


;}

;

## Obtains module file names and contents
my %mod_file;


{

local $Error::Depth = $Error::Depth + 1;

{


  for 
my $mod_uri (keys %{{%mod_res, %mod_for, %mod_mod}}) {
    my $mod_file_name = ($moduleResolver or sub ($$) {})
      ->($self, $self->
get_module
 ($mod_uri),
         
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/ModuleResourceFile'
);
    my $mod_idx_file_name = ($moduleResolver or sub ($$) {})
      ->($self, $self->
get_module
 ($mod_uri),
         
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/ModuleIndexFile'
);
    for (keys %{$mod_res{$mod_uri}||{}}) {
      $mod_file{$mod_file_name}->{resDef}->{$_}
        = $mod_res{$mod_uri}->{$_};
      $mod_file{$mod_idx_file_name}->{
'rm'
}->{$_}
        = \$mod_uri;
    } 
    for (keys %{$mod_for{$mod_uri}||{}}) {
      $mod_file{$mod_file_name}->{forDef}->{$_}
        = $mod_for{$mod_uri}->{$_};
      $mod_file{$mod_idx_file_name}->{
'rm'
}->{$_}
        = \$mod_uri;
    }
    if ($mod_mod{$mod_uri}) {
      $mod_file{$mod_file_name}->{modDef}->{$mod_uri}
        = $mod_mod{$mod_uri};
      $mod_file{$mod_idx_file_name}->{modDef}->{$mod_uri}
        = $temp_mod{$mod_uri};
    }
  }



;}


;}

;

## Database module files
for my $mod_file_name (keys %mod_file) {
  nstore $mod_file{$mod_file_name}, $mod_file_name;
}

## The main database
{
  local $self->{
'dbmodcode'
} = 
undef
;
  local $self->{resDef} = {};
  local $self->{forDef} = {};
  local $self->{modDef} = \%temp_mod;
  local $self->{
'onerr'
} = 
undef
;
  nstore $self, $fileName;
}

require Scalar::Util;
for my $res (values %temp_mod,
             map {values %{$_->{forDef}||{}},
                  values %{$_->{resDef}||{}},
                  values %{$_->{modDef}||{}}} values %mod_file) {
  $res->{db} = $self;
  Scalar::Util::weaken ($res->{db});
}


;}
}
sub pl_add_hash_key ($$$$) {
my ($self, $keyScope, $keyName, $disResource) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$ks = $self->
get_resource
 ($keyScope);
  $ks->
is_referred
 ($keyName);
  for my $ks_uri (keys %{$ks->{aliasURI}}, keys %{$ks->{subOf}}) {
    if (defined $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/plHashKey'
}->{$ks_uri} and
        defined $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/plHashKey'
}->{$ks_uri}->{$keyName}) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_add_hash_key', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#anotherURI' => $self->{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/plHashKey'}
                                ->{$ks_uri}->{$keyName}, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#hashKeyName' => $keyName, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_HASH_KEY_ALREADY_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $disResource->uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#hashKeyScope' => $ks_uri;


;}


;}

;
    }
  }
  $disResource->
owner_module

              ->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/plHashKey'
}
              ->{$keyScope}->{$keyName} =
  $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/plHashKey'
}->{$keyScope}->{$keyName}
    = $disResource->
uri
;



;}


;}

;


;}
}
sub _pl_load_dis_database_module ($$) {
my ($self, $disModule) = @_;

{

my 
$dbmod;
my $fileName;


{

local $Error::Depth = $Error::Depth + 1;

{



  $fileName = ($self->{
'dbmodcode'
} or sub () {})
                 ->($self, $disModule);
  use Storable qw/retrieve/;
  {
    local $Carp::CarpLevel = $Error::Level;
    $dbmod = retrieve $fileName;
  }

  require Scalar::Util;        
  S: for my $res_uri (keys %{$dbmod->{modDef}}) {
    my $res = $dbmod->{modDef}->{$res_uri};
    my $dres = $self->{modDef}->{$res_uri};

    unless (defined $dres) {
      $dres = $self->{modDef}->{$res_uri}
            = {db => $self};
      Scalar::Util::weaken ($dres->{db});
    } elsif (ref $dres ne 
'Message::Util::DIS::ManakaiDISModuleLite'
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_pl_load_dis_database_module', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_ALREADY_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $res_uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#moduleURI' => $disModule->uri;


;}


;}

;
    }
    for my $pn (keys %$res) {
      $dres->{$pn} = $res->{$pn};
    }

    bless $dres, 
'Message::Util::DIS::ManakaiDISModuleDefinition'
;
  } # S

  S: for my $res_uri (keys %{$dbmod->{forDef}}) {
    my $res = $dbmod->{forDef}->{$res_uri};
    next S unless $res_uri eq $res->
uri
;
    $res->{db} = $self;
    Scalar::Util::weaken ($res->{db});
    if (defined $self->{forDef}->{$res_uri} and
        $res_uri ne 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#all'
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_pl_load_dis_database_module', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_ALREADY_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $res_uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#moduleURI' => $disModule->uri;


;}


;}

;
    }
    $self->{forDef}->{$res_uri} = $res;
  } # S

  S: for my $res_uri (keys %{$dbmod->{resDef}}) {
    my $res = $dbmod->{resDef}->{$res_uri};
    next S unless $res_uri eq $res->
uri
;
    $res->{db} = $self;
    Scalar::Util::weaken ($res->{db});
    if (defined $self->{resDef}->{$res_uri}) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_pl_load_dis_database_module', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_ALREADY_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $res_uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#moduleURI' => $disModule->uri;


;}


;}

;
    }
    for my $uri (grep {$res->{aliasURI}->{$_}}
                 keys %{$res->{aliasURI}}) {
      $self->{resDef}->{$uri} = $res;
    }
  } # S



;}


;}

;


;}
}
sub pl_update_module ($$;%) {
my ($self, $moduleURI, %opt) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$db = $self;

  ## -- Creates a list of modules that must be updated
  my $update_module = {};
  my $target_module = {$moduleURI => 
1
};
  my $checked_module = {};
  T: while (%$target_module) {
    my $target_module_uri = [keys %$target_module]->[0];
    delete $target_module->{$target_module_uri};
    next T if $checked_module->{$target_module_uri};
    $checked_module->{$target_module_uri} = 
1
;

    unless (defined $db->{modDef}->{$target_module_uri}) {
      my $target_module_file_name
        = $opt{get_module_index_file_name}->($db, $target_module_uri);
      $db->
pl_load_dis_database_index

               ($target_module_file_name);
    }
    my $target_module_resource = $db->
get_module

                                          ($target_module_uri);
    
    my $source_revision
      = $opt{get_module_source_revision}->($db, $target_module_uri);
    my $target_module_revision
      = $target_module_resource->
revision
;
    if ($source_revision > 0 and
        ($source_revision > $target_module_revision or
         $target_module_revision == 0)) {
      for (@{$opt{get_referring_module_uri_list}->($db, $target_module_uri)}) {
        $target_module->{$_} = 
1
;
      }
      $update_module->{$target_module_uri} = 
1
;
    } else { # Source is not updated
      for (@{$target_module_resource
               ->
get_referring_module_uri_list
}) {
        $target_module->{$_} = 
1
;
      }
    }
  } # T

  ## Removes modules that need update
  my @update_read;
  my $srinfo = {};
  for my $mod (@{$db->
get_module_resource_list
}) {
    my $mod_uri = $mod->
name_uri
;
    if ($update_module->{$mod_uri}) {
      my $mod_for = $mod->
for_uri
;
      push @update_read, [$mod_uri, $mod_for];
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-unload-module-start', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_update_module', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $mod_uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#forURI' => $mod_for;


;}


;}

;
      $srinfo = $db->
unload_module
 ($mod, srinfo => $srinfo);
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-unload-module-end', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_update_module', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $mod_uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#forURI' => $mod_for;


;}


;}

;
    }
  }

  ## Reads updated sources
  for (@update_read) {
    $db->
load_module

           ($opt{get_module_source_document_from_uri}->($db, $_->[0]),
            $opt{get_module_source_document_from_resource},
            for_arg => $_->[1], on_resource_read => $opt{on_resource_read},
            srinfo => $srinfo);
  }



;}


;}

;


;}
}
sub pl_load_dis_database_index ($$) {
my ($self, $fileName) = @_;

{

use 
Storable qw/retrieve/;
local $Carp::CarpLevel = $Carp::CarpLevel + 1;
my $idb = retrieve $fileName;

require Scalar::Util;
F: for my $imod_uri (keys %{$idb->{modDef}}) {
  my $imod = $idb->{modDef}->{$imod_uri};
  next F unless $imod;
  if (defined $self->{modDef}->{$imod_uri}) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/error-module-is-already-in-database', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_load_dis_database_index', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $imod_uri;

;
  }
  $self->{modDef}->{$imod_uri} = $imod;
  $imod->{db} = $self;
  Scalar::Util::weaken ($imod->{db});
}

F: for my $ires_uri (keys %{$idb->{
'rm'
}}) {
  next F unless $idb->{
'rm'
}->{$ires_uri};
  if (defined $self->{
'rm'
}->{$ires_uri}) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/error-resource-is-already-in-database', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_load_dis_database_index', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $ires_uri;

;
  }
  $self->{
'rm'
}->{$ires_uri}
    = $idb->{
'rm'
}->{$ires_uri};
}


;}
}
$Message::DOM::ClassFeature{q<Message::Util::DIS::Perl::ManakaiDISDatabasePerl>} = {'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#perl', {'', '1', '1.0', '1'}};
$Message::DOM::ClassPoint{q<Message::Util::DIS::Perl::ManakaiDISDatabasePerl>} = 1;
package Message::Util::IF::DISAnyResourcePerl;
our $VERSION = 20060224.1109;
package Message::Util::DIS::Perl::ManakaiDISAnyResourcePerl;
our $VERSION = 20060224.1109;
push our @ISA, 'Message::Util::IF::DISAnyResourcePerl';
sub pl_implementation ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = 
Message::Util::PerlCode::ManakaiPCImplementation
->_new;
                           ## NOTE: Method name is directly written.


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISAnyResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_implementation';
}
}
$Message::DOM::ClassFeature{q<Message::Util::DIS::Perl::ManakaiDISAnyResourcePerl>} = {'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#perl', {'', '1', '1.0', '1'}};
$Message::DOM::ClassPoint{q<Message::Util::DIS::Perl::ManakaiDISAnyResourcePerl>} = 1;
package Message::Util::IF::DISModulePerl;
our $VERSION = 20060224.1109;
package Message::Util::DIS::Perl::ManakaiDISModulePerl;
our $VERSION = 20060224.1109;
push our @ISA, 'Message::Util::IF::DISModulePerl';
sub pl_fully_qualified_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$man = $self->
get_property_value

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#packageName'
);
  if ($man) {
    $r = $man->
string_value
;
  } else {
    my $mg = $self->
database

                  ->
get_resource

                     ($self->
namespace_uri
,
                      for_arg => $self->
for_uri
);
    unless ($self->
is_defined
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self->source_element, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISModulePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_fully_qualified_name', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $self->namespace_uri;


;}


;}

;
    }
    my $an = $mg->
get_property_value

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#packageName'
);
    $r = $an ? $an->
string_value
             : 
$mg->
local_name
 || 'main';
    $r =~ s/::$//g;
    $r .= '::' . $self->
local_name
;
    my $sf = $an->
get_property

                     (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#moduleSuffix'
) if $an;
    $r .= $sf->
string_value if 
$sf;
  }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISModulePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_fully_qualified_name';
}
}
sub pl_interface_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$man = $self->
get_property_value

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#interfacePackageName'
) ||
            $self->
get_property_value

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#packageName'
);
  if ($man) {
    $r = $man->
string_value
;
  } else {
    my $mg = $self->
database

                  ->
get_resource

                     ($self->
namespace_uri
,
                      for_arg => $self->
for_uri
);
    unless ($self->
is_defined
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self->source_element, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISModulePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_interface_name', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $self->namespace_uri;


;}


;}

;
    }
    my $an = $mg->
get_property_value

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#interfacePackageName'
) ||
             $mg->
get_property_value

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#packageName'
);
    if ($an) {
      $r = $an->
string_value
;
      $r =~ s/::$//g;
      my $sf = $an->
get_property

                       (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#moduleSuffix'
);
      $r .= $sf->
string_value if 
$sf;
    } else {
      $r = $self->
pl_fully_qualified_name
;
    }
  }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISModulePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_interface_name';
}
}
$Message::DOM::ClassFeature{q<Message::Util::DIS::Perl::ManakaiDISModulePerl>} = {'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#perl', {'', '1', '1.0', '1'}};
$Message::DOM::ClassPoint{q<Message::Util::DIS::Perl::ManakaiDISModulePerl>} = 1;
package Message::Util::IF::DISResourcePerlModule;
our $VERSION = 20060224.1109;
package Message::Util::DIS::Perl::ManakaiDISPerlModuleDefinition;
our $VERSION = 20060224.1109;
push our @ISA, 'Message::Util::IF::DISResourcePerlModule';
sub pl_generate_perl_module_file ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
pl_implementation

            ->
create_perl_file
;

  ## -- Source information
  $r->
source_file

         ($self->
get_property_text

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceFile'
, ''));
  $r->
source_module

          ($self->
name_uri
);
  $r->
source_for

                        ($self->
for_uri
);
  
  ## -- License information
  my $ownermod = $self->
owner_module
;
  my $license = $ownermod->
get_property_resource
 (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--License'
);
  unless ($license) {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $ownermod->source_element, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_generate_perl_module_file', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_LICENSE_ATTR_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISPerlModuleDefinition', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $ownermod->uri;


;}


;}

;
  }
  $r->
license_uri

                    ($license->
uri
);

  ## -- Classes
  ## TODO: Custom module construction support
  my $thismod_name = $self->
pl_fully_qualified_name
;
  my $thismod_pack = $r->
get_last_package

                             ($thismod_name, make_new_package => 
1
);
  my %const;
  my %processed_class;
  for my $cls (@{$self->
get_resource_list
}) {
    if ($cls->
owner_module
           eq 
$ownermod and
        not $processed_class{$cls->
uri
}) {
      $processed_class{$cls->
uri
}
        = 
1
;
      
      my $mcode = $cls->
get_perl_module_member_code

                          ($r->
owner_document
,
                           $thismod_pack, \%const);
      if ($mcode) {
        $r->
owner_document

          ->
adopt_node
 ($mcode);
        $r->
append_child
 ($mcode);
      }

      if ($cls->
is_type_uri

                      (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Interface'
)) {
      }
    } # ownermodule and not alias
  } # Classes

  ## -- Exporter (constants)
  if (keys %const) {
    my $map = 
Message::Util::PerlCode::ManakaiPCImplementation->perl_literal
 (\%const);
    $thismod_pack->
append_statement
 ("sub $_ ()")
      for sort {$a cmp $b} keys %const;
    $thismod_pack->
get_sub
 ('AUTOLOAD',
                                           make_new_node => 
1
)
      ->
append_code
 (q[
        my $al = our $AUTOLOAD;
        $al =~ s/.+:://;
        if (] . $map . q[->{$al}) {
          no strict 'refs';
          *{$AUTOLOAD} = \&{] . $map . q[->{$al}};
          goto &{$AUTOLOAD};
        } else {
          require Carp;
          Carp::croak (qq<Can't locate method "$AUTOLOAD">);
        }
      ]);
    $thismod_pack->
get_sub
 ('import',
                                           make_new_node => 
1
)
      ->
append_code
 (q[
        my $self = shift;
        if (@_) {
          local $Exporter::ExportLevel = $Exporter::ExportLevel + 1;
          $self->SUPER::import (@_);
          for (grep {not /\W/} @_) {
            eval qq{$_};
          }
        }
      ]);
  }

  ## -- Require'ing external modules
  ## TODO: Custom module construction support
  for my $uri (@{$r->
dis_get_require_uri_list
}) {
    my $mod = $self->{db}->
get_any_resource
 ($uri)
                   ->
owner_module
;
    next unless $mod;
    my $pack = $mod->
pl_fully_qualified_name
;
    $r->
add_require_perl_module_name
 ($pack)
      unless $pack eq $thismod_name;
  }



;}


;}

;


;}
$r}
sub pl_is_feature_implemented ($$) {
my ($self, $featureResourceURI) = @_;
my $r = 0;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#isFeatureImplemented'
}
                   ->{$featureResourceURI}) {
    $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#isFeatureImplemented'
}
                   ->{$featureResourceURI};
  } elsif ($self->isa (
'Message::Util::DIS::ManakaiDISModuleDefinition'
)) {
    $r = 
1
;
    C: for my $cls (@{$self->
get_resource_list
}) {
      if ($cls->
owner_module eq 
$self and
          $cls->
is_type_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Class'
)) {
        unless ($cls->
pl_is_feature_implemented

                                ($featureResourceURI)) {
          $r = 
0
;
          last C;
        }
      }                
      ## NOTE: |DISPerl:ScalarVariable|s and interfaces are
      ##       always implemented
    }
    $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#isFeatureImplemented'
}
                   ->{$featureResourceURI} = $r;
  } else { ## Resource definition
    ## TODO: Custom module definition
    if ($self->
is_feature_provided

                        ($featureResourceURI)) {
      if ($self->
is_type_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#MethodReturn'
) or
          $self->
is_type_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AttributeGet'
) or
          $self->
is_type_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AttributeSet'
)) {
        my $def = $self->
get_property_value

                          (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Def'
);
        $r = $def->
length
;
      } else {
        $r = 
1
;
        C: for my $res (@{$self->
get_child_resource_list
}) {
          if ($res->
is_type_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AnyMethod'
)) {
            unless ($res->
pl_is_feature_implemented

                        ($featureResourceURI)) {
              $r = 
0
;
              last C;
            }
          }
        } # for C
      } # self.type
    } else {
      $r = 
1
;
    }
    $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#isFeatureImplemented'
}->{$featureResourceURI} = $r;
  }



;}


;}

;


;}
$r}
$Message::DOM::ClassFeature{q<Message::Util::DIS::Perl::ManakaiDISPerlModuleDefinition>} = {'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#perl', {'', '1', '1.0', '1'}};
$Message::DOM::ClassPoint{q<Message::Util::DIS::Perl::ManakaiDISPerlModuleDefinition>} = 1;
package Message::Util::IF::DISResourcePerl;
our $VERSION = 20060224.1109;
package Message::Util::DIS::Perl::ManakaiDISResourcePerl;
our $VERSION = 20060224.1109;
push our @ISA, 'Message::Util::IF::DISResourcePerl';
use Message::Util::Error;
sub pl_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{

my 
$method;


{

my 
$__type = $self->
type_resource
;
my $__type_uri = $__type->
uri
;
$method = $Message::Util::DIS::Method{$__type_uri}->{'pl_name'};
unless ($method) {
  my %__methods;
  for (@{$__type->
get_super_resource_uri_list
}) {
    $__methods{$_} = $Message::Util::DIS::Method{$_}->{'pl_name'}
      if $Message::Util::DIS::Method{$_}->{'pl_name'};
  }
  my $__db = $self->
database
;
  T1: for my $__t1_uri (keys %__methods) {
    next T1 unless $__methods{$__t1_uri};
    my $__t1 = $__db->
get_resource
 ($__t1_uri);
    T2: for my $__t2_uri (keys %__methods) {
      next T2 if $__t1_uri eq $__t2_uri;
      if ($__t1->
is_subset_of_uri
 ($__t2_uri)) {
        delete $__methods{$__t2_uri};
        next T2;
      }
      if ($Message::Util::DIS::Method{$__t1_uri}->{'pl_name'}
            eq $Message::Util::DIS::Method{$__t2_uri}->{'pl_name'}) {
        delete $__methods{$__t2_uri};
        next T2;
      }
    }
  }
  if (keys %__methods > 1) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#more-than-one-methods-for-a-type', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-name' => 'pl_name', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $__type_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23getMethodForType+http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23ForLatest', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-resource-types' => [keys %__methods];

;
  }
  $Message::Util::DIS::Method{$__type_uri}->{'pl_name'} =
  $method = $__methods{[keys %__methods]->[0]} if %__methods;
}


;}

;
if ($method) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $method->(@_);
  


;}


;}

;
} else {
  $r = 
undef
;
} 


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_name';
}
}
sub get_perl_name_list ($) {
my ($self) = @_;
my $r = [];

{


{

local $Error::Depth = $Error::Depth + 1;

{



  ## Primary name
  my $nm = $self->
get_property_text_list

                             (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#methodName'
);
  if (@$nm > 0) {
    push @$r, @$nm;
    ## NOTE: No reserved name checks enforced in this case
  } elsif (defined (my $ln = $self->
local_name
)) {
    $nm = 
Message::Util::DIS::ManakaiDISImplementation->_camel_case_to_underscore_name
 ($ln);
    if ($self->
get_property_boolean

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#isForInternal'
)) {
      $nm = '_' . $nm;
    }
    if ({
            import => 1,
            unimport => 1,
            isa => 1,
            can => 1,
            new => 1,
            as_string => 1,
            stringify => 1,
            clone => 1,
        }->{$nm} or $nm =~ /^___/) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self->source_element, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'get_perl_name_list', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#generatedName' => $nm, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESERVED_PERL_METHOD_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $self->uri;

;
      


;}


;}

;
    }
    push @$r, $nm;
  }

  ## Names specified via "dis:Operator" attributes
  for my $opv (@{$self->
get_property_value_list

                     (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Operator'
)}) {
    if ($opv->isa (
'Message::Util::IF::DVURIValue'
)) {
      my $op_uri = $opv->
uri
;
      my $nm = {
               
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#MUErrorHandler'
 => '___report_error',
               
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/ErrorDefMethod'
 => '___error_def',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#AsStringMethod'
 => 'stringify',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#NewMethod'
 => 'new',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#CloneMethod'
 => 'clone',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ImportMethod'
 => 'import',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#CanMethod'
 => 'can',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#UnimportMethod'
 => 'unimport',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#VERSIONMethod'
 => 'VERSION',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ISAMethod'
 => 'isa',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#ArrayGet'
 => 'FETCH',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#ArraySet'
 => 'STORE',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#HashGet'
 => 'FETCH',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#HashSet'
 => 'STORE',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#ToString'
 => 'stringify',
             }->{$op_uri};
      push @$r, $nm if defined $nm;
    } else {
      my $nm = $opv->
string_value
;
      if ($nm =~ /^[A-Z]+$/) {
        push @$r, $nm;
      }
    }
  } # operators



;}


;}

;


;}
$r}
sub get_perl_operator_list ($) {
my ($self) = @_;
my $r = [];

{


{

local $Error::Depth = $Error::Depth + 1;

{


  for 
my $opv (@{$self->
get_property_value_list

                     (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Operator'
)}) {
    if ($opv->isa (
'Message::Util::IF::DVURIValue'
)) {
      my $op_uri = $opv->
uri
;
      my $nm = {
                 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#AsStringMethod'
 => '""',
                 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#ToString'
 => '""',
               }->{$op_uri};
      push @$r, $nm if defined $nm;
    } else {
      my $nm = $opv->
string_value
;
      if ($nm !~ /^[A-Z]+$/) {
        push @$r, $nm;
      }
    }
  } # operators



;}


;}

;


;}
$r}
sub pl_fully_qualified_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{

if 
(exists $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/plFullyQualifiedName'
}) {
  $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/plFullyQualifiedName'
};
} else {
  my $method;
  

{

my 
$__type = $self->
type_resource
;
my $__type_uri = $__type->
uri
;
$method = $Message::Util::DIS::Method{$__type_uri}->{'pl_fully_qualified_name'};
unless ($method) {
  my %__methods;
  for (@{$__type->
get_super_resource_uri_list
}) {
    $__methods{$_} = $Message::Util::DIS::Method{$_}->{'pl_fully_qualified_name'}
      if $Message::Util::DIS::Method{$_}->{'pl_fully_qualified_name'};
  }
  my $__db = $self->
database
;
  T1: for my $__t1_uri (keys %__methods) {
    next T1 unless $__methods{$__t1_uri};
    my $__t1 = $__db->
get_resource
 ($__t1_uri);
    T2: for my $__t2_uri (keys %__methods) {
      next T2 if $__t1_uri eq $__t2_uri;
      if ($__t1->
is_subset_of_uri
 ($__t2_uri)) {
        delete $__methods{$__t2_uri};
        next T2;
      }
      if ($Message::Util::DIS::Method{$__t1_uri}->{'pl_fully_qualified_name'}
            eq $Message::Util::DIS::Method{$__t2_uri}->{'pl_fully_qualified_name'}) {
        delete $__methods{$__t2_uri};
        next T2;
      }
    }
  }
  if (keys %__methods > 1) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#more-than-one-methods-for-a-type', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-name' => 'pl_fully_qualified_name', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $__type_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23getMethodForType+http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23ForLatest', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-resource-types' => [keys %__methods];

;
  }
  $Message::Util::DIS::Method{$__type_uri}->{'pl_fully_qualified_name'} =
  $method = $__methods{[keys %__methods]->[0]} if %__methods;
}


;}

;
  if ($method) {
    

{

local $Error::Depth = $Error::Depth + 1;

{



      $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/plFullyQualifiedName'
} = $r = $method->(@_);
    


;}


;}

;
  } else {
    $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/plFullyQualifiedName'
} = $r = 
undef
;
 } 
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_fully_qualified_name';
}
}
sub pl_variable_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = $self->
get_property_text

              (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#variableName'
,
               $self->
local_name
);
if (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    if 
($self->
get_property_boolean

                         (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#isNamedParameter'
, 
0
)) {
      $r = '$opt{' . 
         
Message::Util::DIS::ManakaiDISImplementation->_camel_case_to_underscore_name

                                               ($r) .
           '}';
    } else {
      my $dt = $self->
dis_actual_data_type_resource
;
      if ($dt->
is_subset_of_uri

                                               (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#Array'
) or
          $dt->
is_subset_of_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#List'
)) {
        $r = '@' . $r;
      } elsif ($dt->
is_subset_of_uri

                                               (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#Hash'
)) {
        $r = '%' . $r;
      } else {
        $r = '$' . $r;
      }
    }
  


;}


;}

;
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_variable_name';
}
}
sub pl_prototype ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$dt = $self->
dis_actual_data_type_resource
;
  if ($dt->
is_subset_of_uri

                                             (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#Array'
)) {
    $r = '@' . $r;
  } elsif ($dt->
is_subset_of_uri

                                             (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#Hash'
)) {
    $r = '%' . $r;
  } else {
    $r = '$' . $r;
  }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_prototype';
}
}
sub pl_code_fragment ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{

if 
(exists $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plCodeFragment'
}) {
  $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plCodeFragment'
};
} else {
  my $method;
  

{

my 
$__type = $self->
type_resource
;
my $__type_uri = $__type->
uri
;
$method = $Message::Util::DIS::Method{$__type_uri}->{'pl_code_fragment'};
unless ($method) {
  my %__methods;
  for (@{$__type->
get_super_resource_uri_list
}) {
    $__methods{$_} = $Message::Util::DIS::Method{$_}->{'pl_code_fragment'}
      if $Message::Util::DIS::Method{$_}->{'pl_code_fragment'};
  }
  my $__db = $self->
database
;
  T1: for my $__t1_uri (keys %__methods) {
    next T1 unless $__methods{$__t1_uri};
    my $__t1 = $__db->
get_resource
 ($__t1_uri);
    T2: for my $__t2_uri (keys %__methods) {
      next T2 if $__t1_uri eq $__t2_uri;
      if ($__t1->
is_subset_of_uri
 ($__t2_uri)) {
        delete $__methods{$__t2_uri};
        next T2;
      }
      if ($Message::Util::DIS::Method{$__t1_uri}->{'pl_code_fragment'}
            eq $Message::Util::DIS::Method{$__t2_uri}->{'pl_code_fragment'}) {
        delete $__methods{$__t2_uri};
        next T2;
      }
    }
  }
  if (keys %__methods > 1) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#more-than-one-methods-for-a-type', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-name' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $__type_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23getMethodForType+http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23ForLatest', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-resource-types' => [keys %__methods];

;
  }
  $Message::Util::DIS::Method{$__type_uri}->{'pl_code_fragment'} =
  $method = $__methods{[keys %__methods]->[0]} if %__methods;
}


;}

;
  if ($method) {
    $r = $method->(@_);
  } else {
    $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plCodeFragment'
} = 
undef
;
  } 
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_code_fragment';
}
}
sub get_perl_module_member_code ($$$$) {
my ($self, $factory, $thismod_pack, $const) = @_;
my $r;

{

my 
$method;


{

my 
$__type = $self->
type_resource
;
my $__type_uri = $__type->
uri
;
$method = $Message::Util::DIS::Method{$__type_uri}->{'get_perl_module_member_code'};
unless ($method) {
  my %__methods;
  for (@{$__type->
get_super_resource_uri_list
}) {
    $__methods{$_} = $Message::Util::DIS::Method{$_}->{'get_perl_module_member_code'}
      if $Message::Util::DIS::Method{$_}->{'get_perl_module_member_code'};
  }
  my $__db = $self->
database
;
  T1: for my $__t1_uri (keys %__methods) {
    next T1 unless $__methods{$__t1_uri};
    my $__t1 = $__db->
get_resource
 ($__t1_uri);
    T2: for my $__t2_uri (keys %__methods) {
      next T2 if $__t1_uri eq $__t2_uri;
      if ($__t1->
is_subset_of_uri
 ($__t2_uri)) {
        delete $__methods{$__t2_uri};
        next T2;
      }
      if ($Message::Util::DIS::Method{$__t1_uri}->{'get_perl_module_member_code'}
            eq $Message::Util::DIS::Method{$__t2_uri}->{'get_perl_module_member_code'}) {
        delete $__methods{$__t2_uri};
        next T2;
      }
    }
  }
  if (keys %__methods > 1) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#more-than-one-methods-for-a-type', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-name' => 'get_perl_module_member_code', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $__type_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23getMethodForType+http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23ForLatest', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-resource-types' => [keys %__methods];

;
  }
  $Message::Util::DIS::Method{$__type_uri}->{'get_perl_module_member_code'} =
  $method = $__methods{[keys %__methods]->[0]} if %__methods;
}


;}

;
if ($method) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $method->(@_);
  


;}


;}

;
} else {
  $r = 
undef
;
} 


;}
$r}
sub get_perl_class_member_code ($$) {
my ($self, $factory) = @_;
my $r;

{

my 
$method;


{

my 
$__type = $self->
type_resource
;
my $__type_uri = $__type->
uri
;
$method = $Message::Util::DIS::Method{$__type_uri}->{'get_perl_class_member_code'};
unless ($method) {
  my %__methods;
  for (@{$__type->
get_super_resource_uri_list
}) {
    $__methods{$_} = $Message::Util::DIS::Method{$_}->{'get_perl_class_member_code'}
      if $Message::Util::DIS::Method{$_}->{'get_perl_class_member_code'};
  }
  my $__db = $self->
database
;
  T1: for my $__t1_uri (keys %__methods) {
    next T1 unless $__methods{$__t1_uri};
    my $__t1 = $__db->
get_resource
 ($__t1_uri);
    T2: for my $__t2_uri (keys %__methods) {
      next T2 if $__t1_uri eq $__t2_uri;
      if ($__t1->
is_subset_of_uri
 ($__t2_uri)) {
        delete $__methods{$__t2_uri};
        next T2;
      }
      if ($Message::Util::DIS::Method{$__t1_uri}->{'get_perl_class_member_code'}
            eq $Message::Util::DIS::Method{$__t2_uri}->{'get_perl_class_member_code'}) {
        delete $__methods{$__t2_uri};
        next T2;
      }
    }
  }
  if (keys %__methods > 1) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#more-than-one-methods-for-a-type', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-name' => 'get_perl_class_member_code', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $__type_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23getMethodForType+http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23ForLatest', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-resource-types' => [keys %__methods];

;
  }
  $Message::Util::DIS::Method{$__type_uri}->{'get_perl_class_member_code'} =
  $method = $__methods{[keys %__methods]->[0]} if %__methods;
}


;}

;
if ($method) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $method->(@_);
  


;}


;}

;
} else {
  $r = 
undef
;
} 


;}
$r}
sub get_perl_error_interface_member_code ($$) {
my ($self, $factory) = @_;
my $r;

{

my 
$method;


{

my 
$__type = $self->
type_resource
;
my $__type_uri = $__type->
uri
;
$method = $Message::Util::DIS::Method{$__type_uri}->{'get_perl_error_interface_member_code'};
unless ($method) {
  my %__methods;
  for (@{$__type->
get_super_resource_uri_list
}) {
    $__methods{$_} = $Message::Util::DIS::Method{$_}->{'get_perl_error_interface_member_code'}
      if $Message::Util::DIS::Method{$_}->{'get_perl_error_interface_member_code'};
  }
  my $__db = $self->
database
;
  T1: for my $__t1_uri (keys %__methods) {
    next T1 unless $__methods{$__t1_uri};
    my $__t1 = $__db->
get_resource
 ($__t1_uri);
    T2: for my $__t2_uri (keys %__methods) {
      next T2 if $__t1_uri eq $__t2_uri;
      if ($__t1->
is_subset_of_uri
 ($__t2_uri)) {
        delete $__methods{$__t2_uri};
        next T2;
      }
      if ($Message::Util::DIS::Method{$__t1_uri}->{'get_perl_error_interface_member_code'}
            eq $Message::Util::DIS::Method{$__t2_uri}->{'get_perl_error_interface_member_code'}) {
        delete $__methods{$__t2_uri};
        next T2;
      }
    }
  }
  if (keys %__methods > 1) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#more-than-one-methods-for-a-type', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-name' => 'get_perl_error_interface_member_code', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $__type_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23getMethodForType+http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23ForLatest', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-resource-types' => [keys %__methods];

;
  }
  $Message::Util::DIS::Method{$__type_uri}->{'get_perl_error_interface_member_code'} =
  $method = $__methods{[keys %__methods]->[0]} if %__methods;
}


;}

;
if ($method) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $method->(@_);
  


;}


;}

;
} else {
  $r = 
undef
;
} 


;}
$r}
sub get_perl_definition_hash_namespace ($) {
my ($self) = @_;
my $r;

{

my 
$method;


{

my 
$__type = $self->
type_resource
;
my $__type_uri = $__type->
uri
;
$method = $Message::Util::DIS::Method{$__type_uri}->{'get_perl_definition_hash_namespace'};
unless ($method) {
  my %__methods;
  for (@{$__type->
get_super_resource_uri_list
}) {
    $__methods{$_} = $Message::Util::DIS::Method{$_}->{'get_perl_definition_hash_namespace'}
      if $Message::Util::DIS::Method{$_}->{'get_perl_definition_hash_namespace'};
  }
  my $__db = $self->
database
;
  T1: for my $__t1_uri (keys %__methods) {
    next T1 unless $__methods{$__t1_uri};
    my $__t1 = $__db->
get_resource
 ($__t1_uri);
    T2: for my $__t2_uri (keys %__methods) {
      next T2 if $__t1_uri eq $__t2_uri;
      if ($__t1->
is_subset_of_uri
 ($__t2_uri)) {
        delete $__methods{$__t2_uri};
        next T2;
      }
      if ($Message::Util::DIS::Method{$__t1_uri}->{'get_perl_definition_hash_namespace'}
            eq $Message::Util::DIS::Method{$__t2_uri}->{'get_perl_definition_hash_namespace'}) {
        delete $__methods{$__t2_uri};
        next T2;
      }
    }
  }
  if (keys %__methods > 1) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#more-than-one-methods-for-a-type', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-name' => 'get_perl_definition_hash_namespace', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $__type_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23getMethodForType+http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23ForLatest', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-resource-types' => [keys %__methods];

;
  }
  $Message::Util::DIS::Method{$__type_uri}->{'get_perl_definition_hash_namespace'} =
  $method = $__methods{[keys %__methods]->[0]} if %__methods;
}


;}

;
if ($method) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $method->(@_);
  


;}


;}

;
} else {
  $r = 
undef
;
} 


;}
$r}
sub get_perl_error_code_name ($$) {
my ($self, $factory) = @_;
my $r;

{

my 
$method;


{

my 
$__type = $self->
type_resource
;
my $__type_uri = $__type->
uri
;
$method = $Message::Util::DIS::Method{$__type_uri}->{'get_perl_error_code_name'};
unless ($method) {
  my %__methods;
  for (@{$__type->
get_super_resource_uri_list
}) {
    $__methods{$_} = $Message::Util::DIS::Method{$_}->{'get_perl_error_code_name'}
      if $Message::Util::DIS::Method{$_}->{'get_perl_error_code_name'};
  }
  my $__db = $self->
database
;
  T1: for my $__t1_uri (keys %__methods) {
    next T1 unless $__methods{$__t1_uri};
    my $__t1 = $__db->
get_resource
 ($__t1_uri);
    T2: for my $__t2_uri (keys %__methods) {
      next T2 if $__t1_uri eq $__t2_uri;
      if ($__t1->
is_subset_of_uri
 ($__t2_uri)) {
        delete $__methods{$__t2_uri};
        next T2;
      }
      if ($Message::Util::DIS::Method{$__t1_uri}->{'get_perl_error_code_name'}
            eq $Message::Util::DIS::Method{$__t2_uri}->{'get_perl_error_code_name'}) {
        delete $__methods{$__t2_uri};
        next T2;
      }
    }
  }
  if (keys %__methods > 1) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#more-than-one-methods-for-a-type', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-name' => 'get_perl_error_code_name', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $__type_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23getMethodForType+http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23ForLatest', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-resource-types' => [keys %__methods];

;
  }
  $Message::Util::DIS::Method{$__type_uri}->{'get_perl_error_code_name'} =
  $method = $__methods{[keys %__methods]->[0]} if %__methods;
}


;}

;
if ($method) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $method->(@_);
  


;}


;}

;
} else {
  $r = 
undef
;
} 


;}
$r}
sub pl_additional_isa_packages ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = [];

{

for 
my $t (@{$self->
get_property_text_list

                         (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--AppISA'
)}) {
  push @$r, $t;
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_additional_isa_packages';
}
}
our $RegQNameChar = (qr/[^\s<>"'\/\\\[\]\{\},!\?=\$\@%]/);
our $RegBlockContent;
$RegBlockContent = (qr/(?>[^{}\\]*)(?>(?>[^{}\\]+|\\.|\{(??{$RegBlockContent})\})*)/);
sub pl_preprocess_perl_code ($$%) {
my ($self, $codeArg, %opt) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$nsr = $opt{namespace_context} || $opt{node} || $self->{src};
  my $db = $self->
database
;
  our $RegQNameChar;
  our $RegBlockContent;
  my $plimpl = $self->
pl_implementation
;
  $r = $plimpl->
create_perl_block
;
  if (defined $opt{source_line}) {
    $r->
source_file
 ($opt{source_file});
    $r->
source_line
 ($opt{source_line});
    $r->
current_source_file
 ($opt{source_file});
    $r->
current_source_line
 ($opt{source_line});
  } elsif ($opt{node}) {
    my $np = $opt{node}->
flag
 ('nodePath') ||
             $opt{node}->
node_path

              (key => [qw/Name QName Type type/]);
    $r->
current_source_file
 ($np);
    $r->
current_source_line
 (1);
    $r->
source_file
 ($np);
    $r->
source_line
 (1);
  }
  
  for my $source_code (split /\b(_ _(?:(?!_ _)$RegQNameChar)+
                                   (?:\{$RegBlockContent\})?
                                 _ _)\b/x, $codeArg) {
    ## Block-level element
    if ($source_code =~ /_\_\z/ and
        $source_code =~ s/^_\_((?:(?!_\_)$RegQNameChar)+)//) {
      my $et = $nsr->
qname_to_uri

                             ($1,
                              node => $opt{node},
                              default_namespace_uri => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--'
);
      if ($source_code =~ s/^\{//) {
        $source_code =~ s/\}__\z//;
      } else {
        $source_code = '';
      }


      if ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--DEEP' or 
$et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--UNDEEP'
) {
        my $block = $r->
append_block
;
        $block->
append_statement

                      ('local $Error::Depth = $Error::Depth '.
                       ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--DEEP'
 ? '+' : '-').
                       ' 1');
        $block->
append_code_fragment

                  ($self->
pl_preprocess_perl_code

                               ($source_code,
                                method_resource => $opt{method_resource},
                                source_file => $r->
current_source_file
,
                                source_line => $r->
current_source_line
,
                                node => $opt{node},
                                namespace_context=> $opt{namespace_context}));
        $r->
skip_lines
 ($source_code);
      } elsif ({
        
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--EXCEPTION'
 => 1,
      }->{$et}) {
        $r->
skip_lines
 ($source_code);
        if ($source_code =~ s/^((?:(?!::).)+)(?:::\s*)?//s) {
          my ($if, $const, $subtype)
            = @{$db->
xcref_to_resource

                                 ($1, $nsr,
                                  node => $opt{node},
                    for_arg => $self->
for_uri
)};
          my $cls = $if->
is_type_uri

                                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Class'
)
                  ? $if
                  : $if->
get_property_resource

                                 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#implementedBy'
);
          unless ($cls and
                  $cls->
is_type_uri

                                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Class'
)) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_EXCEPTION_CLASS_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $if->uri;


;}


;}

;
          }
          my $param = $self->
_pl_parse_preprocess_parameter

                                 ($source_code, node => $opt{node},
                                namespace_context=> $opt{namespace_context});
          my $context_param
                    = $self->
_pl_get_context_parameter
;

          $self->
_pl_append_throw

                       ($r, $cls, $const, $subtype,
                        {%$param, %$context_param},
                        node => $opt{node},
                                namespace_context=> $opt{namespace_context});
        } else {
         

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_PREPROCESS_NO_EXCEPTION_TYPE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


;}


;}

;
        }
      } elsif ({
        
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#ERROR'
 => 
1
,
      }->{$et}) {
        $r->
skip_lines
 ($source_code);
        if ($source_code =~ s/^((?:(?!::).)+)(?:::\s*)?//s) {
          my $err_uri = $nsr->
tfqnames_to_uri

                                ($1, 
undef
,
                                 $self->
for_uri
,
                                 node => $opt{node});
          my $err = $db->
get_resource
 ($err_uri);
          unless ($err and
                  $err->
is_type_uri

                                 (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMErrorType'
)) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMErrorType', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $err_uri;


;}


;}

;
          }
          my $param = $self->
_pl_parse_preprocess_parameter

                                 ($source_code, node => $opt{node},
                                namespace_context=> $opt{namespace_context});
          my $context_param = $self->
_pl_get_context_parameter
;
          $param = {%$param, %$context_param,
                    -type => {
                      type => 'quoted',
                      value => $err->
name_uri
,
                    }};

          my $errcls = $db->
get_resource

                      (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#ManakaiDOMError'
,
                       for_arg => $err->
for_uri
);
          if (not $errcls->
is_defined
) {
            $errcls = $db->
get_resource

                      (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#ManakaiDOMError'
,
                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOMLatest'
);
          }

          for ($err, $errcls) {
            $_->
is_referred

                    ($opt{node} or
                     $self->
source_element or
                     
$self->
uri
);
          }

          my $statement = $r->
append_statement

            ('report '.
             $errcls->
pl_fully_qualified_name
.
             ' -object => $self');

          $self->
_pl_add_require_resource

                       ($errcls->
owner_module

                        => $statement);

          for my $name (keys %$param) {
            my $pname = $name;
            my $pres = $db->
get_resource
 ($pname);
            if ($pres->
is_defined
) {
              $pname = $pres->
get_property_text

                                   (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/propKey'
, $pname);
            }
            $pname =~ s/(['\\])/\\$1/g;
            $pname = qq<'$pname'>;
            $statement->
append_code

                   (', ' . $pname . ' => ');
            if ($param->{$name}->{type} eq 'code') {
              if (ref $param->{$name}->{value}) {
                $statement->
append_code_fragment

                   ($param->{$name}->{value});
              } else {
                $statement->
append_code_fragment

                  ($self->
pl_preprocess_perl_statement

                             ($param->{$name}->{value},
                              node => $opt{node},
                              namespace_context => $opt{namespace_context}));
              }
            } else {  ## String as is
              $statement->
append_string_literal

                   ($param->{$name}->{value});
            }
          }
        } else {
         

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_PREPROCESS_NO_EXCEPTION_TYPE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


;}


;}

;
        }
      } elsif ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--CODE'
) {
        $r->
skip_lines
 ($source_code);
          my $code_name;
          $source_code =~ s/^\s+//;
          if ($source_code =~ s/^((?>(?!::).)+)//s) {
            $code_name = $1;
          } else {
            

{

local $Error::Depth = $Error::Depth - 1;

{



              
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_PREPROCESS_NO_CODE_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;

;
            


;}


;}

;
          }
          $source_code =~ s/^::\s*//;
          my $param = $self->
_pl_parse_preprocess_parameter

                                   ($source_code, node => $opt{node},
                                namespace_context=> $opt{namespace_context});
          my $code_uri = $nsr->
tfqnames_to_uri

                                 ($code_name, 
undef
,
                                  $self->
for_uri
,
                                  node => $opt{node});
          my $code = $self->{db}->
get_resource

                                   ($code_uri);
          $code->
is_referred

                                   ($self->
uri
);
          unless ($code->
is_type_uri

                                   (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#BlockCode'
)) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#BlockCode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $code_uri;

;


;}


;}

;
          }
          my $pc = $code->
pl_code_fragment
;
          unless (defined $pc) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_CODE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $code_uri;


;}


;}

;
          }
          $pc = $pc->clone;
          for my $var (grep {/^\$/} keys %$param) {
            my $value;
            if ($param->{$var}->{type} eq 'variable') {
              $value = $plimpl->
create_perl_variable

                                  ('$', 
undef
, $param->{$var}->{value});
            } elsif ($param->{$var}->{type} eq 'code') {
              $value = $self->
pl_preprocess_perl_statement

                                    ($param->{$var}->{value},
                                     contains_statements => 
0
,
                                     node => $opt{node},
                                namespace_context=> $opt{namespace_context});
            } else {
              $value = $plimpl->
create_perl_string_literal

                                  ($param->{$var}->{value});
            }
            $pc->
replace_variable

                                  ($var => $value);
          }
          $r->
append_code_fragment
 ($pc);
        } elsif ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#InputNormalize'
) {
          $r->
skip_lines
 ($source_code);
          unless ($opt{method_resource}) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_PREPROCESS_NO_METHOD_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


;}


;}

;
          }
          my $param = $opt{method_resource}
                        ->
get_child_resource_by_name_and_type

                            ($source_code, 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#MethodParameter'
);
          unless ($param) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#MethodParameter', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


;}


;}

;
          }
          my $norm = $param->
pl_get_method_input_normalizer
;
          if ($norm) {
            my $norm_code = $norm->
pl_code_fragment
->clone;
            $norm_code->
replace_variable

               ('$INPUT' => $param->
pl_variable_name
);
            $r->
append_code_fragment
 ($norm_code);
          }
        } elsif ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--FOR'
) {
          if ($source_code =~ s/^(((?>(?!::).)*)::\s*)//) {
            $r->
skip_lines
 ($1);
            V: for my $forq (split /\s*\|\s*/, $2) {
              my $notfor = ($forq =~ s/^!\s*// ? 
1 : 

0
);
              my $for_uri = $nsr->
qname_to_uri

                                      ($forq, node => $opt{node});
              my $formatch = $self->
is_for_uri
 ($for_uri);
              if (($formatch and not $notfor) or
                  (not $formatch and $notfor)) {
                $r->
append_code_fragment

                    ($self->
pl_preprocess_perl_code

                             ($source_code,
                              method_resource => $opt{method_resource},
                              source_file => $r->
current_source_file
,
                              source_line => $r->
current_source_line
,
                              node => $opt{node},
                                namespace_context=> $opt{namespace_context}));
                last V;
              }
            } # V
            $r->
skip_lines
 ($source_code);
          } else {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_PREPROCESS_NO_FOR_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


;}


;}

;
          }
        } elsif ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--ASSERT'
) {
          $r->
skip_lines
 ($source_code);
          my $assert_type;
          if ($source_code =~ s/^\s*($RegQNameChar+)\s*::\s*//o) {
            $assert_type = $nsr->
qname_to_uri

                                     ($1, node => $opt{node});
          } else {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_PREPROCESS_NO_ASSERT_TYPE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


;}


;}

;
          }
          # if output assertion then
=pod
            my $assert_block = $r->
append_block
;
          
            my $param = $self->
_pl_parse_preprocess_parameter

                                   ($source_code, node => $opt{node},
                                namespace_context=> $opt{namespace_context});
            my $context_param
                    = $self->
_pl_get_context_parameter
;

            if ($assert_type eq 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#isPositive'
) {

$pre = perl_statement
         perl_assign
           'my $asActual' =>
                  '('.perl_code ($param->{actual}, %opt).')';
$cond = '$asActual > 0';
$xparam->{ExpandedURI q<DOMMain:expectedLabel>} = 'a positive value';
$xparam->{ExpandedURI q<DOMMain:actualValue>}
                         = perl_code_literal q<$asActual>;
} elsif ($atype eq ExpandedURI q<DISPerl:invariant>) {
$cond = '0';
$xparam->{ExpandedURI q<DOMMain:expectedLabel>} = $param->{msg};
$xparam->{ExpandedURI q<DOMMain:actualValue>} = '(invariant)';
} else {
valid_err (q[Assertion type <].$atype.q[> is not supported],
           node => $opt{node});
}

$r = $pre . perl_if
       $cond,
       undef,


          my $cls = $self->{db}->
get_resource

                           (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#CoreException'
);
          my $const = $self->{db}->
get_resource

                           (
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_DEBUG_BUG'
);
          my $subtype = $self->{db}->
get_resource

                           (
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ASSERTION_ERR'
);
          $_->
is_referred

                  ($opt{node} || $self->{src}) for $cls, $const, $subtype;
          $self->
_pl_append_throw

                       ($assert_block, $cls, $const, $subtype,
                        {%$param, %$context_param,
                         
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#assertionType'
 => {
                           type => 'quoted', value => $assert_type,
                         },
                         
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#traceText'
 => {
                           type => 'code',
                           value => q<(sprintf 'at %s line %s%s%s',
                                       
__FILE__
, 
__LINE__
, "\n\t",
                                       Carp::longmess ())>,
                         }}, node => $opt{node},
                                namespace_context=> $opt{namespace_context});

=cut

        } elsif ({
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--FILE'
 => 1,
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--LINE'
 => 1,
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--PACKAGE'
 => 1,
        }->{$et}) {
          $r->
append_atom

                ('__'.{
                         
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--FILE'
 => 'FILE',
                         
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--LINE'
 => 'LINE',
                         
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--PACKAGE'
 => 'PACKAGE',
                      }->{$et}.'__');
          if (length $source_code) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_PREPROCESS_BLOCK_NOT_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


;}


;}

;
          }
        } else {
          

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#UNSUPPORTED_ELEMENT_TYPE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


;}


;}

;
        }
      } else {  ## Other than block-level element
        $r->
append_code_fragment

               ($self->
pl_preprocess_perl_statement

                         ($source_code, contains_statements => 
1
,
                          source_file => $r->
current_source_file
,
                          source_line => $r->
current_source_line
,
                          node => $opt{node},
                                namespace_context=> $opt{namespace_context}));
        $r->
skip_lines
 ($source_code);
      }
    } # for
  


;}


;}

; # DEEP


;}
$r}
sub pl_preprocess_perl_statement ($$%) {
my ($self, $codeArg, %opt) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$nsr = $opt{namespace_context} || $opt{node} || $self->{src};
  our $RegQNameChar;
  my $plimpl = $self->
pl_implementation
;
  my $db = $self->
database
;
  if ($opt{contains_statements}) {
    $r = $plimpl->
create_perl_block_container
;
    if (defined $opt{source_line}) {
      $r->
source_file
 ($opt{source_file});
      $r->
source_line
 ($opt{source_line});
      $r->
current_source_file
 ($opt{source_file});
      $r->
current_source_line
 ($opt{source_line});
    } elsif ($opt{node}) {
      my $np = $opt{node}->
flag
 ('nodePath') ||
               $opt{node}->
node_path

                (key => [qw/Name QName Type type/]);
      $r->
source_file
 ($np);
      $r->
source_line
 (1);
      $r->
current_source_file
 ($np);
      $r->
current_source_line
 (1);
    }
  } else {
    $r = $plimpl->
create_perl_inline_container
;
  }
  for my $source_code (split /(?<![\^\?qwr])(\x3C$RegQNameChar[^<>]+>
                                             )/ox, $codeArg) {
    if ($source_code =~ s/^\x3C//) {
      $source_code =~ s/>$//;
      if ($source_code =~ /=$/) {
      ## TODO: Warning
      #  valid_warn qq<Inline element "\x3C$source_code>" ends with a "=" - >.
      #              q{should "=" be used place of "=>"?};
      }
      if ($source_code =~ s/^(.+?):://) {
        my $et = $nsr->
qname_to_uri

                             ($1,
                              node => $opt{node},
                              default_namespace_uri => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--'
);
        if ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--Q'
) {          ## QName constant
          $r->
append_string_literal

                      ($nsr->
qname_to_uri

                                   ($source_code, node => $opt{node}));
        } elsif ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--H'
) {
          my $uri = $nsr->
qname_to_uri

                                   ($source_code, node => $opt{node});
          my $prop_res = $db->
get_resource
 ($uri);
          $prop_res->
is_referred

                          ($opt{node} or $self->
uri
);
          my $pname = $prop_res->
get_property_text

                                   (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#propHashKey'
, $uri);
          $r->
append_string_literal
 ($pname);
        } elsif ({
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--M'
 => 1,
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--ClassM'
 => 1,
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--AG'
 => 1,
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--AS'
 => 1,
        }->{$et}) {     ## Method call
          my ($class_qname, $method_qname)
                 = split /\s*\.\s*/, $source_code, 2;
          my $class_uri = $nsr->
tfqnames_to_uri

                               ($class_qname,
                                $self->
owner_class_node_uri
,
                                $self->
for_uri
,
                                node => $opt{node});
          my $class = $self->{db}->
get_resource

                                           ($class_uri);
          unless ($class->
is_defined
) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AnyClass', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $class_uri;


;}


;}

;
          }
          $class->
is_referred

                         ($opt{node} || $self->{src} || $self->{uri});
          if ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--:ClassM' and
              
$class->
is_type_uri

                             (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#IF'
)) {
            

{

local $Error::Depth = $Error::Depth - 1;

{



              
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node} || $self->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#IF', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#INTERFACE_CLASS_METHOD_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $class_uri;

;
            


;}


;}

;
          }
          unless ($class->
is_type_uri

                                 (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#IF'
)) {
            $self->
_pl_add_require_resource

                                 ($class => $r);
          }
          my $method = $class->
get_child_resource_by_name_and_type

                            ($method_qname,
                             {
                               
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--AG'
 => 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Attribute'
,
                               
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--AS'
 => 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Attribute'
,
                             }->{$et} || 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Method'
);
          if (not $method or
              not $method->
is_defined
) {
            

{

local $Error::Depth = $Error::Depth - 1;

{



              
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node} || $self->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => {
                               'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--AG' => 'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Attribute',
                               'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--AS' => 'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Attribute',
                             }->{$et} || 'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Method', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $method_qname, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#parentURI' => $class_uri;

;
            


;}


;}

;
          }
          my $class_name = '';
          if ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--ClassM'
) {
            $class_name = $class->
pl_fully_qualified_name
 . '->';
          }
          my $method_name = $method->
pl_name
;
          $r->
append_bare
 ($class_name . $method_name);
        } elsif ({
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--Class'
 => 1,
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--ClassName'
 => 1,
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--IF'
 => 1,
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--IFName'
 => 1,
        }->{$et}) {                            ## Perl package name
          my $class_uri = $nsr->
tfqnames_to_uri

                               ($source_code,
                                $self->
owner_class_node_uri
,
                                $self->
for_uri
,
                                node => $opt{node});
          my $class = $self->{db}->
get_resource

                                           ($class_uri);
          $class->
is_referred

                                 ($opt{node} || $self->{src} || $self->{uri});
          my $pack = $class->
pl_fully_qualified_name
;
          unless ($pack) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node} || $self->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_PERL_PACKAGE_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $class_uri;


;}


;}

;
          }
          if ({
            
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--ClassName'
 => 1,
            
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--IFName'
 => 1,
          }->{$et}) {
            $r->
append_string_literal
 ($pack);
          } else {
            $r->
append_bare
 ($pack);
          }
          $self->
_pl_add_require_resource

                                 ($class => $r)
            if {
              
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--Class'
 => 
1
,
              
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--ClassName'
 => 
1
,
            }->{$et};
        } elsif ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--Code'
) { ## Inline code
          my $code_name;
          $source_code =~ s/^\s+//;
          if ($source_code =~ s/^((?>(?!::).)+)//s) {
            $code_name = $1;
          } else {
            

{

local $Error::Depth = $Error::Depth - 1;

{



              
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node} || $self->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_PREPROCESS_NO_CODE_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code;

;
            


;}


;}

;
          }
          $source_code =~ s/^::\s*//;
          my $param = $self->
_pl_parse_preprocess_parameter

                                   ($source_code, node => $opt{node},
                                namespace_context=> $opt{namespace_context});
          my $code_uri = $nsr->
tfqnames_to_uri

                                 ($code_name, 
undef
,
                                  $self->
for_uri
,
                                  node => $opt{node});
          my $code = $self->{db}->
get_resource

                                   ($code_uri);
          $code->
is_referred

                                 ($opt{node} || $self->{src} || $self->{uri});
          unless ($code->
is_type_uri

                                   (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#InlineCode'
)) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node} || $self->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#InlineCode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $code_uri;

;


;}


;}

;
          }
          my $pc = $code->
pl_code_fragment
->clone;
          unless (defined $pc) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node} || $self->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_CODE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $code_uri;


;}


;}

;
          }
          for my $var (grep {/^\$/} keys %$param) {
            my $value;
            if ($param->{$var}->{type} eq 'variable') {
              $value = $plimpl->
create_perl_variable

                                  ('$', 
undef
, $param->{$var}->{value});
            } elsif ($param->{$var}->{type} eq 'code') {
              $value = $self->
pl_preprocess_perl_statement

                                    ($param->{$var}->{value},
                                     contains_statements => 
0
,
                                     node => $opt{node},
                                namespace_context=> $opt{namespace_context});
            } else {
              $value = $plimpl->
create_perl_string_literal

                                  ($param->{$var}->{value});
            }
            $pc->
replace_variable

                                  ($var => $value);
          }
          $r->
append_code_fragment
 ($pc);
        } elsif ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--C'
) {
          my ($class_qname, $const_name) = split /\./, $source_code, 2;
          my $class_uri = $nsr->
tfqnames_to_uri

                               ($class_qname,
                                $self->
owner_class_node_uri
,
                                $self->
for_uri
,
                                node => $opt{node});
          my $class = $self->{db}->
get_resource

                                           ($class_uri);
          $class->
is_referred

                                ($opt{node} || $self->{src} || $self->{uri});
          my $const = $class->
get_const_resource_by_name
 ($const_name);
          unless (defined $const) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node} || $self->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Const', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $const_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR';


;}


;}

;
          }
          $const->
is_referred

                                         ($opt{node} || $self->{uri});

          my $data_type = $const->
dis_actual_data_type_resource
;
          my $val = $const->
get_property_value

                                  (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Value'
);
          if ($val) {
            $val = $val->
pl_code_fragment

                    ($const,
                     data_type_uri => $data_type
                            ->
uri
);
          } else {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $const->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $const->local_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_CONST_VALUE_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $const->{uri};


;}


;}

;
          }
          $r->
append_code_fragment
 ($val);
        } else {
          

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node} || $self->{src}, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#UNSUPPORTED_ELEMENT_TYPE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


;}


;}

;
        }
      } else {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node} || $self->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ConstGroup', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_PREPROCESS_NO_ELEMENT_TYPE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code;


;}


;}

;
      }
    } else {
      for my $source_code (split /(\b
                                    (?: t r u e \b|
                                        f a l s e \b|
                                        n u l l \b|
                                        t r y \s* \x7B ) |
                                   \\ p \x7B [^\x7B\x7D\\]+ \x7D)/x,
                           $source_code) {
        if ({
          'tr'.'ue' => 
1
,
          'fal'.'se' => 
1
,
          'nu'.'ll' => 
1
,
        }->{$source_code}) {
          $r->
append_atom
 ({
            'tr'.'ue' => 1,
            'fal'.'se' => 0,
            'nu'.'ll' => 'undef',
          }->{$source_code});
        } elsif ($source_code =~ /^t r y \s* \x7B$/x) {
          $r->
append_code
 ('tr'.
               'y '."\x7B".'local $Error::Depth = $Error::Depth + 3;');
          $r->
add_use_perl_module_name

                                            ('Message::Util::Error');
        } elsif ($source_code =~ /^\\ p \x7B ([^\x7B\x7D\\]+) \x7D$/x) {
          my $cls = $1;
          $cls =~ s/^\s+//s;
          $cls =~ s/\s+$//s;
          ## TODO: Formal character class support required
          if ($cls =~ /^inxml\s*[:|]\s*(\w+)/) {
            $r->
append_atom
 ('\\'.'p{InXML'.$1.'}');
            $r->
add_use_char_class_name

                                ('Char::Class::XML', 'InXML'.$1);
          } else {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code;


;}


;}

;
          }
        } else {
          if ($source_code =~ s/^(\s*[\w:]+\s*)//) {
            ## NOTE: "$cond ?\n1\n:0" would be a syntax error
            $r->
append_atom
 ($1);
          }
          $r->
append_code
 ($source_code);
        }
      }
    } # Inline instruction or not
  } # for



;}


;}

; # DEEP


;}
$r}
sub _pl_parse_preprocess_parameter ($$%) {
my ($self, $paramSpec, %opt) = @_;
my $r = {};

{

our 
$RegQNameChar;
our $RegBlockContent;
$r = {};
my $nsr = $opt{namespace_context} || $opt{node} || $self->{src};
while ($paramSpec =~ s/^
  ## Parameter name
  (\$? $RegQNameChar+)\s*

  (?: =>? \s*
       ## ">" is now optional for inline element (">" is delimiter)

  ## Parameter value
  (
    ## Variable or Bare string
           \$? $RegQNameChar+
    |
    ## Quoted string
       '(?>[^'\\]*)' ## ISSUE: escape mechanism required?
    |
    ## Code
           \{$RegBlockContent\}

  )

s*)?

(?:,\s*|$)//ox) {

my ($n, $v) = ($1, $2);
if (defined $v) {
  if ($v =~ /^'/) {
    $v = {type => 'quoted',
          value => substr ($v, 1, length ($v) - 2)};
  } elsif ($v =~ /^\{/) {
    $v = {type => 'code', value => substr ($v, 1, length ($v) - 2)};
  } elsif ($v =~ /^\$/) {
    $v = {type => 'variable', value => substr $v, 1};
  } else {
    $v = {type => 'bare', value => $v};
  }
} else {
  $v = {type => 'boolean', value => 
1
};
}

if ($n =~ /^\$/) {
  $r->{$n} = $v;
} else {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r->{$nsr->
qname_to_uri

                         ($n, node => $opt{node} || $self->{src})} = $v;
  


;}


;}

;
}
} # while

if (length $paramSpec) {

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node} || $self->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_pl_parse_preprocess_parameter', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#BROKEN_PARAM_SPEC_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $paramSpec;

;
}


;}
$r}
sub _pl_get_context_parameter ($) {
my ($self) = @_;
my $r = {};

{


$r = {};


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
($self->
is_type_uri

               (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#MethodReturn'
)) {
    my $method = $self->
parent_resource
;
    $r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method'
}
       = {type => 'quoted',
          value => $method->
pl_name
};
    my $class = $method->
parent_resource
;
    $r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class'
}
       = {type => 'quoted',
          value => $class->
pl_fully_qualified_name
};
  } elsif ($self->
is_type_uri

               (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AttributeGet'
)) {
    my $attr = $self->
parent_resource
;
    $r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr'
}
       = {type => 'quoted',
          value => $attr->
pl_name
};
    my $class = $attr->
parent_resource
;
    $r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class'
}
       = {type => 'quoted',
          value => $class->
pl_fully_qualified_name
};
    $r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on'
} = {type => 'quoted', value => 'get'};
  } elsif ($self->
is_type_uri

               (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AttributeSet'
)) {
    my $attr = $self->
parent_resource
;
    $r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr'
}
       = {type => 'quoted',
          value => $attr->
pl_name
};
    my $class = $attr->
parent_resource
;
    $r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class'
}
       = {type => 'quoted',
          value => $class->
pl_fully_qualified_name
};
    $r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on'
} = {type => 'quoted', value => 'set'};
  } else {
    $r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI'
} = {type => 'quoted',
                                    value => $self->{uri}};
  }



;}


;}

;


;}
$r}
sub pl_get_method_input_normalizer ($) {
my ($self) = @_;
my $r;

{

my 
$type;
my $type_node;


try {local $Error::Depth = $Error::Depth + 3;


  $type = $self->
dis_actual_data_type_resource
;
  $type_node = $self->
dis_actual_data_type_value
;
} catch 
Message::Util::IFLatest::DISException with 
{
  my $err = shift;
  unless ($err->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
} eq 
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_DIS_TYPE_ERR'
) {
    $err->throw;
  }
};
if ($type) {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$noinput = $type_node->
get_property

                         (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noInputNormalize'
);
    unless ($noinput and $noinput->
value
) {
      $r = $type->
get_child_resource_by_type

                                           (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#InputProcessor'
);
    }
  


;}


;}

;
}


;}
$r}
sub _pl_append_throw ($$$$$$%) {
my ($self, $parentNode, $xclass, $xcode, $xsubtype, $xparam, %opt) = @_;

{

my 
$statement = $parentNode->
append_statement

  ('report '.
   $xclass->
pl_fully_qualified_name
.
   ' -object => $self');
my $xclass_module = $xclass->
owner_module
;
unless ($xclass->
is_defined or
        
not $xclass_module) {
  
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self->{src}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_pl_append_throw', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#AnyExceptionClass', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $xclass->local_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $xclass->{uri};

;
}
$xclass->
is_referred

   ($self->{src} || $self->{uri});
$self->
_pl_add_require_resource

                       ($xclass_module => $statement);
$xparam->{-type} = {type => 'quoted',
                    value => $xcode->
pl_name
};
$xparam->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
}
    = {type => 'quoted',
       value => $xsubtype->
name_uri
}
  if $xsubtype;
for my $name (keys %$xparam) {
  my $pname = $name;
  $pname =~ s/(['\\])/\\$1/g;
  $pname = qq<'$pname'>;
  $statement->
append_code

                   (', ' . $pname . ' => ');
  if ($xparam->{$name}->{type} eq 'code') {
    if (ref $xparam->{$name}->{value}) {
      $statement->
append_code_fragment

                   ($xparam->{$name}->{value});
    } else {
      $statement->
append_code_fragment

               ($self->
pl_preprocess_perl_statement

                             ($xparam->{$name}->{value},
                              node => $opt{node},
                              namespace_context => $opt{namespace_context}));
    }
  } else {  ## String as is
    $statement->
append_string_literal

                   ($xparam->{$name}->{value});
  }
}


;}
}
sub pl_is_nullable ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  C: 
for my $incase (@{$self->
get_child_resource_list
}) {
    next C unless $incase->
is_type_uri

                                (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#InCase'
);
    if ($incase->
dis_is_null_value or
        
$incase->
dis_actual_data_type_resource

                    ->
is_subset_of_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#boolean'
)) {
      $r = 
1
;
      last C;
    }
  }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_is_nullable';
}
}
sub pl_is_defined ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{

if 
(exists $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plDefined'
}) {
  $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plDefined'
};
} else {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$typeuri = {
      
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Class'
 => [
        
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Method'
, 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Attribute'
,
      ],
      
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Method'
 => [
        
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#MethodReturn'
,
      ],
      
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Attribute'
 => [
        
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AttributeGet'
, 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#:AttributeSet'
,
      ],
    };
    OUTMOST:
    for my $mytype (keys %$typeuri) {
      if ($self->
is_type_uri
 ($mytype)) {
        for my $ctype ($typeuri->{$mytype}) {
          for my $cres (@{$self->
get_child_resource_list
}) {
            if ($cres->
is_type_uri
 ($ctype)) {
              unless ($cres->
pl_is_defined
) {
                $r = 
0
; last OUTMOST;
              }
            }
          }
          next OUTMOST;
        }
      }
    } # OUTMOST
  


;}


;}

;
  $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plDefined'
} = $r;
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_is_defined';
}
}
sub _pl_add_require_resource ($$$) {
my ($self, $resourceArg, $codeArg) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $codeArg->
dis_add_require_uri

              ($resourceArg->
uri
);



;}


;}

;


;}
}
sub _pl_muf_description_text ($%) {
my ($self, %opt) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$muf = $self->
get_property_value

                     (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/defaultMessage'
);
  $muf = $muf->[0] if $muf;
  if ($muf) {
    $r = $muf->
string_value
;
    if ($muf->
data_type eq 

'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#muf'
) {
      my $nsr = $muf || $opt{node} || $self->{src};
      $r =~ s{< Q ::([^<>]+)>}{$nsr->
qname_to_uri
 ($1, node => $muf)}gex;
    }
    $r =~ s/\s+/ /g;
    $r =~ s/^ //;
    $r =~ s/ $//;
  } else {
    my $desc = $self->
get_property_value

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Description'
);
    if ($desc) {
      my $v = $desc->
value
;
      if (UNIVERSAL::isa ($v, 
'Message::Markup::IFLatest::SWCFGNode'
)) {
        $r = $v->
value
;
      } else {
        $r = $desc->
string_value
;
      }
      $r =~ s/\s+/ /g;
      $r =~ s/^ //;
      $r =~ s/ $//;
      $r =~ s/%/%percent;/g;
    }
  }



;}


;}

;


;}
$r}
$Message::DOM::ClassFeature{q<Message::Util::DIS::Perl::ManakaiDISResourcePerl>} = {'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#perl', {'', '1', '1.0', '1'}};
$Message::DOM::ClassPoint{q<Message::Util::DIS::Perl::ManakaiDISResourcePerl>} = 1;
## License: <http://suika.fam.cx/~wakaba/archive/2004/8/18/license#Perl+MPL>
1;
