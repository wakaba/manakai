#!/usr/bin/perl 
## This file is automatically generated
## 	at 2006-12-29T08:46:19+00:00,
## 	from file "DIS/Perl.dis",
## 	module <http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl>,
## 	for <http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#ForLatest>.
## Don't edit by hand!
use strict;
require Message::DOM::DOMCore;
require Message::Util::DIS;
require Message::Util::Error::DOMException;
require Message::Util::PerlCode;
package Message::Util::DIS::Perl;
our $VERSION = 20061229.0846;
use Message::Util::Error;
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/error-module-is-already-in-database'} = {'description',
'Module <%p (name => {http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri});> is already in database',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter',
'Message::Util::Error::formatter',
'sev',
'2',
't',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/error-module-is-already-in-database'};
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/error-resource-is-already-in-database'} = {'description',
'Resource <%p (name => {http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri});> is already in module <%p (name => {http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#moduleURI});>',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter',
'Message::Util::Error::formatter',
'sev',
'2',
't',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/error-resource-is-already-in-database'};
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-open-database-module-resource-start'} = {'description',
'Opening database module "%p (name => {http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#fileName});"...',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter',
'Message::Util::Error::formatter',
'sev',
'1',
't',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-open-database-module-resource-start'};
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-open-database-module-resource-end'} = {'description',
'done',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter',
'Message::Util::Error::formatter',
'sev',
'1',
't',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-open-database-module-resource-end'};
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-open-database-module-index-start'} = {'description',
'Opening database module index "%p (name => {http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#fileName});"...',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter',
'Message::Util::Error::formatter',
'sev',
'1',
't',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-open-database-module-index-start'};
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-open-database-module-index-end'} = {'description',
'done',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter',
'Message::Util::Error::formatter',
'sev',
'1',
't',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-open-database-module-index-end'};
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-open-database-module-node-storage-start'} = {'description',
'Opening database module node storage "%p (name => {http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#fileName});"...',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter',
'Message::Util::Error::formatter',
'sev',
'1',
't',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-open-database-module-node-storage-start'};
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-open-database-module-node-storage-end'} = {'description',
'done',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter',
'Message::Util::Error::formatter',
'sev',
'1',
't',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-open-database-module-node-storage-end'};
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-save-database-module-node-storage-start'} = {'description',
'Writing database module node storage "%p (name => {http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#fileName});"...',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter',
'Message::Util::Error::formatter',
'sev',
'1',
't',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-save-database-module-node-storage-start'};
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-save-database-module-node-storage-end'} = {'description',
'done',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter',
'Message::Util::Error::formatter',
'sev',
'1',
't',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-save-database-module-node-storage-end'};
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-unload-module-start'} = {'description',
'Removing module <%p (name => {http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri});> for <%p (name => {http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#forURI});> from database...',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter',
'Message::Util::Error::formatter',
'sev',
'1',
't',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-unload-module-start'};
$Message::DOM::DOMCore::ManakaiDOMError::Def{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-unload-module-end'} = {'description',
'done',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter',
'Message::Util::Error::formatter',
'sev',
'1',
't',
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-unload-module-end'};
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AnyMethod'}->{'pl_name'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_perl_name_list
->[0];



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_name';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AnyMethod'}->{'get_perl_class_member_code'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
pl_code_fragment
 ($factory)
            ->
clone_node
 (
1
);
  for (@{$self->
get_perl_name_list
}) {
    $r->
add_perl_name
 ($_);
  }
  for (@{$self->
get_perl_operator_list
}) {
    $r->
add_perl_operator
 ($_);
  }



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Method'}->{'pl_code_fragment'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



    $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plCodeFragment'
} = 
undef
;  ## To avoid loop
    my $ret = $self->
get_child_resource_by_type
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#MethodReturn'
);
    unless ($ret) { 
      

{

local $Error::Depth = $Error::Depth - 1;

{



        
report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $self->local_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_METHOD_RETURN_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#errResource' => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $self->uri;

;
      


}


;}

;
    }
    $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plCodeFragment'
}
       = $factory->
create_perl_sub

                    ($self->
pl_name
);
    
  ## Method parameters
  my @named_param_variables;
  unless ($self->get_property_boolean
      (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#noParameterModification'
)) {
    my $params = $self->
get_child_resource_list
;
    my @param_variables;
    my $prototype = '$';
    my $is_optional_param = 
0
;
    my $is_named_param = 
0
;
    for my $param (@$params) {
      next unless $param->
is_type_uri

                                (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#MethodParameter'
);
      unless ($is_named_param) {
        if ($param->
get_property_boolean

                         (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#isNamedParameter'
, 
0
)) {
          $is_named_param = 
1
;
          if (not $is_optional_param and
              not $param->
pl_is_nullable
) {
            $prototype .= ';'
          }
          $is_optional_param = 
1
;
          push @param_variables, ['%opt'];
          $prototype .= '%';
        } else {  ## Non-named parameter
          push @param_variables, [
            $param->
pl_variable_name
,
          ];
          if ($param->
pl_is_nullable
) {
            $prototype .= ';' unless $is_optional_param;
            $is_optional_param = 
1
;
          } elsif ($is_optional_param) {
            $prototype =~ tr/;//d;
            $is_optional_param = 
0
;
          }
          $prototype .= $param->
pl_prototype
;
          my $param_processor
                = $param->
pl_get_method_input_normalizer
;
          if ($param_processor) {
            $param_variables[-1]->[1]
                = $param_processor->
pl_code_fragment
 ($factory);
            unless ($param_variables[-1]->[1]) {
             

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_CODE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $param->uri;


}


;}

;
            }
            $param_variables[-1]->[1] = $param_variables[-1]->[1]->clone;
            $param_variables[-1]->[1]
                           ->
replace_variable

                                 ('$INPUT' => $param_variables[-1]->[0]);
          }
        }
      } else { ## Named parameter
        unless ($param->
get_property_boolean

                              (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#isNamedParameter'
, 
0
)) {
          

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $param->local_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NON_NAMED_PARAMETER_AFTER_NAMED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $param->uri;


}


;}

;
        } elsif ($param->
pl_is_nullable
) {
          $prototype =~ s/;%$/%/;
        }
      }
      if ($is_named_param) {
        push @named_param_variables, [
          $param->
pl_variable_name
,
          
undef
,
          '$' . $param->
local_name
,
        ];
        my $param_processor
                = $param->
pl_get_method_input_normalizer
;
        if ($param_processor) {
          $named_param_variables[-1]->[1]
                = $param_processor->
pl_code_fragment
 ($factory);
          unless ($param_variables[-1]->[1]) {
           

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_CODE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $param->uri;


}


;}

;
          }
          $named_param_variables[-1]->[1]
            = $named_param_variables[-1]->[1]->clone;
          $named_param_variables[-1]->[1]
                           ->
replace_variable

                                 ('$INPUT' => $param_variables[-1]->[0]);
        }
      }
    } # %$params
    
    $r->
prototype
 ($prototype);
    $r->
append_child

           ($factory->
create_pc_statement
)
      ->
append_code

                  ('my (' . join (', ', '$self',
                     map {$_->[0]} @param_variables) . ') = @_');
    for my $p (@param_variables, @named_param_variables) {
      if ($p->[1]) {  ## Input processor
        $r->
append_child
 ($p->[1]);
      }
    }
  }

    ## TODO: in/out
    
    ## Return value
    my $data_type;
    my $data_type_value;
    

try {local $Error::Depth = $Error::Depth + 3;


      $data_type = $ret->
dis_actual_data_type_resource
;
      $data_type_value = $ret->
dis_actual_data_type_value
;
    } catch 
Message::Util::IFLatest::DISException with 
{
      my $err = shift;
      if ($err->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
} ne 
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_DIS_TYPE_ERR'
) {
        $err->throw;
      }
    };
    if ($data_type and $data_type->
is_subset_of_uri

                                                (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#void'
)) {
      undef $data_type;
      undef $data_type_value;
    }

    if ($data_type) {
      my $def = $data_type->
get_property_value

                                  (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--DefaultValue'
);
      my $rs = $factory->
create_pc_statement
;
      my $rvar = $factory->
create_pc_variable

                                       ('$', 
undef
, 'r');
      $rvar->
variable_scope
 ('my');
      if ($def) {
        $def = $def->
pl_code_fragment

                       ($factory, $self,
                        data_type_uri => $data_type
                               ->
uri
);
        $rs->
append_new_assignment
 ($rvar => $def);
      } else {
        

{

if 
($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#String'
)) {
  $def = $factory->
create_pc_literal
 ('');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#boolean'
) or
         $data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#AnyRealNumber'
)) {
  $def = $factory->
create_pc_number_literal
 ('0');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ARRAY'
)) {
  $def = $factory->
create_pc_literal
 ([]);
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#HASH'
)) {
  $def = $factory->
create_pc_literal
 ({});
}


}

;
        if ($def) {
          $rs->
append_new_assignment
 ($rvar => $def);
        } else {
          $rs->
append_child
 ($rvar);
        }
      }
      $r->
append_child
 ($rs);
    }

    my $code = $ret->
pl_code_fragment
 ($factory);
    if ($code) {
      for my $np (@named_param_variables) {
        $code->
replace_variable

                     ($np->[2] => $np->[0]);
      }
      $r->
append_child
 ($code);
    } else {  ## Method code not defined
      my $db = $self->
database
;
      my $cls = $db->
get_resource

                                      (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#CoreException'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
      my $const = $db->
get_resource

                                  (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#NOT_SUPPORTED_ERR'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
      my $subtype = $db->
get_resource

                          (
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_METHOD_NOT_IMPLEMENTED'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
      $_->
is_referred

         ($ret->
uri
) for $cls, $const, $subtype;
      my $context_param = $ret->
_pl_get_context_parameter
;
      $self->
_pl_append_throw

                       ($factory, $r, $cls, $const, $subtype,
                        {%$context_param});
    }

    if ($data_type) {
      my $rvar = $factory->
create_pc_variable

                                       ('$', 
undef
, 'r');

      ## Output processor
      my $nin = $data_type_value->
get_property

                                (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noInputNormalize'
);
      my $op = $data_type->
get_child_resource_by_type

                                (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#OutputProcessor'
)
        unless $nin and $nin->
value
;
      if ($op) {
        my $opcode = $op->
pl_code_fragment

                            ($factory);
        unless ($opcode) {
         

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_CODE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $op->uri;


}


;}

;
        }
        $opcode = $opcode->clone;
        $opcode->
replace_variable

                                 ('$INPUT' => $rvar->clone);
        $r->
append_child
 ($opcode);
      }

      ## Return value
      $r->
append_child
 ($rvar);
    }



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Attribute'}->{'pl_code_fragment'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



    $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plCodeFragment'
} = 
undef
;  ## To avoid loop
    my $get = $self->
get_child_resource_by_type
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AttributeGet'
);
    unless ($get) { 
      

{

local $Error::Depth = $Error::Depth - 1;

{



        
report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_ATTR_GET_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#errResource' => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $self->uri;

;
      


}


;}

;
    }
    my $da; ## Reflecting element attribute
    my $data_type = $get->
dis_actual_data_type_resource
;
    my $data_type_value = $get->
dis_actual_data_type_value
;
    my $get_code = $factory->
create_element_ns

                               (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'blockContainer');
    $get_code->
append_statement
 (q<my ($self) = @_>);
    my $code = $get->
pl_code_fragment
 ($factory);
    unless ($code) {
      $da = $self->
get_property_resource

                         (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--DocAttr'
,
                          default_media_type => 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Core#TFPQNames'
);
      if ($da) {  ## Reflecting an element attribute
        my $data_type_node = $get->
dis_actual_data_type_value
;
        my $daget_node = $data_type_node->
get_property

                                      (
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#reflectGet'
);
        ## TODO: More work might be required for 
        ##       default values for element attributes.
        my $daget;
        if (UNIVERSAL::isa ($daget_node, 
'Message::Util::IF::DVURIValue'
)) {
          $daget = $daget_node->
get_resource

                    ($self->
database
);
        } else {
          $daget = $data_type->
get_child_resource_by_type
 (
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ReflectGet'
);
        }
        if ($daget) {
          $code = $daget->
pl_code_fragment

                            ($factory)->clone;
          my $ln = $da->
mv_local_name
;
          my $pfx = $da->
mv_prefix
;
          $pfx = defined $pfx ? $pfx . ':' : '';
          $code->
replace_variable

                 ('$LOCAL_NAME' => $factory->
create_pc_literal
 ($ln));
          $code->
replace_variable

                 ('$QNAME' => $factory->
create_pc_literal
 ($pfx.$ln));
          $code->
replace_variable

                 ('$PREFIX' => $factory->
create_pc_literal
 ($pfx));
          my $nsuri = $da->
mv_namespace_uri
;
          $code->
replace_variable

                 ('$NS_URI' => $factory->
create_pc_literal
 ($nsuri));
        } else {
          

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_REFLECT_GET_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $data_type->uri;


}


;}

;
        }
      }
    }
    if ($code) {
      ## Default value
      my $def = $get->
get_property_value

                           (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--DefaultValue'
);
      if ($def) {
        $def = $def->
pl_code_fragment

                    ($factory, $self,
                     data_type_uri => $data_type
                            ->
uri
);
      } else {
        

{

if 
($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#String'
)) {
  $def = $factory->
create_pc_literal
 ('');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#boolean'
) or
         $data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#AnyRealNumber'
)) {
  $def = $factory->
create_pc_number_literal
 ('0');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ARRAY'
)) {
  $def = $factory->
create_pc_literal
 ([]);
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#HASH'
)) {
  $def = $factory->
create_pc_literal
 ({});
}


}

;
      }
      my $rs = $factory->
create_pc_statement
;
      my $rvar1 = $factory->
create_pc_variable

                                       ('$', 
undef
, 'r');
      $rvar1->
variable_scope
 ('my');
      if ($def) {
        $rs->
append_new_assignment
 ($rvar1 => $def);
      } else {
        $rs->
append_child
 ($rvar1);
      }
      $get_code->
append_child
 ($rs);

      ## Main code
      $get_code->
append_child
 ($code);

      ## Return value
      my $rvar = $factory->
create_pc_variable

                                       ('$', 
undef
, 'r');

      ## Output processor
      my $nin = $data_type_value->
get_property

                                (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noInputNormalize'
);
      my $op = $data_type->
get_child_resource_by_type

                                (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#OutputProcessor'
)
        unless $nin and $nin->
value
;
      if ($op) {
        my $opcode = $op->
pl_code_fragment

                            ($factory);
        unless ($opcode) {
         

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_CODE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $op->uri;


}


;}

;
        }
        $opcode = $opcode->clone;
        $opcode->
replace_variable

                                 ('$INPUT' => $rvar->clone);
        $get_code->
append_child
 ($opcode);
      }

      $get_code->
append_statement
 ($rvar);
    } else {  ## Getter code not defined
      my $db = $self->
database
;
      my $cls = $db->
get_resource

                                      (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#CoreException'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
      my $const = $db->
get_resource

                                  (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#NOT_SUPPORTED_ERR'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
      my $subtype = $db->
get_resource

                            (
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_ATTR_NOT_IMPLEMENTED'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
      $_->
is_referred

         ($get->
uri
) for $cls, $const, $subtype;
      my $context_param = $get->
_pl_get_context_parameter
;
      $self->
_pl_append_throw

                       ($factory, $get_code, $cls, $const, $subtype,
                        {%$context_param});
    }

    my $set = $self->
get_child_resource_by_type
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AttributeSet'
);
    my $set_code = $factory->
create_element_ns

                               (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'blockContainer');
    if ($set) {
      my $data_type = $set->
dis_actual_data_type_resource
;
      my $code = $set->
pl_code_fragment
 ($factory);
      unless ($code) {
        $da ||= $self->
get_property_resource

                         (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--DocAttr'
,
                          default_media_type => 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Core#TFPQNames'
);
        if ($da) {  ## Reflecting an element attribute
          my $data_type_node = $set->
dis_actual_data_type_value
;
          my $daset_node = $data_type_node->
get_property

                                      (
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#reflectSet'
);
          my $daset;
          if (UNIVERSAL::isa ($daset_node, 
'Message::Util::IF::DVURIValue'
)) {
            $daset = $daset_node->
get_resource

                        ($self->
database
);
          } else {
            $daset = $data_type->
get_child_resource_by_type
 (
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#ReflectSet'
);
          }
          if ($daset) {
            $code = $daset->
pl_code_fragment

                              ($factory)->clone;
            my $ln = $da->
mv_local_name
;
            my $pfx = $da->
mv_prefix
;
            $pfx = defined $pfx ? $pfx . ':' : '';
            $code->
replace_variable

                 ('$LOCAL_NAME' => $factory->
create_pc_literal
 ($ln));
            $code->
replace_variable

                 ('$QNAME' => $factory->
create_pc_literal
 ($pfx.$ln));
            $code->
replace_variable

                 ('$PREFIX' => $factory->
create_pc_literal
 ($pfx));
            my $nsuri = $da->
mv_namespace_uri
;
            $code->
replace_variable

                 ('$NS_URI' => $factory->
create_pc_literal
 ($nsuri));
          } else {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_REFLECT_SET_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $data_type->uri;


}


;}

;
          }
        }
      }
      if ($code) {
        ## Input
        $set_code->
append_statement

                      (q<my ($self, $given) = @_>);
        my $param_processor
                = $set->
pl_get_method_input_normalizer
;
        if ($param_processor) {
          my $pcode = $param_processor->
pl_code_fragment

                                          ($factory)->clone;
          $pcode->
replace_variable

                                           ('$INPUT' => '$given');
          $set_code->
append_child
 ($pcode);
        }

        ## Main code
        $set_code->
append_child
 ($code);
      } else { ## Setter code not defined
        $set_code->
append_statement

                                      (q<my ($self) = @_>);
        my $db = $self->
database
;
        my $cls = $db->
get_resource

                                      (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#CoreException'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
        my $const = $db->
get_resource

                                  (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#NOT_SUPPORTED_ERR'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
        my $subtype = $db->
get_resource

                            (
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#MDOM_IMPL_ATTR_NOT_IMPLEMENTED'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
        $_->
is_referred

         ($set->
uri
) for $cls, $const, $subtype;
        my $context_param = $get->
_pl_get_context_parameter
;
        $self->
_pl_append_throw

                       ($factory, $set_code, $cls, $const, $subtype,
                        {%$context_param});
      }
    } else {  ## No attribute setter
      $set_code->
append_statement

                                               (q<my ($self) = @_>);
      my $db = $self->
database
;
      my $cls = $db->
get_resource

                                      (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#CoreException'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
      my $const = $db->
get_resource

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#NO_MODIFICATION_ALLOWED_ERR'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
      my $subtype = $db->
get_resource

                            (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR'
,
                                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
      $_->
is_referred

        ($self->
uri
) for $cls, $const, $subtype;
      my $context_param = $get->
_pl_get_context_parameter
;
      $self->
_pl_append_throw

                       ($factory, $set_code, $cls, $const, $subtype,
                        {%$context_param});
    }

    $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plCodeFragment'
}
       = $factory->
create_perl_sub

                    ($self->
pl_name
);
    $r->
prototype
 (q<$;$>);

    ## TODO: Don't output "if" if non-debug build
    
    my $ip = $factory->
create_element_ns

                         (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'inlineUnparsed');
    $ip->
text_content
 (q<@_ == 1>);
    $r->
append_new_if

             ($ip,
              $get_code,
              $set_code);



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#AnyMethod'}->{'get_perl_module_member_code'} = sub ($$$) {
my ($self, $factory, $thismod_pack) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$method_code = $self->
pl_code_fragment

                             ($factory);
  my $method_names = $self->
get_perl_name_list
;
  $method_code->
clear_perl_name
;
  my $type_uris = $self->
get_property_text_list

                                (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#targetType'
);
  my $method_name_0 = $method_names->[0];
  my $type_uri_0 = $type_uris->[0];
  my $st = $factory->
create_pc_statement
;
        $st->
append_code

               ('$Message::Util::DIS::Method{');
        $st->
append_string_literal
 ($type_uri_0);
        $st->
append_code
 ('}->{');
        $st->
append_string_literal
 ($method_name_0);
        $st->
append_code
 ('} = ');
        $st->
owner_document

           ->
adopt_node
 ($method_code);
        $st->
append_child
 ($method_code);
  $thismod_pack->
append_child
 ($st);
  for my $type_uri (@$type_uris) {
    M: for my $method_name (@$method_names) {
      next M if $method_name eq $method_name_0 and
                $type_uri eq $type_uri_0;
      my $st = $factory->
create_pc_statement
;
            $st->
append_code

                   ('$Message::Util::DIS::Method{');
            $st->
append_string_literal
 ($type_uri);
            $st->
append_code
 ('}->{');
            $st->
append_string_literal
 ($method_name);
            $st->
append_code
 ('} = ');
            $st->
append_code

                   ('$Message::Util::DIS::Method{');
            $st->
append_string_literal
 ($type_uri_0);
            $st->
append_code
 ('}->{');
            $st->
append_string_literal
 ($method_name_0);
            $st->
append_code
 ('}');
      $thismod_pack->
append_child
 ($st);
    }
  }



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#MethodParameter'}->{'pl_name'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_property_text

                (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#paramName'
,
                 $self->
local_name
);
  if (defined $r) {
    if ($self->
get_property_boolean

                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#isNamedParameter'
, 
0
)) {
      $r = 
Message::Util::DIS::ManakaiDISImplementation->_camel_case_to_underscore_name

                                               ($r);
    }
  }



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_name';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Const'}->{'pl_name'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


    unless 
(defined $self->
local_name
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{



        
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self->source_element, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_LOCAL_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_name', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $self->uri;

;
      


}


;}

;
    }
    $r = uc $self->
local_name
;
    if ($r =~ /^_/ or $r =~ /_$/) {
      

{

local $Error::Depth = $Error::Depth - 1;

{



        
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self->source_element, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#generatedName' => $r, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $self->local_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESERVED_PERL_METHOD_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $self->uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_name';

;
      


}


;}

;
    }



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_name';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Const'}->{'pl_fully_qualified_name'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
parent_resource

              ->
parent_resource

              ->
pl_fully_qualified_name

       . '::' . $self->
pl_name
;



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_fully_qualified_name';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Const'}->{'pl_code_fragment'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$data_type = $self->
dis_actual_data_type_resource
;
    my $value = $self->
get_property_value

                      (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Value'
);
    if ($value) {
      $value = $value->
pl_code_fragment

                      ($factory, $self,
                       data_type_uri => $data_type
                            ->
uri
);
    } else {
      

{

if 
($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#String'
)) {
  $value = $factory->
create_pc_literal
 ('');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#boolean'
) or
         $data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#AnyRealNumber'
)) {
  $value = $factory->
create_pc_number_literal
 ('0');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ARRAY'
)) {
  $value = $factory->
create_pc_literal
 ([]);
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#HASH'
)) {
  $value = $factory->
create_pc_literal
 ({});
}


}

;
    }
  $r = $factory->
create_perl_sub

                    ($self->
pl_name
);
  $r->
append_child
 ($value);
    $r->
prototype
 ('');



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Const'}->{'get_perl_interface_member_code'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
pl_code_fragment
 ($factory);



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Const'}->{'get_perl_class_member_code'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
pl_code_fragment
 ($factory);



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#ErrorCode'}->{'get_perl_definition_hash_namespace'} = sub ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$if = $self->
get_error_interface_resource
;
  if ($if) {
    $r = $if->
pl_fully_qualified_name
;
  } else {
    $r = 
undef
;
  }



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#ErrorSubCode'}->{'get_perl_definition_hash_namespace'} = $Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#ErrorCode'}->{'get_perl_definition_hash_namespace'};
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#ErrorCode'}->{'get_perl_interface_member_code'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $factory->
create_document_fragment
;

  ## Perl constant function
  my $const = $self->
pl_code_fragment
 ($factory);
  $factory->
adopt_node
 ($const);
  $r->
append_child
 ($const);

  ## Error definition
  my $def_st = $factory->
create_pc_statement
;
  for ($def_st->
append_new_pc_expression
 ('=')) {
    $_->
append_new_pc_variable

          ('$',
           $self->
get_perl_definition_hash_namespace
,
           'ErrorDef')
      ->
hash_key
 ($self->
pl_name
);
    $_->
append_new_pc_literal
 ({
      
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#code'
 => 0+$self->
pl_code_fragment

                                ($factory),
      
'description'
 =>
        $self->
_pl_muf_description_text
,
    });
  }
  $r->
append_child
 ($def_st);

  ## Error subcode definitions
  for (@{$self->
get_child_resource_list_by_type

                  (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#ErrorSubCode'
)}) {
    $r->
append_child

          ($_->
get_perl_interface_member_code

                 ($factory));
  }



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#ErrorSubCode'}->{'get_perl_interface_member_code'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  ## Error definition
  my $errif = $self->
get_error_interface_resource
;
  $r = $factory->
create_pc_statement
;
  $r->
append_new_pc_variable

        ('$',
         $errif->
get_perl_definition_hash_namespace
,
         'ErrorDef')
    ->
hash_key

        ($self->
get_perl_error_code_name
);
  $r->
append_code
 ('->{');
  $r->
append_string_literal
 (
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
);
  $r->
append_code
 ('}->{');
  $r->
append_string_literal

        ($self->
name_uri
);
  $r->
append_code
 ('} = ');
  $r->
append_new_pc_literal
 ({
          
'description'
 =>
          $self->
_pl_muf_description_text
,
        });
  $self->
_pl_add_require_resource

           ($errif => $r);



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#ErrorSubCode'}->{'get_perl_error_code_name'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$code = $self->
get_error_code_resource
;
  if ($code) {
    $r = $code->
pl_name
;
  } else {
    $r = 
undef
;
  }



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#ConstGroup'}->{'pl_name'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
get_property_text

                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#exportTagName'
,
                  $self->
local_name
);



}


;}

;
unless (defined $r) {
  
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self->source_element, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_LOCAL_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_name', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $self->uri;

;
}


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_name';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#ConstGroup'}->{'get_perl_class_member_code'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $factory->
create_document_fragment
;
  for my $gcr (@{$self->
get_child_resource_list
}) {
    if ($gcr->
is_type_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Const'
)) {
      if ($gcr->
is_type_uri
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#ErrorCode'
)) {
        $r->
append_child

              ($gcr->
get_perl_interface_member_code

                       ($factory));
      } else {
        my $sub = $gcr->
pl_code_fragment
 ($factory);
        $factory->
adopt_node
 ($sub);
        $r->
append_child
 ($sub);
      }
    }
  }



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#ConstGroup'}->{'get_perl_interface_member_code'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $factory->
create_document_fragment
;

  ## Error code definitions
  for (@{$self->
get_child_resource_list_by_type

                  (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Const'
)}) {
    my $mcode = $_->
get_perl_interface_member_code

                      ($factory);
    if ($mcode) {
      $r->
owner_document

        ->
adopt_node
 ($mcode);
      $r->
append_child
 ($mcode);
    }
  }



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AnyClass'}->{'pl_name'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
get_property_text

                        (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#name'
,
                         $self->
local_name
);
    if (defined $r) {
      $r = 
Message::Util::DIS::ManakaiDISImplementation->_camel_case_to_underscore_name
 ($r);
    }



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_name';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AnyClass'}->{'pl_fully_qualified_name'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
get_property_text

                      (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#packageName'
);
    if (defined $r) {
      ## NOTE: "lang:Perl" is fully-qualified name by definition
    } else {
      unless (defined $self->
local_name
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{



          
report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_LOCAL_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_fully_qualified_name', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $self->uri;

;
        


}


;}

;
      }
        $r = $self->
owner_module

                  ->
pl_fully_qualified_name

           . '::' . $self->
local_name
;
    }



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_fully_qualified_name';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Class'}->{'pl_code_fragment'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $factory->
create_pc_package

                      ($self->
pl_fully_qualified_name
);
    ## - Inheritance
    my $has_class_extends;
    for my $scls (@{$self->get_property_resource_list
        (
'http://suika.fam.cx/~wakaba/archive/2006/dom/perl/classExtends'
)}) {
      my $spack_name = $scls->pl_fully_qualified_name;
      if (defined $spack_name) {
        $r->add_isa_package ($spack_name);
      } else {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_PERL_PACKAGE_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $scls->uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => 'http://suika.fam.cx/~wakaba/archive/2006/dom/perl/classExtends';


}


;}

;
      }
      $self->_pl_add_require_resource ($scls => $r);
      $has_class_extends = 1;
    }

    unless ($has_class_extends) {
      ## TODO: Remove this clause

    for my $scls (@{$self->
get_property_resource_list
 (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--ISA'
)}) {
      my $spack_name = $scls->
pl_fully_qualified_name
;
      if (defined $spack_name) {
        $r->
add_isa_package
 ($spack_name);
      } else {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_PERL_PACKAGE_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $scls->uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--ISA';


}


;}

;
      }
      $self->
_pl_add_require_resource

                                          ($scls => $r);
    }

    }

    ## dis:AppISA packages
    for my $spack_name (@{
      $self->
pl_additional_isa_packages

    }) {
      $r->
add_isa_package
 ($spack_name);
      $r->
add_require_perl_module_name

                                      ($spack_name);                     
    }

    ## - Implementing interfaces
    for my $scls (@{$self->
get_property_resource_list

         ## TODO: change to domperl|classImplements
         ##       with recursive_isa_prop_name domperl|extends
                            (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Implement'
, recursive_isa => 
1
,
                             default_media_type => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--TFQNames'
)}) {
      my $spack_name = $scls->
pl_fully_qualified_name
;
      if (defined $spack_name) {
        $r->
add_implement_package
 ($spack_name);
        if ($scls->
is_type_uri

              (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/MUErrorInterface'
)) {
          $r->
add_exception_interface_package_name

              ($spack_name);
        }
      }
    }

    ## - Inheritance (reversed direction)
    for my $scls (@{$self->get_property_resource_list
        (
'http://suika.fam.cx/~wakaba/archive/2006/dom/perl/classImplementedByObjectsOf'
)}) {
      my $spack_name = $scls->pl_fully_qualified_name;
      if (defined $spack_name) {
        $r->add_rev_isa_package ($spack_name);
      } else {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_PERL_PACKAGE_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $scls->uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => 'http://suika.fam.cx/~wakaba/archive/2006/dom/perl/classImplementedByObjectsOf';


}


;}

;
      }
      $self->_pl_add_require_resource ($scls => $r);
    }

    ## - Required modules
    for my $val (@{$self->get_property_value_list
        (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#require'
)}) {
      if ($val->can ('get_resource')) {
        $self->_pl_add_require_resource ($val->get_resource => $r);
      } else {
        $r->add_require_perl_module_name ($val->value);
      }
    }

    ## - Class members
    my @cr = @{$self->
get_child_resource_list
};
    for my $cr (@cr) {
      my $mcode = $cr->
get_perl_class_member_code

                          ($r->
owner_document
);
      if ($mcode) {
        $r->
owner_document

          ->
adopt_node
 ($mcode);
        $r->
append_child
 ($mcode);
      }
    }

    ## - Error Descriptions
    if ($self->
is_type_uri

         (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/MUErrorClass'
)) {
      my $tf = $self->
get_property_resource

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter'
);
      if ($tf) {
        my $fpc = $factory->
create_perl_sub

                             ('_FORMATTER_PACKAGE_');
        $fpc->
append_string_literal

                             ($tf->
pl_fully_qualified_name
);
        $r->
append_child
 ($fpc);
      }
    } # Err:MUErrorClass

      my %rule;
      ## Muf2003 formatting rule definitions for errors
      for my $rc (@{$self->
get_child_resource_list_by_type

                       (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Formatter/Muf2003/RuleDefClass'
)}) {
        my $rule_name = $rc->
pl_name
;
        my $rcls = $rule{$rule_name} = {};
        for my $rm (@{$rc->
get_child_resource_list_by_type

                       (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Method'
)}) {
          my $c = $rm->
pl_code_fragment
 ($factory);
          $rcls->{$rm->
pl_name
} = $c;
          $c->
clear_perl_name
;
        }
      }
      if (%rule) {
        my $rule_def = $factory->
create_perl_sub

                                  ('___rule_def');
        $rule_def->
append_statement

                 ->
append_new_pc_literal
 (\%rule);
        $r->
append_child
 ($rule_def);
      }


    ## - Lexer and Parser
    my $dpgparser;
    for my $val (@{$self->
get_property_value_list

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#dpgDef'
)}) {
      require Message::DOM::GenericLS;
      require Message::Util::DIS::DPG;
      $dpgparser ||= $factory->
implementation

                             ->
get_feature

                               (
'http://suika.fam.cx/www/2006/feature/GenericLS'
 => '3.0')
                          ->
create_gls_parser

                               ({
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#DPG'
 => '1.0'});
      my $dpgdoc = $dpgparser->
parse_string

                      ($val->
value
, $val);
      
      $r->
append_child

            ($dpgdoc->
document_element

                    ->
pl_code_fragment

                      ($factory,
                       dis_resource => $self,
                       context_object => $val));
    }



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Class'}->{'get_perl_module_member_code'} = sub ($$$$) {
my ($self, $factory, $thismod_pack, $const) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $factory->
create_pc_block
;
  my $cls = $self;

  ## -- Subroutines and variables
  my $pack = $cls->
pl_code_fragment
 ($factory);
  $factory->
adopt_node
 ($pack);
  $r->
append_child
 ($pack);
        my $pack_name = $cls->
pl_fully_qualified_name
;

        ## -- Constants
        for my $cr (@{$cls->
get_child_resource_list
}) {
          if ($cr->
is_type_uri

                                  (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Const'
)) {
            $thismod_pack->
add_export

              (
undef
,
               my $nm = $cr->
pl_name
);
            $const->{$nm} = $cr->
pl_fully_qualified_name
;
          } elsif ($cr->
is_type_uri

                                  (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ConstGroup'
)) {
            my $tag = $cr->
pl_name
;
            for my $gcr (@{$cr->
get_child_resource_list
}) {
              if ($gcr->
is_type_uri

                                  (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Const'
)) {
                $thismod_pack->
add_export

                  ($tag, my $nm = $gcr->
pl_name
);
                $const->{$nm} = $gcr->
pl_fully_qualified_name
;
              }
            }
          }
        }

        ## -- Features
        my %feature;
        for my $v (@{$cls->
get_property_value_list

                              (
'http://suika.fam.cx/~wakaba/archive/2004/dom/feature#provides'
)}) {
          my $f = $self->
database

                       ->
get_resource

                             ($v->isa (
'Message::Util::IF::DVURIValue'
)
                                 ? $v->
uri
                                 : 
$v->
value
);
          unless ($f->
is_defined
) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'get_perl_module_member_code', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/dom/feature#Feature', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $f->uri;


}


;}

;
          }
          for my $s ($f, @{$f->
get_property_resource_list

                           (
'http://suika.fam.cx/~wakaba/archive/2004/dom/feature#extends'
,
                            recursive => 
1
,
                            default_media_type => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--TypeQName'
)}) {
            $feature{$s->
uri
}
                 = [$s, $v];
          }
        }
        for my $f (values %feature) {
          my @fname = @{$f->[0]->
feature_name_list
};
          my $fver = $f->[0]->
get_property_text

                                (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Version'
, 
undef
);
          next unless defined $fver;
          my $pt = $f->[1]->
get_property

                                    (
'http://suika.fam.cx/~wakaba/archive/2004/dom/feature#through'
);
          if (UNIVERSAL::isa ($pt, 
'Message::Util::IF::DVURIValue'
)) {
            my $c = $pt->
get_resource

                      ($self->
database
);
            $c->
is_referred

                            ($f->[0]->
uri
);
            my $cp = $c->
pl_fully_qualified_name
;
            for my $fname (@fname) {
              $r->
append_statement

                  ('$Message::DOM::ImplFeature{q<' . $cp .
                   '>}->{q<' .
                   $fname . '>}->{q<' . $fver . '>} ||= 1');
              $r->
append_statement

                  ('$Message::DOM::ImplFeature{q<' . $cp .
                   '>}->{q<' . $fname . '>}->{q<>} = 1');
            }
          } else { # no "through" attribute
            for my $fname (@fname) {
              $r->
append_statement

                  ('$Message::DOM::ImplFeature{q<' . $pack_name .
                   '>}->{q<' .
                   $fname . '>}->{q<' . $fver . '>} ||= 1');
              $r->
append_statement

                  ('$Message::DOM::ImplFeature{q<' . $pack_name .
                   '>}->{q<' . $fname . '>}->{q<>} = 1');
            }
          }
        } # for

        my %ifeature;
        my $ifpoint = 0;
        my %fdup; # Check duplications
        FI: for my $feature (@{$cls->
get_property_resource_list

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dom/feature#implements'
,
                      isa_recursive => 
1
)}) { ## TODO: isa_recursive_prop_name
          my $furi = $feature->
uri
;
          next FI if $fdup{$furi};
          $fdup{$furi} = 
1
;

          my $fver = $feature->
get_property_text

                                (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Version'
, 
undef
);
          $ifpoint += $fver;
          for my $fname (@{$feature->
feature_name_list
}) {
            $ifeature{$fname}->{$fver} = 
1
;
            $ifeature{$fname}->{''} = 
1
;
          }                  
        } # FI
        $r->
append_statement

              ('$Message::DOM::DOMFeature::ClassInfo'.
               '->{q<' . $pack_name . '>}->{has_feature}' .
               ' = ' . 
Message::Util::PerlCode::ManakaiPCImplementation->perl_literal
 (\%ifeature));
        for my $fname (keys %ifeature) {
          for my $fver (keys %{$ifeature{$fname}}) {
            $pack->add_implemented_feature ($fname => $fver); 
          }
        }

        ## TODO: Features from implementing interfaces.

        ## Score calculated from provided features
        $r->
append_statement

                ('$Message::DOM::ClassPoint{q<' . $pack_name .
                 '>} = ' . $ifpoint);

        ## -- Roles
        for my $role (@{$cls->
get_property_resource_list

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#role'
, isa_recursive => 
1
,
                      default_media_type => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--TypeQName'
)}) {
        ## TODO: isa_recursive_prop_name => domperl|extends
          if ($role->
is_subset_of_uri

(
'http://suika.fam.cx/~wakaba/archive/2004/dom/meta#ImplementationSourceForManakaiDOMImplementationRegistry'
)) {
            $r->
append_statement

                  ('$Message::DOM::ManakaiDOMImplementationRegistry'.
                   '::SourceClass{q<' . $pack_name . '>} = 1');
          }
          
          ## Node
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/ElementRole'
)) {
            for my $et (@{$cls->
get_property_resource_list

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Markup#elementType'
, isa_recursive => 1)}) {
              my $ln = $et->
mv_local_name
;
              $ln = '*' unless defined $ln;
              my $ns = $et->
mv_namespace_uri
;
              $ns = '' unless defined $ns;
                ## ISSUE: Is NULL-namespace should be allowed here?
              $r->
append_statement

                  ('$Message::DOM::Element::ElementClass'.
                   "->{q<$ns>}->{q<$ln>} = q<$pack_name>");
              $pack->add_implemented_element_type ($ns, $ln);
            }
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/DOM/TreeCore/ProcessingInstructionRole'
)) {
            ## TODO: Target-dependent class information
          }

          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/dom/gls#ParserRole'
)) {
            $r->
append_statement

                  ('$Message::DOM::DOMLS::ParserClass{q<'.
                   $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/dom/gls#SerializerRole'
)) {
            $r->
append_statement

                  ('$Message::DOM::DOMLS::SerializerClass{q<'.
                   $pack_name . '>} = 1');
          }

          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#ModuleRole'
)) {
            $r->
append_statement

                  ('$Message::Util::DIS::ManakaiDISModuleDefinition'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#ForRole'
)) {
            $r->
append_statement

                  ('$Message::Util::DIS::ManakaiDISForDefinition'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#ResourceRole'
)) {
            $r->
append_statement

                  ('$Message::Util::DIS::ManakaiDISResourceDefinition'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#ElementRole'
)) {
            $r->
append_statement

                  ('$Message::Util::DIS::ManakaiDISElement'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#DatabaseRole'
)) {
            $r->
append_statement

                  ('$Message::Util::DIS::ManakaiDISDatabase'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Value/ValueRole'
)) {
            $r->
append_statement

                  ('$Message::Util::DIS::Value::ManakaiDVValue'.
                   '::CompatClass{q<' . $pack_name . '>} = 1');
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#NodeRefRole'
)) {
            my %nrp;
            my $db = $self->
database
;
            for my $p (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#subnode0'
,
                       
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#subnode1'
,
                       
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#subnode2'
,
                       
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#origin0'
,
                       
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#xrefnode0'
) {
              $nrp{
                $db->
get_resource
 ($p)
                   ->
get_property_text

                          (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/ManakaiNode#stemName'
, $p)
              } = [keys %{{map {
                $_->
get_property_text

                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#propHashKey'
,
                           $_->
uri
) => 
1
,
              } @{$cls->
get_property_resource_list

                          ($p, isa_recursive => 
1
)}}}];
            }
            for (keys %nrp) {
              CORE::delete $nrp{$_} unless @{$nrp{$_}};
            }
            $r->
append_statement

                  ('$Message::Util::ManakaiNode::ManakaiNodeRef'.
                   '::Prop{q<' . $pack_name . '>} = '.
                   
Message::Util::PerlCode::ManakaiPCImplementation->perl_literal
 (\%nrp));
          }
          if ($role->
is_subset_of_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Grove/NodeRefRole'
)) {
            my %nrp;
            my $db = $self->
database
;
            for my $p (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Grove/subnode0'
,
                       
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Grove/subnode1a'
,
                       
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Grove/subnode1h'
,
                       
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Grove/subnode2hh'
,
                       
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Grove/origin0'
,
                       
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Grove/owner0'
,
                       
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Grove/ownee1h'
) {
              $nrp{
                $db->
get_resource
 ($p)
                   ->
get_property_text

                          (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Grove/propertyTypeKey'
, $p)
              } = [keys %{{map {
                $_->
get_property_text

                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#propHashKey'
,
                           $_->
uri
) => 
1
,
              } @{$cls->
get_property_resource_list

                          ($p, isa_recursive => 
1
)}}}];
            }
            for (keys %nrp) {
              CORE::delete $nrp{$_} unless @{$nrp{$_}};
            }
            $r->
append_statement

                  ('$Message::Util::Grove::'.
                   'ClassProp{q<' . $pack_name . '>} = '.
                   
Message::Util::PerlCode::ManakaiPCImplementation->perl_literal
 (\%nrp));
          }
        }
  
  my $fragment = $factory->
create_document_fragment
;
  my @children = @{$r->
child_nodes
};
  for (@children) {
    $fragment->
append_child
 ($_);
  }
  $r = $fragment;



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Formatter/Muf2003/RuleDefClass'}->{'get_perl_module_member_code'} = sub ($$) {
my ($self, $factory) = @_;
my $r;


$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Interface'}->{'pl_fully_qualified_name'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
get_property_text

                      (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#packageName'
);
    if (defined $r) {
      ## NOTE: "lang:Perl" is fully-qualified name by definition
    } else {
      unless (defined $self->
local_name
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{



          
report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_LOCAL_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_fully_qualified_name', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $self->uri;

;
        


}


;}

;
      }
        $r = $self->
owner_module

                  ->
pl_interface_name

           . '::' . $self->
local_name
;
    }



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_fully_qualified_name';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Interface'}->{'pl_code_fragment'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $factory->
create_pc_package

                      ($self->
pl_fully_qualified_name
);

  if ($self->
is_type_uri
 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#Interface'
)) {
    ## - Inheritance
    $r->
add_isa_package
 ('Message::Util::Error');
    $r->
add_require_perl_module_name

          ('Message::Util::Error');

    ## - Error definition reference
    $r->
append_code

          ("sub ___error_def () {\n".
           '  \%'.$self->
pl_fully_qualified_name
.
           "::ErrorDef\n".
           "}\n");
  }

  ## - Interface members
  my @cr = @{$self->
get_child_resource_list
};
  for my $cr (@cr) {
    my $mcode = $cr->
get_perl_interface_member_code

                      ($r->
owner_document
);
    if ($mcode) {
      $r->
owner_document

        ->
adopt_node
 ($mcode);
      $r->
append_child
 ($mcode);
    }
  }



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Interface'}->{'get_perl_module_member_code'} = sub ($$$$) {
my ($self, $factory, $thismod_pack, $const) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
pl_code_fragment
 ($factory);
  for my $cr (@{$self->
get_child_resource_list_by_type

                                  (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#ConstGroup'
)}) {
          my $tag = $cr->
pl_name
;
          for my $gcr (@{$cr->
get_child_resource_list_by_type

                                  (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Const'
)}) {
            $thismod_pack->
add_export

                  ($tag, my $nm = $gcr->
pl_name
);
            $const->{$nm} = $gcr->
pl_fully_qualified_name
;
          }
        }



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#Interface'}->{'get_perl_definition_hash_namespace'} = sub ($) {
my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
pl_fully_qualified_name
;



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameter'}->{'get_perl_module_member_code'} = sub ($$$) {
my ($self, $factory, $thismod_pack) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  unless 
($self->
parent_resource
) {
    my $code = $self->
pl_code_fragment
 ($factory);
    $factory->
adopt_node
 ($code);
    $thismod_pack->
append_child
 ($code);
  }



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameterApplication'}->{'get_perl_module_member_code'} = $Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameter'}->{'get_perl_module_member_code'};
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMErrorType'}->{'get_perl_module_member_code'} = $Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameter'}->{'get_perl_module_member_code'};
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ScalarVariable'}->{'get_perl_module_member_code'} = $Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameter'}->{'get_perl_module_member_code'};
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ScalarVariable'}->{'pl_fully_qualified_name'} = sub ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
get_property_text

                      (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#packageName'
);
    if (defined $r) {
      ## NOTE: "lang:Perl" is fully-qualified name by definition
    } else {
      unless (defined $self->
local_name
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{



          
report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_LOCAL_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_fully_qualified_name', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $self->uri;

;
        


}


;}

;
      }
        $r = $self->
owner_module

                  ->
pl_fully_qualified_name

           . '::' . $self->
local_name
;
    }



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_fully_qualified_name';
}
}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ScalarVariable'}->{'pl_code_fragment'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$varn = $self->
pl_variable_name
;
  my $var = $factory->
create_pc_variable

                                               (
undef
, 
undef
, $varn);
    my $data_type = $self->
dis_actual_data_type_resource
;
    my $value = $self->
get_property_value

                      (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--DefaultValue'
);
    if ($value) {
      $value = $value->
pl_code_fragment

                      ($factory, $self,
                       data_type_uri => $data_type
                            ->
uri
);
    } else {
      

{

if 
($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#String'
)) {
  $value = $factory->
create_pc_literal
 ('');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#boolean'
) or
         $data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#AnyRealNumber'
)) {
  $value = $factory->
create_pc_number_literal
 ('0');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ARRAY'
)) {
  $value = $factory->
create_pc_literal
 ([]);
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#HASH'
)) {
  $value = $factory->
create_pc_literal
 ({});
}


}

;
    }
  $r = $factory->
create_pc_statement
;
    $r->
append_new_assignment
 ($var => $value);



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ScalarVariable'}->{'get_perl_class_member_code'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $factory->
create_document_fragment
;
  my $varn = $self->
pl_variable_name
;
  my $var = $factory->
create_pc_variable

                        (
undef
, 
undef
, $varn);
  my $data_type = $self->
dis_actual_data_type_resource
;
  my $value = $self->
get_property_value

                            (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--DefaultValue'
);
  if ($value) {
    $value = $value->
pl_code_fragment

                            ($factory, $self,
                             data_type_uri => $data_type
                                  ->
uri
);
    $factory->
adopt_node
 ($value);
  } else {
    

{

if 
($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#String'
)) {
  $value = $factory->
create_pc_literal
 ('');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#boolean'
) or
         $data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#AnyRealNumber'
)) {
  $value = $factory->
create_pc_number_literal
 ('0');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ARRAY'
)) {
  $value = $factory->
create_pc_literal
 ([]);
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#HASH'
)) {
  $value = $factory->
create_pc_literal
 ({});
}


}

;
  }
  if ($self->
get_property_boolean

                      (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#defaultValueHasSelfReference'
)) {
    my $v = $var->
clone_node
;
    $v->
variable_scope
 ('our');
    $r->
append_child

          ($factory->
create_pc_statement
)
      ->
append_child
 ($v);
  } else {
    $var->
variable_scope
 ('our');
  }
  for ($r->
append_child

             ($factory->
create_pc_statement
)
         ->
append_new_pc_expression
 ('=')) {
    $_->
append_child
 ($var);
    $_->
append_child
 ($value);
  }



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Core#AnyDefContainer'}->{'pl_code_fragment'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



    $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plCodeFragment'
} = 
undef
;  ## To avoid loop
    my $def = $self->
get_property_value

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Def'
);
    $def = $def->[0] if $def;
    my $is_inline = $self->
is_type_uri

                        (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#InlineCode'
) ? 
1 : 

0
;
    unless ($def) {
      $r = 
undef
;
    } elsif ($def->
data_type eq 

'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#Perl'
) {
      my $source_code = $def->
string_value
;
      my $source_node = $def->
source_node_path
;
      $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plCodeFragment'
}
         = $is_inline
             ? $self->
pl_preprocess_perl_statement

                                   ($factory, $source_code,
                                    contains_statements => 
0
,
                                    namespace_context => $def)
             : $self->
pl_preprocess_perl_code

                           ($factory, $source_code,
                            method_resource => 
                        ($self->
is_type_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#MethodReturn'
)
                        ? $self->
parent_resource
                        : 

undef
),
                                    namespace_context => $def);
    } elsif ($def->
data_type eq 

'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis'
) {
      $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plCodeFragment'
}
         = $def->
value

               ->
pl_code_fragment

                    ($factory, $self,
                     for_arg => $self->
for_uri
,
                     forp_arg => $self->
forp_uri
,
                     contains_statements => (not $is_inline),
              database_arg => $self->
database
); 
    } else {
      

{

local $Error::Depth = $Error::Depth - 1;

{



        
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $def, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#UNSUPPORTED_MEDIA_TYPE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $def->data_type;

;
      


}


;}

;
    } # media type



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#InCase'}->{'pl_code_fragment'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$data_type = $self->
dis_actual_data_type_resource
;
    $r = $self->
get_property_value

                      (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Value'
);
    if ($r) {
      $r = $r->
pl_code_fragment

                      ($factory, $self,
                       data_type_uri => $data_type
                            ->
uri
);
    } else {
      

{

if 
($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#String'
)) {
  $r = $factory->
create_pc_literal
 ('');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#boolean'
) or
         $data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#AnyRealNumber'
)) {
  $r = $factory->
create_pc_number_literal
 ('0');
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ARRAY'
)) {
  $r = $factory->
create_pc_literal
 ([]);
} elsif ($data_type->
is_subset_of_uri

                                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#HASH'
)) {
  $r = $factory->
create_pc_literal
 ({});
}


}

;
    }



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameter'}->{'pl_code_fragment'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$cparam = $self;
    if ($self->
is_type_uri

                   (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameterApplication'
)) {
      $cparam = $self->
get_property_resource

                   (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#domConfigurationParameter'
);
      unless ($cparam) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameter', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => ($cparam or $self)->uri;


}


;}

;
      }
    }
    my $uri = $cparam->
name_uri
;
    my $db = $self->
database
;
    my $cfgname = 
Message::Util::PerlCode::ManakaiPCImplementation->perl_literal

                 ($cparam->
get_dom_configuration_parameter_name
);
    my %prop;
    for ([getter => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameterGetter'
],
         [setter => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameterSetter'
],
         [get_default =>
             
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameterDefaultGetter'
],
         [unsetter => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameterUnsetter'
],
         [checker => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameterChecker'
]) {
      my $cres = $cparam->
get_child_resource_by_type

                          ($_->[1]);
      if ($cres) {
        $prop{$_->[0]}
          = bless \($cres->
pl_code_fragment

                             ($factory)->stringify), 'manakai::code';
      }
    }
    my $type = $cparam->
dis_actual_data_type_resource
;
    if ($type->
is_subset_of_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#boolean'
)) {
      $prop{type} = 'boolean';
      my @csrc = ($cparam);
      push @csrc, $self unless $cparam eq $self;
      for (@csrc) {
        C: for my $c (@{$self->
get_child_resource_list_by_type

                                         (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#InCase'
)}) {
          my $v = $c->
get_property_value

                                         (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Value'
);
          next C unless $v;
          my $support = $c->
get_property_boolean

                                         (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#isSupported'
);
          my $tf = $v->
value
 ? 
1 : 

0
;
          $prop{vsupport}->[$tf] = 
1 if 
$support;
          if ($tf) {
            if ($c->
get_property_boolean

                                         (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--IsDefault'
)) {
              $prop{default} = 
1
;
            }
          }
          SP: for (@{$c->
get_property_value_list

                           (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--SetParam'
)}) {
            next unless $_->isa (
'Message::Util::IF::DVURIValue'
);
            my $suri = $_->
uri
;
            my $sres = $db->
get_resource
 ($suri);
            $sres = $db->
get_resource

                           ($sres->
name_uri
);
            my $v = $_->
get_property
 (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Value'
);
            next SP unless $v;
            $prop{setparam}->[$tf]->{
              $sres->
get_property_text

                         (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#propHashKey'
,
                          $sres->
uri
)
            } = $v->
value
;
          } # SP
        }
      }
    } elsif ($type->
is_subset_of_uri

                                       (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#String'
)) {
      $prop{type} = 'string';
    } else {
      $prop{type} = 'object';
      $prop{otype} =$type->
pl_fully_qualified_name
;
    }
    my @target = sort { $a cmp $b } map {
                   $_->
pl_fully_qualified_name

                 } @{
                  # $self, not $cparam
                  $self->
get_property_resource_list

                      (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#targetType'
)
                 };
    my $target0 = 
Message::Util::PerlCode::ManakaiPCImplementation->perl_literal
 ($target[0]);
    $r = $factory->
create_pc_statement
;
    $r->
append_code

           ('$Message::DOM::DOMCore::ManakaiDOMConfiguration{'.
            $target0 . '}->{' . $cfgname . '} = ' . 
            
Message::Util::PerlCode::ManakaiPCImplementation->perl_literal
 ({
              iname => $db->
get_resource
 ($uri)
                          ->
get_property_text

                                (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#propHashKey'
, $uri),
              %prop,
            }));
    if (@target > 1) {
      my $c = $factory->
create_element_ns

                          (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'blockContainer');
      $c->
append_child
 ($r);
      for my $target (@target[1..$#target]) {
        $c->
append_child

          ($factory->
create_pc_statement
)
          ->
append_code

           ('$Message::DOM::DOMCore::ManakaiDOMConfiguration{'.
            
Message::Util::PerlCode::ManakaiPCImplementation->perl_literal
 ($target) .
            '}->{'. $cfgname .
            '} = $Message::DOM::DOMCore::ManakaiDOMConfiguration{' .
            $target0 . '}->{' . $cfgname . '}');
      }
      $r = $c;
    }



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameterApplication'}->{'pl_code_fragment'} = $Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMConfigurationParameter'}->{'pl_code_fragment'};
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMErrorType'}->{'pl_code_fragment'} = sub ($$) {
my ($self, $factory) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$db = $self->
database
;
    my $sev = $self->
get_property_resource

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#severity'
);
    if (not $sev or not $sev->
is_type_uri

                                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Const'
)) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Const', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => '', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => ($sev or $self)->uri;


}


;}

;
    }
    my $tf = $self->
get_property_resource

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter'
);
    unless ($tf) {
      $tf = $db->
get_resource

                   (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/MUErrorFormatter'
,
                    for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Perl'
);
    }
  $r = $factory->
create_pc_statement
;
  $r->
append_code

           ('$Message::DOM::DOMCore::ManakaiDOMError::Def{'.
            
Message::Util::PerlCode::ManakaiPCImplementation->perl_literal

              ($self->
name_uri
).
            '} = '.
            
Message::Util::PerlCode::ManakaiPCImplementation->perl_literal
 ({
              
't'
 => $self->
get_property_text

                  (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#errorType'
,
                   $self->
name_uri
),
              description => $self->
_pl_muf_description_text
,
              
'sev'
 => 0 + $sev->
pl_code_fragment
 ($factory),
              
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/textFormatter'
 => $tf->
pl_fully_qualified_name
,
            }));



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/CharsetSet'}->{'get_perl_module_member_code'} = sub ($$$) {
my ($self, $factory, $thismod_pack) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
%done;
  for my $v (@{$self->
get_property_value_list

                        (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/moduleRef'
)}) {
    my $mod = $v->
get_resource

                    ($self->
database
);
    R: for my $res (@{$mod->
get_resource_list
}) {
      next R unless $res->
is_type_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/Charset'
);
      next R if $done{$res->
uri
};
      $done{$res->
uri
} = 
1
;
      $res->
get_perl_module_member_code

              ($factory, $thismod_pack);
    }
  }



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/Charset'}->{'get_perl_definition_hash_namespace'} = sub ($) {
my ($self) = @_;
my $r;

{


$r = q<Message::Charset::Encode>;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/Charset'}->{'get_perl_module_member_code'} = sub ($$$) {
my ($self, $factory, $thismod_pack) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$uris = [grep {$_ !~ /^tag:suika\.fam\.cx,2005-09/} @{
                $self->
uris

             }];
  my $ns = $self->
get_perl_definition_hash_namespace
;

  $r = $factory->
create_pc_statement
;
  $r->
append_new_pc_variable
 ('$', $ns, 'CharsetDef');
  $r->
append_code
 ('->{');
  $r->
append_string_literal
 ($uris->[0]);
  $r->
append_code
 ('} = ');
  for my $uri (@$uris[1..$#$uris]) {
    $r->
append_new_pc_variable
 ('$', $ns, 'CharsetDef');
    $r->
append_code
 ('->{');
    $r->
append_string_literal
 ($uri);
    $r->
append_code
 ('} = ');
  }

  my $prop = {
    uri => {map {$_ => 
1
} @$uris},
    
'ics'
 =>
        $self->
get_property_text_list

                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/ietfName'
),
    
'mcs'
 =>
        $self->
get_property_text

                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/preferredMIMEName'
),
    
'xenc'
 =>
        $self->
get_property_text_list

                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/xmlName'
),
    
'penc'
 =>
        $self->
get_property_text_list

                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/perlName'
),
    
'bs'
 => $self->
is_type_uri

                                    (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/BlockSafe'
),
    
'bomr'
 => $self->
is_type_uri

                                    (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/BOM.Required'
),
    
'boma'
 => $self->
is_type_uri

                                    (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/BOM.Allowed'
),
    
'a8'
 => $self->
is_type_uri

                                    (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/ASCII8'
),
    
'a16'
 => $self->
is_type_uri

                                    (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/ASCII16'
),
    
'a16b'
 => $self->
is_type_uri

                                    (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/ASCII16BE'
),
    
'a16l'
 => $self->
is_type_uri

                                    (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/ASCII16LE'
),
    
'a32'
 => $self->
is_type_uri

                                    (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/ASCII32'
),
    
'a32.1234'
 => $self->
is_type_uri

                                    (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/ASCII32Endian1234'
),
    
'a32.2143'
 => $self->
is_type_uri

                                    (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/ASCII32Endian3243'
),
    
'a32.3412'
 => $self->
is_type_uri

                                    (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/ASCII32Endian3412'
),
    
'a32.4321'
 => $self->
is_type_uri

                                    (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/ASCII32Endian4321'
),
    
'u8family'
 => $self->
is_type_uri

                                    (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/UTF8EncodingScheme'
),
    
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/noBOMVariant'
 =>
        $self->
get_property_text

                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/noBOMVariant'
),
    
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/noBOMVariant16BE'
 =>
        $self->
get_property_text

                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/noBOMVariant16BE'
),
    
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/noBOMVariant16LE'
 =>
        $self->
get_property_text

                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/noBOMVariant16LE'
),
    
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/noBOMVariant32Endian1234'
 =>
        $self->
get_property_text

                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/noBOMVariant32Endian1234'
),
    
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/noBOMVariant32Endian2143'
 =>
        $self->
get_property_text

                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/noBOMVariant32Endian3243'
),
    
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/noBOMVariant32Endian3412'
 =>
        $self->
get_property_text

                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/noBOMVariant32Endian3412'
),
    
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/noBOMVariant32Endian4321'
 =>
        $self->
get_property_text

                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/noBOMVariant32Endian4321'
),
  };

  unless (defined $prop->{
'mcs'
}) {
    $prop->{
'mcs'
}
      = $self->
get_property_text

                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Charset/ianaCanonicalName'
,
                  $prop->{
'ics'
}->[0]);
  }

  for (keys %$prop) {
    delete $prop->{$_} unless $prop->{$_};
    if (ref $prop->{$_} eq 'ARRAY') {
      unless (@{$prop->{$_}}) {
        delete $prop->{$_};
      } else {
        $prop->{$_} = [sort {$a cmp $b} @{$prop->{$_}}];
      }
    }
    delete $prop->{$_}
      if ref $prop->{$_} eq 'HASH' and not %{$prop->{$_}};
  }

  if (1 < keys %$prop) { # |uri| + ...
    $r->
append_new_pc_literal
 ($prop);
    $thismod_pack->
append_child
 ($r);
  }
  $r = 
undef
;



}


;}

;


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Core#String'}->{'get_perl_code_from_dv_value'} = sub ($$;$) {
my ($self, $factory, $s) = @_;
my $r;

{


$r = $factory->
create_pc_literal

                 (defined $s
                    ? $s->
is_null

                        ? 
undef
                        : 
$s->
string_value
                    : 

undef
);


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Core#Boolean'}->{'get_perl_code_from_dv_value'} = sub ($$;$) {
my ($self, $factory, $s) = @_;
my $r;

{


$r = defined $s
       ? $s->
is_null

           ? $factory->
create_pc_literal
 (
undef
)
           : $factory->
create_pc_number_literal

                         ($s->
value
 ? 
1 : 

0
)
       : $factory->
create_pc_literal
 (
undef
);


}
$r}
;
$Message::Util::DIS::Method{'http://suika.fam.cx/~wakaba/archive/2004/dis/Core#Integer'}->{'get_perl_code_from_dv_value'} = sub ($$;$) {
my ($self, $factory, $s) = @_;
my $r;

{


$r = defined $s
       ? $s->
is_null

           ? $factory->
create_pc_literal
 (
undef
)
           : $factory->
create_pc_number_literal

                         (0+$s->
value
)
       : $factory->
create_pc_literal
 (
undef
);


}
$r}
;
package Message::Util::IF::DISElementPerl;
our $VERSION = 20061229.0846;
package Message::Util::DIS::Perl::ManakaiDISElementPerl;
our $VERSION = 20061229.0846;
push our @ISA, 'Message::Util::IF::DISElementPerl';
sub pl_value_code_fragment ($$$$%) {
my ($self, $factory, $attrURI, $disResource, %opt) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$dataType;
  my $vnode = defined $attrURI
              ? $self->
dis_get_attribute

                                   ($attrURI,
                                    for_arg => $opt{for_arg},
                                    forp_arg => $opt{forp_arg},
                         database_arg => $disResource
                             ->
database
)
              : $self;
  if ($vnode) {
    my $isnull = $vnode->
dis_get_attribute

                                   (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--is-null'
,
                                    for_arg => $opt{for_arg},
                                    forp_arg => $opt{forp_arg},
                          database_arg => $disResource
                             ->
database
);
    if ($isnull and $isnull->
value
) {
      $r = $factory->
create_pc_literal
 (
undef
);
    } else {
      my $vnode_type_uri = $vnode->
media_type_uri

                                   (for_arg => $opt{for_arg},
                                    forp_arg => $opt{forp_arg});
      my $vnode_value = $vnode->
value
;
      if ($vnode_type_uri) {
        my $vnode_type = $disResource->
database

                             ->
get_resource

                                              ($vnode_type_uri);
        if ($vnode_type->
is_subset_of_uri

                                (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Boolean'
)) {
          $r = $factory->
create_pc_number_literal

                                ($vnode_value ? 
1 : 

0
);
        } elsif ($vnode_type->
is_subset_of_uri

                                (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Core#QName'
)) {
          $r = $factory->
create_pc_literal

                            ($vnode->
qname_to_uri
 ($vnode_value,
                                                     node => $vnode));
        } elsif ($vnode_type->
is_subset_of_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#Perl'
)) {
          $r = $disResource->
pl_preprocess_perl_statement

                                   ($factory, $vnode_value,
                                    node => $vnode,
                                    contains_statements => 
0
);
        } else { ## DISCore:String or some
          $r = $factory->
create_pc_literal

                           ($vnode_value);
        }
      } elsif ($opt{data_type_uri}) {
        $dataType ||= $disResource->
database

                                  ->
get_resource

                                      ($opt{data_type_uri});
        if ($dataType->
is_subset_of_uri

                                      (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#AnyRealNumber'
)) {
          $r = $factory->
create_pc_number_literal

                                      (0 + $vnode_value);
        } elsif ($dataType->
is_subset_of_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#boolean'
)) {
          $r = $factory->
create_pc_number_literal

                            ($vnode_value eq 'tr'.'ue' ? 
1 : 

0
);
        } else { ## |DOMString| or some
          $r = $factory->
create_pc_literal

                           ($vnode_value);
        }
      } else {  ## Untyped
        $r = $factory->
create_pc_literal
 ($vnode_value);
      }
    }
  } # has value

  if (not $r and $opt{use_default_value}) {
    $dataType ||= $disResource->
database

                              ->
get_resource

                                      ($opt{data_type_uri});
    if ($dataType->
is_subset_of_uri

                                      (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#String'
)) {
      $r = $factory->
create_pc_literal
 ('');
    } elsif ($dataType->
is_subset_of_uri

                                      (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#boolean'
) or
             $dataType->
is_subset_of_uri

                                      (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#AnyRealNumber'
)) {
      $r = $factory->
create_pc_number_literal
 (0);
    } elsif ($dataType->
is_subset_of_uri

                                      (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ARRAY'
)) {
      $r = $factory->
create_pc_literal
 ([]);
    } elsif ($dataType->
is_subset_of_uri

                                      (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#HASH'
)) {
      $r = $factory->
create_pc_literal
 ({});
    }
  }



}


;}

;


}
$r}
sub pl_code_fragment ($$$%) {
my ($self, $factory, $disResource, %opt) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$et = $self->
expanded_uri
;
  if ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Def'
) {
    my $value = $self->
value
;
    if (defined $value) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#DISPERL_NO_VALUE_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


}


;}

;
    }
    $r = $factory->
create_element_ns

                     (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'blockContainer');
    for my $c (@{$self->
dis_child_elements

                          (for_arg => $opt{for_arg}, forp_arg => $opt{forp_arg},
                           database_arg => $opt{database_arg})}) {
      my $ccode = $c->
pl_code_fragment

                          ($factory, $disResource,
                           for_arg => $opt{for_arg}, forp_arg => $opt{forp_arg},
                           contains_statements => $opt{contains_statements},
                           database_arg => $opt{database_arg});
      $r->
append_child
 ($ccode) if defined $ccode;
    }
  } elsif ({
    
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#constValue'
 => 
1
,
    
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#cloneCode'
 => 
1
,
  }->{$et}) {
    my ($qname, $const_name, $on) = split /\s*\.\s*/,
                                     $self->
value
, 3;
    my $parentResource = $disResource
                                 ->
parent_resource
;
    my $uri = $self->
tfqnames_to_uri

                     ($qname,
                      ($parentResource
                               ->
parent_resource
 ||
                       $parentResource || $disResource)->
                              
name_uri
,
                      $opt{for_arg}, node => $self);
    my $const;
    if (defined $const_name) {
      my $owner = $disResource->
database

                              ->
get_resource
 ($uri);
      $owner->
is_referred
 ($self);
      if ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#constValue'
) {
        $const = $owner->
get_const_resource_by_name
 ($const_name);
        unless (defined $const) {
          

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Const', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $const_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#parentURI' => $uri;


}


;}

;
        }
      } else {
        $const = $owner->
get_child_resource_by_name_and_type

                                  ($const_name, 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AnyMethod'
);
        unless (defined $const) {
          

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AnyMethod', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $const_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#parentURI' => $uri;


}


;}

;
        }
      }
    } else {
      $const = $disResource->
database

                           ->
get_resource
 ($uri);
    }
    if ($const->
is_type_uri

                              (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Const'
)) {
      $const->
is_referred
 ($self);

      my $data_type = $const->
dis_actual_data_type_resource
;
      my $val = $const->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Value'
}->
pl_code_fragment

                    ($factory, $disResource,
                     data_type_uri => $data_type
                            ->
uri
,
                           database_arg => $opt{database_arg})
        if $const->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Value'
};
      unless (defined $val) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $const->local_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_CONST_VALUE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $const->uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


}


;}

;
      }
    
      if ($opt{contains_statements}) {
        $r = $factory->
create_pc_statement
;
        my $rvar = $factory->
create_pc_variable

                                         ('$', 
undef
, 'r');
        $r->
append_new_assignment
 ($rvar => $val);
      } else {
        $r = $val;
      }
    } elsif ($const->
is_type_uri

                         (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AnyMethod'
)) {
      my $ret = $const->
get_child_resource_by_type

                         ($const->
is_type_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Method'
)
                          ? 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#MethodReturn'
                          : 
($on and $on eq 'set')
                            ? 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AttributeSet'
                            : 

'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AttributeGet'
);
      unless ($ret) { 
        

{

local $Error::Depth = $Error::Depth - 1;

{


          if 
($const->
is_type_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Method'
)) {
            
report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $const->local_name, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#errResource' => $const, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_METHOD_RETURN_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $const->uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;

;
          } elsif ($on and $on eq 'set') {
            
report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_ATTR_SET_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#errResource' => $const, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $const->uri;

;
          } else {
            
report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_ATTR_GET_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#errResource' => $const, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $const->uri;

;
          }
        


}


;}

; # UNDEEP
      }
      $r = $ret->
pl_code_fragment
 ($factory);
    } elsif ($const->
is_type_uri

                         (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Core#AnyDefContainer'
)) {
      $r = $const->
pl_code_fragment
 ($factory);
    } else {
      if ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#constValue'
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#Const', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $const->local_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $const->uri;


}


;}

;
      } else {  # DISPerl:cloneCode
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AnyMethod', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $const->local_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $const->uri;


}


;}

;
      }
    }
  } elsif ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#value'
) {
    my $val = $self->
pl_value_code_fragment

                    ($factory, 
undef
, $disResource,
                     for_arg => $opt{for_arg},
                     forp_arg => $opt{forp_arg},
                           database_arg => $opt{database_arg});
    $r = $factory->
create_pc_statement
;
    my $rvar = $factory->
create_pc_variable

                                         ('$', 
undef
, 'r');
    $r->
append_new_assignment
 ($rvar => $val);
  } elsif ({
    
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--ContentType'
 => 
1
,
    
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--For'
 => 
1
, 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--ForCheck'
 => 
1
,
    
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--ImplNote'
 => 
1
,
    
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#nop'
 => 
1
,
  }->{$et}) {
    #
  } else {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#UNSUPPORTED_ELEMENT_TYPE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


}


;}

;
  }



}


;}

; # DEEP


}
$r}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::DIS::Perl::ManakaiDISElementPerl>}->{has_feature} = {'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#perl',
{'',
'1',
'1.0',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::DIS::Perl::ManakaiDISElementPerl>} = 1;
package Message::Util::IF::DVValuePerl;
our $VERSION = 20061229.0846;
package Message::Util::DIS::Perl::ManakaiDVValuePerl;
our $VERSION = 20061229.0846;
push our @ISA, 'Message::Util::IF::DVValuePerl';
sub pl_code_fragment ($$$%) {
my ($self, $factory, $disResource, %opt) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$dataType;
  if ($self->
is_null
) {
    $r = $factory->
create_pc_literal
 (
undef
);
  } else {
    my $vnode_type = $disResource->
database

                                 ->
get_resource

                                      ($self->
data_type
);
    if ($vnode_type->
is_subset_of_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#Perl'
)) {
      $r = $disResource->
pl_preprocess_perl_statement

                    ($factory, $self->
string_value
,
                     contains_statements => 
0
,
                     namespace_context => $self);
    } elsif ($vnode_type->
is_subset_of_uri

                                (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Core#Integer'
)) {
      $r = $factory->
create_pc_number_literal

                          ($self->
value
 + 0);
    } elsif ($vnode_type->
is_subset_of_uri

                                (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Core#Boolean'
)) {
      $r = $factory->
create_pc_number_literal

                          ($self->
value
 ? 
1 : 

0
);
    } elsif ($opt{data_type_uri}) {
      $dataType ||= $disResource->
database

                                ->
get_resource

                                      ($opt{data_type_uri});
      my $vnode_value = $self->
value
;
      if (UNIVERSAL::can ($vnode_value, 'value')) {
        $vnode_value = $vnode_value->
value
;
      }
      if ($dataType->
is_subset_of_uri

                                        (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#AnyRealNumber'
)) {
        $r = $factory->
create_pc_number_literal

                                        (0 + $vnode_value);
      } elsif ($dataType->
is_subset_of_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/IDL#boolean'
)) {
        $r = $factory->
create_pc_number_literal

                              ($vnode_value eq 'tr'.'ue' ? 
1 :
                               
$vnode_value eq '1' ? 
1 : 

0
);
      } else { ## |DOMString| or some
        $r = $factory->
create_pc_literal

                                 ($self->
string_value
);
      }
    } else { ## DISCore:String or some
      $r = $factory->
create_pc_literal

                            ($self->
string_value
);
    }
  }



}


;}

;


}
$r}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::DIS::Perl::ManakaiDVValuePerl>}->{has_feature} = {'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#perl',
{'',
'1',
'1.0',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::DIS::Perl::ManakaiDVValuePerl>} = 1;
package Message::Util::IF::DISDatabasePerl;
our $VERSION = 20061229.0846;
package Message::Util::DIS::Perl::ManakaiDISDatabasePerl;
our $VERSION = 20061229.0846;
push our @ISA, 'Message::Util::IF::DISDatabasePerl';
sub pl_store ($$$) {
my ($self, $fileName, $moduleResolver) = @_;

{

use 
Storable qw/nstore/;
local $Carp::CarpLevel = $Carp::CarpLevel + 1;

## Updates resource to module mapping
my %mod_res;
my %mod_for;
my %mod_mod;   ## Module objects with full properties
my %temp_mod;  ## Module objects for index
my %mod_storage;


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$core_mod = $self->
get_module

                          (
'http://suika.fam.cx/~wakaba/archive/2004/dis/DISCore'
);
    ## Loads the core module for resources does not belong
    ## to any module.

  R: for my $res (values %{$self->{resDef}}) {
    my $mod_urir = $res->
owner_module_uri_ref
;
    unless (defined $mod_urir) {
      next R unless $res->
is_defined
;
      $mod_urir = \
'http://suika.fam.cx/~wakaba/archive/2004/dis/DISCore'
;
    }
    for my $res_uri (@{$res->
uris
}) {
      $self->{
'rm'
}->{$res_uri} = $mod_urir;
      $mod_res{$$mod_urir}->{$res_uri} = $res;
    }
    CORE::delete $res->{db};
  }

  R: for my $res (values %{$self->{forDef}}) {
    my $mod_urir = $res->
owner_module_uri_ref
;
    unless (defined $mod_urir) {
      next R unless $res->
is_defined
;
      $mod_urir = \
'http://suika.fam.cx/~wakaba/archive/2004/dis/DISCore'
;
    }
    for my $res_uri (@{$res->
uris
}) {
      $self->{
'rm'
}->{$res_uri} = $mod_urir;
      $mod_for{$$mod_urir}->{$res_uri} = $res;
    }
    CORE::delete $res->{db};
  }

  for my $res (values %{$self->{modDef}}) {
    my $mod_uri = $res->
uri
;
    if ($res->
is_defined and
        
not $res->isa (
'Message::Util::DIS::ManakaiDISModuleLite'
)) {
      if (defined $res->{
'nst'
}) {
        $mod_storage{$mod_uri} = $res->{
'nst'
};
        delete $res->{
'nst'
};
      }

      $mod_mod{$mod_uri} = $res;
      CORE::delete $res->{db};
      $temp_mod{$mod_uri} = bless {},
                               
'Message::Util::DIS::ManakaiDISModuleLite'
;
      for ('uri', 'localName', 'namespaceURI', 'for', 'forp',
           
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#isDefined'
, 
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#isReferred'
,
           
'snid'
, 
'dns'
,
           
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/plHashKey'
, 
'r'
) {
        $temp_mod{$mod_uri}->{$_} = $res->{$_}
          if defined $res->{$_};
      }
    } else {
      $temp_mod{$mod_uri} = $res;
    }
  }



}


;}

;

## Obtains module file names and contents
my %mod_file;


{

local $Error::Depth = $Error::Depth + 1;

{


  for 
my $mod_uri (keys %{{%mod_res, %mod_for, %mod_mod}}) {
    my $mod_file_name = ($moduleResolver or sub ($$) {})
      ->($self, $self->
get_module
 ($mod_uri),
         
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/ModuleResourceFile'
);
    my $mod_idx_file_name = ($moduleResolver or sub ($$) {})
      ->($self, $self->
get_module
 ($mod_uri),
         
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/ModuleIndexFile'
);
    for (keys %{$mod_res{$mod_uri}||{}}) {
      $mod_file{$mod_file_name}->{resDef}->{$_}
        = $mod_res{$mod_uri}->{$_};
      $mod_file{$mod_idx_file_name}->{
'rm'
}->{$_}
        = \$mod_uri;
    } 
    for (keys %{$mod_for{$mod_uri}||{}}) {
      $mod_file{$mod_file_name}->{forDef}->{$_}
        = $mod_for{$mod_uri}->{$_};
      $mod_file{$mod_idx_file_name}->{
'rm'
}->{$_}
        = \$mod_uri;
    }
    if ($mod_mod{$mod_uri}) {
      $mod_file{$mod_file_name}->{modDef}->{$mod_uri}
        = $mod_mod{$mod_uri};
      $mod_file{$mod_idx_file_name}->{modDef}->{$mod_uri}
        = $temp_mod{$mod_uri};
    }
  }



}


;}

;

## Database module files
for my $mod_file_name (keys %mod_file) {
  nstore $mod_file{$mod_file_name}, $mod_file_name;
}

require Scalar::Util;
for my $res (values %temp_mod,
             map {values %{$_->{forDef}||{}},
                  values %{$_->{resDef}||{}},
                  values %{$_->{modDef}||{}}} values %mod_file) {
  $res->{db} = $self;
  Scalar::Util::weaken ($res->{db});
}

for my $mod_uri (keys %mod_storage) {
  $self->{modDef}->{$mod_uri}->{
'nst'
}
      = $mod_storage{$mod_uri};
}


}
}
sub _pl_store_node_storage ($) {
my ($self) = @_;

{

M: 
for my $mod_uri (keys %{$self->{modDef}}) {
  my $mod = $self->{modDef}->{$mod_uri};
  next M unless $mod->{
'nstmod'
};
  
  my $mod_file_name = ($self->{
'dbmodcode'
} or sub ($$) {})
                          ->($self, $mod, 
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/ModuleNodeStorageFile'
);

  use Storable qw/nstore/;
  local $Carp::CarpLevel = $Carp::CarpLevel + 1;
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-save-database-module-node-storage-start', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_pl_store_node_storage', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#fileName' => $mod_file_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl';

;
  nstore $mod->{
'nst'
}, $mod_file_name;
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-save-database-module-node-storage-end', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_pl_store_node_storage', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#fileName' => $mod_file_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl';

;
} # M


}
}
sub pl_add_hash_key ($$$$) {
my ($self, $keyScope, $keyName, $disResource) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$ks = $self->
get_resource
 ($keyScope);
  $ks->
is_referred
 ($keyName);
  for my $ks_uri (@{$ks->
get_super_resource_uri_list
}) {
    my $ks_r = $self->
get_resource
 ($ks_uri);
    if ($ks_r->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/plHashKey'
}->{$keyName} and
        ${$ks_r->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/plHashKey'
}->{$keyName}}
            ne $disResource->
uri
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_add_hash_key', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#anotherURI' => ${$ks_r->{'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/plHashKey'}->{$keyName}}, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#hashKeyName' => $keyName, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_HASH_KEY_ALREADY_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $disResource->uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#hashKeyScope' => $ks_uri;


}


;}

;
    }
  }
  $ks->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/plHashKey'
}->{$keyName} =
  $disResource->
owner_module

              ->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/plHashKey'
}
              ->{$keyScope}->{$keyName}
    = $disResource->
uri_ref
;



}


;}

;


}
}
sub _pl_load_dis_database_module ($$) {
my ($self, $disModule) = @_;

{

if 
($disModule->isa (
'Message::Util::DIS::ManakaiDISModuleLite'
)) {
  require Message::Util::DIS::DNLite;
  require Message::Util::DIS::Value;

  my $dbmod;
  my $fileName;
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $fileName = ($self->{
'dbmodcode'
} or sub () {})
                   ->($self, $disModule, 
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/ModuleResourceFile'
);
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-open-database-module-resource-start', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_pl_load_dis_database_module', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#fileName' => $fileName, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl';


}


;}

;
    use Storable qw/retrieve/;
    {
      local $Carp::CarpLevel = $Error::Level;
      $dbmod = retrieve $fileName;
    }
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-open-database-module-resource-end', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_pl_load_dis_database_module', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#fileName' => $fileName, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl';


}


;}

;

    require Scalar::Util;        
    S: for my $res_uri (keys %{$dbmod->{modDef}}) {
      my $res = $dbmod->{modDef}->{$res_uri};
      my $dres = $self->{modDef}->{$res_uri};

      unless (defined $dres) {
        $dres = $self->{modDef}->{$res_uri}
              = {db => $self};
        Scalar::Util::weaken ($dres->{db});
      } elsif (ref $dres ne 
'Message::Util::DIS::ManakaiDISModuleLite'
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_pl_load_dis_database_module', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_ALREADY_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $res_uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#moduleURI' => $disModule->uri;


}


;}

;
      }
      for my $pn (keys %$res) {
        $dres->{$pn} = $res->{$pn};
      }

      bless $dres, 
'Message::Util::DIS::ManakaiDISModuleDefinition'
;
    } # S

    S: for my $res_uri (keys %{$dbmod->{forDef}}) {
      my $res = $dbmod->{forDef}->{$res_uri};
      next S unless $res_uri eq $res->
uri
;
      $res->{db} = $self;
      Scalar::Util::weaken ($res->{db});
      if (defined $self->{forDef}->{$res_uri} and
          not ref $self->{forDef}->{$res_uri} eq 'HASH' and
              # There should be a bug...
          $self->{forDef}->{$res_uri}->
is_defined
) {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_pl_load_dis_database_module', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_ALREADY_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $res_uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#moduleURI' => $disModule->uri;


}


;}

;
      }
      $self->{forDef}->{$res_uri} = $res;
    } # S

    S: for my $res_uri (keys %{$dbmod->{resDef}}) {
      my $res = $dbmod->{resDef}->{$res_uri};
      next S unless $res_uri eq $res->
uri
;
      $res->{db} = $self;
      Scalar::Util::weaken ($res->{db});
      if (defined $self->{resDef}->{$res_uri}) {
        if ($self->{resDef}->{$res_uri}->
is_defined
) {
          if ($res->
is_defined
) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_pl_load_dis_database_module', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_ALREADY_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $res_uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#moduleURI' => $disModule->uri;


}


;}

;
          }
        }
      }
      for my $uri (grep {$res->{aliasURI}->{$_}}
                   keys %{$res->{aliasURI}}) {
        $self->{resDef}->{$uri} = $res;
      }
    } # S
  


}


;}

;
} # not loaded


}
}
sub pl_update_module ($$;%) {
my ($self, $modules, %opt) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$db = $self;

  ## -- Creates a list of modules that must be updated
  my $update_module = {};
  my $target_module = {map {$_->[0] => 
1
} @$modules};
  my $checked_module = {};
  my %update_read;
  T: while (%$target_module) {
    my $target_module_uri = [keys %$target_module]->[0];
    delete $target_module->{$target_module_uri};
    next T if $checked_module->{$target_module_uri};
    $checked_module->{$target_module_uri} = 
1
;

    unless (defined $db->{modDef}->{$target_module_uri}) {
      my $target_module_file_name
        = $opt{get_module_index_file_name}->($db, $target_module_uri);
      if (-f $target_module_file_name) {
        $db->
pl_load_dis_database_index

               ($target_module_file_name);
      }
    }
    my $target_module_resource = $db->
get_module

                                          ($target_module_uri);
    
    my $source_revision
      = $opt{get_module_source_revision}->($db, $target_module_uri);
    my $target_module_revision
      = $target_module_resource->
revision
;
    if ($source_revision > 0 and
        ($source_revision > $target_module_revision or
         $target_module_revision == 0)) {
      for (@{$opt{get_referring_module_uri_list}->($db, $target_module_uri)}) {
        $target_module->{$_} = 
1
;
      }
      $update_module->{$target_module_uri} = 
1
;
      $update_read{$target_module_uri}->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#all'
} = 
1
;
    } else { # Source is not updated
      for (@{$target_module_resource
               ->
get_referring_module_uri_list
}) {
        $target_module->{$_} = 
1
;
      }
    }
  } # T


  ## Removes modules that need update
  my $srinfo = {};
  for my $mod (@{$db->
get_module_resource_list
}) {
    my $mod_uri = $mod->
name_uri
;
    if ($update_module->{$mod_uri}) {
      my $mod_for = $mod->
for_uri
;
      $update_read{$mod_uri}->{$mod_for} = 
1
;
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-unload-module-start', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_update_module', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $mod_uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#forURI' => $mod_for;


}


;}

;
      $srinfo = $db->
unload_module
 ($mod, srinfo => $srinfo);
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-unload-module-end', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_update_module', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $mod_uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#forURI' => $mod_for;


}


;}

;
    }
  }

  for (@$modules) {
    my ($mod_name, $mod_for) = @$_;
    my $tfuri;
    unless (defined $mod_for) {
      $mod_for = 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#all'
;
      if (defined $db->{modDef}->{$mod_name} and
          defined $db->{modDef}->{$mod_name}->{
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--DefaultFor'
}) {
        $mod_for = $db->
get_module
 ($mod_name)
                      ->
get_property_text

                          (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--DefaultFor'
, 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#all'
);
      } else {
        my $mod_doc = $opt{get_module_source_document_from_uri}
                        ->($db, $mod_name, $mod_for);
        my $mod_el = $mod_doc->
module_element
;
        if ($mod_el) {
          $mod_for = $mod_el->
default_for_uri
;
        }
      }
    }
    

{

if 
($mod_for eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#all'
) {
  $tfuri = $mod_name;
} else {
  ## NOTE: [RFC 3986]
  ##       fragment    := *(pchar / "/" / "?")
  ##       pchar       := unreserved / pct-encoded / sub-delims / [:@]
  ##       unreserved  := ALPHA / DIGIT / [._~-]
  ##       sub-delims  := [!$&'()*+,;=]
  ## NOTE: [XPointer Framework]
  ##       SchemeData  := *EscapedData
  ##       EscapedData := NormalChar / "^(" / "^)" / "^^"
  ##                    / "(" SchemeData ")"
  ##       NormalChar  := UnicodeChar - [()^]
  my $__turi = $mod_name;
  my $__furi = $mod_for;
  for my $__uri ($__turi, $__furi) {
    $__uri =~ s{([^0-9A-Za-z!\$'()*,:;=?\@_./~-])}{sprintf '%%%02X', ord $1}ge;
  }
  $tfuri = qq<tag:suika.fam.cx,2005-09:$__turi+$__furi>;
}


}

;
    unless (defined $db->{modDef}->{$tfuri}) {
      $update_read{$mod_name}->{$mod_for} = 
1
;
    }
  }

  ## Reads updated sources
  for my $mod_name (keys %update_read) {
    for my $mod_for (keys %{$update_read{$mod_name}}) {
      $db->
load_module

             ($opt{get_module_source_document_from_uri}
                ->($db, $mod_name, $mod_for),
              $opt{get_module_source_document_from_resource},
              for_arg => $mod_for, on_resource_read => $opt{on_resource_read},
              srinfo => $srinfo);
    }
  }



}


;}

;


}
}
sub pl_load_dis_database_index ($$) {
my ($self, $fileName) = @_;

{

use 
Storable qw/retrieve/;
local $Carp::CarpLevel = $Carp::CarpLevel + 1;

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-open-database-module-index-start', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_load_dis_database_index', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#fileName' => $fileName, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl';

;
my $idb = retrieve $fileName;

report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-open-database-module-index-end', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_load_dis_database_index', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#fileName' => $fileName, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl';

;

require Scalar::Util;
F: for my $imod_uri (keys %{$idb->{modDef}}) {
  my $imod = $idb->{modDef}->{$imod_uri};
  next F unless $imod;
  if (defined $self->{modDef}->{$imod_uri}) {
    next F if $imod eq $self->{modDef}->{$imod_uri};
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/error-module-is-already-in-database', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_load_dis_database_index', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $imod_uri;

;
  }
  $self->{modDef}->{$imod_uri} = $imod;
  $imod->{db} = $self;
  Scalar::Util::weaken ($imod->{db});
}

F: for my $ires_uri (keys %{$idb->{
'rm'
}}) {
  next F unless $idb->{
'rm'
}->{$ires_uri};
  if (defined $self->{
'rm'
}->{$ires_uri}) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/error-resource-is-already-in-database', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_load_dis_database_index', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISDatabasePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $ires_uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#moduleURI' => ${$self->{'rm'}
                               ->{$ires_uri}};

;
  }
  $self->{
'rm'
}->{$ires_uri}
    = $idb->{
'rm'
}->{$ires_uri};
}


}
}
sub pl_database_module_resolver ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = $self->{
'dbmodcode'
};


}
$r;
} else {my ($self, $given) = @_;

{


$self->{
'dbmodcode'
} = $given;


}
}
}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::DIS::Perl::ManakaiDISDatabasePerl>}->{has_feature} = {'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#perl',
{'',
'1',
'1.0',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::DIS::Perl::ManakaiDISDatabasePerl>} = 1;
package Message::Util::IF::DISAnyResourcePerl;
our $VERSION = 20061229.0846;
package Message::Util::DIS::Perl::ManakaiDISAnyResourcePerl;
our $VERSION = 20061229.0846;
push our @ISA, 'Message::Util::IF::DISAnyResourcePerl';
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::DIS::Perl::ManakaiDISAnyResourcePerl>}->{has_feature} = {'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#perl',
{'',
'1',
'1.0',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::DIS::Perl::ManakaiDISAnyResourcePerl>} = 1;
package Message::Util::IF::DISModulePerl;
our $VERSION = 20061229.0846;
package Message::Util::DIS::Perl::ManakaiDISModulePerl;
our $VERSION = 20061229.0846;
push our @ISA, 'Message::Util::IF::DISModulePerl';
sub pl_fully_qualified_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$man = $self->
get_property_value

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#packageName'
);
  if ($man) {
    $r = $man->
string_value
;
  } else {
    my $mg = $self->
database

                  ->
get_resource

                     ($self->
namespace_uri
,
                      for_arg => $self->
for_uri
);
    unless ($self->
is_defined
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self->source_element, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISModulePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_fully_qualified_name', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $self->namespace_uri;


}


;}

;
    }
    my $an = $mg->
get_property_value

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#packageName'
);
    $r = $an ? $an->
string_value
             : 
$mg->
local_name
 || 'main';
    $r =~ s/::$//g;
    $r .= '::' . $self->
local_name
;
    my $sf = $an->
get_property

                     (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#moduleSuffix'
) if $an;
    $r .= $sf->
string_value if 
$sf;
  }



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISModulePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_fully_qualified_name';
}
}
sub pl_interface_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$man = $self->
get_property_value

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#interfacePackageName'
) ||
            $self->
get_property_value

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#packageName'
);
  if ($man) {
    $r = $man->
string_value
;
  } else {
    my $mg = $self->
database

                  ->
get_resource

                     ($self->
namespace_uri
,
                      for_arg => $self->
for_uri
);
    unless ($self->
is_defined
) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self->source_element, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISModulePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_interface_name', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $self->namespace_uri;


}


;}

;
    }
    my $an = $mg->
get_property_value

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#interfacePackageName'
) ||
             $mg->
get_property_value

                     (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#packageName'
);
    if ($an) {
      $r = $an->
string_value
;
      $r =~ s/::$//g;
      my $sf = $an->
get_property

                       (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#moduleSuffix'
);
      $r .= $sf->
string_value if 
$sf;
    } else {
      $r = $self->
pl_fully_qualified_name
;
    }
  }



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISModulePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_interface_name';
}
}
sub pl_load_node_storage ($) {
my ($self) = @_;

{

my 
$db = $self->
database
;
my $file_name = $db->{
'dbmodcode'
}
                   ->($db, $self, 
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/ModuleNodeStorageFile'
);

if (-f $file_name) {
  use Storable qw/retrieve/;
  local $Carp::CarpLevel = $Carp::CarpLevel + 1;
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-open-database-module-node-storage-start', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_load_node_storage', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#fileName' => $file_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISModulePerl';

;
  $self->{
'nst'
} = retrieve $file_name;
  
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/info-open-database-module-node-storage-end', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_load_node_storage', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#fileName' => $file_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISModulePerl';

;
} else {
  $self->{
'nst'
} = {};
  delete $self->{
'nstmod'
};
}


}
}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::DIS::Perl::ManakaiDISModulePerl>}->{has_feature} = {'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#perl',
{'',
'1',
'1.0',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::DIS::Perl::ManakaiDISModulePerl>} = 1;
package Message::Util::IF::DISResourcePerlModule;
our $VERSION = 20061229.0846;
package Message::Util::DIS::Perl::ManakaiDISPerlModuleDefinition;
our $VERSION = 20061229.0846;
push our @ISA, 'Message::Util::IF::DISResourcePerlModule';
sub pl_generate_perl_module_document ($$) {
my ($self, $impl) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $impl->create_pc_document;
  my $rdoc = $r->document_element;

  ## -- Source information
  $rdoc->
source_file

         ($self->
get_property_text

                        (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceFile'
, ''));
  $rdoc->
source_module

          ($self->
name_uri
);
  $rdoc->
source_for

                        ($self->
for_uri
);
  
  ## -- License information
  my $ownermod = $self->
owner_module
;
  my $license = $ownermod->
get_property_resource
 (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--License'
);
  unless ($license) {
    

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $ownermod->source_element, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_generate_perl_module_document', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_LICENSE_ATTR_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISPerlModuleDefinition', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $ownermod->uri;


}


;}

;
  }
  $rdoc->
license_uri

                    ($license->
uri
);

  ## -- Classes
  ## TODO: Custom module construction support
  my $thismod_name = $self->
pl_fully_qualified_name
;
  my $thismod_pack = $rdoc->
get_last_package

                             ($thismod_name, make_new_package => 
1
);
  my %const;
  my %processed_class;
  for my $cls (@{$self->
get_resource_list
}) {
    if ($cls->
owner_module
           eq 
$ownermod and
        not $processed_class{$cls->
uri
}) {
      $processed_class{$cls->
uri
}
        = 
1
;
      
      my $mcode = $cls->
get_perl_module_member_code

                          ($r,
                           $thismod_pack, \%const);
      if ($mcode) {
        $r->
adopt_node
 ($mcode);
        $rdoc->
append_child
 ($mcode);
      }

      if ($cls->
is_type_uri

                      (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Interface'
)) {
      }
    } # ownermodule and not alias
  } # Classes

  ## -- Exporter (constants)
  if (keys %const) {
    my $map = 
Message::Util::PerlCode::ManakaiPCImplementation->perl_literal
 (\%const);
    $thismod_pack->
append_statement
 ("sub $_ ()")
      for sort {$a cmp $b} keys %const;
    $thismod_pack->
get_sub
 ('AUTOLOAD',
                                           make_new_node => 
1
)
      ->
append_code
 (q[
        my $al = our $AUTOLOAD;
        $al =~ s/.+:://;
        if (] . $map . q[->{$al}) {
          no strict 'refs';
          *{$AUTOLOAD} = \&{] . $map . q[->{$al}};
          goto &{$AUTOLOAD};
        } else {
          require Carp;
          Carp::croak (qq<Can't locate method "$AUTOLOAD">);
        }
      ]);
    $thismod_pack->
get_sub
 ('import',
                                           make_new_node => 
1
)
      ->
append_code
 (q[
        my $self = shift;
        if (@_) {
          local $Exporter::ExportLevel = $Exporter::ExportLevel + 1;
          $self->SUPER::import (@_);
          for (grep {not /\W/} @_) {
            eval qq{$_};
          }
        }
      ]);
  }

  ## -- Require'ing external modules
  ## TODO: Custom module construction support
  my $db = $self->
database
;
  for my $uri (@{$rdoc->
dis_get_require_uri_list
}) {
    my $mod = $db->
get_any_resource
 ($uri)
                   ->
owner_module
;
    next unless $mod;
    my $pack = $mod->
pl_fully_qualified_name
;
    $rdoc->
add_require_perl_module_name
 ($pack)
      unless $pack eq $thismod_name;
  }



}


;}

;


}
$r}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::DIS::Perl::ManakaiDISPerlModuleDefinition>}->{has_feature} = {'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#perl',
{'',
'1',
'1.0',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::DIS::Perl::ManakaiDISPerlModuleDefinition>} = 1;
package Message::Util::IF::DISResourcePerl;
our $VERSION = 20061229.0846;
package Message::Util::DIS::Perl::ManakaiDISResourcePerl;
our $VERSION = 20061229.0846;
push our @ISA, 'Message::Util::IF::DISResourcePerl';
use Message::Util::Error;
sub pl_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{

my 
$method;
my $tr = $self->
type_resource
;


{

my 
$__type_uri = $tr->
uri
;
$method = $Message::Util::DIS::Method{$__type_uri}->{'pl_name'};
unless ($method) {
  my %__methods;
  for (@{$tr->
get_super_resource_uri_list
}) {
    $__methods{$_} = $Message::Util::DIS::Method{$_}->{'pl_name'}
      if $Message::Util::DIS::Method{$_}->{'pl_name'};
  }
  my $__db = $tr->
database
;
  T1: for my $__t1_uri (keys %__methods) {
    next T1 unless $__methods{$__t1_uri};
    my $__t1 = $__db->
get_resource
 ($__t1_uri);
    T2: for my $__t2_uri (keys %__methods) {
      next T2 if $__t1_uri eq $__t2_uri;
      if ($__t1->
is_subset_of_uri
 ($__t2_uri)) {
        delete $__methods{$__t2_uri};
        next T2;
      }
      if ($Message::Util::DIS::Method{$__t1_uri}->{'pl_name'}
            eq $Message::Util::DIS::Method{$__t2_uri}->{'pl_name'}) {
        delete $__methods{$__t2_uri};
        next T2;
      }
    }
  }
  if (keys %__methods > 1) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#more-than-one-methods-for-a-type', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-name' => 'pl_name', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $__type_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23getMethodForType+http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23ForLatest', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-resource-types' => [keys %__methods];

;
  }
  $Message::Util::DIS::Method{$__type_uri}->{'pl_name'} =
  $method = $__methods{[keys %__methods]->[0]} if %__methods;
}


}

;
if ($method) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $method->(@_);
  


}


;}

;
} else {
  $r = 
undef
;
} 


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_name';
}
}
sub get_perl_name_list ($) {
my ($self) = @_;
my $r = [];

{


{

local $Error::Depth = $Error::Depth + 1;

{



  ## Primary name
  my $nm = $self->
get_property_text_list

                             (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#methodName'
);
  if (@$nm > 0) {
    push @$r, @$nm;
    ## NOTE: No reserved name checks enforced in this case
  } elsif (defined (my $ln = $self->
local_name
)) {
    $nm = 
Message::Util::DIS::ManakaiDISImplementation->_camel_case_to_underscore_name
 ($ln);
    if ($self->
get_property_boolean

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#isForInternal'
)) {
      $nm = '_' . $nm;
    }
    if ({
            import => 1,
            unimport => 1,
            isa => 1,
            can => 1,
            new => 1,
            as_string => 1,
            stringify => 1,
            clone => 1,
        }->{$nm} or $nm =~ /^___/) {
      

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $self->source_element, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'get_perl_name_list', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#generatedName' => $nm, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESERVED_PERL_METHOD_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $self->uri;

;
      


}


;}

;
    }
    push @$r, $nm;
  }

  ## Names specified via "dis:Operator" attributes
  for my $opv (@{$self->
get_property_value_list

                     (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Operator'
)}) {
    if ($opv->isa (
'Message::Util::IF::DVURIValue'
)) {
      my $op_uri = $opv->
uri
;
      my $nm = {
               
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#MUErrorHandler'
 => '___report_error',
               
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/ErrorDefMethod'
 => '___error_def',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#AsStringMethod'
 => 'stringify',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#NewMethod'
 => 'new',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#CloneMethod'
 => 'clone',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ImportMethod'
 => 'import',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#CanMethod'
 => 'can',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#UnimportMethod'
 => 'unimport',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#VERSIONMethod'
 => 'VERSION',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#ISAMethod'
 => 'isa',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#ArrayGet'
 => 'FETCH',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#ArraySet'
 => 'STORE',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#HashGet'
 => 'FETCH',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#HashSet'
 => 'STORE',
               
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#ToString'
 => 'stringify',
               
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Grove/CreateNodeStemMethod'
 => '___create_node_stem',
               
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Grove/CreateNodeRefMethod'
 => '___create_node_ref',
             }->{$op_uri};
      push @$r, $nm if defined $nm;
    } else {
      my $nm = $opv->
string_value
;
      if ($nm =~ /^[A-Z]+$/) {
        push @$r, $nm;
      }
    }
  } # operators



}


;}

;


}
$r}
sub get_perl_operator_list ($) {
my ($self) = @_;
my $r = [];

{


{

local $Error::Depth = $Error::Depth + 1;

{


  for 
my $opv (@{$self->
get_property_value_list

                     (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Operator'
)}) {
    if ($opv->isa (
'Message::Util::IF::DVURIValue'
)) {
      my $op_uri = $opv->
uri
;
      my $nm = {
                 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#AsStringMethod'
 => '""',
                 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#ToString'
 => '""',
               }->{$op_uri};
      push @$r, $nm if defined $nm;
    } else {
      my $nm = $opv->
string_value
;
      if ($nm !~ /^[A-Z]+$/) {
        push @$r, $nm;
      }
    }
  } # operators



}


;}

;


}
$r}
sub pl_fully_qualified_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{

if 
(exists $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/plFullyQualifiedName'
}) {
  $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/plFullyQualifiedName'
};
} else {
  my $method;
  my $tr = $self->
type_resource
;
  

{

my 
$__type_uri = $tr->
uri
;
$method = $Message::Util::DIS::Method{$__type_uri}->{'pl_fully_qualified_name'};
unless ($method) {
  my %__methods;
  for (@{$tr->
get_super_resource_uri_list
}) {
    $__methods{$_} = $Message::Util::DIS::Method{$_}->{'pl_fully_qualified_name'}
      if $Message::Util::DIS::Method{$_}->{'pl_fully_qualified_name'};
  }
  my $__db = $tr->
database
;
  T1: for my $__t1_uri (keys %__methods) {
    next T1 unless $__methods{$__t1_uri};
    my $__t1 = $__db->
get_resource
 ($__t1_uri);
    T2: for my $__t2_uri (keys %__methods) {
      next T2 if $__t1_uri eq $__t2_uri;
      if ($__t1->
is_subset_of_uri
 ($__t2_uri)) {
        delete $__methods{$__t2_uri};
        next T2;
      }
      if ($Message::Util::DIS::Method{$__t1_uri}->{'pl_fully_qualified_name'}
            eq $Message::Util::DIS::Method{$__t2_uri}->{'pl_fully_qualified_name'}) {
        delete $__methods{$__t2_uri};
        next T2;
      }
    }
  }
  if (keys %__methods > 1) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#more-than-one-methods-for-a-type', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-name' => 'pl_fully_qualified_name', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $__type_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23getMethodForType+http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23ForLatest', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-resource-types' => [keys %__methods];

;
  }
  $Message::Util::DIS::Method{$__type_uri}->{'pl_fully_qualified_name'} =
  $method = $__methods{[keys %__methods]->[0]} if %__methods;
}


}

;
  if ($method) {
    

{

local $Error::Depth = $Error::Depth + 1;

{



      $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/plFullyQualifiedName'
} = $r = $method->(@_);
    


}


;}

;
  } else {
    $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#Perl/plFullyQualifiedName'
} = $r = 
undef
;
 } 
}


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_fully_qualified_name';
}
}
sub pl_variable_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = $self->
get_property_text

              (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#variableName'
,
               $self->
local_name
);
if (defined $r) {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    if 
($self->
get_property_boolean

                         (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#isNamedParameter'
, 
0
)) {
      $r = '$opt{' . 
         
Message::Util::DIS::ManakaiDISImplementation->_camel_case_to_underscore_name

                                               ($r) .
           '}';
    } else {
      my $dt = $self->
dis_actual_data_type_resource
;
      if ($dt->
is_subset_of_uri

                                               (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#Array'
) or
          $dt->
is_subset_of_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#List'
)) {
        $r = '@' . $r;
      } elsif ($dt->
is_subset_of_uri

                                               (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#Hash'
)) {
        $r = '%' . $r;
      } else {
        $r = '$' . $r;
      }
    }
  


}


;}

;
}


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_variable_name';
}
}
sub pl_prototype ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$dt = $self->
dis_actual_data_type_resource
;
  if ($dt->
is_subset_of_uri

                                             (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#Array'
)) {
    $r = '@' . $r;
  } elsif ($dt->
is_subset_of_uri

                                             (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#Hash'
)) {
    $r = '%' . $r;
  } else {
    $r = '$' . $r;
  }



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_prototype';
}
}
sub pl_code_fragment ($$) {
my ($self, $factory) = @_;
my $r;

{

if 
(exists $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plCodeFragment'
}) {
  $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plCodeFragment'
};
} else {
  my $method;
  my $tr = $self->
type_resource
;
  

{

my 
$__type_uri = $tr->
uri
;
$method = $Message::Util::DIS::Method{$__type_uri}->{'pl_code_fragment'};
unless ($method) {
  my %__methods;
  for (@{$tr->
get_super_resource_uri_list
}) {
    $__methods{$_} = $Message::Util::DIS::Method{$_}->{'pl_code_fragment'}
      if $Message::Util::DIS::Method{$_}->{'pl_code_fragment'};
  }
  my $__db = $tr->
database
;
  T1: for my $__t1_uri (keys %__methods) {
    next T1 unless $__methods{$__t1_uri};
    my $__t1 = $__db->
get_resource
 ($__t1_uri);
    T2: for my $__t2_uri (keys %__methods) {
      next T2 if $__t1_uri eq $__t2_uri;
      if ($__t1->
is_subset_of_uri
 ($__t2_uri)) {
        delete $__methods{$__t2_uri};
        next T2;
      }
      if ($Message::Util::DIS::Method{$__t1_uri}->{'pl_code_fragment'}
            eq $Message::Util::DIS::Method{$__t2_uri}->{'pl_code_fragment'}) {
        delete $__methods{$__t2_uri};
        next T2;
      }
    }
  }
  if (keys %__methods > 1) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#more-than-one-methods-for-a-type', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-name' => 'pl_code_fragment', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $__type_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23getMethodForType+http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23ForLatest', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-resource-types' => [keys %__methods];

;
  }
  $Message::Util::DIS::Method{$__type_uri}->{'pl_code_fragment'} =
  $method = $__methods{[keys %__methods]->[0]} if %__methods;
}


}

;
  if ($method) {
    $r = $method->(@_);
  } else {
    $r = $self->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#plCodeFragment'
} = 
undef
;
  } 
}


}
$r}
sub get_perl_module_member_code ($$$$) {
my ($self, $factory, $thismod_pack, $const) = @_;
my $r;

{

my 
$method;
my $tr = $self->
type_resource
; 


{

my 
$__type_uri = $tr->
uri
;
$method = $Message::Util::DIS::Method{$__type_uri}->{'get_perl_module_member_code'};
unless ($method) {
  my %__methods;
  for (@{$tr->
get_super_resource_uri_list
}) {
    $__methods{$_} = $Message::Util::DIS::Method{$_}->{'get_perl_module_member_code'}
      if $Message::Util::DIS::Method{$_}->{'get_perl_module_member_code'};
  }
  my $__db = $tr->
database
;
  T1: for my $__t1_uri (keys %__methods) {
    next T1 unless $__methods{$__t1_uri};
    my $__t1 = $__db->
get_resource
 ($__t1_uri);
    T2: for my $__t2_uri (keys %__methods) {
      next T2 if $__t1_uri eq $__t2_uri;
      if ($__t1->
is_subset_of_uri
 ($__t2_uri)) {
        delete $__methods{$__t2_uri};
        next T2;
      }
      if ($Message::Util::DIS::Method{$__t1_uri}->{'get_perl_module_member_code'}
            eq $Message::Util::DIS::Method{$__t2_uri}->{'get_perl_module_member_code'}) {
        delete $__methods{$__t2_uri};
        next T2;
      }
    }
  }
  if (keys %__methods > 1) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#more-than-one-methods-for-a-type', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-name' => 'get_perl_module_member_code', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $__type_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23getMethodForType+http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23ForLatest', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-resource-types' => [keys %__methods];

;
  }
  $Message::Util::DIS::Method{$__type_uri}->{'get_perl_module_member_code'} =
  $method = $__methods{[keys %__methods]->[0]} if %__methods;
}


}

;
if ($method) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $method->(@_);
  


}


;}

;
} else {
  $r = 
undef
;
} 


}
$r}
sub get_perl_class_member_code ($$) {
my ($self, $factory) = @_;
my $r;

{

my 
$method;
my $tr = $self->
type_resource
;


{

my 
$__type_uri = $tr->
uri
;
$method = $Message::Util::DIS::Method{$__type_uri}->{'get_perl_class_member_code'};
unless ($method) {
  my %__methods;
  for (@{$tr->
get_super_resource_uri_list
}) {
    $__methods{$_} = $Message::Util::DIS::Method{$_}->{'get_perl_class_member_code'}
      if $Message::Util::DIS::Method{$_}->{'get_perl_class_member_code'};
  }
  my $__db = $tr->
database
;
  T1: for my $__t1_uri (keys %__methods) {
    next T1 unless $__methods{$__t1_uri};
    my $__t1 = $__db->
get_resource
 ($__t1_uri);
    T2: for my $__t2_uri (keys %__methods) {
      next T2 if $__t1_uri eq $__t2_uri;
      if ($__t1->
is_subset_of_uri
 ($__t2_uri)) {
        delete $__methods{$__t2_uri};
        next T2;
      }
      if ($Message::Util::DIS::Method{$__t1_uri}->{'get_perl_class_member_code'}
            eq $Message::Util::DIS::Method{$__t2_uri}->{'get_perl_class_member_code'}) {
        delete $__methods{$__t2_uri};
        next T2;
      }
    }
  }
  if (keys %__methods > 1) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#more-than-one-methods-for-a-type', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-name' => 'get_perl_class_member_code', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $__type_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23getMethodForType+http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23ForLatest', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-resource-types' => [keys %__methods];

;
  }
  $Message::Util::DIS::Method{$__type_uri}->{'get_perl_class_member_code'} =
  $method = $__methods{[keys %__methods]->[0]} if %__methods;
}


}

;
if ($method) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $method->(@_);
  


}


;}

;
} else {
  $r = 
undef
;
} 


}
$r}
sub get_perl_interface_member_code ($$) {
my ($self, $factory) = @_;
my $r;

{

my 
$method;
my $tr = $self->
type_resource
;


{

my 
$__type_uri = $tr->
uri
;
$method = $Message::Util::DIS::Method{$__type_uri}->{'get_perl_interface_member_code'};
unless ($method) {
  my %__methods;
  for (@{$tr->
get_super_resource_uri_list
}) {
    $__methods{$_} = $Message::Util::DIS::Method{$_}->{'get_perl_interface_member_code'}
      if $Message::Util::DIS::Method{$_}->{'get_perl_interface_member_code'};
  }
  my $__db = $tr->
database
;
  T1: for my $__t1_uri (keys %__methods) {
    next T1 unless $__methods{$__t1_uri};
    my $__t1 = $__db->
get_resource
 ($__t1_uri);
    T2: for my $__t2_uri (keys %__methods) {
      next T2 if $__t1_uri eq $__t2_uri;
      if ($__t1->
is_subset_of_uri
 ($__t2_uri)) {
        delete $__methods{$__t2_uri};
        next T2;
      }
      if ($Message::Util::DIS::Method{$__t1_uri}->{'get_perl_interface_member_code'}
            eq $Message::Util::DIS::Method{$__t2_uri}->{'get_perl_interface_member_code'}) {
        delete $__methods{$__t2_uri};
        next T2;
      }
    }
  }
  if (keys %__methods > 1) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#more-than-one-methods-for-a-type', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-name' => 'get_perl_interface_member_code', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $__type_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23getMethodForType+http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23ForLatest', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-resource-types' => [keys %__methods];

;
  }
  $Message::Util::DIS::Method{$__type_uri}->{'get_perl_interface_member_code'} =
  $method = $__methods{[keys %__methods]->[0]} if %__methods;
}


}

;
if ($method) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $method->(@_);
  


}


;}

;
} else {
  $r = 
undef
;
} 


}
$r}
sub get_perl_definition_hash_namespace ($) {
my ($self) = @_;
my $r;

{

my 
$method;
my $tr = $self->
type_resource
;


{

my 
$__type_uri = $tr->
uri
;
$method = $Message::Util::DIS::Method{$__type_uri}->{'get_perl_definition_hash_namespace'};
unless ($method) {
  my %__methods;
  for (@{$tr->
get_super_resource_uri_list
}) {
    $__methods{$_} = $Message::Util::DIS::Method{$_}->{'get_perl_definition_hash_namespace'}
      if $Message::Util::DIS::Method{$_}->{'get_perl_definition_hash_namespace'};
  }
  my $__db = $tr->
database
;
  T1: for my $__t1_uri (keys %__methods) {
    next T1 unless $__methods{$__t1_uri};
    my $__t1 = $__db->
get_resource
 ($__t1_uri);
    T2: for my $__t2_uri (keys %__methods) {
      next T2 if $__t1_uri eq $__t2_uri;
      if ($__t1->
is_subset_of_uri
 ($__t2_uri)) {
        delete $__methods{$__t2_uri};
        next T2;
      }
      if ($Message::Util::DIS::Method{$__t1_uri}->{'get_perl_definition_hash_namespace'}
            eq $Message::Util::DIS::Method{$__t2_uri}->{'get_perl_definition_hash_namespace'}) {
        delete $__methods{$__t2_uri};
        next T2;
      }
    }
  }
  if (keys %__methods > 1) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#more-than-one-methods-for-a-type', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-name' => 'get_perl_definition_hash_namespace', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $__type_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23getMethodForType+http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23ForLatest', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-resource-types' => [keys %__methods];

;
  }
  $Message::Util::DIS::Method{$__type_uri}->{'get_perl_definition_hash_namespace'} =
  $method = $__methods{[keys %__methods]->[0]} if %__methods;
}


}

;
if ($method) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $method->(@_);
  


}


;}

;
} else {
  $r = 
undef
;
} 


}
$r}
sub get_perl_error_code_name ($$) {
my ($self, $factory) = @_;
my $r;

{

my 
$method;
my $tr = $self->
type_resource
;


{

my 
$__type_uri = $tr->
uri
;
$method = $Message::Util::DIS::Method{$__type_uri}->{'get_perl_error_code_name'};
unless ($method) {
  my %__methods;
  for (@{$tr->
get_super_resource_uri_list
}) {
    $__methods{$_} = $Message::Util::DIS::Method{$_}->{'get_perl_error_code_name'}
      if $Message::Util::DIS::Method{$_}->{'get_perl_error_code_name'};
  }
  my $__db = $tr->
database
;
  T1: for my $__t1_uri (keys %__methods) {
    next T1 unless $__methods{$__t1_uri};
    my $__t1 = $__db->
get_resource
 ($__t1_uri);
    T2: for my $__t2_uri (keys %__methods) {
      next T2 if $__t1_uri eq $__t2_uri;
      if ($__t1->
is_subset_of_uri
 ($__t2_uri)) {
        delete $__methods{$__t2_uri};
        next T2;
      }
      if ($Message::Util::DIS::Method{$__t1_uri}->{'get_perl_error_code_name'}
            eq $Message::Util::DIS::Method{$__t2_uri}->{'get_perl_error_code_name'}) {
        delete $__methods{$__t2_uri};
        next T2;
      }
    }
  }
  if (keys %__methods > 1) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#more-than-one-methods-for-a-type', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-name' => 'get_perl_error_code_name', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $__type_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23getMethodForType+http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23ForLatest', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-resource-types' => [keys %__methods];

;
  }
  $Message::Util::DIS::Method{$__type_uri}->{'get_perl_error_code_name'} =
  $method = $__methods{[keys %__methods]->[0]} if %__methods;
}


}

;
if ($method) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $method->(@_);
  


}


;}

;
} else {
  $r = 
undef
;
} 


}
$r}
sub pl_additional_isa_packages ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = [];

{

for 
my $t (@{$self->
get_property_text_list

                         (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--AppISA'
)}) {
  push @$r, $t;
}


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_additional_isa_packages';
}
}
our $RegQNameChar = (qr/[^\s<>"'\/\\\[\]\{\},!\?=\$\@%]/);
our $RegBlockContent;
$RegBlockContent = (qr/(?>[^{}\\]*)(?>(?>[^{}\\]+|\\.|\{(??{$RegBlockContent})\})*)/);
sub get_perl_code_from_dv_value ($$;$) {
my ($self, $factory, $s) = @_;
my $r;

{

my 
$method;


{

my 
$__type_uri = $self->
uri
;
$method = $Message::Util::DIS::Method{$__type_uri}->{'get_perl_code_from_dv_value'};
unless ($method) {
  my %__methods;
  for (@{$self->
get_super_resource_uri_list
}) {
    $__methods{$_} = $Message::Util::DIS::Method{$_}->{'get_perl_code_from_dv_value'}
      if $Message::Util::DIS::Method{$_}->{'get_perl_code_from_dv_value'};
  }
  my $__db = $self->
database
;
  T1: for my $__t1_uri (keys %__methods) {
    next T1 unless $__methods{$__t1_uri};
    my $__t1 = $__db->
get_resource
 ($__t1_uri);
    T2: for my $__t2_uri (keys %__methods) {
      next T2 if $__t1_uri eq $__t2_uri;
      if ($__t1->
is_subset_of_uri
 ($__t2_uri)) {
        delete $__methods{$__t2_uri};
        next T2;
      }
      if ($Message::Util::DIS::Method{$__t1_uri}->{'get_perl_code_from_dv_value'}
            eq $Message::Util::DIS::Method{$__t2_uri}->{'get_perl_code_from_dv_value'}) {
        delete $__methods{$__t2_uri};
        next T2;
      }
    }
  }
  if (keys %__methods > 1) {
    
report Message::DOM::DOMCore::ManakaiDOMError -object => $self, '-type' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#more-than-one-methods-for-a-type', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-name' => 'get_perl_code_from_dv_value', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $__type_uri, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI' => 'tag:suika.fam.cx,2005-09:http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23getMethodForType+http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS%23ForLatest', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#method-resource-types' => [keys %__methods];

;
  }
  $Message::Util::DIS::Method{$__type_uri}->{'get_perl_code_from_dv_value'} =
  $method = $__methods{[keys %__methods]->[0]} if %__methods;
}


}

;
if ($method) {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $method->(@_);
  


}


;}

;
} else {
  $r = 
undef
;
} 


}
$r}
sub pl_preprocess_perl_code ($$$%) {
my ($self, $factory, $codeArg, %opt) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$nsr = $opt{namespace_context} || $opt{node};
  my $db = $self->
database
;
  our $RegQNameChar;
  our $RegBlockContent;
  $r = $factory->
create_element_ns

                   (length $codeArg ? 
'http://suika.fam.cx/~wakaba/archive/2005/12/pc/' : 

'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
,
                    'block');
  
  for my $source_code (split /\b(_ _(?:(?!_ _)$RegQNameChar)+
                                   (?:\{$RegBlockContent\})?
                                 _ _)\b/x, $codeArg) {
    ## Block-level element
    if ($source_code =~ /_\_\z/ and
        $source_code =~ s/^_\_((?:(?!_\_)$RegQNameChar)+)//) {
      my $et = $nsr->
qname_to_uri

                             ($1,
                              node => $opt{node},
                              default_namespace_uri => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--'
);
      if ($source_code =~ s/^\{//) {
        $source_code =~ s/\}__\z//;
      } else {
        $source_code = '';
      }


      if ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--DEEP' or 
$et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--UNDEEP'
) {
        my $block = $r->
append_block
;
        $block->
append_statement

                      ('local $Error::Depth = $Error::Depth '.
                       ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--DEEP'
 ? '+' : '-').
                       ' 1');
        $block->
append_child

                  ($self->
pl_preprocess_perl_code

                               ($factory, $source_code,
                                method_resource => $opt{method_resource},
                                node => $opt{node},
                                namespace_context=> $opt{namespace_context}));
      } elsif ({
        
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--EXCEPTION'
 => 1,
      }->{$et}) {
        if ($source_code =~ s/^((?:(?!::).)+)(?:::\s*)?//s) {
          my ($if, $const, $subtype)
            = @{$db->
xcref_to_resource

                                 ($1, $nsr,
                                  node => $opt{node},
                    for_arg => $self->
for_uri
)};
          my $cls = $if->
is_type_uri

                                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Class'
)
                  ? $if
                  : $if->
get_property_resource

                                 (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#implementedBy'
);
          unless ($cls and
                  $cls->
is_type_uri

                                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Class'
)) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_EXCEPTION_CLASS_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $if->uri;


}


;}

;
          }
          my $param = $self->
_pl_parse_preprocess_parameter

                                 ($source_code, node => $opt{node},
                                namespace_context=> $opt{namespace_context});
          my $context_param
                    = $self->
_pl_get_context_parameter
;

          $self->
_pl_append_throw

                       ($factory, $r, $cls, $const, $subtype,
                        {%$param, %$context_param},
                        node => $opt{node},
                                namespace_context=> $opt{namespace_context});
        } else {
         

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_PREPROCESS_NO_EXCEPTION_TYPE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


}


;}

;
        }
      } elsif ({
        
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#ERROR'
 => 
1
,
      }->{$et}) {
        if ($source_code =~ s/^((?:(?!::).)+)(?:::\s*)?//s) {
          my $err_uri = $nsr->
tfqnames_to_uri

                                ($1, 
undef
,
                                 $self->
for_uri
,
                                 node => $opt{node});
          my $err = $db->
get_resource
 ($err_uri);
          unless ($err and
                  $err->
is_type_uri

                                 (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMErrorType'
)) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#DOMErrorType', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $err_uri;


}


;}

;
          }
          my $param = $self->
_pl_parse_preprocess_parameter

                                 ($source_code, node => $opt{node},
                                namespace_context=> $opt{namespace_context});
          my $context_param = $self->
_pl_get_context_parameter
;
          $param = {%$param, %$context_param,
                    -type => {
                      type => 'quoted',
                      value => $err->
name_uri
,
                    }};

          my $errcls = $db->
get_resource

                      (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#ManakaiDOMError'
,
                       for_arg => $err->
for_uri
);
          if (not $errcls->
is_defined
) {
            $errcls = $db->
get_resource

                      (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#ManakaiDOMError'
,
                       for_arg => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOMLatest'
);
          }

          for ($err, $errcls) {
            $_->
is_referred

                    ($opt{node} or
                     $self->
source_element or
                     
$self->
uri
);
          }

          my $statement = $r->
append_statement

            ('report '.
             $errcls->
pl_fully_qualified_name
.
             ' -object => $self');

          $self->
_pl_add_require_resource

                       ($errcls->
owner_module

                        => $statement);

          for my $name (keys %$param) {
            my $pname = $name;
            my $pres = $db->
get_resource
 ($pname);
            if ($pres->
is_defined
) {
              $pname = $pres->
get_property_text

                                   (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/propKey'
, $pname);
            }
            $pname =~ s/(['\\])/\\$1/g;
            $pname = qq<'$pname'>;
            $statement->
append_code

                   (', ' . $pname . ' => ');
            if ($param->{$name}->{type} eq 'code') {
              if (ref $param->{$name}->{value}) {
                $statement->
append_child

                   ($param->{$name}->{value});
              } else {
                $statement->
append_child

                  ($self->
pl_preprocess_perl_statement

                             ($factory, $param->{$name}->{value},
                              node => $opt{node},
                              namespace_context => $opt{namespace_context}));
              }
            } else {  ## String as is
              $statement->
append_string_literal

                   ($param->{$name}->{value});
            }
          }
        } else {
         

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_PREPROCESS_NO_EXCEPTION_TYPE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


}


;}

;
        }
      } elsif ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--CODE'
) {
          my $code_name;
          $source_code =~ s/^\s+//;
          if ($source_code =~ s/^((?>(?!::).)+)//s) {
            $code_name = $1;
          } else {
            

{

local $Error::Depth = $Error::Depth - 1;

{



              
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_PREPROCESS_NO_CODE_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;

;
            


}


;}

;
          }
          $source_code =~ s/^::\s*//;
          my $param = $self->
_pl_parse_preprocess_parameter

                                   ($source_code, node => $opt{node},
                                namespace_context=> $opt{namespace_context});
          my $code_uri = $nsr->
tfqnames_to_uri

                                 ($code_name, 
undef
,
                                  $self->
for_uri
,
                                  node => $opt{node});
          my $code = $db->
get_resource

                                   ($code_uri);
          $code->
is_referred

                                   ($self->
uri
);
          unless ($code->
is_type_uri

                                   (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#BlockCode'
)) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#BlockCode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $code_uri;

;


}


;}

;
          }
          my $pc = $code->
pl_code_fragment
 ($factory);
          unless (defined $pc) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_CODE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $code_uri;


}


;}

;
          }
          $pc = $pc->clone;
          for my $var (grep {/^\$/} keys %$param) {
            my $value;
            if ($param->{$var}->{type} eq 'variable') {
              $value = $factory->
create_pc_variable

                                  ('$', 
undef
, $param->{$var}->{value});
            } elsif ($param->{$var}->{type} eq 'code') {
              $value = $self->
pl_preprocess_perl_statement

                                    ($factory, $param->{$var}->{value},
                                     contains_statements => 
0
,
                                     node => $opt{node},
                                namespace_context=> $opt{namespace_context});
            } else {
              $value = $factory->
create_pc_literal

                                  ($param->{$var}->{value});
            }
            $pc->
replace_variable

                                  ($var => $value);
          }
          $r->
append_child
 ($pc);
        } elsif ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--FOR'
) {
          if ($source_code =~ s/^(((?>(?!::).)*)::\s*)//) {
            V: for my $forq (split /\s*\|\s*/, $2) {
              my $notfor = ($forq =~ s/^!\s*// ? 
1 : 

0
);
              my $for_uri = $nsr->
qname_to_uri

                                      ($forq, node => $opt{node});
              my $formatch = $self->
is_for_uri
 ($for_uri);
              if (($formatch and not $notfor) or
                  (not $formatch and $notfor)) {
                $r->
append_child

                    ($self->
pl_preprocess_perl_code

                             ($factory, $source_code,
                              method_resource => $opt{method_resource},
                              node => $opt{node},
                                namespace_context=> $opt{namespace_context}));
                last V;
              }
            } # V
          } else {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_PREPROCESS_NO_FOR_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


}


;}

;
          }
        } elsif ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--ASSERT'
) {
          my $assert_type;
          if ($source_code =~ s/^\s*($RegQNameChar+)\s*::\s*//o) {
            $assert_type = $nsr->
qname_to_uri

                                     ($1, node => $opt{node});
          } else {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_PREPROCESS_NO_ASSERT_TYPE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


}


;}

;
          }
        } elsif ({
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--FILE'
 => 1,
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--LINE'
 => 1,
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--PACKAGE'
 => 1,
        }->{$et}) {
          $r->
append_atom

                ('__'.{
                         
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--FILE'
 => 'FILE',
                         
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--LINE'
 => 'LINE',
                         
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--PACKAGE'
 => 'PACKAGE',
                      }->{$et}.'__');
          if (length $source_code) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_PREPROCESS_BLOCK_NOT_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


}


;}

;
          }
        } else {
          

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_code', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#UNSUPPORTED_ELEMENT_TYPE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


}


;}

;
        }
      } else {  ## Other than block-level element
        $r->
append_child

               ($self->
pl_preprocess_perl_statement

                         ($factory, $source_code,
                          contains_statements => 
1
,
                          node => $opt{node},
                                namespace_context=> $opt{namespace_context}));
      }
    } # for
  


}


;}

; # DEEP


}
$r}
sub pl_preprocess_perl_statement ($$$%) {
my ($self, $factory, $codeArg, %opt) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$nsr = $opt{namespace_context} || $opt{node};
  our $RegQNameChar;
  my $db = $self->
database
;
  if ($opt{contains_statements}) {
    $r = $factory->
create_element_ns

                     (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'blockContainer');
  } else {
    $r = $factory->
create_element_ns

                     (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#'
, 'inlineContainer');
  }
  for my $source_code (split /(?<![\^\?qwr])(\x3C$RegQNameChar[^<>]+>
                                             )/ox, $codeArg) {
    if ($source_code =~ s/^\x3C//) {
      $source_code =~ s/>$//;
      if ($source_code =~ s/^(.+?):://) {
        my $et = $nsr->
qname_to_uri

                             ($1,
                              node => $opt{node},
                              default_namespace_uri => 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--'
);
        if ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--Q'
) {          ## QName constant
          $r->
append_string_literal

                      ($nsr->
qname_to_uri

                                   ($source_code, node => $opt{node}));
        } elsif ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--H'
) {
          my $uri = $nsr->
qname_to_uri

                                   ($source_code, node => $opt{node});
          my $prop_res = $db->
get_resource
 ($uri);
          $prop_res->
is_referred

                          ($opt{node} or $self->
uri
);
          my $pname = $prop_res->
get_property_text

                                   (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#propHashKey'
, $uri);
          $r->
append_string_literal
 ($pname);
        } elsif ({
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--M'
 => 1,
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--ClassM'
 => 1,
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--AG'
 => 1,
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--AS'
 => 1,
        }->{$et}) {     ## Method call
          my ($class_qname, $method_qname)
                 = split /\s*\.\s*/, $source_code, 2;
          my $class_uri = $nsr->
tfqnames_to_uri

                               ($class_qname,
                                $self->
owner_class_node_uri
,
                                $self->
for_uri
,
                                node => $opt{node});
          my $class = $db->
get_resource

                                           ($class_uri);
          unless ($class->
is_defined
) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AnyClass', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $class_uri;


}


;}

;
          }
          $class->
is_referred

                         ($opt{node} || $self->
uri
);
          if ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--:ClassM' and
              
$class->
is_type_uri

                             (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Interface'
)) {
            

{

local $Error::Depth = $Error::Depth - 1;

{



              
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Class', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#INTERFACE_CLASS_METHOD_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $class_uri;

;
            


}


;}

;
          }
          unless ($class->
is_type_uri

                                 (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Interface'
)) {
            $self->
_pl_add_require_resource

                                 ($class => $r);
          }
          my $method = $class->
get_child_resource_by_name_and_type

                            ($method_qname,
                             {
                               
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--AG'
 => 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Attribute'
,
                               
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--AS'
 => 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Attribute'
,
                             }->{$et} || 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Method'
);
          if (not $method or
              not $method->
is_defined
) {
            

{

local $Error::Depth = $Error::Depth - 1;

{



              
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => {
                               'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--AG' => 'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Attribute',
                               'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--AS' => 'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Attribute',
                             }->{$et} || 'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Method', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $method_qname, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#parentURI' => $class_uri;

;
            


}


;}

;
          }
          my $class_name = '';
          if ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--ClassM'
) {
            $class_name = $class->
pl_fully_qualified_name
 . '->';
          }
          my $method_name = $method->
pl_name
;
          $r->
append_bare
 ($class_name . $method_name);
        } elsif ({
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--Class'
 => 1,
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--ClassName'
 => 1,
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--IF'
 => 1,
          
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--IFName'
 => 1,
        }->{$et}) {                            ## Perl package name
          my $class_uri = $nsr->
tfqnames_to_uri

                               ($source_code,
                                $self->
owner_class_node_uri
,
                                $self->
for_uri
,
                                node => $opt{node});
          my $class = $db->
get_resource

                                           ($class_uri);
          $class->
is_referred

                                 ($opt{node} || $self->
uri
);
          my $pack = $class->
pl_fully_qualified_name
;
          unless ($pack) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_PERL_PACKAGE_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $class_uri;


}


;}

;
          }
          if ({
            
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--ClassName'
 => 1,
            
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--IFName'
 => 1,
          }->{$et}) {
            $r->
append_string_literal
 ($pack);
          } else {
            $r->
append_bare
 ($pack);
          }
          $self->
_pl_add_require_resource

                                 ($class => $r)
            if {
              
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--Class'
 => 
1
,
              
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--ClassName'
 => 
1
,
            }->{$et};
        } elsif ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--Code'
) { ## Inline code
          my $code_name;
          $source_code =~ s/^\s+//;
          if ($source_code =~ s/^((?>(?!::).)+)//s) {
            $code_name = $1;
          } else {
            

{

local $Error::Depth = $Error::Depth - 1;

{



              
report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_PREPROCESS_NO_CODE_NAME_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code;

;
            


}


;}

;
          }
          $source_code =~ s/^::\s*//;
          my $param = $self->
_pl_parse_preprocess_parameter

                                   ($source_code, node => $opt{node},
                                namespace_context=> $opt{namespace_context});
          my $code_uri = $nsr->
tfqnames_to_uri

                                 ($code_name, 
undef
,
                                  $self->
for_uri
,
                                  node => $opt{node});
          my $code = $db->
get_resource

                                   ($code_uri);
          $code->
is_referred

                                 ($opt{node} || $self->
uri
);
          unless ($code->
is_type_uri

                                   (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#InlineCode'
)) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/dis/Perl#InlineCode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $code_uri;

;


}


;}

;
          }
          my $pc = $code->
pl_code_fragment
 ($factory)->clone;
          unless (defined $pc) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_CODE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $code_uri;


}


;}

;
          }
          for my $var (grep {/^\$/} keys %$param) {
            my $value;
            if ($param->{$var}->{type} eq 'variable') {
              $value = $factory->
create_pc_variable

                                  ('$', 
undef
, $param->{$var}->{value});
            } elsif ($param->{$var}->{type} eq 'code') {
              $value = $self->
pl_preprocess_perl_statement

                                    ($factory, $param->{$var}->{value},
                                     contains_statements => 
0
,
                                     node => $opt{node},
                                namespace_context=> $opt{namespace_context});
            } else {
              $value = $factory->
create_pc_literal

                                  ($param->{$var}->{value});
            }
            $pc->
replace_variable

                                  ($var => $value);
          }
          $r->
append_child
 ($pc);
        } elsif ($et eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Perl--C'
) {
          my ($class_qname, $const_name) = split /\./, $source_code, 2;
          my $class_uri = $nsr->
tfqnames_to_uri

                               ($class_qname,
                                $self->
owner_class_node_uri
,
                                $self->
for_uri
,
                                node => $opt{node});
          my $class = $db->
get_resource

                                           ($class_uri);
          $class->
is_referred

                                ($opt{node} || $self->
uri
);
          my $const = $class->
get_const_resource_by_name
 ($const_name);
          unless (defined $const) {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#Const', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $const_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR';


}


;}

;
          }
          $const->
is_referred

                    ($opt{node} || $self->
uri
);

          my $data_type = $const->
dis_actual_data_type_resource
;
          my $val = $const->
get_property_value

                                  (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Value'
);
          if ($val) {
            $val = $val->
pl_code_fragment

                    ($factory, $const,
                     data_type_uri => $data_type
                            ->
uri
);
          } else {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $const->local_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_CONST_VALUE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $const->uri, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


}


;}

;
          }
          $r->
append_child
 ($val);
        } else {
          

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'NOT_SUPPORTED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#UNSUPPORTED_ELEMENT_TYPE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#elementType' => $et;


}


;}

;
        }
      } else {
        

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#ConstGroup', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#PERL_PREPROCESS_NO_ELEMENT_TYPE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code;


}


;}

;
      }
    } else {
      for my $source_code (split /(\b
                                    (?: t r u e \b|
                                        f a l s e \b|
                                        n u l l \b|
                                        t r y \s* \x7B ) |
                                   \\ p \x7B [^\x7B\x7D\\]+ \x7D)/x,
                           $source_code) {
        if ({
          'tr'.'ue' => 
1
,
          'fal'.'se' => 
1
,
          'nu'.'ll' => 
1
,
        }->{$source_code}) {
          $r->
append_atom
 ({
            'tr'.'ue' => 1,
            'fal'.'se' => 0,
            'nu'.'ll' => 'undef',
          }->{$source_code});
        } elsif ($source_code =~ /^t r y \s* \x7B$/x) {
          $r->
append_code
 ('tr'.
               'y '."\x7B".'local $Error::Depth = $Error::Depth + 3;');
          $r->
add_use_perl_module_name

                                            ('Message::Util::Error');
        } elsif ($source_code =~ /^\\ p \x7B ([^\x7B\x7D\\]+) \x7D$/x) {
          my $cls = $1;
          $cls =~ s/^\s+//s;
          $cls =~ s/\s+$//s;
          ## TODO: Formal character class support required
          if ($cls =~ /^inxml\s*[:|]\s*(\w+)/) {
            $r->
append_atom
 ('\\'.'p{InXML'.$1.'}');
            $r->
add_use_char_class_name

                                ('Char::Class::XML', 'InXML'.$1);
          } else {
            

{

local $Error::Depth = $Error::Depth - 1;

{

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'pl_preprocess_perl_statement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $source_code;


}


;}

;
          }
        } else {
          if ($source_code =~ s/^(\s*[\w:]+\s*)//) {
            ## NOTE: "$cond ?\n1\n:0" would be a syntax error
            $r->
append_atom
 ($1);
          }
          $r->
append_code
 ($source_code);
        }
      }
    } # Inline instruction or not
  } # for



}


;}

; # DEEP


}
$r}
sub _pl_parse_preprocess_parameter ($$%) {
my ($self, $paramSpec, %opt) = @_;
my $r = {};

{

our 
$RegQNameChar;
our $RegBlockContent;
$r = {};
my $nsr = $opt{namespace_context} || $opt{node} || $self;
while ($paramSpec =~ s/^
  ## Parameter name
  (\$? $RegQNameChar+)\s*

  (?: =>? \s*
       ## ">" is now optional for inline element (">" is delimiter)

  ## Parameter value
  (
    ## Variable or Bare string
           \$? $RegQNameChar+
    |
    ## Quoted string
       '(?>[^'\\]*)' ## ISSUE: escape mechanism required?
    |
    ## Code
           \{$RegBlockContent\}

  )

s*)?

(?:,\s*|$)//ox) {

my ($n, $v) = ($1, $2);
if (defined $v) {
  if ($v =~ /^'/) {
    $v = {type => 'quoted',
          value => substr ($v, 1, length ($v) - 2)};
  } elsif ($v =~ /^\{/) {
    $v = {type => 'code', value => substr ($v, 1, length ($v) - 2)};
  } elsif ($v =~ /^\$/) {
    $v = {type => 'variable', value => substr $v, 1};
  } else {
    $v = {type => 'bare', value => $v};
  }
} else {
  $v = {type => 'boolean', value => 
1
};
}

if ($n =~ /^\$/) {
  $r->{$n} = $v;
} else {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r->{$nsr->
qname_to_uri

                         ($n, node => $opt{node})} = $v;
  


}


;}

;
}
} # while

if (length $paramSpec) {

report Message::Util::DIS::ManakaiDISException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_pl_parse_preprocess_parameter', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#BROKEN_PARAM_SPEC_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceCode' => $paramSpec;

;
}


}
$r}
sub _pl_get_context_parameter ($) {
my ($self) = @_;
my $r = {};

{


$r = {};


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
($self->
is_type_uri

               (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#MethodReturn'
)) {
    my $method = $self->
parent_resource
;
    $r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method'
}
       = {type => 'quoted',
          value => $method->
pl_name
};
    my $class = $method->
parent_resource
;
    $r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class'
}
       = {type => 'quoted',
          value => $class->
pl_fully_qualified_name
};
  } elsif ($self->
is_type_uri

               (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AttributeGet'
)) {
    my $attr = $self->
parent_resource
;
    $r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr'
}
       = {type => 'quoted',
          value => $attr->
pl_name
};
    my $class = $attr->
parent_resource
;
    $r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class'
}
       = {type => 'quoted',
          value => $class->
pl_fully_qualified_name
};
    $r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on'
} = {type => 'quoted', value => 'get'};
  } elsif ($self->
is_type_uri

               (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#AttributeSet'
)) {
    my $attr = $self->
parent_resource
;
    $r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr'
}
       = {type => 'quoted',
          value => $attr->
pl_name
};
    my $class = $attr->
parent_resource
;
    $r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class'
}
       = {type => 'quoted',
          value => $class->
pl_fully_qualified_name
};
    $r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on'
} = {type => 'quoted', value => 'set'};
  } else {
    $r->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#resourceURI'
} = {type => 'quoted',
                                    value => $self->
uri
};
  }



}


;}

;


}
$r}
sub pl_get_method_input_normalizer ($) {
my ($self) = @_;
my $r;

{

my 
$type;
my $type_node;


try {local $Error::Depth = $Error::Depth + 3;


  $type = $self->
dis_actual_data_type_resource
;
  $type_node = $self->
dis_actual_data_type_value
;
} catch 
Message::Util::IFLatest::DISException with 
{
  my $err = shift;
  unless ($err->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
} eq 
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_DIS_TYPE_ERR'
) {
    $err->throw;
  }
};
if ($type) {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$noinput = $type_node->
get_property

                         (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#noInputNormalize'
);
    unless ($noinput and $noinput->
value
) {
      $r = $type->
get_child_resource_by_type

                                           (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Lang#InputProcessor'
);
    }
  


}


;}

;
}


}
$r}
sub _pl_append_throw ($$$$$$$%) {
my ($self, $factory, $parentNode, $xclass, $xcode, $xsubtype, $xparam, %opt) = @_;

{

my 
$statement = $parentNode->
append_statement

  ('report '.
   $xclass->
pl_fully_qualified_name
.
   ' -object => $self');
my $xclass_module = $xclass->
owner_module
;
unless ($xclass->
is_defined or
        
not $xclass_module) {
  
report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_SOURCE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => '_pl_append_throw', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#expectedType' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#AnyExceptionClass', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#localName' => $xclass->local_name, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#RESOURCE_NOT_DEFINED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#uri' => $xclass->uri;

;
}
$xclass->
is_referred
 ($self->
uri
);
$self->
_pl_add_require_resource

                       ($xclass_module => $statement);
$xparam->{-type} = {type => 'quoted',
                    value => $xcode->
pl_name
};
$xparam->{
'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype'
}
    = {type => 'quoted',
       value => $xsubtype->
name_uri
}
  if $xsubtype;
my $db = $self->
database
;
for my $name (keys %$xparam) {
  my $pname = $name;
  my $pres = $db->
get_resource
 ($pname);
  if ($pres->
is_defined
) {
    $pname = $pres->
get_property_text

                         (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/propKey'
, $pname);
  }
  $pname =~ s/(['\\])/\\$1/g;
  $pname = qq<'$pname'>;
  $statement->
append_code

                   (', ' . $pname . ' => ');
  if ($xparam->{$name}->{type} eq 'code') {
    if (ref $xparam->{$name}->{value}) {
      $statement->
append_child
 ($xparam->{$name}->{value});
    } else {
      $statement->
append_child

               ($self->
pl_preprocess_perl_statement

                             ($factory, $xparam->{$name}->{value},
                              node => $opt{node},
                              namespace_context => $opt{namespace_context}));
    }
  } else {  ## String as is
    $statement->
append_string_literal

                   ($xparam->{$name}->{value});
  }
}


}
}
sub pl_is_nullable ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  C: 
for my $incase (@{$self->
get_child_resource_list
}) {
    next C unless $incase->
is_type_uri

                                (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#InCase'
);
    if ($incase->
dis_is_null_value or
        
$incase->
dis_actual_data_type_resource

                    ->
is_subset_of_uri
 (
'http://suika.fam.cx/~wakaba/archive/2004/dom/main#boolean'
)) {
      $r = 
1
;
      last C;
    }
  }



}


;}

;


}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::Perl::ManakaiDISResourcePerl', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_is_nullable';
}
}
sub _pl_add_require_resource ($$$) {
my ($self, $resourceArg, $codeArg) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $codeArg->
dis_add_require_uri

              ($resourceArg->
uri
);



}


;}

;


}
}
sub _pl_muf_description_text ($%) {
my ($self, %opt) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$muf = $self->
get_property_value

                     (
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/Core/defaultMessage'
);
  $muf = $muf->[0] if $muf;
  if ($muf) {
    $r = $muf->
string_value
;
    if ($muf->
data_type eq 

'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#muf'
) {
      my $nsr = $muf || $opt{node};
      $r =~ s{< Q ::([^<>]+)>}{$nsr->
qname_to_uri
 ($1, node => $muf)}gex;
    }
    $r =~ s/\s+/ /g;
    $r =~ s/^ //;
    $r =~ s/ $//;
  } else {
    my $desc = $self->
get_property_value

                        (
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Description'
);
    if ($desc) {
      my $v = $desc->
value
;
      if (UNIVERSAL::isa ($v, 
'Message::Markup::IF::SWCFGNode'
)) {
        $r = $v->
value
;
      } else {
        $r = $desc->
string_value
;
      }
      $r =~ s/\s+/ /g;
      $r =~ s/^ //;
      $r =~ s/ $//;
      $r =~ s/%/%percent;/g;
    }
  }



}


;}

;


}
$r}
$Message::DOM::DOMFeature::ClassInfo->{q<Message::Util::DIS::Perl::ManakaiDISResourcePerl>}->{has_feature} = {'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#perl',
{'',
'1',
'1.0',
'1'}};
$Message::DOM::ClassPoint{q<Message::Util::DIS::Perl::ManakaiDISResourcePerl>} = 1;
## License: <http://suika.fam.cx/~wakaba/archive/2004/8/18/license#Perl+MPL>
1;
