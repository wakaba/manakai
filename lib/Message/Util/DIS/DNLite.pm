#!/usr/bin/perl 
## This file is automatically generated
## 	at 2006-01-29T17:14:16+00:00,
## 	from file "lib/Message/Util/DIS/DNLite.dis",
## 	module <http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#DNLite>,
## 	for <http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#ForLatest>.
## Don't edit by hand!
use strict;
require Message::Markup::SuikaWikiConfig21;
require Message::Util::DIS;
require Message::Util::DIS::Perl;
require Message::Util::Error::DOMException;
require Message::Util::PerlCode;
package Message::Util::DIS::DNLite;
our $VERSION = 20060129.1714;
package Message::Util::IF::DISImplementationDNLite;
our $VERSION = 20060129.1714;
package Message::Util::DIS::DNLite::ManakaiDISImplementationDNLite;
our $VERSION = 20060129.1714;
push our @ISA, 'Message::Util::DIS::ManakaiDISImplementation', 'Message::Util::IF::DISImplementationDNLite';
sub convert_dis_document_to_dnl_document ($$%) {
my ($self, $originalDocument, %opt) = @_;
my $r;

{

my 
$cn;
$cn = sub ($$$;$) {
  my ($self, $db, $source_node => $result_parent) = @_;
  

{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$xu = $source_node->
expanded_uri
;
    if ($xu eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--For'
) {
      push @{$result_parent->{for}}, my $pr = {};
      for my $q (grep {length $_}
                 split /\s+/, $source_node->
value
) {
        my $p = '<=';
        $p = $1 if $q =~ s/^(!(?:=|<=)?|=|<=)//;
        $p = '!<=' if $p eq '!';
        my $uri = $source_node->
qname_to_uri
 ($q);
        $pr->{$uri} = {
          '' => {$p => $p},
          '<=' => {$p => $p, '!<=' => 'X', '!=' => '<'},
          '!<=' => {'<=' => 'X', '!<=' => '!<=', '<' => 'X',
                    '=' => 'X', '!=' => '!<='},
          '=' => {$p => 'X', '<=' => '=', '=' => '='},
          '!=' => {$p => $p, '<=' => '<', '=' => 'X'},
          'X' => {$p => 'X'},
        }->{$pr->{$uri} or ''}->{$p};
        $db->
get_for
 ($uri)
           ->
is_referred
 ($source_node);
      }
    } elsif ($xu eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--ForCheck'
) {
      for my $q (grep {length $_}
                 split /\s+/, $source_node->
value
) {
        my $p = '<=';
        $p = $1 if $q =~ s/^(!(?:=|<=)?|=|<=)//;
        $p = '!<=' if $p eq '!';
        my $uri = $source_node->
qname_to_uri
 ($q);
        ##       super(A)   A   sub(A)  B
        ## <A                     v
        ## <=A              v     v
        ## !<=A     v                   v
        ## =A               v
        ## !=A      v             v     v
        ## XA     
        $result_parent->{forp}->{$uri} = {
          '' => {$p => $p},
          '<=' => {$p => $p, '!<=' => 'X', '!=' => '<'},
          '!<=' => {'<=' => 'X', '!<=' => '!<=', '<' => 'X',
                    '=' => 'X', '!=' => '!<='},
          '=' => {$p => 'X', '<=' => '=', '=' => '='},
          '!=' => {$p => $p, '<=' => '<', '=' => 'X'},
          'X' => {$p => 'X'},
        }->{$result_parent->{forp}->{$uri} or ''}->{$p};
        $db->
get_for
 ($uri)
           ->
is_referred
 ($source_node);
      }
    } elsif ($xu eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--ContentType'
) {
      $result_parent->{mt} = $source_node->
qname_value_uri
;
      $db->
get_resource
 ($result_parent->{mt})
         ->
is_referred
 ($source_node);
    } else {
      my $np;
      my $a = bless {
        ns => $result_parent->{ns},
        defaultNS => $result_parent->{defaultNS},
        parentNodePath => [@{$result_parent->{parentNodePath}},
                             $result_parent->{nodePath}],
        nodePath => \$np,
      }, 
'Message::Util::DIS::DNLite::ManakaiDNLElement'
;
      push @{$result_parent->{child}||=[]}, $a;
      

{

if 
(defined $xu) {
  if (ref $xu eq 'SCALAR') {
    $a->{uri} = $xu;
  } elsif (defined $Message::Util::ManakaiStringRef::Value{$xu}) {
    $a->{uri} = $Message::Util::ManakaiStringRef::Value{$xu};
  } else {
    require Scalar::Util;
    $a->{uri} = $Message::Util::ManakaiStringRef::Value{$xu} = \($xu);
    Scalar::Util::weaken ($Message::Util::ManakaiStringRef::Value{$xu});
  }
} else {
  CORE::delete $a->{uri};
}


;}

;
      for ($source_node->
value_ref
) {
        $a->{value} = $_ if defined $_;
      }
      $a->{nodeID} = $source_node->
node_id_ref
        if 
${$a->{uri}} eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--ResourceDef'
;
      my $source_childs = $source_node->
child_nodes
;
      for (my $i = 0;
           $i < $source_childs->
length
; $i++) {
        my $source_child = $source_childs
                             ->
item
 ($i);
        $cn->($self, $db, $source_child => $a);
      }
      $np = $source_node->
real_qualified_name
;
      CEL: for my $cel (@{$a->{child}||[]}) {
        ET: for my $et (
          [
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--QName'
 => 'QName'],
          [
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Name'
 => 'Name'],
          [
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Type'
 => 'Type'],
          [
'http://www.w3.org/1999/02/22-rdf-syntax-ns#type'
 => 'type'],
        ) {
          if (${$cel->{uri}} eq $et->[0]) {
            $np .= '[@'.$et->[1].'='.
                   (defined $cel->{value} ? ${$cel->{value}} : '').']';
            next CEL;
          }
        } # ET
      } # CEL
    }
    return;
  


;}


;}

;
};


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = bless {
    ns => $originalDocument->{
'node'
}
                           ->{
'swnsb'
},
    defaultNS => \($originalDocument->
module_element

                      ->
defining_namespace_uri
),
    fileName => $originalDocument->{
'node'
}
                                 ->{
'swflag'
}
                                 ->{
'http://suika.fam.cx/~wakaba/archive/2005/swcfg21#fileName'
},
    parentNodePath => [\''],
  }, 
'Message::Util::DIS::DNLite::ManakaiDNLDocument'
;
  $r->{nodePath} = \ ('document ('.$r->{fileName}.')');
  if ($originalDocument->{
'node'
}->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#db'
}) {
    $r->
dis_database

           ($originalDocument->{
'node'
}->{
'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#db'
});
  }
  for my $source_child (@{$originalDocument->
child_nodes
}) {
    $cn->($self, $opt{database_arg}, $source_child => $r)
      if $source_child->
node_type eq 
'#element';
  }



;}


;}

;


;}
$r}
$Message::DOM::ImplFeature{q<Message::Util::DIS::DNLite::ManakaiDISImplementationDNLite>}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#dnlite>}->{q<1.0>} ||= 1;
$Message::DOM::ImplFeature{q<Message::Util::DIS::DNLite::ManakaiDISImplementationDNLite>}->{q<http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#dnlite>}->{q<>} = 1;
$Message::DOM::ClassFeature{q<Message::Util::DIS::DNLite::ManakaiDISImplementationDNLite>} = {'http://suika.fam.cx/www/2006/feature/min', {'', '1', '3.0', '1'}, 'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#minimum', {'', '1', '3.0', '1'}, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#core', {'', '1', '1.0', '1'}, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#dnlite', {'', '1', '1.0', '1'}, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#perl', {'', '1', '1.0', '1'}, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#value', {'', '1', '1.0', '1'}, 'http://suika.fam.cx/~wakaba/archive/2005/swcfg21#core', {'', '1', '2.1', '1'}};
$Message::DOM::ClassPoint{q<Message::Util::DIS::DNLite::ManakaiDISImplementationDNLite>} = 9.1;
$Message::DOM::ManakaiDOMImplementationSource::SourceClass{q<Message::Util::DIS::DNLite::ManakaiDISImplementationDNLite>} = 1;
$Message::DOM::ManakaiDOMImplementation::CompatClass{q<Message::Util::DIS::DNLite::ManakaiDISImplementationDNLite>} = 1;
$Message::Util::ManakaiNode::ManakaiNodeRef::Prop{q<Message::Util::DIS::DNLite::ManakaiDISImplementationDNLite>} = {};
package Message::Util::IF::DNLNode;
our $VERSION = 20060129.1714;
package Message::Util::DIS::DNLite::ManakaiDNLNode;
our $VERSION = 20060129.1714;
push our @ISA, 'Message::Util::DIS::ManakaiNSResolverDIS', 'Message::Util::Error::DOMException::ManakaiDefaultExceptionHandler', 'Message::Util::IF::DNLNode', 'Message::Util::IFLatest::NSResolverDIS';
sub child_nodes ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = [];

{


$r = $self->{child} || [];


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::DNLite::ManakaiDNLNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'child_nodes';
}
}
sub clone ($) {
my ($self) = @_;
my $r;

{


$r = bless {%$self}, ref $self;


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
($self->{child}) {
    $r->{child} = [];
    for my $child (@{$self->{child}}) {
      push @{$r->{child}}, $child->clone;
    }
  }



;}


;}

;


;}
$r}
sub lookup_namespace_uri ($;$) {
my ($self, $prefix) = @_;
my $r = '';

{

if 
(defined $prefix) {
  $r = $self->{ns}->{$prefix};
  if (not defined $r and $self->{ns}->{'###db'}) {
    my $db = $self->{ns}->{'###db'};
    FIND: for my $mod_uri (keys %{$db->{modDef}}) {
      my $mod = $db->
get_module
 ($mod_uri);
      if ($mod->
local_name eq 
$prefix) {
        $r = $mod->
target_namespace_uri
;
        last FIND;
      }
    }
  }
} else {
  $r = ${$self->{defaultNS}};
}


;}
$r}
sub node_id ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = defined $self->{nodeID} ? ${$self->{nodeID}} : 
undef
;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::DNLite::ManakaiDNLNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_id';
}
}
sub node_id_ref ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = $self->{nodeID};


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::DNLite::ManakaiDNLNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_id_ref';
}
}
sub node_path ($;%) {
my ($self, %opt) = @_;
my $r = '';

{


$r = join '/', map {$$_} (@{$self->{parentNodePath}}, $self->{nodePath});


;}
$r}
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = '#element';


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::DNLite::ManakaiDNLNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub owner_document ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;


$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::DNLite::ManakaiDNLNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'owner_document';
}
}
sub dis_child_elements ($%) {
my ($self, %opt) = @_;
my $r = [];

{


$r = [];


{

local $Error::Depth = $Error::Depth + 1;

{


  for 
my $cn (@{$self->{child}||[]}) {
    if ($cn->
for_match
 ($opt{for_arg}, $opt{forp_arg},
                                       database_arg => $opt{database_arg})) {
      push @$r, $cn;
    }
  }



;}


;}

;


;}
$r}
sub dis_all_child_elements ($) {
my ($self) = @_;
my $r = [];

{


$r = [@{$self->{child}||[]}];


;}
$r}
sub get_attribute_ns ($$$) {
my ($self, $namespaceURI, $localName) = @_;
my $r;

{

my 
$nm = $namespaceURI . $localName;
C: for my $cn (@{$self->{child}||[]}) {
  if (${$cn->{uri}} eq $nm) {
    $r = $cn;
    last C;
  }
}


;}
$r}
sub flag ($$) {
my ($self, $name) = @_;
my $r = '';

{

if 
($name eq 'nodePath') {
  

{

local $Error::Depth = $Error::Depth + 1;

{



    $r = $self->
node_path
;
  


;}


;}

;
} else {
  $r = $self->{fileName};
}


;}
$r}
sub value ($) {
my ($self) = @_;
my $r = '';

{


$r = defined $self->{value} ? ${$self->{value}} : 
undef
;


;}
$r}
sub value_ref ($) {
my ($self) = @_;
my $r;

{


$r = $self->{value};


;}
$r}
sub owner_dis_document ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;


$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::DNLite::ManakaiDNLNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'owner_dis_document';
}
}
sub prefix_to_uri ($;$%) {
my ($self, $prefix, %opt) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = $self->
lookup_namespace_uri
 ($prefix);



;}


;}

;
unless (defined $r) {
  
report Message::Markup::SuikaWikiConfig21::ManakaiSWCFGException -object => $self, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#sourceNode' => $opt{node}, '-type' => 'NAMESPACE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#method' => 'prefix_to_uri', 'http://www.w3.org/2001/04/infoset#prefix' => $prefix, 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#UNDECLARED_NS_PREFIX_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::DNLite::ManakaiDNLNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#param-name' => 'prefix';

;
}


;}
$r}
sub qname_value_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
(defined $self->{value}) {
    $r = $self->
qname_to_uri
 (${$self->{value}});
  } else {
    $r = 
undef
;
  }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::DNLite::ManakaiDNLNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'qname_value_uri';
}
}
sub qname_value_local_name ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$v = $self->
value
;
  if (defined $v and not ref $v eq 'ARRAY') {
    my ($n, $v) = split /\s*[:|]\s*/, $v, 2;
    $r = defined $v ? $v : $n;
  } else {
    $r = 
undef
;
  }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::DNLite::ManakaiDNLNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'qname_value_local_name';
}
}
sub qname_value_prefix ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$v = $self->
value
;
  if (defined $v and not ref $v eq 'ARRAY') {
    my ($p, $l) = split /\s*[:|]\s*/, $v, 2;
    $r = defined $l ? $p : 
undef
;
  } else {
    $r = 
undef
;
  }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::DNLite::ManakaiDNLNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'qname_value_prefix';
}
}
sub qname_value_namespace_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$v = $self->
value
;
  if (defined $v and not ref $v eq 'ARRAY') {
    my ($p, $v) = split /\s*[:|]\s*/, $v, 2;
    $r = $self->
prefix_to_uri

                                    (defined $v ? $p : 
undef
);
  } else {
    $r = 
undef
;
  }



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::DNLite::ManakaiDNLNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'qname_value_namespace_uri';
}
}
sub tfqnames_value_uri ($;$$%) {
my ($self, $defaultTypeURI, $defaultForURI, %opt) = @_;
my $r;

{

my 
$v = $self->
value
;
if (defined $v and not ref $v eq 'ARRAY') {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    if 
($self->
media_type_match

                         (
'http://suika.fam.cx/~wakaba/archive/2004/dis/Core#TFPQNames'
, 
'http://suika.fam.cx/~wakaba/archive/2004/dis/Core#TFPQNames'
,
                          for_arg => $opt{for_arg}, forp_arg => $opt{forp_arg},
                          database_arg => $opt{database_arg})) {
      $r = $self->
tfpqnames_to_uri

                          ($v, $defaultTypeURI, $defaultForURI,
                           node => $self);
    } else {
      $r = $self->
tfqnames_to_uri

                          ($v, $defaultTypeURI, $defaultForURI,
                           node => $self);
    }
  


;}


;}

;
} else {
  $r = 
undef
;
}


;}
$r}
sub element_type_match ($$;%) {
my ($self, $etype, %opt) = @_;
my $r = 0;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$et = $self->
expanded_uri
;
  my $rdef = $opt{database_arg}->
get_resource
 ($et);
  $r = $rdef->
is_subset_of_uri
 ($etype);



;}


;}

;


;}
$r}
sub is_resource_element ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = 0;

{


{

local $Error::Depth = $Error::Depth + 1;

{



  $r = (${$self->{uri}} eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--ResourceDef'
);



;}


;}

;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::DNLite::ManakaiDNLNode', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'is_resource_element';
}
}
sub is_property_element ($;%) {
my ($self, %opt) = @_;
my $r = 0;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  my 
$xn = $self->
expanded_uri
;
  if ($xn eq 
'http://www.w3.org/1999/02/22-rdf-syntax-ns#type'
) {
    $r = 
1
;
  } else {
    my $rdef = $opt{database_arg}->
get_resource
 ($xn);
    $r = $rdef->
is_type_uri
 (
'http://www.w3.org/1999/02/22-rdf-syntax-ns#Property'
);
  }



;}


;}

;


;}
$r}
sub unlink_from_document ($$) {
my ($self, $databaseArg) = @_;

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
($self->{ns}->{'###db'}) {
    $databaseArg ||= $self->{ns}->{'###db'};
    CORE::delete $self->{ns}->{'###db'};
    if ($databaseArg) {
      for my $mod_uri (keys %{$databaseArg->{modDef}}) {
        my $mod = $databaseArg->
get_module

                                        ($mod_uri);
        my $prefix = $mod->
local_name
;
        $self->{ns}->{$prefix}
          = $mod->
target_namespace_uri
          unless 
defined $self->{ns}->{$prefix};
      }
    }
  }



;}


;}

;


;}
}
sub preserve_node_path ($) {
my ($self) = @_;


}
sub free ($) {
my ($self) = @_;


}
sub add_namespace_binding ($$;$) {
my ($self, $prefix, $namespaceURI) = @_;

{

if 
(defined $namespaceURI) {
  $self->{ns}->{$prefix} = $namespaceURI;
} else {
  CORE::delete $self->{ns}->{$prefix};
}


;}
}
sub get_default_namespace_uri_ref ($) {
my ($self) = @_;
my $r;

{


$r = $self->{defaultNS};


;}
$r}
sub get_namespace_binding_list ($$) {
my ($self, $databaseArg) = @_;
my $r = {};

{


{

local $Error::Depth = $Error::Depth + 1;

{


  if 
($self->{ns}->{'###db'}) {
    $databaseArg ||= $self->{ns}->{'###db'};
    CORE::delete $self->{ns}->{'###db'};
    if ($databaseArg) {
      for my $mod_uri (keys %{$databaseArg->{modDef}}) {
        my $mod = $databaseArg->
get_module

                                        ($mod_uri);
        my $prefix = $mod->
local_name
;
        $self->{ns}->{$prefix}
          = $mod->
target_namespace_uri
          unless 
defined $self->{ns}->{$prefix};
      }
    }
  }



;}


;}

;
$r = $self->{ns};


;}
$r}
$Message::DOM::ClassFeature{q<Message::Util::DIS::DNLite::ManakaiDNLNode>} = {'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#core', {'', '1', '1.0', '1'}, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#dnlite', {'', '1', '1.0', '1'}};
$Message::DOM::ClassPoint{q<Message::Util::DIS::DNLite::ManakaiDNLNode>} = 2;
package Message::Util::IF::DNLDocument;
our $VERSION = 20060129.1714;
package Message::Util::DIS::DNLite::ManakaiDNLDocument;
our $VERSION = 20060129.1714;
push our @ISA, 'Message::Util::DIS::DNLite::ManakaiDNLNode', 'Message::Util::IF::DNLDocument', 'Message::Util::IF::DNLNode', 'Message::Util::IFLatest::NSResolverDIS';
sub node_type ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = '#document';


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::DNLite::ManakaiDNLDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'node_type';
}
}
sub module_element ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{

M: 
for my $n (@{$self->{child}||[]}) {
  if (${$n->{uri}} eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Module'
) {
    $r = $n;
    last M;
  }
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::DNLite::ManakaiDNLDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'module_element';
}
}
sub dis_database ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = $self->{db} or do {
  
report Message::Util::DIS::ManakaiDISException -object => $self, '-type' => 'INVALID_STATE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#NO_ASSOCIATED_DB_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::DNLite::ManakaiDNLDocument', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'dis_database';

;
};


;}
$r;
} else {my ($self, $given) = @_;

{

if 
(defined $given) {
  $self->{db} = $given;
  $self->{ns}->{'###db'} = $given;
  require Scalar::Util;
  Scalar::Util::weaken ($self->{db});
  Scalar::Util::weaken ($self->{ns}->{'###db'});
} else {
  CORE::delete $self->{db};
  CORE::delete $self->{ns}->{'###db'};
}


;}
}
}
$Message::DOM::ClassFeature{q<Message::Util::DIS::DNLite::ManakaiDNLDocument>} = {'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#core', {'', '1', '1.0', '1'}, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#dnlite', {'', '1', '1.0', '1'}};
$Message::DOM::ClassPoint{q<Message::Util::DIS::DNLite::ManakaiDNLDocument>} = 2;
package Message::Util::IF::DNLElement;
our $VERSION = 20060129.1714;
package Message::Util::DIS::DNLite::ManakaiDNLElement;
our $VERSION = 20060129.1714;
push our @ISA, 'Message::Util::DIS::DNLite::ManakaiDNLNode', 'Message::Util::DIS::Perl::ManakaiDISElementPerl', 'Message::Util::IF::DNLElement', 'Message::Util::IF::DNLNode', 'Message::Util::IFLatest::NSResolverDIS';
sub preserve_node_path ($) {
my ($self) = @_;


}
sub require_element ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{

M: 
for my $n (@{$self->{child}||[]}) {
  if (${$n->{uri}} eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Require'
) {
    $r = $n;
    last M;
  }
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::DNLite::ManakaiDNLElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'require_element';
}
}
sub default_for_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

M: 
for my $n (@{$self->{child}||[]}) {
  if (${$n->{uri}} eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--DefaultFor'
) {
    

{

local $Error::Depth = $Error::Depth + 1;

{



      $r = $n->
qname_value_uri if 
defined $n->{value};
    


;}


;}

;
    last M;
  }
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::DNLite::ManakaiDNLElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'default_for_uri';
}
}
sub defining_namespace_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{

M: 
for my $n (@{$self->{child}||[]}) {
  if (${$n->{uri}} eq 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--Namespace'
) {
    $r = ${$n->{value}} if defined $n->{value};
    last M;
  }
}


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::DNLite::ManakaiDNLElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'defining_namespace_uri';
}
}
sub for_match ($$;$%) {
my ($self, $forArg, $forpArg, %opt) = @_;
my $r = 0;

{


$forArg = 
'http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#all' unless 
defined $forArg;
$forpArg ||= [];

FORMATCH: {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$for_res = $opt{database_arg}->
get_for
 ($forArg);
    my $forp_res = [map {
                          $opt{database_arg}->
get_for
 ($_)
                        } @{$forpArg}];

    FCs: for my $uri (keys %{$self->{forp}||{}}) {
      my $p = $self->{forp}->{$uri};
      if ($p eq '<=') {
        for my $arg_res ($for_res, @{$forp_res}) {
          if ($arg_res->
isa_uri
 ($uri)) {
            next FCs;
          }
        }
        last FORMATCH;
      } elsif ($p eq '<') {
        my $for = $opt{database_arg}->
get_for
 ($uri);
        for my $arg_res ($for_res, @{$forp_res}) {
          if (not ($arg_res eq $for) and
              $arg_res->
isa_uri
 ($uri)) {
            next FCs;
          }
        }
        last FORMATCH;
      } elsif ($p eq '!<=') {
        for my $arg_res ($for_res, @{$forp_res}) {
          if ($arg_res->
isa_uri
 ($uri)) {
            last FORMATCH;
          }
        }
      } elsif ($p eq '=') {
        my $for = $opt{database_arg}->
get_for
 ($uri);
        for my $arg_res ($for_res, @{$forp_res}) {
          if ($arg_res eq $for) {
            next FCs;
          }
        }
        last FORMATCH;
      } elsif ($p eq '!=') {
        my $for = $opt{database_arg}->
get_for
 ($uri);
        for my $arg_res ($for_res, @{$forp_res}) {
          if ($arg_res eq $for) {
            last FORMATCH;
          }
        }
      }
    } # FCs

    for my $fors (@{$self->{for}||[]}) {
      my $ok = 
1
;
      AFOR: for my $uri (keys %{$fors}) {
        my $p = $fors->{$uri};
        if ($p eq '<=') {
          unless ($for_res->
isa_uri
 ($uri)) {
            $ok = 
0
;
            last AFOR;
          }
        } elsif ($p eq '<') {
          my $for = $opt{database_arg}->
get_for
 ($uri);
          unless (not ($for_res eq $for) and
                  $for_res->
isa_uri
 ($uri)) {
            $ok = 
0
;
            last AFOR;
          }
        } elsif ($p eq '!<=') {
          if ($for_res->
isa_uri
 ($uri)) {
            $ok = 
0
;
            last AFOR;
          }
        } elsif ($p eq '=') {
          my $for = $opt{database_arg}->
get_for
 ($uri);
          unless ($for_res eq $for) {
            $ok = 
0
;
            last AFOR;
          }
        } elsif ($p eq '!=') {
          my $for = $opt{database_arg}->
get_for
 ($uri);
          if ($for_res eq $for) {
            $ok = 
0
;
            last AFOR;
          }
        }
      } # AFOR
      if ($ok) {
        $r = 
1
;
        last FORMATCH;
      }
    } # fors
    $r = @{$self->{for}||[]} ? 
0 : 

1
;
  


;}


;}

;
} # FORMATCH


;}
$r}
sub media_type_match ($$;$%) {
my ($self, $mediaType, $defaultMediaType, %opt) = @_;
my $r = 0;

{

if 
(defined $mediaType) {
  

{

local $Error::Depth = $Error::Depth + 1;

{


    my 
$res = $opt{database_arg}->
get_resource

                 (defined $self->{mt} ? $self->{mt} : $defaultMediaType);
    $r = $res->
is_subset_of_uri
 ($mediaType);
  


;}


;}

;
} else {
  $r = 
1
;
}


;}
$r}
sub media_type_uri ($%) {
my ($self, %opt) = @_;
my $r;

{


$r = $self->{mt};
$r = $opt{default_media_type} unless defined $r;


;}
$r}
sub expanded_uri ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r = '';

{


$r = ${$self->{uri}};


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::DNLite::ManakaiDNLElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'expanded_uri';
}
}
sub dis_get_attribute ($$%) {
my ($self, $attrName, %opt) = @_;
my $r;

{

C: 
for my $c (@{$self->
dis_child_elements

                          (for_arg => $opt{for_arg}, forp_arg => $opt{forp_arg},
                           database_arg => $opt{database_arg})}) {
  if (${$c->{uri}} eq $attrName and
      $c->
media_type_match

                          ($opt{media_type}, $opt{default_media_type},
                           for_arg => $opt{for_arg}, forp_arg => $opt{forp_arg},
                           database_arg => $opt{database_arg})) {
    $r = $c;
    last C;
  }
}


;}
$r}
sub pl_implementation ($;$) {
if (@_ == 1) {my ($self) = @_;
my $r;

{


$r = 
Message::Util::PerlCode::ManakaiPCImplementation
->_new;


;}
$r;
} else {my ($self) = @_;
report Message::Util::Error::DOMException::CoreException -object => $self, '-type' => 'NO_MODIFICATION_ALLOWED_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#on' => 'get', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#subtype' => 'http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/Error/DOMException#READ_ONLY_ATTRIBUTE_ERR', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#class' => 'Message::Util::DIS::DNLite::ManakaiDNLElement', 'http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#attr' => 'pl_implementation';
}
}
$Message::DOM::ClassFeature{q<Message::Util::DIS::DNLite::ManakaiDNLElement>} = {'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#core', {'', '1', '1.0', '1'}, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#dnlite', {'', '1', '1.0', '1'}, 'http://suika.fam.cx/~wakaba/archive/2005/manakai/util/dis#perl', {'', '1', '1.0', '1'}};
$Message::DOM::ClassPoint{q<Message::Util::DIS::DNLite::ManakaiDNLElement>} = 3;
for ($Message::Util::IFLatest::NSResolverDIS::){}
## License: <http://suika.fam.cx/~wakaba/archive/2004/8/18/license#Perl+MPL>
1;
