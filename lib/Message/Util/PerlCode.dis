Module:
  @QName:
    Util:PerlCode
  @FullName:
    @@lang: en
    @@@:
      Perl Code Constructor
  @Namespace:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#
  
  @Description:
    @@lang:en
    @@@:
      This module provides an object-oriented interface to construct 
      Perl code. 

  @Author:
    @@FullName: Wakaba
    @@Mail: w@suika.fam.cx
  @License:
    @@@:
      license:Perl+MPL
    @@Original:
      @@@FullName:
        manakai <CODE::lib/manakai/genlib.pl>
      @@@Year:2004
      @@@Author:
        @@@@FullName:Wakaba
        @@@@Mail:w@suika.fam.cx
  @Date:
    @@@:
      $Date: 2005/03/06 11:12:42 $
    @@ContentType:
      dis:Date.RCS
  
  @Require:
    @@Module:
      @@@Name: ManakaiNode
      @@@WithFor:
        ManakaiDOM:Perl
    @@Module:
      @@@Name: DOMBoot
      @@@QName: 
        MDOM:DOMBoot
      @@@WithFor:
        ManakaiDOM:ManakaiDOMLatest
    @@Module:
      @@@Name: DOMMetaImpl
      @@@QName:
        MDOM:DOMMetaImpl
      @@@WithFor:
        ManakaiDOM:ManakaiDOMLatest

  @DefaultFor: 
    ManakaiDOM:Perl

Namespace:
  @DIS:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/DIS#
  @dis:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#dis--
  @dis2pm:
    http://suika.fam.cx/~wakaba/archive/2004/11/8/dis2pm#
  @DISlib:
    http://suika.fam.cx/~wakaba/archive/2004/dis/
  @DOMCore:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/dom-core#
  @DOMLS:
    http://suika.fam.cx/~wakaba/archive/2004/dom/ls#
  @DOMMain:
    http://suika.fam.cx/~wakaba/archive/2004/dom/main#
  @infoset:
    http://www.w3.org/2001/04/infoset#
  @lang:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#
  @license:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/license#
  @ManakaiDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#
  @Markup:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Markup#
  @MDOM:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/manakai-dom#ManakaiDOM.
  @MDOMX:
    http://suika.fam.cx/~wakaba/archive/2004/8/4/manakai-dom-exception#
  @owl:
    http://www.w3.org/2002/07/owl#
  @pc:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/PerlCode#
  @Perl:
    http://suika.fam.cx/~wakaba/archive/2004/8/18/lang#Perl--
  @rdf:
    http://www.w3.org/1999/02/22-rdf-syntax-ns#
  @rdfs:
    http://www.w3.org/2000/01/rdf-schema#
  @swcfg21:
    http://suika.fam.cx/~wakaba/archive/2005/swcfg21#
  @TreeCore:\
  @Util:
    http://suika.fam.cx/~wakaba/archive/2005/manakai/Util/

## -- Features

ElementTypeBinding:
  @Name: FeatureDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DOMMain:DOMFeature
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:all
      @@@For:
        !=ManakaiDOM:all

ElementTypeBinding:
  @Name: FeatureVerDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DOMMain:DOMFeature

ElementTypeBinding:
  @Name: featureQName
  @ElementType:
    dis:AppName
  @ShadowContent:
    @@ContentType:
      dis:TypeQName

FeatureDef:
  @QName: CoreFeature
  @featureQName:
    Util:PerlCode
  @FeatureVerDef:
    @@QName: CoreFeature10
    @@Version: 1.0
    @@ISA: CoreFeature
    @@FullName:
      @@@lang:en
      @@@@:
        Perl Code Constructor, version 1.0
    @@Description:
      @@@lang:en
      @@@@:
        Perl Code Constructor, version 1.0.

## -- Classes

ClsDef:
  @ClsQName: ManakaiPerlCodeFragment
  @ClsISA:
    ManakaiDOM:ManakaiDOMNodeReference::ManakaiDOM:Perl
  @enDesc:
    A class on which another Perl code classes are constructed based. 

  @IntMethod:
    @@Operator:
      @@@@:
        ManakaiDOM:MUErrorHandler
      @@@ContentType:
        dis:TypeQName
    @@Description:
      @@@lang:en
      @@@@:
        This method is a generic error handler; all manakai exceptions 
        and warnings associated to an object are once reported to this method 
        and then delivered to appropriate entities. 
        \
        If the error is an exception (such as <X::DOMCore:DOMException> or 
        <X::ManakaiDOM:ManakaiDOMImplementationException>), it is 
        simply thrown.  If the error is only a warning, it is reported 
        via the <IF::DOMCore:DOMError> interface. 
        \
        See <PerlModule::Message::Util::Error> documentation for more 
        information on the error reporting mechanism.
        \
        {NOTE:: This kind of methods are named as <Perl::___report_error> 
                in the convention of <PerlModule::Message::Util::Error>. 
        \
        }
    @@Param:
      @@@Name:err
      @@@Type: 
        ManakaiDOM:ManakaiDOMExceptionOrWarning::ManakaiDOM:Perl
      @@@Description:
        @@@@lang:en
        @@@@@:
          An exception object that describes what kind of error it is 
          and how it should be recovered. 
          \
          {NOTE:: Exception objects in manakai implementation 
                  inherit the class <PerlModule::Message::Util::Error>, 
                  that in turn inherits <PerlModule::Error>.
          \
          }
    @@Return:
      @@@PerlDef:
          if ($err->isa (<ClassName::ManakaiDOM:ManakaiDOMException
                                   ::ManakaiDOM:Perl>)) {
            $err->throw;
          } else {
            \## TODO: Implement warning reporting
            warn $err->stringify;
          }

  @Attr:
    @@Name: parentNode
    @@enDesc:
      The parent construction of this object. 
    @@Get:
      @@@Type: ManakaiPerlCodeFragment
      @@@nullCase:
        @@@@enDesc:
          This object has no parent. 
      @@@PerlDef:
        $r = $self->{<Q::TreeCore:node>}->{<Q::pc:parent>};
        $r = $r-><M::ManakaiDOM:ManakaiDOMNodeObject
                   ::ManakaiDOM:Perl.newReference>
                         (<ClassName::ManakaiPerlSub>) if $r;        
##PerlCodeFragment

ClsDef:
  @ClsQName: ManakaiPerlFile
  @ClsISA: ManakaiPerlCodeFragment
  @enDesc:
    Perl source code files.

  @IntMethod:
    @@Name:newObject
    @@ManakaiDOM:isStatic:1
    @@Description:
      @@@lang:en
      @@@@:
        Creates a new instance object for <Class::ManakaiPerlFile>. 
    @@Return:
      @@@Type:
        ManakaiDOM:ManakaiDOMNodeObject::ManakaiDOM:Perl
      @@@Description:
        @@@@lang:en
        @@@@@:
          The newly created node object.
      @@@PerlDef:
        @@@@@:
          my $node = $r = <ClassM::ManakaiDOM:ManakaiDOMNodeObject
                                        ::ManakaiDOM:Perl.new>;
          push @{$node->{<Q::TreeCore:subnode>}}, <Q::pc:childNodes>;
          $node->{<Q::pc:childNodes>} = [];
          $node->{<Q::pc:sourceFile>} = '';
          $node->{<Q::pc:sourceModule>} = '';
          $node->{<Q::pc:sourceFor>} = '';
          $node->{<Q::pc:currentPackage>} = 'main';
          $node->{<Q::pc:currentChunk>} = 0;
        @@@@ImplNote:
          @@@@@lang:en
          @@@@@@:
            Properties: <Q::pc:sourceFile>,
               <Q::pc:sourceModule>, <Q::pc:sourceFor>, <Q::childNodes>, 
               <Q::pc:currentPackage>, <Q::pc:currentChunk>.

  @Method:
    @@Name: appendNewPackage
    @@enDesc:
      Appends a new package scope block. 
    @@Param:
      @@@Name: packageName
      @@@Type:
        Perl:package-name::ManakaiDOM:all
      @@@enDesc:
        The fully-qualified name of the package to create. 
    @@Return:
      @@@Type: ManakaiPerlPackageScope
      @@@enDesc:
        The newly created package scope object. 
      @@@PerlDef:
        $r = <ClassM::ManakaiPerlPackageScope.newObject>;
        $r->{<Q::pc:packageName>} = $packageName;
        $self->{<Q::TreeCore:node>}
             -><M::ManakaiDOM:ManakaiDOMNodeObject::ManakaiDOM:Perl
                            .importTree> ($r);
        push @{$self->{<Q::TreeCore:node>}->{<Q::pc:childNodes>}}, $r;
        $r->{<Q::pc:parent>} = $self->{<Q::TreeCore:node>};
        $r = $r-><M::ManakaiDOM:ManakaiDOMNodeObject
                   ::ManakaiDOM:Perl.newReference>
                         (<ClassName::ManakaiPerlPackageScope>);
        

  @Method:
    @@Name: getFirstPackage
    @@enDesc:
      Gets the first package scope block of a name. 
    @@Param:
      @@@Name: packageName
      @@@@Type:
        Perl:package-name::ManakaiDOM:all
      @@@@enDesc:
        The fully-qualified name of the package to get. 
    @@NamedParam:
      @@@Name: makeNewPackage
      @@@Type:
        DOMMain:boolean
      @@@enDesc:
        Whether a new package scope object should be created if 
        no package of <P::packageName> found. 
      @@@TrueCase:
        @@@@enDesc:
          Makes a new object if not found. 
      @@@FalseCase:
        @@@@enDesc:
          Don't make a new object. 
    @@Return:
      @@@Type: ManakaiPerlPackageScope
      @@@enDesc:
        The first package scope object whose name is equal to 
        <P::packageName>.
      @@@nullCase:
        @@@@enDesc:
          There is no <P::packageName> package object and 
          the <P::makeNewPackage> parameter is set to <DOM::false>. 
      @@@PerlDef:
        for my $cn (@{$self->{<Q::TreeCore:node>}->{<Q::pc:childNodes>}}) {
          if ($cn->{<Q::pc:packageName>} eq $packageName) {
            $r = $cn;
            last;
          }
        }
        if ($r) {
          $r = $r-><M::ManakaiDOM:ManakaiDOMNodeObject
                   ::ManakaiDOM:Perl.newReference>
                         (<ClassName::ManakaiPerlPackageScope>);
        } elsif ($makeNewPackage) {
          __DEEP{
            $r = $self-><M::ManakaiPerlFile.appendNewPackage> ($packageName);
          }__;
        }

  @Method:
    @@Name: getLastPackage
    @@enDesc:
      Gets the last package scope block of a name. 
    @@Param:
      @@@Name: packageName
      @@@@Type:
        Perl:package-name::ManakaiDOM:all
      @@@@enDesc:
        The fully-qualified name of the package to get. 
    @@NamedParam:
      @@@Name: makeNewPackage
      @@@Type:
        DOMMain:boolean
      @@@enDesc:
        Whether a new package scope object should be created if 
        no package of <P::packageName> found. 
      @@@TrueCase:
        @@@@enDesc:
          Makes a new object if not found. 
      @@@FalseCase:
        @@@@enDesc:
          Don't make a new object. 
    @@Return:
      @@@Type: ManakaiPerlPackageScope
      @@@enDesc:
        The last package scope object whose name is equal to 
        <P::packageName>.
      @@@nullCase:
        @@@@enDesc:
          There is no <P::packageName> package object and 
          the <P::makeNewPackage> parameter is set to <DOM::false>. 
      @@@PerlDef:
        for my $cn (reverse @{$self->{<Q::TreeCore:node>}
                                   ->{<Q::pc:childNodes>}}) {
          if ($cn->{<Q::pc:packageName>} eq $packageName) {
            $r = $cn;
            last;
          }
        }
        if ($r) {
          $r = $r-><M::ManakaiDOM:ManakaiDOMNodeObject
                   ::ManakaiDOM:Perl.newReference>
                         (<ClassName::ManakaiPerlPackageScope>);
        } elsif ($makeNewPackage) {
          __DEEP{
            $r = $self-><M::ManakaiPerlFile.appendNewPackage> ($packageName);
          }__;
        }

  @Attr:
    @@Name: length
    @@enDesc:
      The number of child code fragments. 
    @@Type:
      DOMMain:unsigned-long
    @@Get:
      @@@PerlDef:
        $r = @{$self->{<Q::TreeCore:node>}->{<Q::pc:childNodes>}};

  @Attr:
    @@Name: sourceFile
    @@enDesc:
      The file name of the source file from which this 
      Perl code is primary generated. 
    @@Get:
      @@@Type:
        DISLang:String
      @@@disDef:
        @@@@GetProp: sourceFile
    @@Set:
      @@@Type:
        DISLang:String
      @@@disDef:
        @@@@SetProp: sourceFile

  @Attr:
    @@Name: sourceModule
    @@enDesc:
      The name URI reference of the source module that this package defines.
    @@Get:
      @@@Type:
        DISLang:String
      @@@disDef:
        @@@@GetProp: sourceModule
    @@Set:
      @@@Type:
        DISLang:String
      @@@disDef:
        @@@@SetProp: sourceModule

  @Attr:
    @@Name: sourceFor
    @@enDesc:
      The URI reference of the source module <QUOTE::for> for which this 
      package is. 
    @@Get:
      @@@Type:
        DISLang:String
      @@@disDef:
        @@@@GetProp: sourceFor
    @@Set:
      @@@Type:
        DISLang:String
      @@@disDef:
        @@@@SetProp: sourceFor

  @ToStringMethod:
    @@Return:
      @@@Type:
        DISLang:String
      @@@enDesc:
        The Perl code generated. 
      @@@PerlDef:
        __DEEP{
          my $node = $self->{<Q::TreeCore:node>};
          ## -- Header
          $r = qq<#!/usr/bin/perl \n>;
          $r .= <ClassM::ManakaiPerlCodeImplementation.perlComment>
                  (q<This file is automatically generated>);
          $r .= <ClassM::ManakaiPerlCodeImplementation.perlComment>
                 (q<	at >.<ClassM::ManakaiPerlCodeImplementation
                                           .rfc3339DateTime> (time).q<,>);
          $r .= <ClassM::ManakaiPerlCodeImplementation.perlComment>
                  (q<	from file ">.$node->{<Q::sourceFile>}.q<",>);
          $r .= <ClassM::ManakaiPerlCodeImplementation.perlComment>
                  (q[	module <].$node->{<Q::sourceModule>}.q[>,]);
          $r .= <ClassM::ManakaiPerlCodeImplementation.perlComment>
                  (q[	for <].$node->{<Q::sourceFor>}.q[>.]);
          $r .= <ClassM::ManakaiPerlCodeImplementation.perlComment>
                  (q<Don't edit by hand!>);
          $r .= qq<use strict;\n>;
          $self-><AS::ManakaiPerlFile.currentPackage> ('main');
          $self-><AS::ManakaiPerlFile.currentChunk> (0);

          ## -- Packages
          my $pack = {};
          for my $sp (@{$node->{<Q::pc:childNodes>}}) {
            my $spe = $sp-><M::ManakaiDOM:ManakaiDOMNodeObject
                             ::ManakaiDOM:Perl.newReference>
                                 (<ClassName::ManakaiPerlPackageScope>);
            $r .= $spe->stringify;
            for my $ipack (keys %{$sp->{<Q::dis:Implement>}}) {
              $pack->{$ipack} ||= true; # not defined
            }
            $pack->{$sp->{<Q::pc:packageName>}} = []; # defined
          }

          ## -- Enables interface packages
          my @packs = map {'$' . $_ . '::'}
                      grep {not ref $pack->{$_} and $pack->{$_}}
                      keys %$pack;
          $r .= q<for (>. join (', ', @packs) . qq<){}\n> if @packs;

          ## -- Footer
          $r .= <ClassM::ManakaiPerlCodeImplementation.perlComment>
                  (q[License: <].$node->{<Q::dis:License>}.qq[>\n]);
          $r .= qq<1;\n>;
        }__;

  @Attr:
    @@Name: currentPackage
    @@enDesc:
      The current Perl package (used in stringify method).
    @@Type:
      Perl:package-name::ManakaiDOM:all
    @@Get:
      @@@disDef:
        @@@@GetProp: currentPackage
    @@Set:
      @@@disDef:
        @@@@SetProp: currentPackage

  @Attr:
    @@Name: currentChunk
    @@enDesc:
      The current code chunk (used in stringify method). 
    @@Type:
      DOMMain:unsigned-long::ManakaiDOM:all
    @@Get:
      @@@disDef:
        @@@@GetProp: currentChunk
    @@Set:
      @@@disDef:
        @@@@SetProp: currentChunk
  
  @Attr:
    @@Name: licenseURI
    @@enDesc:
      The license term URI reference for this code. 
    @@Type:
      DISLang:String::ManakaiDOM:all
    @@Get:
      @@@disDef:
        @@@@GetProp: 
          dis:License
    @@Set:
      @@@disDef:
        @@@@SetProp:
          dis:License
##PerlFile

PropDef:
  @QName: sourceModule
  @enDesc:
    The soruce module name URI reference. 

PropDef:
  @QName: sourceFor
  @enDesc:
    The source module <QUOTE::for> URI reference. 

PropDef:
  @QName: currentPackage
  @enDesc:
    The current Perl package name (used for stringify).

PropDef:
  @QName: currentChunk
  @enDesc:
    The current code chunk (used for stringify). 

ClsDef:
  @ClsQName: ManakaiPerlPackageScope
  @ClsISA: ManakaiPerlCodeFragment

  @Attr:
    @@Name: packageName
    @@Type:
      Perl:package-name
    @@enDesc:
      The fully-qualified package name. 
    @@Get: 
      @@@disDef:
        @@@@GetProp: packageName

  @IntMethod:
    @@Name:newObject
    @@ManakaiDOM:isStatic:1
    @@Description:
      @@@lang:en
      @@@@:
        Creates a new instance object for <Class::ManakaiPerlPackageScope>. 
    @@Return:
      @@@Type:
        ManakaiDOM:ManakaiDOMNodeObject::ManakaiDOM:Perl
      @@@Description:
        @@@@lang:en
        @@@@@:
          The newly created node object.
      @@@PerlDef:
        @@@@@:
          my $node = $r = <ClassM::ManakaiDOM:ManakaiDOMNodeObject
                                        ::ManakaiDOM:Perl.new>;
          push @{$node->{<Q::TreeCore:subnode2>}}, <Q::pc:sub>,
                                                 <Q::dis2pm:overload>;
          push @{$node->{<Q::TreeCore:origin>}}, <Q::pc:parent>;
          $node->{<Q::pc:sub>} = {};
          $node->{<Q::dis:ISA>} = [];
          $node->{<Q::dis:Implement>} = {};
          $node->{<Q::dis2pm:overload>} = {};

  @Method:
    @@Name: getSub
    @@enDesc:
      Gets a subroutine. 
    @@Param:
      @@@Name: subName
      @@@Type:
        DISPerl:SubName::ManakaiDOM:all
      @@@enDesc:
        The name of subroutine to get. 
    @@NamedParam:
      @@@Name: makeNewNode
      @@@Type:
        DOMMain:boolean
      @@@enDesc:
        Whether a new subroutine object should be created, 
        if it is not exist, or not. 
    @@Return:
      @@@Type: ManakaiPerlSub
      @@@enDesc:
        The subroutine object. 
      @@@nullCase:
        @@@@enDesc:
          Either the specified subroutine is not found and 
          the <P::makeNewNode> parameter is set to <DOM::false> or
          the subroutine is defined as an alias. 
      @@@PerlDef:
        if ($self->{<Q::TreeCore:node>}->{<Q::pc:sub>}->{$subName}) {
          $r = ref $self->{<Q::TreeCore:node>}->{<Q::pc:sub>}->{$subName}
             ? $self->{<Q::TreeCore:node>}->{<Q::pc:sub>}->{$subName} : null;
        } elsif ($makeNewNode) {
          $r = $self->{<Q::TreeCore:node>}->{<Q::pc:sub>}->{$subName}
             = <ClassM::ManakaiPerlSub.newObject>;
          $self->{<Q::TreeCore:node>}
               -><M::ManakaiDOM:ManakaiDOMNodeObject
                   ::ManakaiDOM:Perl.importTree> ($r);
          $r->{<Q::pc:parent>} = $self->{<Q::TreeCore:node>};
          $r->{<Q::pc:localName>} = $subName;
        }
        $r = $r-><M::ManakaiDOM:ManakaiDOMNodeObject
                   ::ManakaiDOM:Perl.newReference>
                         (<ClassName::ManakaiPerlSub>) if $r;

  @Method:
    @@Name: setSub
    @@enDesc:
      Sets a subrotine. 
    @@Param:
      @@@Name: subName
      @@@Type:
        DISLang:String::ManakaiDOM:all
      @@@enDesc:
        The name of the subroutine. 
        \
        {NOTE:: The <P::subName> value must be equal to the 
                <A::ManakaiPerlSub.localName> of the <P::subArg>.
    @@Param:
      @@@Name: subArg
      @@@Type: ManakaiPerlSub
      @@@enDesc:
        The subroutine object.
    @@Return:
      @@@RaiseException:
        @@@@@:IN_USE_NODE_ERR
        @@@@enDesc:
          An attempt is made to set a subroutine that is 
          already used elsewhere. 
      @@@PerlDef:
        my $ops = $self->{<Q::TreeCore:node>}->{<Q::pc:sub>};
        if (ref $ops->{$subName}) {
          CORE::delete $ops->{<Q::pc:parent>};
          $ops->{$subName}
              -><M::ManakaiDOM:ManakaiDOMNodeObject::ManakaiDOM:Perl.orphanate>;
        }
        if ($subArg->{<Q::TreeCore:node>}->{<Q::pc:parent>}) {
          __EXCEPTION{IN_USE_NODE_ERR::
            pc:parentNode => {$subArg->{<Q::TreeCore:node>}
                                        ->{<Q::pc:parent>}},
            pc:childNode => {$subArg},
          }__;
        }
        $self->{<Q::TreeCore:node>}-><M::MNodeObject.importTree>
                                          ($subArg->{<Q::TreeCore:node>});
        $ops->{$subName} = $subArg->{<Q::TreeCore:node>};
        $subArg->{<Q::TreeCore:node>}->{<Q::pc:parent>}
                         = $self->{<Q::TreeCore:node>};

  @Method:
    @@Name: getSubAliasName
    @@enDesc:
      Gets the real name of a subroutine. 
    @@Param:
      @@@Name: subName
      @@@Type:
        DISLang:String::ManakaiDOM:all
      @@@enDesc:
        The name of the alias subroutine. 
    @@Return:
      @@@Type: 
        DISLang:String::ManakaiDOM:all
      @@@enDesc:
        The real name. 
      @@@nullCase:
        @@@@enDesc:
          The specified name is used. 
      @@@InCase:
        @@@@Value:\#CODE
        @@@@enDesc:
          The specified name is not an alias. 
      @@@PerlDef:
        if ($self->{<Q::TreeCore:node>}->{<Q::sub>}->{$subName}) {
          $r = ref $self->{<Q::TreeCore:node>}
                        ->{<Q::sub>}->{$subName}
             ? q<#CODE> : $self->{<Q::TreeCore:node>}
                           ->{<Q::sub>}->{$subName};
        }

  @Method:
    @@Name: setSubAliasName
    @@enDesc:
      Sets a subroutine name as an alias of another subroutine. 
    @@Param:
      @@@Name: aliasName
      @@@Type:
        DISLang:String::ManakaiDOM:all
      @@@enDesc:
        The alias name. 
    @@Param:
      @@@Name: realName
      @@@Type:
        DISLang:String::ManakaiDOM:all
      @@@enDesc:
        The real name. 
    @@Return:
      @@@UnknownOperatorException:
      @@@PerlDef:
        my $ops = $self->{<Q::TreeCore:node>}->{<Q::sub>};
        if (ref $ops->{$aliasName}) {
          CORE::delete $ops->{<Q::pc:parent>};
          $ops->{$aliasName}
              -><M::ManakaiDOM:ManakaiDOMNodeObject::ManakaiDOM:Perl.orphanate>;
        }
        $ops->{$aliasName} = $realName;

  @Method:
    @@Name: getOverloadSub
    @@enDesc:
      Gets an overloading subroutine. 
    @@Param:
      @@@Name: opName
      @@@Type:
        DISLang:String::ManakaiDOM:all
      @@@enDesc:
        The name of the overloaded operator. 
    @@NamedParam:
      @@@Name: makeNewNode
      @@@Type:
        DOMMain:boolean
      @@@enDesc:
        Whether a new subroutine object should be created, 
        if it is not exist, or not. 
    @@Return:
      @@@Type: ManakaiPerlSub
      @@@enDesc:
        The subroutine object. 
      @@@nullCase:
        @@@@enDesc:
          Either the specified subroutine is not found and 
          the <P::makeNewNode> parameter is set to <DOM::false> or
          the specified operator is overloaded by specifying method name. 
      @@@UnknownOperatorException:
      @@@PerlDef:
        unless (<Code::operatorNameList>->{$opName}) {
          __EXCEPTION{UNSUPPORTED_OPERATOR_ERR::
            pc:operator => {$opName},
          }__;
        }
        if ($self->{<Q::TreeCore:node>}->{<Q::dis2pm:operator>}->{$opName}) {
          $r = ref $self->{<Q::TreeCore:node>}
                        ->{<Q::dis2pm:operator>}->{$opName}
             ? $self->{<Q::TreeCore:node>}
                        ->{<Q::dis2pm:operator>}->{$opName} : null;
        } elsif ($makeNewNode) {
          $r = $self->{<Q::TreeCore:node>}->{<Q::dis2pm:operator>}->{$opName}
             = <ClassM::ManakaiPerlSub.newObject>;
          $self->{<Q::TreeCore:node>}
               -><M::ManakaiDOM:ManakaiDOMNodeObject
                   ::ManakaiDOM:Perl.importTree> ($r);
          $r->{<Q::pc:parent>} = $self->{<Q::TreeCore:node>};
        }
        $r = $r-><M::ManakaiDOM:ManakaiDOMNodeObject
                   ::ManakaiDOM:Perl.newReference>
                         (<ClassName::ManakaiPerlSub>) if $r;

  @Method:
    @@Name: setOverloadSub
    @@enDesc:
      Sets an overloading subrotine. 
    @@Param:
      @@@Name: opName
      @@@Type:
        DISLang:String::ManakaiDOM:all
      @@@enDesc:
        The name of the opeartor to overload. 
    @@Param:
      @@@Name: subArg
      @@@Type: ManakaiPerlSub
      @@@enDesc:
        The subroutine object.
    @@Return:
      @@@UnknownOperatorException:
      @@@RaiseException:
        @@@@@:IN_USE_NODE_ERR
        @@@@enDesc:
          An attempt is made to set a subroutine that is 
          already used elsewhere. 
      @@@PerlDef:
        unless (<Code::operatorNameList>->{$opName}) {
          __EXCEPTION{UNSUPPORTED_OPERATOR_ERR::
            pc:operator => {$opName},
          }__;
        }
        my $ops = $self->{<Q::TreeCore:node>}->{<Q::dis2pm:operator>};
        if (ref $ops->{$opName}) {
          CORE::delete $ops->{<Q::pc:parent>};
          $ops->{$opName}
              -><M::ManakaiDOM:ManakaiDOMNodeObject::ManakaiDOM:Perl.orphanate>;
        }
        if ($subArg->{<Q::TreeCore:node>}->{<Q::pc:parent>}) {
          __EXCEPTION{IN_USE_NODE_ERR::
            pc:parentNode => {$self},
            pc:childNode => {$subArg},
          }__;
        }
        $self->{<Q::TreeCore:node>}-><M::MNodeObject.importTree>
                                          ($subArg->{<Q::TreeCore:node>});
        $ops->{$opName} = $subArg->{<Q::TreeCore:node>};
        $subArg->{<Q::TreeCore:node>}->{<Q::pc:parent>}
                         = $self->{<Q::TreeCore:node>};


  @Method:
    @@Name: getOverloadMethodName
    @@enDesc:
      Gets an overloading method name. 
    @@Param:
      @@@Name: opName
      @@@Type:
        DISLang:String::ManakaiDOM:all
      @@@enDesc:
        The name of the overloaded operator. 
    @@Return:
      @@@Type: 
        DISLang:String::ManakaiDOM:all
      @@@enDesc:
        The method name. 
      @@@nullCase:
        @@@@enDesc:
          The specified operator is not overloaded.
      @@@InCase:
        @@@@Value:\#CODE
        @@@@enDesc:
          The operator is overloaded by an anonymous subroutine. 
      @@@PerlDef:
        if ($self->{<Q::TreeCore:node>}->{<Q::dis2pm:operator>}->{$opName}) {
          $r = ref $self->{<Q::TreeCore:node>}
                        ->{<Q::dis2pm:operator>}->{$opName}
             ? q<#CODE> : $self->{<Q::TreeCore:node>}
                           ->{<Q::dis2pm:operator>}->{$opName};
        }

  @Method:
    @@Name: setOverloadMethodName
    @@enDesc:
      Sets an overloading method name. 
    @@Param:
      @@@Name: opName
      @@@Type:
        DISLang:String::ManakaiDOM:all
      @@@enDesc:
        The name of the overloaded operator. 
    @@Param:
      @@@Name: methodName
      @@@Type:
        DISLang:String::ManakaiDOM:all
      @@@enDesc:
        The name of the method by which overloads an operator. 
        \
        {NOTE:: The method may or may not belong to this package. 
        \
        }
    @@Return:
      @@@UnknownOperatorException:
      @@@PerlDef:
        unless (<Code::operatorNameList>->{$opName}) {
          __EXCEPTION{UNSUPPORTED_OPERATOR_ERR::
            pc:operator => {$opName},
          }__;
        }
        my $ops = $self->{<Q::TreeCore:node>}->{<Q::dis2pm:operator>};
        if (ref $ops->{$opName}) {
          CORE::delete $ops->{<Q::pc:parent>};
          $ops->{$opName}
              -><M::ManakaiDOM:ManakaiDOMNodeObject::ManakaiDOM:Perl.orphanate>;
        }
        $ops->{$opName} = $methodName;

  @Attr:
    @@Name: length
    @@enDesc:
      The number of child code fragments. 
    @@Type:
      DOMMain:unsigned-long
    @@Get:
      @@@PerlDef:
        $r = keys (%{$self->{<Q::TreeCore:node>}->{<Q::pc:sub>}})
           + keys (%{$self->{<Q::TreeCore:node>}->{<Q::dis2pm:operator>}});

  @Method:
    @@Name: addIsaPackage
    @@enDesc:
      Adds a class package that this class inherits. 
    @@Param:
      @@@Name: packageName
      @@@Type:
        Perl:package-name::ManakaiDOM:all
      @@@enDesc:
        The name of package to add. 
    @@Return:
      @@@PerlDef:
        push @{$self->{<Q::TreeCore:node>}->{<Q::dis:ISA>}}, $packageName;

  @Method:
    @@Name: addImplementPackage
    @@enDesc:
      Adds a interface package that this class implements. 
    @@Param:
      @@@Name: packageName
      @@@Type:
        Perl:package-name::ManakaiDOM:all
      @@@enDesc:
        The name of package to add.
    @@Return:
      @@@PerlDef:
        $self->{<Q::TreeCore:node>}->{<Q::dis:Implement>}->{$packageName} = true;

  @ToStringMethod:
    @@Return:
      @@@Type:
        DISLang:String
      @@@enDesc:
        Perl code. 
      @@@PerlDef:
        my $file = $self-><AG::ManakaiPerlCodeFragment.parentNode>;
        my $node = $self->{<Q::TreeCore:node>};
        my $pn = $node->{<Q::pc:packageName>};
        $r .= q<package > . $pn . ";\n";
        __DEEP{
          $file-><AS::ManakaiPerlFile.currentPackage> ($pn);
          $r .= 'our $VERSION = '.
                <ClassM::ManakaiPerlCodeImplementation.versionDateTime> (time).
                ";\n";
        }__;
        my @isa = (@{$node->{<Q::dis:ISA>}},
                   sort keys %{$node->{<Q::dis:Implement>}});
        if (@isa) {
          $r .= 'push our @ISA, ' .
                <ClassM::ManakaiPerlCodeImplementation.perlList> (\@isa) .
                ";\n";
        }
        for my $cnk (keys %{$node->{<Q::pc:sub>}}) {
          my $cno = $node->{<Q::pc:sub>}->{$cnk};
          if (ref $cno) {
            my $cn = $cno-><M::ManakaiDOM:ManakaiDOMNodeObject
                               ::ManakaiDOM:Perl.newReference>
                                     (<ClassName::ManakaiPerlSub>);
            $r .= $cn->stringify;
          } else {
            $r .= qq<*$cnk = \&$cno;\n>;
          }
        }
        my $op = '';
        for my $cnk (keys %{$node->{<Q::dis2pm:operator>}}) {
          my $cno = $node->{<Q::dis2pm:operator>}->{$cnk};
          if (ref $cno) {
            my $cn = $cno-><M::ManakaiDOM:ManakaiDOMNodeObject
                             ::ManakaiDOM:Perl.newReference>
                                   (<ClassName::ManakaiPerlSub>);
            $op .= <ClassM::ManakaiPerlCodeImplementation.perlLiteral> ($cnk)
                .  ' => ' . $cn->stringify . ', ';
          } elsif (defined $cno) {
            $op .= <ClassM::ManakaiPerlCodeImplementation.perlList>
                                                        ([$cnk => $cno]) . ', ';
          }
        }
        $r .= 'use overload ' . $op . qq[fallback => 1;\n] if $op;
##PerlPackageScope

PropDef:
  @QName:
    dis2pm:operator
  @enDesc:
    Overloaded operators.

ElementTypeBinding:
  @Name: UnknownOperatorException
  @ElementType:
    ManakaiDOM:raises
  @ShadowContent:
    @@@:UNSUPPORTED_OPERATOR_ERR
    @@enDesc:
      An attempt is made to overload an unknown operator. 

XParamDef:
  @QName:
    pc:operator
  @enDesc:
    An operator to overload. 

ResourceDef:
  @QName: operatorNameList
  @enDesc:
    The list of valid operators for <PerlModule::operator> pragma. 
  @rdf:type:
    dis2pm:InlineCode
  @PerlDef:
    {qw[
                    +  1 -  1 *  1 /  1 %  1 **  1 <<  1 >>  1 x  1 .  1
                    += 1 -= 1 *= 1 /= 1 %= 1 **= 1 <<= 1 >>= 1 x= 1 .= 1
                    <  1 <= 1 >  1 >= 1 == 1 != 1 <=> 1
                    lt 1 le 1 gt 1 ge 1 eq 1 ne 1 cmp 1
                    & 1 | 1 ^ 1 neg 1 ! 1 ~ 1
                    ++ 1 -- 1 = 1
                    atan2 1 cos 1 sin 1 exp 1 abs 1 log 1 sqrt 1
                    bool 1 "" 1 0+ 1 ${} 1 @{} 1 %{} 1 &{} 1 *{} 1 <> 1
                    nomethod 1
    ]}

ClsDef:
  @ClsQName: ManakaiPerlSub
  @ClsISA: ManakaiPerlCodeFragment
  @enDesc:
    Perl subroutines. 
  
  @IntMethod:
    @@Name:newObject
    @@ManakaiDOM:isStatic:1
    @@Description:
      @@@lang:en
      @@@@:
        Creates a new instance object for <Class::ManakaiPerlSub>. 
    @@Return:
      @@@Type:
        ManakaiDOM:ManakaiDOMNodeObject::ManakaiDOM:Perl
      @@@Description:
        @@@@lang:en
        @@@@@:
          The newly created node object.
      @@@PerlDef:
        @@@@@:
          my $node = $r = <ClassM::ManakaiDOM:ManakaiDOMNodeObject
                                        ::ManakaiDOM:Perl.new>;
          push @{$node->{<Q::TreeCore:subnode>}}, <Q::pc:childNodes>;
          push @{$node->{<Q::TreeCore:origin>}}, <Q::pc:parent>;
          $node->{<Q::pc:childNodes>} = [];
          $node->{<Q::pc:sourceLine>} = 0;
        @@@@ImplNote:
          @@@@@lang:en
          @@@@@@:
            Optional properties: <Q::pc:localName>,
               <Q::pc:sourceFile>, <Q::pc:sourceLine>.
  
  @Attr:
    @@Name: length
    @@enDesc:
      The number of child code fragments. 
    @@Type:
      DOMMain:unsigned-long
    @@Get:
      @@@PerlDef:
        $r = @{$self->{<Q::TreeCore:node>}->{<Q::pc:childNodes>}};

  @Attr:
    @@Name: localName
    @@enDesc:
      The name of this subroutine. 
    @@Type:
      DISPerl:SubName
    @@Get: 
      @@@nullCase:
        @@@@enDesc:
          This subroutine has no name. 
      @@@disDef:
        @@@@GetProp: localName
    @@Set:
      @@@enDesc:
        Sets the name of this subroutine. 
        \
        {NOTE:: Setting this attribute does not change the 
                name by which the subroutine is registerred to 
                the parent object.
        \
        }
      @@@nullCase:
        @@@@enDesc:
          This subroutine has no name. 
      @@@disDef:
        @@@@SetProp: localName

  @Attr:
    @@Name: prototype
    @@enDesc:
      The prototype of this subroutine. 
    @@Type:
      DISPerl:SubPrototype
    @@Get:
      @@@disDef:
        @@@@GetProp: prototype
      @@@nullCase:
        @@@@enDesc:
          No prototype is set. 
    @@Set:
      @@@disDef:
        @@@@SetProp: prototype
      @@@nullCase:
        @@@@enDesc:
          No prototype declaration. 
  
  @Attr:
    @@Name: currentSourceFile
    @@enDesc:
      The current source file name that is referred when 
      a code fragment is added. 
    @@Type:
      DISLang:String
    @@Get:
      @@@nullCase:
        @@@@enDesc: No source file name is set. 
      @@@disDef:
        @@@@GetProp: sourceFile
    @@Set:
      @@@nullCase:
        @@@@enDesc: No (or unknown) source file. 
      @@@disDef:
        @@@@SetProp: sourceFile

  @Attr:
    @@Name: currentSourceLine
    @@enDesc:
      The current line number in source file that is referred when 
      a code fragment is added. 
    @@Type:
      DOMMain:unsigned-long
    @@Get:
      @@@disDef:
        @@@@GetProp: sourceLine
    @@Set:
      @@@disDef:
        @@@@SetProp: sourceLine

  @Method:
    @@Name: appendCodeFragment
    @@enDesc:
      Appends a <Class::ManakaiPerlCodeFragment> object. 
    @@Param:
      @@@Name: codeArg
      @@@Type: ManakaiPerlCodeFragment
      @@@enDesc:
        A code fragment object. 
    @@Return:
      @@@RaiseException:
        @@@@@:BAD_CHILD_ERR
        @@@@enDesc:
          An attempt is made to append a child
          that is not a <Class::ManakaiPerlUnparsedCode>.
      @@@RaiseException:
        @@@@@:IN_USE_NODE_ERR
        @@@@enDesc:
          An attempt is made to append a node that is 
          already used elsewhere. 
      @@@PerlDef:
        if (UNIVERSAL::isa ($codeArg, <ClassName::ManakaiPerlUnparsedCode>)) {
          if ($codeArg->{<Q::TreeCore:node>}->{<Q::pc:parent>}) {
            __EXCEPTION{IN_USE_NODE_ERR::
              pc:parentNode => {$codeArg->{<Q::TreeCore:node>}
                                        ->{<Q::pc:parent>}},
              pc:childNode => {$codeArg},
            }__;
          }
          $self->{<Q::TreeCore:node>}-><M::MNodeObject.importTree>
                                          ($codeArg->{<Q::TreeCore:node>});
          push @{$self->{<Q::TreeCore:node>}->{<Q::pc:childNodes>}},
               $codeArg->{<Q::TreeCore:node>};
          $codeArg->{<Q::TreeCore:node>}->{<Q::pc:parent>}
                                         = $self->{<Q::TreeCore:node>};
        } else {
          __EXCEPTION{BAD_CHILD_ERR::
            pc:parentNode => {$self},
            pc:childNode => {$codeArg},
          }__;
        }

  @Method:
    @@Name: appendCode
    @@enDesc:
      Appends an unparsed Perl code fragment. 
    @@Param:
      @@@Name: codeArg
      @@@Type: 
        lang:Perl::ManakaiDOM:all
      @@@enDesc:
        An unparsed Perl code fragment. 
    @@Return:
      @@@Type: ManakaiPerlUnparsedCode
      @@@enDesc:
        The newly created Perl code object. 
      @@@PerlDef:
        $r = <ClassM::ManakaiPerlUnparsedCode.newObject>;
        my $node = $self->{<Q::TreeCore:node>};
        $r->{<Q::sourceFile>} = $node->{<Q::sourceFile>};
        $r->{<Q::sourceLine>} = $node->{<Q::sourceLine>};
        $r->{<Q::code>} = $codeArg;
        $node->{<Q::sourceLine>} += ($codeArg =~ tr/\x0A/\x0A/);
        $r = $r-><M::ManakaiDOM:ManakaiDOMNodeObject
                   ::ManakaiDOM:Perl.newReference>
                           (<ClassName::ManakaiPerlUnparsedCode>); 
        ## TODO: child & import

  @Method:
    @@Name: skipLines
    @@enDesc:
      Skips lines in a code. 
    @@Param:
      @@@Name: codeArg
      @@@Type: 
        lang:Perl::ManakaiDOM:all
      @@@enDesc:
        A code fragment, which is counted lines. 
    @@Return:
      @@@PerlDef:
        $self->{<Q::TreeCore:node>}->{<Q::sourceLine>}
                            += ($codeArg =~ tr/\x0A/\x0A/);

  @ToStringMethod:
    @@Return:
      @@@Type:
        DISLang:String
      @@@enDesc:
        Perl code. 
      @@@PerlDef:
        my $node = $self->{<Q::TreeCore:node>};
        $r = q<sub>;
        $r .= ' ' . $node->{<Q::pc:localName>}
                if defined $node->{<Q::pc:localName>};
        $r .= ' (' . $node->{<Q::pc:prototype>} . ')'
                if defined $node->{<Q::pc:prototype>};
        $r .= " {\n";

        $r .= "}\n";
##PerlSub

XParamDef:
  @QName: parentNode
  @enDesc:
    Parent node. 

XParamDef:
  @QName: childNode
  @enDesc:
    Child node. 

ClsDef:
  @ClsQName: ManakaiPerlUnparsedCode
  @ClsISA: ManakaiPerlCodeFragment
  @enDesc:
    Unparsed Perl code fragments. 
  
  @IntMethod:
    @@Name:newObject
    @@ManakaiDOM:isStatic:1
    @@Description:
      @@@lang:en
      @@@@:
        Creates a new instance object for <Class::ManakaiPerlUnparsedCode>. 
    @@Return:
      @@@Type:
        ManakaiDOM:ManakaiDOMNodeObject::ManakaiDOM:Perl
      @@@Description:
        @@@@lang:en
        @@@@@:
          The newly created node object.
      @@@PerlDef:
        @@@@@:
          my $node = $r = <ClassM::ManakaiDOM:ManakaiDOMNodeObject
                                        ::ManakaiDOM:Perl.new>;
          push @{$node->{<Q::TreeCore:origin>}}, <Q::pc:parent>;
          $node->{<Q::pc:code>} = '';
        @@@@ImplNote:
          @@@@@lang:en
          @@@@@@:
            Optional properties: <Q::pc:code>.

  @Attr:
    @@Name: code
    @@enDesc:
      Perl code. 
    @@Type:
      lang:Perl::ManakaiDOM:all
    @@Get:
      @@@disDef:
        @@@@GetProp: code
    @@Set:
      @@@disDef:
        @@@@SetProp: code

  @Attr:
    @@Name: sourceFile
    @@enDesc:
      The source file name of this fragment. 
    @@Type:
      DISLang:String
    @@Get:
      @@@enDesc:
        Any string identifying the source. 
      @@@nullCase:
        @@@@enDesc: No source file name is set. 
      @@@disDef:
        @@@@GetProp: sourceFile
    @@Set:
      @@@nullCase:
        @@@@enDesc: No (or unknown) source file. 
      @@@disDef:
        @@@@SetProp: sourceFile

  @Attr:
    @@Name: sourceLine
    @@enDesc:
      Source file line number of the first line of this fragment. 
    @@Type:
      DOMMain:unsigned-long
    @@Get:
      @@@disDef:
        @@@@GetProp: sourceLine
    @@Set:
      @@@disDef:
        @@@@SetProp: sourceLine
##PerlUnparsedCode

ElementTypeBinding:
  @Name: RaiseException
  @ElementType:
    ManakaiDOM:raises

ClsDef:
  @ClsQName: ManakaiPerlCodeImplementation
  @enDesc:
    The class that provides factory methods. 

  @Role:
    @@@:
      DOMCore:DOMImplementation::ManakaiDOM:ManakaiDOM
    @@compat:
      DOMCore:ManakaiDOMImplementation::ManakaiDOM:ManakaiDOMLatest

  @Method:
    @@Name: createPerlFile
    @@enDesc:
      Creates a Perl code file. 
    @@Return:
      @@@Type: ManakaiPerlFile
      @@@enDesc: A newly created Perl source file object. 
      @@@PerlDef:
        $r = <ClassM::ManakaiPerlFile.newObject>;
        $r = $r-><M::ManakaiDOM:ManakaiDOMNodeObject
                   ::ManakaiDOM:Perl.newReference>
                           (<ClassName::ManakaiPerlFile>);        

  @IntMethod:
    @@Name: perlComment
    @@ManakaiDOM:isStatic:1
    @@enDesc:
      Generates a Perl comment string. 
    @@Param:
      @@@Name: str
      @@@Type: 
        DISLang:String
      @@@enDesc:
        A comment text. 
    @@Return:
      @@@Type:
        DISLang:String
      @@@enDesc:
        A Perl comment string.
      @@@PerlDef:
        $r = $str;
        $r =~ s/\n/\n## /g;
        $r =~ s/\n## $/\n/s;
        $r .= "\n" unless $r =~ /\n$/;
        $r = q<## > . $r;

  @IntMethod:
    @@Name: rfc3339DateTime
    @@ManakaiDOM:isStatic:1
    @@enDesc:
      Returns RFC 3339 <CODE::date-time> representation of a date. 
    @@Param:
      @@@Name: perlDate
      @@@Type:
        DOMMain:unsigned-long
      @@@enDesc:
        A Perl representation of date. 
    @@Return:
      @@@Type:
        DISLang:String
      @@@enDesc:
        RFC 3339 date string. 
      @@@PerlDef:
        my @time = gmtime $perlDate;
        $r = sprintf q<%04d-%02d-%02dT%02d:%02d:%02d+00:00>,
                     $time[5] + 1900, $time[4] + 1, @time[3,2,1,0];

  @IntMethod:
    @@Name: versionDateTime
    @@ManakaiDOM:isStatic:1
    @@enDesc:
      Returns date for version. 
    @@Param:
      @@@Name: perlDate
      @@@Type:
        DOMMain:unsigned-long
      @@@enDesc:
        A Perl representation of date. 
    @@Return:
      @@@Type:
        DISLang:String
      @@@enDesc:
        A Perl number literal. 
      @@@PerlDef:
        my @time = gmtime $perlDate;
        $r = sprintf q<%04d%02d%02d.%02d%02d>,
                     $time[5] + 1900, $time[4] + 1, @time[3,2,1];
  
  @Method:
    @@Name: perlLiteral
    @@enDesc:
      Perl code representation. 
    @@Param:
      @@@Name: val
      @@@Type: 
        DOMMain:any
      @@@enDesc:
        A Perl value. 
    @@Return:
      @@@Type:
        DISLang:String
      @@@enDesc:
        A Perl lexical representation of <P::val>. 
      @@@PerlDef:
        unless (defined $val) {
          $r = q<undef>;
        } elsif (ref $val eq 'ARRAY') {
          __DEEP{
            $r = q<[> . <ClassM::ManakaiPerlCodeImplementation
                                            .perlLiteral> ($val) . q<]>;
          }__;
        } elsif (ref $val eq 'HASH') {
          __DEEP{
            $r = q<{> . <ClassM::ManakaiPerlCodeImplementation
                                            .perlLiteral> ([%$val]) . q<}>;
          }__;
        } else {
          $val =~ s/(['\\])/\\$1/g;
          $r = q<'> . $val . q<'>;
        }

  @Method:
    @@Name: perlList
    @@enDesc:
      Perl code representation of a list. 
    @@Param:
      @@@Name: val
      @@@Type: 
        Perl:ARRAY
      @@@enDesc:
        A Perl array reference. 
    @@Return:
      @@@Type:
        DISLang:String
      @@@enDesc:
        A Perl lexical representation of <CODE::@$val>. 
      @@@PerlDef:
        __DEEP{
          $r = join (q<, >, map {<ClassM::ManakaiPerlCodeImplementation
                                              .perlLiteral> ($_)} @{$val});
        }__;

  @Method:
    @@Name: createPerlSub
    @@enDesc:
      Creates a new <Class::ManakaiPerlSub> object. 
    @@Param:
      @@@Name: subName
      @@@Type:
        DISLang:String
      @@@enDesc:
        The name of the subroutine to create.
      @@@nullCase:
        @@@@enDesc:
          The subroutine created has no name. 
    @@Return:
      @@@Type:ManakaiPerlSub
      @@@enDesc: 
        Newly created Perl subroutine object. 
      @@@PerlDef:
        __DEEP{
          $r = <ClassM::ManakaiPerlSub.newObject>
                 -><M::MNodeObject.newReference> (<ClassName::ManakaiPerlSub>);
          $r-><M::ManakaiPerlSub.localName> ($subName) if defined $subName;
        }__;

  @Method:
    @@Name: createPerlUnparsedCode
    @@enDesc:
      Creates a new <Class::ManakaiPerlUnparsedCode> object. 
    @@Param:
      @@@Name: codeArg
      @@@Type:
        lang:Perl::ManakaiDOM:all
      @@@enDesc:
        The code fragment. 
      @@@nullCase:
        @@@@enDesc:
          The fragment initially has no code. 
    @@Return:
      @@@Type:ManakaiPerlUnparsedCode
      @@@enDesc: 
        Newly created Perl code object. 
      @@@PerlDef:
        __DEEP{
          $r = <ClassM::ManakaiPerlUnparsedCode.newObject>
                    -><M::MNodeObject.newReference>
                             (<ClassName::ManakaiPerlUnparsedCode>);
          $r-><M::ManakaiPerlUnparsedCode.code> ($codeArg) if defined $codeArg;
        }__;
##PerlCodeImplementation

ResourceDef:
  @QName: MNodeObject
  @rdf:type:
    ManakaiDOM:Class
  @AliasFor:
    ManakaiDOM:ManakaiDOMNodeObject::ManakaiDOM:Perl

PropDef:
  @QName: code
  @enDesc: Perl code. 

PropDef:
  @QName: sourceFile
  @enDesc:
    Source file. 

PropDef:
  @QName: sourceLine
  @enDesc:
    Source line number. 

PropDef:
  @QName: prototype
  @enDesc:
    Prototype of subroutine.

PropDef:
  @QName: parent
  @enDesc:
    Higher-level object. 

PropDef:
  @QName: sub
  @enDesc:
    Perl subroutines. 

PropDef:
  @QName: packageName
  @Type:
    Perl:package-name
  @enDesc:
    The fully qualified names of packages. 

PropDef:
  @QName: childNodes
  @enDesc:
    Child code fragments. 

PropDef:
  @QName: localName
  @enDesc:
    Scoped names.

## -- Exceptions

ExceptionDef:
  @ClsQName: ManakaiPerlCodeException
  @enDesc:
    Exceptions for the <Module::PerlCode> module.
  @ClsISA:
    ManakaiDOM:ManakaiDOMException::ManakaiDOM:Perl
  @XConstGroupDef:
    @@ClsQName: ManakaiPerlCodeExceptionCode
    @@enDesc:
      Exception codes for <Class::ManakaiPerlCodeException>. 
    @@XConstDef:
      @@@Name: HIERARCHY_REQUEST_ERR
      @@@Value:3
      @@@enDesc:
        An attempt is made to break the hierarchy. 
      @@@XSubTypeDef:
        @@@@QName: BAD_CHILD_ERR
        @@@@enDesc:
          An attempt is made to append a node as a child whose type 
          is not allowed. 
        @@@@XParam:
          @@@@@QName: childNode
          @@@@@enDesc:
            The node attempted to append. 
        @@@@XParam:
          @@@@@QName: parentNode
          @@@@@enDesc:
            The node to whose child list an attempt to append is made. 
      @@@XSubTypeDef:
        @@@@QName: IN_USE_NODE_ERR
        @@@@enDesc:
          An attempt is made to append a node that has already been used
          elsewhere. 
        @@@@XParam:
          @@@@@QName: childNode
          @@@@@enDesc:
            The node attempted to append. 
        @@@@XParam:
          @@@@@QName: parentNode
          @@@@@enDesc:
            The parent node of the <XP::childNode>. 
    @@XConstDef:
      @@@Name: NOT_SUPPORTED_ERR
      @@@Value:9
      @@@enDesc:
        An attempt is made to do something the implementation does not support. 
      @@@XSubTypeDef:
        @@@@QName: UNSUPPORTED_OPERATOR_ERR
        @@@@enDesc:
          The implementation does not support the specified operator. 
        @@@@XParam:
          @@@@@QName: operator
          @@@@@enDesc:
            The operator that is not supported. 
        @@@@enMufDef:
          Operator "%p (name => {<Q::pc:operator>});" is not supported

ElementTypeBinding:
  @Name: ExceptionDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:ExceptionClass
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:Perl
      @@@For:
        !=ManakaiDOM:Perl
    @@ForCheck:
      ManakaiDOM:Perl
    @@DOMMain:implementFeature: CoreFeature10

ElementTypeBinding:
  @Name: XConstGroupDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:ConstGroup
    @@Type:
      DOMMain:unsigned-short::ManakaiDOM:all
    @@rdfs:subClassOf:
      DOMMain:unsigned-short::ManakaiDOM:all

ElementTypeBinding:
  @Name: XConstDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:Const

ElementTypeBinding:
  @Name: XSubTypeDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:ExceptionOrWarningSubType

ElementTypeBinding:
  @Name: XParam
  @ElementType:
    ManakaiDOM:exceptionOrWarningParameter

ElementTypeBinding:
  @Name: XParamDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type: 
      DOMMain:XWParameter
    @@AliasFor:
      @@@For:
        !=ManakaiDOM:all
      @@@@:
        ::ManakaiDOM:all

ElementTypeBinding:
  @Name: enMufDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:muf
    @@lang:en


ElementTypeBinding:
  @Name: ClsDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:Class
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:Perl
      @@@For:
        !=ManakaiDOM:Perl
    @@ForCheck:
      ManakaiDOM:Perl
    @@DOMMain:implementFeature: CoreFeature10

ElementTypeBinding:
  @Name: ClsQName
  @ElementType:
    dis:QName

ElementTypeBinding:
  @Name: ClsISA
  @ElementType:
    dis:ISA

ElementTypeBinding:
  @Name: Method
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:Method

ElementTypeBinding:
  @Name: ToStringMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:Method
    @@Operator:
      @@@@:
        DISPerl:AsStringMethod
      @@@ContentType:
        dis:TypeQName
    @@Description:
      @@@lang:en
      @@@@:
        Returns the textual Perl source code representation of this object. 

ElementTypeBinding:
  @Name: IntMethod
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:Method
    @@ManakaiDOM:isForInternal:1

ElementTypeBinding:
  @Name: Attr
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:Attribute

ElementTypeBinding:
  @Name: Return
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:MethodReturn

ElementTypeBinding:
  @Name: Get
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:AttributeGet

ElementTypeBinding:
  @Name: Set
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:AttributeSet

ElementTypeBinding:
  @Name: Param
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:MethodParameter

ElementTypeBinding:
  @Name: PerlDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:Perl

ElementTypeBinding:
  @Name: disDef
  @ElementType:
    dis:Def
  @ShadowContent:
    @@ContentType:
      lang:dis

ElementTypeBinding:
  @Name: InCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase

ElementTypeBinding:
  @Name: nullCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase
    @@Value:
      @@@is-null:1

ElementTypeBinding:
  @Name: TrueCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase
    @@Value:true
    @@Type:
      DOMMain:boolean


ElementTypeBinding:
  @Name: FalseCase
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      ManakaiDOM:InCase
    @@Value:false
    @@Type:
      DOMMain:boolean

ElementTypeBinding:
  @Name: enDesc
  @ElementType:
    dis:Description
  @ShadowContent:
    @@lang:en

ElementTypeBinding:
  @Name: PropDef
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      rdf:Property
    @@AliasFor:
      @@@@:
        ::ManakaiDOM:all
      @@@For:
        !=ManakaiDOM:all

ElementTypeBinding:
  @Name: NamedParam
  @ElementType:
    dis:ResourceDef
  @ShadowContent:
    @@rdf:type:
      DISLang:MethodParameter
    @@DISPerl:isNamedParameter:1

