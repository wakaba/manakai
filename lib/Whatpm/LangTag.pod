=head1 NAME

Whatpm::LangTag - Language Tag Parsing, Conformance Checking, and Normalization

=head1 SYNOPSIS

  use Whatpm::LangTag;
  
  $parsed = Whatpm::LangTag->parse_rfc5646_tag ($tag, $onerror);
  Whatpm::LangTag->check_rfc5646_parsed_tag ($parsed, $onerror);
  $tag = Whatpm::LangTag->normalize_rfc5646_tag ($tag);

=head1 DESCRIPTION

The C<Whatpm::LangTag> module contains methods to handle language tags
as defined by BCP 47.  It can be used to parse, validate, or normalize
language tags according to relevant standard.

=head1 METHODS

For the following strings, if an input or output is a language tag or
a language range, it is a character string (or possibly utf8 flagged
string of characters), not a byte string.  Although language tags and
ranges are specified as a string of ASCII characters, illegal tags and
ranges can always contain any non-ASCII characters.

=head2 PARSING

=over 4

=item $parsed = Whatpm::LangTag->parse_rfc5646_tag ($tag, $onerror)

Parses a language tag into subtags.  This method interprets a language
tag using the definition in RFC 5646.

Any errors and warnings would be reported to the code refeference
specified as the second argument.

=item $parsed = Whatpm::LangTag->parse_rfc4646_tag ($tag, $onerror)

Parses a language tag into subtags.  This method interprets a language
tag using the definition in RFC 4646.  Note that RFC 4646 is obsoleted
by RFC 5646.

Any errors and warnings would be reported to the code refeference
specified as the second argument.

=back

These methods return a hash reference, which contains one or more
key-value pairs from the following list:

=over 4

=item language (string)

The language subtag.  There is always a language subtag, even if the
input is illegal, unless there is C<grandfathered> tag.  E.g. C<'ja'>
for input C<ja-JP>.

=item extlang (arrayref of strings)

The extlang subtags.  E.g. C<'yue'> for input C<zh-yue>.

=item script (string or undef)

The script subtag.  E.g. C<'Latn'> for input C<ja-Latn-JP>.

=item region (string or undef)

The region subtag.  E.g. C<'JP'> for input C<en-JP>.

=item variant (arrayref of strings)

The variant subtags.  E.g. C<['fonipa']> for input C<en-JP-fonipa>.

=item extension (arrayref of arrayrefs of strings)

The extension subtags.  E.g. C<[['u', 'islamCal']]> for input
C<en-US-u-islamCal>.

=item privateuse (arrayref of strings)

The privateuse subtags.  E.g. C<['x', 'pig', 'latin']> for input
C<x-pig-latin>.

=item illegal (arrayref of strings)

Illegal (syntactically non-conforming) string fragments.
E.g. C<['1234', 'xyz', 'abc']> for input C<1234-xyz-abc>.

=item grandfathered (string or undef)

"Grandfathered" language tag.  E.g. C<'i-default'> for input
C<i-default>.

=back

=head2 SERIALIZATION

=over 4

=item $tag = Whatpm::LangTag->serialize_parsed_tag ($parsed_tag)

Convert a parsed language tag into a language tag string.  The
argument must be a parsed tag as defined in the previous section; a
broken value would not be processed properly.

If the given parsed tag does not represent a well-formed language tag,
the result string would not be a well-formed language tag.

=back

=head2 CONFORMANCE CHECKING

=over 4

=item Whatpm::LangTag->check_rfc5646_parsed_tag ($parsed, $onerror)

Finds conformance errors from a parsed language tag with regard to RFC
5646.

This method does not report any parse erros, as this method receives a
B<parsed> language tag.

Any errors and warnings would be reported to the code refeference
specified as the second argument.

=item Whatpm::LangTag->check_rfc4646_parsed_tag ($parsed, $onerror)

Finds conformance errors from a parsed language tag with regard to RFC
4646.  Note that RFC 4646 is obsoleted by RFC 5646.

This method does not report any parse erros, as this method receives a
B<parsed> language tag.

Any errors and warnings would be reported to the code refeference
specified as the second argument.

=item Whatpm::LangTag->check_rfc3066_tag ($tag, $onerror)

Parses and finds conformance errors in a language tag (a string) with
regard to RFC 3066.  Note that RFC 3066 is obsoleted by RFC 4646.

Any errors and warnings would be reported to the code refeference
specified as the second argument.

=item Whatpm::LangTag->check_rfc1766_tag ($tag, $onerror)

Parses and finds conformance errors in a language tag (a string) with
regard to RFC 1766.  Note that RFC 1766 is obsoleted by RFC 3046.

Any errors and warnings would be reported to the code refeference
specified as the second argument.

=back

Note that specs sometimes contain semantic or contextual conformance
rules, such as: "strongly RECOMMENDED that users not define their own
rules for language tag choice" (RFC 4646 4.1.), "Subtags SHOULD only
be used where they add useful distinguishing information" (RFC 4646
4.1.), and "Use as precise a tag as possible, but no more specific
than is justified" (RFC 4646 4.1. 1.).  These kinds of requirements
cannot be tested without human interpretation, and therefore the
methods in this module do not (or cannot) try to detect violation to
these rules.

=head2 NORMALIZATION

=over 4

=item $tag = Whatpm::LangTag->normalize_rfc5646_tag ($tag_orig)

Normalize a language tag by folding cases, following RFC 5646 2.1. and
2.2.6.  Note that this method does not replace any subtag into its
preferred alternative; this method does not rearrange ordering of
subtags.

Although this method does not completely convert language tags into
their canonical form, its result will be good enough for comparison in
most usual situations.

=item $tag = Whatpm::LangTag->canonicalize_rfc5646_tag ($tag_orig)

Normalize a language tag into its canonicalized form, as per RFC 5646
4.5.  That is, replace any subtag into its Preferred-Value form if
possible and sort any extension subtags.  Note that this method does
NOT do any case folding.  In addition, the "canonicalized form" of a
langauge tag is not necessary a fully canonicalized form at all - for
example, variant subtags might not be in the recommended order.

Note that if the input is not a well-formed language tag according to
RFC 5646, the result string might not be a well-formed language tag as
well.  Sometimes the canonicalization would turn a valid langauge tag
into an invalid language tag.

=item $tag = Whatpm::LangTag->to_extlang_form_rfc5646_tag ($tag_orig)

Normalize a language tag into its extlang form, as per RFC 5646 4.5.
The extlang form is same as the canonicalized form, except that use of
extlang subtags is preferred to language-only (or extlang-free)
representation.

Note that if the input is not a well-formed language tag according to
RFC 5646, the result string might not be a well-formed language tag as
well.  Sometimes the canonicalization would turn a valid langauge tag
into an invalid language tag.

=back

=head2 COMPARISON

=over 4

=item BOOL = Whatpm::LangTag->basic_filtering_rfc4647_range ($range, $tag)

Compares a basic language range to a language tag according to RFC
4647 Section 3.3.1.  This method returns whether the range matches to
the tag or not.

A basic language range is either a language tag or C<*>.  (For more
information, see RFC 4647 Section 2.1.).

=item BOOL = Whatpm::LangTag->match_rfc3066_range ($range, $tag)

Compares a language-range to a language tag according to RFC 3066
Section 2.5.  This method returns whether the range matches to the tag
or not.  Note that RFC 3066 is obsoleted by RFC 4647.

A language range is either a language tag or C<*>.  (For more
information, see RFC 3066 2.5).

Note that this method is equivalent to
C<basic_filtering_rfc4647_range> by definition.

=item BOOL = Whatpm::LangTag->extended_filtering_rfc4647_range ($range, $tag)

Compares an extended language range to a language tag according to RFC
4647 Section 3.3.2.  This method returns whether the range matches to
the tag or not.

An extended language range is a language tag whose subtags can be
C<*>s.  (For more information, see RFC 4647 Section 2.2.).

=back

=head1 ERRORS

For methods with argument I<$onerror>, any error and warning detected
during the parsing or conformance checking would be reporeted by
invoking the specified code reference with the description of the
error or warning.

Following name-value pairs describing the error are given to the code
reference as arguments:

=over 4

=item type (string, always specified)

A short string describing the kind of the error.  Descriptions of
error types are available at
<http://suika.fam.cx/gate/2007/html/error-description#{type}>, where
I<{type}> is an error type string.

For the list of error types, see
<http://suika.fam.cx/gate/2007/html/error-description#langtag-errors>.

=item text (string, possibily missing)

A short string, which arguments the error type.  Its semantics depends
on the error type. 

=item value (string, possibly missing)

A part of the input, in which an error is detected.

=item level (string, always specified)

A character representing the level or severity of the error, which is
one of the following characters: C<m> (violation to a MUST-level
requirement), C<s> (violation to a SHOULD-level requirement), C<w> (a
warning), and C<i> (an informational notification).

=back

=head1 SEE ALSO

RFC 1766 <http://tools.ietf.org/html/rfc1766>.

RFC 3066 <http://tools.ietf.org/html/rfc3066>.

RFC 4646 <http://tools.ietf.org/html/rfc4646>.

RFC 4647 <http://tools.ietf.org/html/rfc4647>.

RFC 5646 <http://tools.ietf.org/html/rfc5646>.

IANA Language Subtag Registry
<http://www.iana.org/assignments/language-subtag-registry>.

SuikaWiki:Language Tags
<http://suika.fam.cx/~wakaba/wiki/sw/n/language%20tags>

=head1 AUTHOR

Wakaba <w@suika.fam.cx>.

=head1 LICENSE

Copyright 2007-2011 Wakaba <w@suika.fam.cx>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
