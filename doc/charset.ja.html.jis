<?xml version="1.0" encoding="iso-2022-jp"?>
<?xml-stylesheet href="/s/simpledoc.css" type="text/css" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
   "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xml:lang="ja" xmlns="http://www.w3.org/1999/xhtml">
<head>
<title xml:lang="en">Message::* Perl modules の文字コードの扱い</title>
<link rel="index" href="./" />
<link rel="prev" href="introduction" title="Message::* Perl Modules の紹介" />
<link rel="stylesheet" href="https://suika.suikawiki.org/s/simpledoc.css" type="text/css" />
<link rev="made" href="mailto:wakaba@suikawiki.org" />
<link rel="copyright" href="/c/pd" title="Public Domain." />
<meta name="author" content="若葉" />
<meta name="keywords" content="Perl, module, pm, Message, 文字コード, フック関数, charset, 符号化文字集合, 文字符号化方式, CCS, CES" />
</head>
<body>
<h1><a href="introduction">Message::* Perl modules</a> の文字コードの扱い</h1>

<ul>
	<li><a href="#ja">手っ取り早く日本語が使えるようにする方法</a></li>
	<li><a href="#hook">フック関数っぽいものの説明</a></li>
	<li><a href="#implemention">内部実装についての覚書</a></li>
	<li><a href="#future">将来計画</a></li>
</ul>

<h2 id="ja">手っ取り早く日本語が使えるようにする方法</h2>

<p>日本語文字コード変換に良く使われる、
<a href="http://srekcah.org/jcode/">jcode.pl</a> や 
<a href="http://openlab.ring.gr.jp/Jcode/">Jcode.pm</a>,
<a href="http://bw-www.ie.u-ryukyu.ac.jp/~kono/software.html">NKF.pm</a>
などを使うための定義モジュールを用意しています。これを次の例のように
<code>use</code> するだけで使えます。</p>

<pre class="example perl">
<span class="comment">## どちらか好きな方をどうぞ。</span>
use Message::MIME::Charset::Jcode 'Jcode';	## 'Jcode.pm' と書いても良い。
use Message::MIME::Charset::Jcode 'jcode.pl';
</pre>

<p>jcode.pl や Jcode.pm などは、自動的に 
<code>require</code>/<code>use</code> されます。</p>

<p>ちなみに、複数回 Message::MIME::Charset::Jcode 
を読み込んだ場合には最後の定義が有効になります。また、
(当然といえば当然ですが) そのモジュールで利用可能な charset
のみ定義されます。ですから、上の例の通りの順番で書いておくことで、
<code class="mime-charset">UTF-8</code> は Jcode.pm で、それ以外の場合は
jcode.pl で変換が行われます。</p>

<p>なお、内部文字コード (メソッドなどで値を取り出した時の符号化方式)
は、変換モジュールの内部コードまたは日本語 EUC になります。
(jcode.pl や Jcode.pm では日本語 EUC です。) これを変更するには、
<code>$Message::MIME::Charset::Jcode::CODE{internal}</code>
を <code>'sjis'</code> や <code>'jis'</code> (7ビット ISO/IEC 2022)
などにして下さい。</p>

<h2 id="hook">Charset の定義</h2>

<p>既定の状態では、本文や <code class="bnf rfc822">quoted-string</code>
などの部分について、文字コードに関係する変換処理は行われません。
Perl のファイル入出力などがそうであるように、単なる8ビットのオクテット列として扱います。</p>

<p>文字コードの変換処理 (メッセージの符号化文字集合から
script 内部の符号化文字集合への変換と、その逆)
を定義するには、 
<code class="perl">Message::MIME::Charset::make_charset</code>
を使います。利用例は Message::MIME::Charset::Jcode
を見て下さい。</p>

<p><code class="perl">*default</code> は特別な charset
で、 MIME などで charset が指定されていない、
<code class="bnf rfc822">quoted-string</code>
の変換処理を定義します。 (なお、一般に charset 名は、
Message::* 各モジュールでは小文字に正規化した状態で処理しますから、こうした
charset 定義は小文字で行います。)</p>

<p>この charset 
定義は、当然、当該処理が呼び出される前に行っておく必要があります。
<samp class="perl">Message::Entity-&gt;parse</samp> などする前に
定義しておくと良いでしょう。</p>

<p>Charset 定義の name_minimumizer 属性は、名前最小化の関数を指定します。
MIME によると charset 名は、使用されている文字の範囲の最小公倍数的なものにする必要があります。
(例えば、基本ラテン文字のみからなる 
<code class="mime-charset">ISO-2022-JP</code> は、名前を最小化して
<code class="mime-charset">US-ASCII</code> としなければなりません。)</p>

<p>なお、 
<code class="mime-charset">ISO-2022-JP</code> など幾つかの charset
用には Message::MIME::Charset で組み込み定義されていますので、改めて指定する必要はありません。</p>

<h2 id="implemention">内部実装についての覚書</h2>

<p>文字回りは実装した本人すら何がなんだか良くわかりません。
元々色々な仕様や慣習が入り混じってる部分なので、綺麗な実装は不可能かもしれません。</p>

<p><code class="perl">encoding_before_decode</code>
は復号前 (の生メッセージ) の charset,
<code class="perl">encoding_after_encode</code>
は符号化後 (の生メッセージ) に charset。通常は同じ値にしますが、
EUC-JP (擬似) RFC 822 から ISO-2022-JP RFC 822 
に変換するような時に使えます (かも)。 (でも *default charset
の変換処理側で細工した方が楽。)</p>

<p>両 encoding_* option には、 *default (擬似) charset
を指定できます。ほとんどの module ではこれが既定値です。
HTTP に使うときはこれを ISO-8859-1 に変えたりします。</p>

<p><code class="perl">header_default_charset</code>,
<code class="perl">body_default_charset</code>
は、 *default (擬似) charset の IANA charset 名。
暗黙指定 charset を明示する必要が出た時 (Content-Type: 領域の付与,
RFC 2231 符号化などの時) に使われます。</p>

<p>*default charset は charset 名札がない文字列に仮定されます。
媒体型の charset パラメーターや encoded-word や RFC 2231
で charset 名が明示されている時には、そちらの charset
名が使われます。</p>

<p><code class="perl">header_default_charset_input</code>,
<code class="perl">body_default_charset_input</code>
は、 <code class="perl">encoding_before_decode</code>
の値が *default の時の、その IANA charset 名を指定します。
通常は読み込み時に内部文字集合に変換しますが、この
input charset から内部文字集合に変換出来ない場合、
そのまま無変換で保持します。これを出力する場合で charset
名が必要になった時に、 (本来なら 
<code class="perl">encoding_after_encode</code> を使い、その値が
*default の時は更に *_default_charset の値を使うのですが、
変換不能な charset からそれへは変換出来ないので、)
input charset をそのまま出力し、この名前を使います。</p>

<h2 id="future">将来計画</h2>

<ul>
<li>Perl 5.8 対応
	<ul>
		<li>UTF-8 旗が付いた文字列を正しく扱えるようにする。</li>
		<li>Encode モジュール用の定義モジュールの作成。</li>
	</ul>
</li>
<li>IANA 定義に反する charset 名使用への対処
	<ul>
		<li>メッセージが M$ 製品から送信されたものと判断出来る場合に、
		charset 名の解釈を一部変更する。</li>
	</ul>
</li>
<li>encoded-word 符号化への対応
	<p>encoded-word は嫌いですが、必要になる場面がある以上、いずれ実装します。だけど優先順位は低め。</p>
</li>
</ul>

<div class="navigation">
[<a href="/" title="このサーバーの首頁">/</a>
<a href="/map" title="このサーバーの案内" rel="index">地図</a>
<a href="/search/" title="このサーバーの検索">検索</a>]

[<a href="introduction" title="Message::* Perl Modules の紹介">紹介</a>]

<a href="http://validator.w3.org/check/referer" xml:lang="en"><img
        src="http://www.w3.org/Icons/valid-xhtml11" id="w3c-html"
        alt="Valid XHTML 1.1!" style="height: 31px; width: 88px" /></a>
<a href="http://jigsaw.w3.org/css-validator/validator?uri=https://suika.suikawiki.org/~wakaba/Message-pm/charset.ja.html" xml:lang="en">
  <img style="width: 88px; height: 31px" id="w3c-css"
       src="http://jigsaw.w3.org/css-validator/images/vcss" 
       alt="Valid CSS!" /></a>
</div>
<div class="update">$Date: 2003/09/04 02:19:22 $</div>
<ul class="myuri">
<li>&lt;URL:<a href="https://suika.suikawiki.org/~wakaba/Message-pm/introduction">http://suika.fam.cx/~wakaba/Message-pm/introduction</a>&gt;</li>
<li>&lt;CVS:<a href="https://suika.suikawiki.org/gate/cvs/perl/web/Message-pm/">suika.fam.cx:/home/cvs/perl/web/Message-pm/</a>&gt;</li>
</ul>
</body></html>
